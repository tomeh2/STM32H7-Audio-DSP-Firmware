
Audio Processor Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6d0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f0  0801b970  0801b970  0002b970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd60  0801dd60  000303c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801dd60  0801dd60  0002dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd68  0801dd68  000303c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd68  0801dd68  0002dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd6c  0801dd6c  0002dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  24000000  0801dd70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b19c  240003c8  0801e138  000303c8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2400b564  0801e138  0003b564  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000303f6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034b02  00000000  00000000  000304ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f99  00000000  00000000  00064fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002618  00000000  00000000  0006cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cc9  00000000  00000000  0006f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044454  00000000  00000000  00071231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c589  00000000  00000000  000b5685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00196bd2  00000000  00000000  000f1c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b0ac  00000000  00000000  002887e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0029388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  002938eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  002939e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003c8 	.word	0x240003c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b958 	.word	0x0801b958

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003cc 	.word	0x240003cc
 80002dc:	0801b958 	.word	0x0801b958

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <SystemInit+0xfc>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <SystemInit+0xfc>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <SystemInit+0xfc>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <SystemInit+0xfc>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <SystemInit+0x100>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d807      	bhi.n	8000ad0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <SystemInit+0x100>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <SystemInit+0x100>)
 8000aca:	f043 0307 	orr.w	r3, r3, #7
 8000ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <SystemInit+0x104>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <SystemInit+0x104>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <SystemInit+0x104>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SystemInit+0x104>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	492c      	ldr	r1, [pc, #176]	; (8000b98 <SystemInit+0x104>)
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <SystemInit+0x108>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <SystemInit+0x100>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <SystemInit+0x100>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f023 030f 	bic.w	r3, r3, #15
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <SystemInit+0x100>)
 8000b04:	f043 0307 	orr.w	r3, r3, #7
 8000b08:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SystemInit+0x104>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <SystemInit+0x104>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <SystemInit+0x104>)
 8000b1e:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <SystemInit+0x10c>)
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <SystemInit+0x104>)
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <SystemInit+0x110>)
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <SystemInit+0x104>)
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <SystemInit+0x114>)
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SystemInit+0x104>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <SystemInit+0x114>)
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SystemInit+0x104>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <SystemInit+0x104>)
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <SystemInit+0x114>)
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <SystemInit+0x104>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SystemInit+0x104>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <SystemInit+0x104>)
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x104>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <SystemInit+0x118>)
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <SystemInit+0x118>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <SystemInit+0x11c>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <SystemInit+0x120>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b76:	d202      	bcs.n	8000b7e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x124>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SystemInit+0x128>)
 8000b80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b84:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	52002000 	.word	0x52002000
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ba0:	02020200 	.word	0x02020200
 8000ba4:	01ff0000 	.word	0x01ff0000
 8000ba8:	01010280 	.word	0x01010280
 8000bac:	580000c0 	.word	0x580000c0
 8000bb0:	5c001000 	.word	0x5c001000
 8000bb4:	ffff0000 	.word	0xffff0000
 8000bb8:	51008108 	.word	0x51008108
 8000bbc:	52004000 	.word	0x52004000

08000bc0 <process_block>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
inline static void process_block()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	LOG_TIME_START(LOG_TIME_PRBLOCK_ID);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f003 fea1 	bl	800490c <logger_log_timer_start>

	LOG_TIME_START(LOG_TIME_USB_RD);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f003 fe9e 	bl	800490c <logger_log_timer_start>
	usb_device->io_ops->read(usb_device, processing_buffers, SAMPLES_PER_BLOCK * 2);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <process_block+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <process_block+0x68>)
 8000bda:	6810      	ldr	r0, [r2, #0]
 8000bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be0:	4912      	ldr	r1, [pc, #72]	; (8000c2c <process_block+0x6c>)
 8000be2:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_USB_RD);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f003 febd 	bl	8004964 <logger_log_timer_stop>

	LOG_TIME_START(LOG_AUDENG_PROCESS);
 8000bea:	2004      	movs	r0, #4
 8000bec:	f003 fe8e 	bl	800490c <logger_log_timer_start>
	audio_engine_process(processing_buffers, SAMPLES_PER_BLOCK);
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	480e      	ldr	r0, [pc, #56]	; (8000c2c <process_block+0x6c>)
 8000bf4:	f001 f96a 	bl	8001ecc <audio_engine_process>
	LOG_TIME_STOP(LOG_AUDENG_PROCESS);
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f003 feb3 	bl	8004964 <logger_log_timer_stop>

	LOG_TIME_START(LOG_TIME_AUDIO_WR);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f003 fe84 	bl	800490c <logger_log_timer_start>
	audio_device->io_ops->write(audio_device, processing_buffers, SAMPLES_PER_BLOCK);
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <process_block+0x70>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <process_block+0x70>)
 8000c0e:	6810      	ldr	r0, [r2, #0]
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	4906      	ldr	r1, [pc, #24]	; (8000c2c <process_block+0x6c>)
 8000c14:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_AUDIO_WR);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f003 fea4 	bl	8004964 <logger_log_timer_stop>

	LOG_TIME_STOP(LOG_TIME_PRBLOCK_ID);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f003 fea1 	bl	8004964 <logger_log_timer_stop>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24006498 	.word	0x24006498
 8000c2c:	240007f8 	.word	0x240007f8
 8000c30:	24006490 	.word	0x24006490

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	}*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f004 f857 	bl	8004cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f931 	bl	8000ea4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c42:	4b67      	ldr	r3, [pc, #412]	; (8000de0 <main+0x1ac>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a65      	ldr	r2, [pc, #404]	; (8000de0 <main+0x1ac>)
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b63      	ldr	r3, [pc, #396]	; (8000de0 <main+0x1ac>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f008 f95f 	bl	8008f24 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f008 f975 	bl	8008f58 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 fb4d 	bl	800130c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f000 fb13 	bl	800129c <MX_DMA_Init>
  MX_DAC1_Init();
 8000c76:	f000 f98f 	bl	8000f98 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8000c7a:	f000 fac3 	bl	8001204 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000c7e:	f000 fa8b 	bl	8001198 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000c82:	f014 fe7f 	bl	8015984 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000c86:	f000 f9c5 	bl	8001014 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c8a:	f000 fa03 	bl	8001094 <MX_I2S2_Init>
  MX_TIM2_Init();
 8000c8e:	f000 fa35 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
#ifdef ENABLE_LOGGING
  logger_init(&htim2);
 8000c92:	4854      	ldr	r0, [pc, #336]	; (8000de4 <main+0x1b0>)
 8000c94:	f003 fd96 	bl	80047c4 <logger_init>
  logger_timer_set_name(LOG_TIME_PRBLOCK_ID, "process_block");
 8000c98:	4953      	ldr	r1, [pc, #332]	; (8000de8 <main+0x1b4>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f003 fe18 	bl	80048d0 <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_USB_RD, "usb_driver_read");
 8000ca0:	4952      	ldr	r1, [pc, #328]	; (8000dec <main+0x1b8>)
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f003 fe14 	bl	80048d0 <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_USB_WR, "usb_driver_write");
 8000ca8:	4951      	ldr	r1, [pc, #324]	; (8000df0 <main+0x1bc>)
 8000caa:	2002      	movs	r0, #2
 8000cac:	f003 fe10 	bl	80048d0 <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_AUDIO_WR, "audio_driver_write");
 8000cb0:	4950      	ldr	r1, [pc, #320]	; (8000df4 <main+0x1c0>)
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f003 fe0c 	bl	80048d0 <logger_timer_set_name>
  logger_timer_set_name(LOG_AUDENG_PROCESS, "audio_engine_process");
 8000cb8:	494f      	ldr	r1, [pc, #316]	; (8000df8 <main+0x1c4>)
 8000cba:	2004      	movs	r0, #4
 8000cbc:	f003 fe08 	bl	80048d0 <logger_timer_set_name>
#endif
  HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	; 0x64
 8000cc2:	f004 f8a5 	bl	8004e10 <HAL_Delay>
  drvman_init();
 8000cc6:	f003 fa97 	bl	80041f8 <drvman_init>
  drvman_register_driver(&uart_driver);
 8000cca:	484c      	ldr	r0, [pc, #304]	; (8000dfc <main+0x1c8>)
 8000ccc:	f003 fac2 	bl	8004254 <drvman_register_driver>
  drvman_set_serial_driver(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 fb09 	bl	80042e8 <drvman_set_serial_driver>
  console_init();
 8000cd6:	f001 fb17 	bl	8002308 <console_init>

  for (size_t i = 0; i < 25; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e005      	b.n	8000cec <main+0xb8>
	  console_println("");
 8000ce0:	4847      	ldr	r0, [pc, #284]	; (8000e00 <main+0x1cc>)
 8000ce2:	f001 fb57 	bl	8002394 <console_println>
  for (size_t i = 0; i < 25; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b18      	cmp	r3, #24
 8000cf0:	d9f6      	bls.n	8000ce0 <main+0xac>

  console_println("=========================================");
 8000cf2:	4844      	ldr	r0, [pc, #272]	; (8000e04 <main+0x1d0>)
 8000cf4:	f001 fb4e 	bl	8002394 <console_println>
  console_println("      Audio Processor Firmware v0.1      ");
 8000cf8:	4843      	ldr	r0, [pc, #268]	; (8000e08 <main+0x1d4>)
 8000cfa:	f001 fb4b 	bl	8002394 <console_println>
  console_println("=========================================");
 8000cfe:	4841      	ldr	r0, [pc, #260]	; (8000e04 <main+0x1d0>)
 8000d00:	f001 fb48 	bl	8002394 <console_println>

  blocklist_init();
 8000d04:	f001 f974 	bl	8001ff0 <blocklist_init>

  console_register_command("help\0", help);
 8000d08:	4940      	ldr	r1, [pc, #256]	; (8000e0c <main+0x1d8>)
 8000d0a:	4841      	ldr	r0, [pc, #260]	; (8000e10 <main+0x1dc>)
 8000d0c:	f001 fb5a 	bl	80023c4 <console_register_command>
  console_register_command("stat\0", stat);
 8000d10:	4940      	ldr	r1, [pc, #256]	; (8000e14 <main+0x1e0>)
 8000d12:	4841      	ldr	r0, [pc, #260]	; (8000e18 <main+0x1e4>)
 8000d14:	f001 fb56 	bl	80023c4 <console_register_command>
  console_register_command("lsblk\0", lsblk);
 8000d18:	4940      	ldr	r1, [pc, #256]	; (8000e1c <main+0x1e8>)
 8000d1a:	4841      	ldr	r0, [pc, #260]	; (8000e20 <main+0x1ec>)
 8000d1c:	f001 fb52 	bl	80023c4 <console_register_command>
  console_register_command("mkdelay\0", mkdelay);
 8000d20:	4940      	ldr	r1, [pc, #256]	; (8000e24 <main+0x1f0>)
 8000d22:	4841      	ldr	r0, [pc, #260]	; (8000e28 <main+0x1f4>)
 8000d24:	f001 fb4e 	bl	80023c4 <console_register_command>
  console_register_command("mkmod\0", modulator_create);
 8000d28:	4940      	ldr	r1, [pc, #256]	; (8000e2c <main+0x1f8>)
 8000d2a:	4841      	ldr	r0, [pc, #260]	; (8000e30 <main+0x1fc>)
 8000d2c:	f001 fb4a 	bl	80023c4 <console_register_command>
  console_register_command("mkbiquad\0", mkbiquad);
 8000d30:	4940      	ldr	r1, [pc, #256]	; (8000e34 <main+0x200>)
 8000d32:	4841      	ldr	r0, [pc, #260]	; (8000e38 <main+0x204>)
 8000d34:	f001 fb46 	bl	80023c4 <console_register_command>
  console_register_command("insblk\0", insblk);
 8000d38:	4940      	ldr	r1, [pc, #256]	; (8000e3c <main+0x208>)
 8000d3a:	4841      	ldr	r0, [pc, #260]	; (8000e40 <main+0x20c>)
 8000d3c:	f001 fb42 	bl	80023c4 <console_register_command>
  console_register_command("rmblk\0", rmblk);
 8000d40:	4940      	ldr	r1, [pc, #256]	; (8000e44 <main+0x210>)
 8000d42:	4841      	ldr	r0, [pc, #260]	; (8000e48 <main+0x214>)
 8000d44:	f001 fb3e 	bl	80023c4 <console_register_command>
  console_register_command("lsdrv\0", lsdrv);
 8000d48:	4940      	ldr	r1, [pc, #256]	; (8000e4c <main+0x218>)
 8000d4a:	4841      	ldr	r0, [pc, #260]	; (8000e50 <main+0x21c>)
 8000d4c:	f001 fb3a 	bl	80023c4 <console_register_command>
  console_register_command("lsparam\0", lsparam);
 8000d50:	4940      	ldr	r1, [pc, #256]	; (8000e54 <main+0x220>)
 8000d52:	4841      	ldr	r0, [pc, #260]	; (8000e58 <main+0x224>)
 8000d54:	f001 fb36 	bl	80023c4 <console_register_command>
  console_register_command("lschain\0", lschain);
 8000d58:	4940      	ldr	r1, [pc, #256]	; (8000e5c <main+0x228>)
 8000d5a:	4841      	ldr	r0, [pc, #260]	; (8000e60 <main+0x22c>)
 8000d5c:	f001 fb32 	bl	80023c4 <console_register_command>
  console_register_command("setparam\0", setparam);
 8000d60:	4940      	ldr	r1, [pc, #256]	; (8000e64 <main+0x230>)
 8000d62:	4841      	ldr	r0, [pc, #260]	; (8000e68 <main+0x234>)
 8000d64:	f001 fb2e 	bl	80023c4 <console_register_command>

  console_exec("\r");
 8000d68:	4840      	ldr	r0, [pc, #256]	; (8000e6c <main+0x238>)
 8000d6a:	f001 fc0d 	bl	8002588 <console_exec>
  console_exec("mkdelay dl_0 2 50000");
 8000d6e:	4840      	ldr	r0, [pc, #256]	; (8000e70 <main+0x23c>)
 8000d70:	f001 fc0a 	bl	8002588 <console_exec>
  console_exec("setparam dl_0 0 0");
 8000d74:	483f      	ldr	r0, [pc, #252]	; (8000e74 <main+0x240>)
 8000d76:	f001 fc07 	bl	8002588 <console_exec>
  console_exec("setparam dl_0 1 24000");
 8000d7a:	483f      	ldr	r0, [pc, #252]	; (8000e78 <main+0x244>)
 8000d7c:	f001 fc04 	bl	8002588 <console_exec>
  console_exec("setparam dl_0 2 1.0");
 8000d80:	483e      	ldr	r0, [pc, #248]	; (8000e7c <main+0x248>)
 8000d82:	f001 fc01 	bl	8002588 <console_exec>
  console_exec("setparam dl_0 3 0.5");
 8000d86:	483e      	ldr	r0, [pc, #248]	; (8000e80 <main+0x24c>)
 8000d88:	f001 fbfe 	bl	8002588 <console_exec>
  console_exec("setparam dl_0 4 0.25");
 8000d8c:	483d      	ldr	r0, [pc, #244]	; (8000e84 <main+0x250>)
 8000d8e:	f001 fbfb 	bl	8002588 <console_exec>
  //console_exec("insblk dl_0 0");
  console_exec("mkmod mod_0");
 8000d92:	483d      	ldr	r0, [pc, #244]	; (8000e88 <main+0x254>)
 8000d94:	f001 fbf8 	bl	8002588 <console_exec>
  console_exec("setparam mod_0 0 440");
 8000d98:	483c      	ldr	r0, [pc, #240]	; (8000e8c <main+0x258>)
 8000d9a:	f001 fbf5 	bl	8002588 <console_exec>
  console_exec("setparam mod_0 1 0.75");
 8000d9e:	483c      	ldr	r0, [pc, #240]	; (8000e90 <main+0x25c>)
 8000da0:	f001 fbf2 	bl	8002588 <console_exec>
  //console_exec("insblk mod_0 0");

  //while (audio_source_buffer->bytes_free * 100 / audio_source_buffer->size > AUDIO_USB_BUF_TRESHOLD_START);

  drvman_register_driver(&mcu_internal_driver);
 8000da4:	483b      	ldr	r0, [pc, #236]	; (8000e94 <main+0x260>)
 8000da6:	f003 fa55 	bl	8004254 <drvman_register_driver>
  drvman_register_driver(&cs4272_driver);
 8000daa:	483b      	ldr	r0, [pc, #236]	; (8000e98 <main+0x264>)
 8000dac:	f003 fa52 	bl	8004254 <drvman_register_driver>
  drvman_set_audio_driver(2);
 8000db0:	2002      	movs	r0, #2
 8000db2:	f003 faed 	bl	8004390 <drvman_set_audio_driver>

  drvman_register_driver(&usb_driver);
 8000db6:	4839      	ldr	r0, [pc, #228]	; (8000e9c <main+0x268>)
 8000db8:	f003 fa4c 	bl	8004254 <drvman_register_driver>
  drvman_set_usb_driver(3);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f003 fb3d 	bl	800443c <drvman_set_usb_driver>

  audio_engine_init();
 8000dc2:	f001 f87c 	bl	8001ebe <audio_engine_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		console_iteration();
 8000dc6:	f001 fc19 	bl	80025fc <console_iteration>

		if (temp_next_block_ready)
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <main+0x26c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f9      	beq.n	8000dc6 <main+0x192>
		{
			process_block();
 8000dd2:	f7ff fef5 	bl	8000bc0 <process_block>
			temp_next_block_ready = 0;
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <main+0x26c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
		console_iteration();
 8000ddc:	e7f3      	b.n	8000dc6 <main+0x192>
 8000dde:	bf00      	nop
 8000de0:	58024400 	.word	0x58024400
 8000de4:	240006cc 	.word	0x240006cc
 8000de8:	0801b9d8 	.word	0x0801b9d8
 8000dec:	0801b9e8 	.word	0x0801b9e8
 8000df0:	0801b9f8 	.word	0x0801b9f8
 8000df4:	0801ba0c 	.word	0x0801ba0c
 8000df8:	0801ba20 	.word	0x0801ba20
 8000dfc:	24000014 	.word	0x24000014
 8000e00:	0801ba38 	.word	0x0801ba38
 8000e04:	0801ba3c 	.word	0x0801ba3c
 8000e08:	0801ba68 	.word	0x0801ba68
 8000e0c:	080026c5 	.word	0x080026c5
 8000e10:	0801ba94 	.word	0x0801ba94
 8000e14:	08002d01 	.word	0x08002d01
 8000e18:	0801ba9c 	.word	0x0801ba9c
 8000e1c:	08002785 	.word	0x08002785
 8000e20:	0801baa4 	.word	0x0801baa4
 8000e24:	08002aed 	.word	0x08002aed
 8000e28:	0801baac 	.word	0x0801baac
 8000e2c:	08002269 	.word	0x08002269
 8000e30:	0801bab8 	.word	0x0801bab8
 8000e34:	080029f5 	.word	0x080029f5
 8000e38:	0801bac0 	.word	0x0801bac0
 8000e3c:	08002709 	.word	0x08002709
 8000e40:	0801bacc 	.word	0x0801bacc
 8000e44:	08002bdd 	.word	0x08002bdd
 8000e48:	0801bad4 	.word	0x0801bad4
 8000e4c:	0800286d 	.word	0x0800286d
 8000e50:	0801badc 	.word	0x0801badc
 8000e54:	08002961 	.word	0x08002961
 8000e58:	0801bae4 	.word	0x0801bae4
 8000e5c:	080027f1 	.word	0x080027f1
 8000e60:	0801baf0 	.word	0x0801baf0
 8000e64:	08002c49 	.word	0x08002c49
 8000e68:	0801bafc 	.word	0x0801bafc
 8000e6c:	0801bb08 	.word	0x0801bb08
 8000e70:	0801bb0c 	.word	0x0801bb0c
 8000e74:	0801bb24 	.word	0x0801bb24
 8000e78:	0801bb38 	.word	0x0801bb38
 8000e7c:	0801bb50 	.word	0x0801bb50
 8000e80:	0801bb64 	.word	0x0801bb64
 8000e84:	0801bb78 	.word	0x0801bb78
 8000e88:	0801bb90 	.word	0x0801bb90
 8000e8c:	0801bb9c 	.word	0x0801bb9c
 8000e90:	0801bbb4 	.word	0x0801bbb4
 8000e94:	24000008 	.word	0x24000008
 8000e98:	24000028 	.word	0x24000028
 8000e9c:	24000034 	.word	0x24000034
 8000ea0:	24000bf8 	.word	0x24000bf8

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09c      	sub	sp, #112	; 0x70
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	224c      	movs	r2, #76	; 0x4c
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f016 ff83 	bl	8017dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2220      	movs	r2, #32
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f016 ff7d 	bl	8017dbe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f00a fca1 	bl	800b80c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <SystemClock_Config+0xec>)
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <SystemClock_Config+0xec>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <SystemClock_Config+0xec>)
 8000edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <SystemClock_Config+0xf0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <SystemClock_Config+0xf0>)
 8000eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xf0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000efc:	bf00      	nop
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xf0>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0a:	d1f8      	bne.n	8000efe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f22:	2364      	movs	r3, #100	; 0x64
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000f2a:	230d      	movs	r3, #13
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a fccc 	bl	800b8e0 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f4e:	f000 fa4f 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	233f      	movs	r3, #63	; 0x3f
 8000f54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2303      	movs	r3, #3
 8000f58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f70:	2340      	movs	r3, #64	; 0x40
 8000f72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00b f90b 	bl	800c194 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f84:	f000 fa34 	bl	80013f0 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3770      	adds	r7, #112	; 0x70
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58000400 	.word	0x58000400
 8000f94:	58024800 	.word	0x58024800

08000f98 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2224      	movs	r2, #36	; 0x24
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f016 ff0a 	bl	8017dbe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_DAC1_Init+0x74>)
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_DAC1_Init+0x78>)
 8000fae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <MX_DAC1_Init+0x74>)
 8000fb2:	f004 f89f 	bl	80050f4 <HAL_DAC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fbc:	f000 fa18 	bl	80013f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000fc4:	2316      	movs	r3, #22
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_DAC1_Init+0x74>)
 8000fdc:	f004 fa6c 	bl	80054b8 <HAL_DAC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 fa03 	bl	80013f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_DAC1_Init+0x74>)
 8000ff6:	f004 fa5f 	bl	80054b8 <HAL_DAC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001000:	f000 f9f6 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	240003e4 	.word	0x240003e4
 8001010:	40007400 	.word	0x40007400

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xD01065FD;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	f007 ff96 	bl	8008f80 <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f000 f9c9 	bl	80013f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001062:	f008 fb5b 	bl	800971c <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f000 f9c0 	bl	80013f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001074:	f008 fb9d 	bl	80097b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f000 f9b7 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24000510 	.word	0x24000510
 800108c:	40005400 	.word	0x40005400
 8001090:	d01065fd 	.word	0xd01065fd

08001094 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_I2S2_Init+0x60>)
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <MX_I2S2_Init+0x64>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010b8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010bc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010c0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2S2_Init+0x60>)
 80010e2:	f008 fbb3 	bl	800984c <HAL_I2S_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 80010ec:	f000 f980 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	24000564 	.word	0x24000564
 80010f8:	40003800 	.word	0x40003800

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_TIM2_Init+0x98>)
 800111c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM2_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM2_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_TIM2_Init+0x98>)
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_TIM2_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_TIM2_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_TIM2_Init+0x98>)
 8001144:	f00e f8b0 	bl	800f2a8 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800114e:	f000 f94f 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_TIM2_Init+0x98>)
 8001160:	f00e fa98 	bl	800f694 <HAL_TIM_ConfigClockSource>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800116a:	f000 f941 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_TIM2_Init+0x98>)
 800117c:	f00e fcf8 	bl	800fb70 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001186:	f000 f933 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	240006cc 	.word	0x240006cc

08001198 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_TIM6_Init+0x64>)
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <MX_TIM6_Init+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_TIM6_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_TIM6_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4150;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_TIM6_Init+0x64>)
 80011bc:	f241 0236 	movw	r2, #4150	; 0x1036
 80011c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_TIM6_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM6_Init+0x64>)
 80011ca:	f00e f86d 	bl	800f2a8 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011d4:	f000 f90c 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d8:	2320      	movs	r3, #32
 80011da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM6_Init+0x64>)
 80011e6:	f00e fcc3 	bl	800fb70 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011f0:	f000 f8fe 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000718 	.word	0x24000718
 8001200:	40001000 	.word	0x40001000

08001204 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_USART3_UART_Init+0x90>)
 800120a:	4a23      	ldr	r2, [pc, #140]	; (8001298 <MX_USART3_UART_Init+0x94>)
 800120c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_USART3_UART_Init+0x90>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <MX_USART3_UART_Init+0x90>)
 800124e:	f00e fd3b 	bl	800fcc8 <HAL_UART_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001258:	f000 f8ca 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001260:	f011 f88b 	bl	801237a <HAL_UARTEx_SetTxFifoThreshold>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800126a:	f000 f8c1 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001272:	f011 f8c0 	bl	80123f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800127c:	f000 f8b8 	bl	80013f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_USART3_UART_Init+0x90>)
 8001282:	f011 f841 	bl	8012308 <HAL_UARTEx_DisableFifoMode>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800128c:	f000 f8b0 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000764 	.word	0x24000764
 8001298:	40004800 	.word	0x40004800

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_DMA_Init+0x6c>)
 80012a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <MX_DMA_Init+0x6c>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_DMA_Init+0x6c>)
 80012b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	200b      	movs	r0, #11
 80012c6:	f003 fed2 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012ca:	200b      	movs	r0, #11
 80012cc:	f003 fee9 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	200c      	movs	r0, #12
 80012d6:	f003 feca 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012da:	200c      	movs	r0, #12
 80012dc:	f003 fee1 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	200d      	movs	r0, #13
 80012e6:	f003 fec2 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012ea:	200d      	movs	r0, #13
 80012ec:	f003 fed9 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	200e      	movs	r0, #14
 80012f6:	f003 feba 	bl	800506e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012fa:	200e      	movs	r0, #14
 80012fc:	f003 fed1 	bl	80050a2 <HAL_NVIC_EnableIRQ>

}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <MX_GPIO_Init+0xdc>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_GPIO_Init+0xdc>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <MX_GPIO_Init+0xdc>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_GPIO_Init+0xdc>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_GPIO_Init+0xdc>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <MX_GPIO_Init+0xdc>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_GPIO_Init+0xdc>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <MX_GPIO_Init+0xe0>)
 80013be:	f007 fd97 	bl	8008ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_RST_Pin */
  GPIO_InitStruct.Pin = CODEC_RST_Pin;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_RST_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_GPIO_Init+0xe0>)
 80013da:	f007 facf 	bl	800897c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	58024400 	.word	0x58024400
 80013ec:	58021000 	.word	0x58021000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_MspInit+0x30>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001408:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x30>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x30>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	58024400 	.word	0x58024400

08001430 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_DAC_MspInit+0x14c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	f040 808f 	bne.w	8001572 <HAL_DAC_MspInit+0x142>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_DAC_MspInit+0x150>)
 8001456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145a:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_DAC_MspInit+0x150>)
 800145c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001464:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_DAC_MspInit+0x150>)
 8001466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_DAC_MspInit+0x150>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a41      	ldr	r2, [pc, #260]	; (8001580 <HAL_DAC_MspInit+0x150>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_DAC_MspInit+0x150>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001490:	2330      	movs	r3, #48	; 0x30
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <HAL_DAC_MspInit+0x154>)
 80014a4:	f007 fa6a 	bl	800897c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014aa:	4a38      	ldr	r2, [pc, #224]	; (800158c <HAL_DAC_MspInit+0x15c>)
 80014ac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014b0:	2243      	movs	r2, #67	; 0x43
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80014ec:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_DAC_MspInit+0x158>)
 80014ee:	f004 fa53 	bl	8005998 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80014f8:	f7ff ff7a 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_DAC_MspInit+0x158>)
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_DAC_MspInit+0x158>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream3;
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <HAL_DAC_MspInit+0x164>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001510:	2244      	movs	r2, #68	; 0x44
 8001512:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001526:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <HAL_DAC_MspInit+0x160>)
 8001548:	f004 fa26 	bl	8005998 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_DAC_MspInit+0x126>
    {
      Error_Handler();
 8001552:	f7ff ff4d 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_DAC_MspInit+0x160>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2102      	movs	r1, #2
 8001566:	2036      	movs	r0, #54	; 0x36
 8001568:	f003 fd81 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f003 fd98 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40007400 	.word	0x40007400
 8001580:	58024400 	.word	0x58024400
 8001584:	58020000 	.word	0x58020000
 8001588:	24000420 	.word	0x24000420
 800158c:	40020010 	.word	0x40020010
 8001590:	24000498 	.word	0x24000498
 8001594:	40020058 	.word	0x40020058

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ba      	sub	sp, #232	; 0xe8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	22c0      	movs	r2, #192	; 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f016 fc00 	bl	8017dbe <memset>
  if(hi2c->Instance==I2C1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_I2C_MspInit+0xc8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d146      	bne.n	8001656 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c8:	f04f 0208 	mov.w	r2, #8
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b f964 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015ea:	f7ff ff01 	bl	80013f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 80015f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001614:	2312      	movs	r3, #18
 8001616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001626:	2304      	movs	r3, #4
 8001628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <HAL_I2C_MspInit+0xd0>)
 8001634:	f007 f9a2 	bl	800897c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 800163a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_I2C_MspInit+0xcc>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	37e8      	adds	r7, #232	; 0xe8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	58024400 	.word	0x58024400
 8001668:	58020400 	.word	0x58020400

0800166c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0bc      	sub	sp, #240	; 0xf0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	22c0      	movs	r2, #192	; 0xc0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f016 fb96 	bl	8017dbe <memset>
  if(hi2s->Instance==SPI2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6d      	ldr	r2, [pc, #436]	; (800184c <HAL_I2S_MspInit+0x1e0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	f040 80d2 	bne.w	8001842 <HAL_I2S_MspInit+0x1d6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800169e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00b f8fa 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 80016be:	f7ff fe97 	bl	80013f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c8:	4a61      	ldr	r2, [pc, #388]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e6:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_I2S_MspInit+0x1e4>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800171c:	2344      	movs	r3, #68	; 0x44
 800171e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001734:	2305      	movs	r3, #5
 8001736:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800173e:	4619      	mov	r1, r3
 8001740:	4844      	ldr	r0, [pc, #272]	; (8001854 <HAL_I2S_MspInit+0x1e8>)
 8001742:	f007 f91b 	bl	800897c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8001746:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800174a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001760:	2305      	movs	r3, #5
 8001762:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800176a:	4619      	mov	r1, r3
 800176c:	483a      	ldr	r0, [pc, #232]	; (8001858 <HAL_I2S_MspInit+0x1ec>)
 800176e:	f007 f905 	bl	800897c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 8001774:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <HAL_I2S_MspInit+0x1f4>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 800177a:	2228      	movs	r2, #40	; 0x28
 800177c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 8001780:	2240      	movs	r2, #64	; 0x40
 8001782:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 800178c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001790:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 8001794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001798:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 800179c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80017b6:	4829      	ldr	r0, [pc, #164]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017b8:	f004 f8ee 	bl	8005998 <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 80017c2:	f7ff fe15 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_I2S_MspInit+0x1f0>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <HAL_I2S_MspInit+0x1fc>)
 80017d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017da:	2227      	movs	r2, #39	; 0x27
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 80017fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001800:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 8001804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001808:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001816:	4813      	ldr	r0, [pc, #76]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 8001818:	f004 f8be 	bl	8005998 <HAL_DMA_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2S_MspInit+0x1ba>
    {
      Error_Handler();
 8001822:	f7ff fde5 	bl	80013f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 800182a:	649a      	str	r2, [r3, #72]	; 0x48
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_I2S_MspInit+0x1f8>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	2024      	movs	r0, #36	; 0x24
 8001838:	f003 fc19 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800183c:	2024      	movs	r0, #36	; 0x24
 800183e:	f003 fc30 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	37f0      	adds	r7, #240	; 0xf0
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40003800 	.word	0x40003800
 8001850:	58024400 	.word	0x58024400
 8001854:	58020800 	.word	0x58020800
 8001858:	58020400 	.word	0x58020400
 800185c:	240005dc 	.word	0x240005dc
 8001860:	40020028 	.word	0x40020028
 8001864:	24000654 	.word	0x24000654
 8001868:	40020040 	.word	0x40020040

0800186c <HAL_I2S_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_I2S_MspDeInit+0x58>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11d      	bne.n	80018ba <HAL_I2S_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_I2S_MspDeInit+0x5c>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001884:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_I2S_MspDeInit+0x5c>)
 8001886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800188a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_6);
 800188e:	2144      	movs	r1, #68	; 0x44
 8001890:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_I2S_MspDeInit+0x60>)
 8001892:	f007 fa23 	bl	8008cdc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15);
 8001896:	f44f 4114 	mov.w	r1, #37888	; 0x9400
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <HAL_I2S_MspDeInit+0x64>)
 800189c:	f007 fa1e 	bl	8008cdc <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fbd3 	bl	8006050 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2s->hdmarx);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	4618      	mov	r0, r3
 80018b0:	f004 fbce 	bl	8006050 <HAL_DMA_DeInit>

    /* I2S2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80018b4:	2024      	movs	r0, #36	; 0x24
 80018b6:	f003 fc02 	bl	80050be <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40003800 	.word	0x40003800
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58020800 	.word	0x58020800
 80018d0:	58020400 	.word	0x58020400

080018d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e4:	d10f      	bne.n	8001906 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 80018e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 80018f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001904:	e01b      	b.n	800193e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_TIM_Base_MspInit+0x78>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d116      	bne.n	800193e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 8001912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_TIM_Base_MspInit+0x74>)
 8001922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2102      	movs	r1, #2
 8001932:	2036      	movs	r0, #54	; 0x36
 8001934:	f003 fb9b 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001938:	2036      	movs	r0, #54	; 0x36
 800193a:	f003 fbb2 	bl	80050a2 <HAL_NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	40001000 	.word	0x40001000

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0ba      	sub	sp, #232	; 0xe8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	22c0      	movs	r2, #192	; 0xc0
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f016 fa24 	bl	8017dbe <memset>
  if(huart->Instance==USART3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_UART_MspInit+0xd8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d14e      	bne.n	8001a1e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001980:	f04f 0202 	mov.w	r2, #2
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4618      	mov	r0, r3
 8001998:	f00a ff88 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019a2:	f7ff fd25 	bl	80013f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ac:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0xdc>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019fc:	2307      	movs	r3, #7
 80019fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <HAL_UART_MspInit+0xe0>)
 8001a0a:	f006 ffb7 	bl	800897c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2103      	movs	r1, #3
 8001a12:	2027      	movs	r0, #39	; 0x27
 8001a14:	f003 fb2b 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a18:	2027      	movs	r0, #39	; 0x27
 8001a1a:	f003 fb42 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	37e8      	adds	r7, #232	; 0xe8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40004800 	.word	0x40004800
 8001a2c:	58024400 	.word	0x58024400
 8001a30:	58020c00 	.word	0x58020c00

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a80:	f003 f9a6 	bl	8004dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <DMA1_Stream0_IRQHandler+0x10>)
 8001a8e:	f005 fc63 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	24000420 	.word	0x24000420

08001a9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Stream1_IRQHandler+0x10>)
 8001aa2:	f005 fc59 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	240005dc 	.word	0x240005dc

08001ab0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream2_IRQHandler+0x10>)
 8001ab6:	f005 fc4f 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	24000654 	.word	0x24000654

08001ac4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream3_IRQHandler+0x10>)
 8001aca:	f005 fc45 	bl	8007358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000498 	.word	0x24000498

08001ad8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <SPI2_IRQHandler+0x10>)
 8001ade:	f008 fa51 	bl	8009f84 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	24000564 	.word	0x24000564

08001aec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <USART3_IRQHandler+0x10>)
 8001af2:	f00e fa13 	bl	800ff1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	24000764 	.word	0x24000764

08001b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <TIM6_DAC_IRQHandler+0x14>)
 8001b06:	f003 fc56 	bl	80053b6 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <TIM6_DAC_IRQHandler+0x18>)
 8001b0c:	f00d fcbb 	bl	800f486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	240003e4 	.word	0x240003e4
 8001b18:	24000718 	.word	0x24000718

08001b1c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001b22:	f008 fd15 	bl	800a550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	240072e4 	.word	0x240072e4

08001b30 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001b36:	f008 fd0b 	bl	800a550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	240072e4 	.word	0x240072e4

08001b44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <OTG_FS_IRQHandler+0x10>)
 8001b4a:	f008 fd01 	bl	800a550 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240072e4 	.word	0x240072e4

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f016 f999 	bl	8017ea8 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
  }

  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
  }
  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f016 f8fe 	bl	8017ea8 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]

}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	24080000 	.word	0x24080000
 8001cd8:	00000800 	.word	0x00000800
 8001cdc:	24000bfc 	.word	0x24000bfc
 8001ce0:	2400b568 	.word	0x2400b568

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce8:	f7fe fed4 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d12:	f016 f8cf 	bl	8017eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7fe ff8d 	bl	8000c34 <main>
  bx  lr
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d24:	240003c8 	.word	0x240003c8
  ldr r2, =_sidata
 8001d28:	0801dd70 	.word	0x0801dd70
  ldr r2, =_sbss
 8001d2c:	240003c8 	.word	0x240003c8
  ldr r4, =_ebss
 8001d30:	2400b564 	.word	0x2400b564

08001d34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC3_IRQHandler>

08001d36 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
 8001d48:	f7ff fb52 	bl	80013f0 <Error_Handler>
 8001d4c:	e7fe      	b.n	8001d4c <stm32_lock_init+0x16>
  lock->flag = 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	705a      	strb	r2, [r3, #1]
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d70:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7a:	b672      	cpsid	i
}
 8001d7c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7e:	f3bf 8f4f 	dsb	sy
}
 8001d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d84:	f3bf 8f6f 	isb	sy
}
 8001d88:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d104      	bne.n	8001d9a <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
 8001d94:	f7ff fb2c 	bl	80013f0 <Error_Handler>
 8001d98:	e7fe      	b.n	8001d98 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e008      	b.n	8001dbc <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	d104      	bne.n	8001dbc <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001db2:	b672      	cpsid	i
}
 8001db4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001db6:	f7ff fb1b 	bl	80013f0 <Error_Handler>
 8001dba:	e7fe      	b.n	8001dba <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	705a      	strb	r2, [r3, #1]
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dde:	b672      	cpsid	i
}
 8001de0:	bf00      	nop
 8001de2:	f7ff fb05 	bl	80013f0 <Error_Handler>
 8001de6:	e7fe      	b.n	8001de6 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001df4:	f7ff fafc 	bl	80013f0 <Error_Handler>
 8001df8:	e7fe      	b.n	8001df8 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <stm32_lock_release+0x4a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e16:	b662      	cpsie	i
}
 8001e18:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001e30:	f016 f83a 	bl	8017ea8 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2216      	movs	r2, #22
 8001e38:	601a      	str	r2, [r3, #0]
    return;
 8001e3a:	e015      	b.n	8001e68 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f014 fb07 	bl	8016450 <malloc>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff6d 	bl	8001d36 <stm32_lock_init>
    return;
 8001e5c:	e004      	b.n	8001e68 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5e:	b672      	cpsid	i
}
 8001e60:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001e62:	f7ff fac5 	bl	80013f0 <Error_Handler>
 8001e66:	e7fe      	b.n	8001e66 <__retarget_lock_init_recursive+0x44>
}
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d104      	bne.n	8001e86 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
 8001e80:	f7ff fab6 	bl	80013f0 <Error_Handler>
 8001e84:	e7fe      	b.n	8001e84 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff6a 	bl	8001d62 <stm32_lock_acquire>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
 8001ea8:	f7ff faa2 	bl	80013f0 <Error_Handler>
 8001eac:	e7fe      	b.n	8001eac <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff8d 	bl	8001dd0 <stm32_lock_release>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <audio_engine_init>:
#define NUM_CHANNELS 2

struct LinkedList processing_chain;

void audio_engine_init()
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <audio_engine_process>:

void audio_engine_process(float32_t* buf, int32_t block_size)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	struct LinkedListElement* curr = processing_chain.head;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <audio_engine_process+0x3c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]
	while (curr)
 8001edc:	e00c      	b.n	8001ef8 <audio_engine_process+0x2c>
	{
		struct Block* curr_blk = curr->element;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60bb      	str	r3, [r7, #8]
		curr_blk->process(curr_blk->dsp_struct_ptr, buf, block_size);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4798      	blx	r3
		curr = curr->next;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
	while (curr)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <audio_engine_process+0x12>
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	24000c08 	.word	0x24000c08

08001f0c <audio_engine_insblk>:

void audio_engine_insblk(uint8_t ch_id, struct Block* block)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
	if (ch_id >= NUM_CHANNELS)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d903      	bls.n	8001f26 <audio_engine_insblk+0x1a>
	{
		console_println("[Audio Engine] Invalid channel ID");
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <audio_engine_insblk+0x38>)
 8001f20:	f000 fa38 	bl	8002394 <console_println>
		return;
 8001f24:	e00b      	b.n	8001f3e <audio_engine_insblk+0x32>
	}

	if (!block)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <audio_engine_insblk+0x28>
	{
		console_println("[Audio Engine] Tried to insert a NULL block");
 8001f2c:	4806      	ldr	r0, [pc, #24]	; (8001f48 <audio_engine_insblk+0x3c>)
 8001f2e:	f000 fa31 	bl	8002394 <console_println>
		return;
 8001f32:	e004      	b.n	8001f3e <audio_engine_insblk+0x32>
	}

	linkedlist_insert(&processing_chain, block, 100);
 8001f34:	2264      	movs	r2, #100	; 0x64
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <audio_engine_insblk+0x40>)
 8001f3a:	f002 fba3 	bl	8004684 <linkedlist_insert>
}
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0801bbcc 	.word	0x0801bbcc
 8001f48:	0801bbf0 	.word	0x0801bbf0
 8001f4c:	24000c08 	.word	0x24000c08

08001f50 <audio_engine_rmblk>:

void audio_engine_rmblk(uint8_t ch_id, uint32_t index)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
	if (ch_id >= NUM_CHANNELS)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d903      	bls.n	8001f6a <audio_engine_rmblk+0x1a>
	{
		console_println("[Audio Engine] Invalid channel ID");
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <audio_engine_rmblk+0x28>)
 8001f64:	f000 fa16 	bl	8002394 <console_println>
		return;
 8001f68:	e003      	b.n	8001f72 <audio_engine_rmblk+0x22>
	}

	linkedlist_remove(&processing_chain, index);
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <audio_engine_rmblk+0x2c>)
 8001f6e:	f002 fbe7 	bl	8004740 <linkedlist_remove>
}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0801bbcc 	.word	0x0801bbcc
 8001f7c:	24000c08 	.word	0x24000c08

08001f80 <block_set_param>:
 */

#include "block.h"

int8_t block_set_param(struct Block* block, uint8_t index, float value)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8e:	72fb      	strb	r3, [r7, #11]
	return block->set_param(block->dsp_struct_ptr, index, value);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	7af9      	ldrb	r1, [r7, #11]
 8001f9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4798      	blx	r3
 8001fa2:	4603      	mov	r3, r0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <block_get_param_str>:

char* block_get_param_str(struct Block* block, uint8_t index)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	return block->get_param_str(block->dsp_struct_ptr, index);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	78f9      	ldrb	r1, [r7, #3]
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4798      	blx	r3
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <block_get_num_params>:

int8_t block_get_num_params(struct Block* block)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return block->get_num_params(block->dsp_struct_ptr);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b25b      	sxtb	r3, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <blocklist_init>:
uint8_t blocklist_initialized = 0;
uint8_t block_status_bitmap[STATUS_BITMAP_SIZE];
struct Block block_list[MAX_DSP_BLOCKS];

int8_t blocklist_init()
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
	if (blocklist_initialized)
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <blocklist_init+0xa8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <blocklist_init+0x14>
		return -EINVAL;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8002002:	e043      	b.n	800208c <blocklist_init+0x9c>

	for (uint8_t i = 0; i < STATUS_BITMAP_SIZE; i++)
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	e009      	b.n	800201e <blocklist_init+0x2e>
	{
		block_status_bitmap[i >> 3] = 0xFF;
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	08db      	lsrs	r3, r3, #3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <blocklist_init+0xac>)
 8002014:	21ff      	movs	r1, #255	; 0xff
 8002016:	5499      	strb	r1, [r3, r2]
	for (uint8_t i = 0; i < STATUS_BITMAP_SIZE; i++)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	3301      	adds	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d9f2      	bls.n	800200a <blocklist_init+0x1a>
	}

	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	71bb      	strb	r3, [r7, #6]
 8002028:	e029      	b.n	800207e <blocklist_init+0x8e>
	{
		block_list[i].dsp_struct_ptr = NULL;
 800202a:	79ba      	ldrb	r2, [r7, #6]
 800202c:	491c      	ldr	r1, [pc, #112]	; (80020a0 <blocklist_init+0xb0>)
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
		block_list[i].process = NULL;
 800203c:	79ba      	ldrb	r2, [r7, #6]
 800203e:	4918      	ldr	r1, [pc, #96]	; (80020a0 <blocklist_init+0xb0>)
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3328      	adds	r3, #40	; 0x28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
		block_list[i].set_param = NULL;
 8002050:	79ba      	ldrb	r2, [r7, #6]
 8002052:	4913      	ldr	r1, [pc, #76]	; (80020a0 <blocklist_init+0xb0>)
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	332c      	adds	r3, #44	; 0x2c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
		block_list[i].get_param_str = NULL;
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <blocklist_init+0xb0>)
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3330      	adds	r3, #48	; 0x30
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	3301      	adds	r3, #1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d9d2      	bls.n	800202a <blocklist_init+0x3a>
	}
	blocklist_initialized = 1;
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <blocklist_init+0xa8>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]

	return EOK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	24000c0c 	.word	0x24000c0c
 800209c:	24000c10 	.word	0x24000c10
 80020a0:	24000c14 	.word	0x24000c14

080020a4 <blocklist_insert>:
						char* name,
						void (*process)(void*, float*, size_t),
						int8_t (*set_param)(void*, uint8_t, float),
						char* (*get_param_str)(void*, uint8_t),
						uint8_t (*get_num_params)(void*))
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
	if (!blocklist_initialized)
 80020b2:	4b54      	ldr	r3, [pc, #336]	; (8002204 <blocklist_insert+0x160>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <blocklist_insert+0x1c>
		return -EINVAL;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	e09d      	b.n	80021fc <blocklist_insert+0x158>

	int16_t free_block_index = -1;
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	82fb      	strh	r3, [r7, #22]
	uint8_t mask = 0x01;
 80020c6:	2301      	movs	r3, #1
 80020c8:	757b      	strb	r3, [r7, #21]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	753b      	strb	r3, [r7, #20]
 80020ce:	e02e      	b.n	800212e <blocklist_insert+0x8a>
	{
		if (block_status_bitmap[i >> 3] & mask)
 80020d0:	7d3b      	ldrb	r3, [r7, #20]
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <blocklist_insert+0x164>)
 80020da:	5c9a      	ldrb	r2, [r3, r2]
 80020dc:	7d7b      	ldrb	r3, [r7, #21]
 80020de:	4013      	ands	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <blocklist_insert+0x70>
		{
			free_block_index = i;
 80020e6:	7d3b      	ldrb	r3, [r7, #20]
 80020e8:	82fb      	strh	r3, [r7, #22]
			block_status_bitmap[i >> 3] &= ~mask;
 80020ea:	7d3b      	ldrb	r3, [r7, #20]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <blocklist_insert+0x164>)
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	4013      	ands	r3, r2
 8002102:	b259      	sxtb	r1, r3
 8002104:	7d3b      	ldrb	r3, [r7, #20]
 8002106:	08db      	lsrs	r3, r3, #3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	b2c9      	uxtb	r1, r1
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <blocklist_insert+0x164>)
 8002110:	5499      	strb	r1, [r3, r2]
			break;
 8002112:	e00f      	b.n	8002134 <blocklist_insert+0x90>
		}
		uint8_t top_bit = (mask >> 7) & 0x01;
 8002114:	7d7b      	ldrb	r3, [r7, #21]
 8002116:	09db      	lsrs	r3, r3, #7
 8002118:	74fb      	strb	r3, [r7, #19]
		mask <<= 1;
 800211a:	7d7b      	ldrb	r3, [r7, #21]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	757b      	strb	r3, [r7, #21]
		mask |= top_bit;
 8002120:	7d7a      	ldrb	r2, [r7, #21]
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	4313      	orrs	r3, r2
 8002126:	757b      	strb	r3, [r7, #21]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002128:	7d3b      	ldrb	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	753b      	strb	r3, [r7, #20]
 800212e:	7d3b      	ldrb	r3, [r7, #20]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d9cd      	bls.n	80020d0 <blocklist_insert+0x2c>
	}

	if (free_block_index == -1)
 8002134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d102      	bne.n	8002144 <blocklist_insert+0xa0>
		return -EINVAL;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e05b      	b.n	80021fc <blocklist_insert+0x158>

	uint8_t str_size = strlen(name);
 8002144:	68b8      	ldr	r0, [r7, #8]
 8002146:	f7fe f92b 	bl	80003a0 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	74bb      	strb	r3, [r7, #18]
	str_size = str_size > BLOCK_NAME_SIZE ? BLOCK_NAME_SIZE : str_size;
 800214e:	7cbb      	ldrb	r3, [r7, #18]
 8002150:	2b20      	cmp	r3, #32
 8002152:	bf28      	it	cs
 8002154:	2320      	movcs	r3, #32
 8002156:	74bb      	strb	r3, [r7, #18]
	memcpy(block_list[free_block_index].name, name, str_size);
 8002158:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4a29      	ldr	r2, [pc, #164]	; (800220c <blocklist_insert+0x168>)
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	7cba      	ldrb	r2, [r7, #18]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	4618      	mov	r0, r3
 8002170:	f015 fecc 	bl	8017f0c <memcpy>
	block_list[free_block_index].name[str_size] = '\0';
 8002174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002178:	7cb9      	ldrb	r1, [r7, #18]
 800217a:	4824      	ldr	r0, [pc, #144]	; (800220c <blocklist_insert+0x168>)
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4403      	add	r3, r0
 8002186:	440b      	add	r3, r1
 8002188:	3304      	adds	r3, #4
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
	block_list[free_block_index].dsp_struct_ptr = dsp_struct_ptr;
 800218e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002192:	491e      	ldr	r1, [pc, #120]	; (800220c <blocklist_insert+0x168>)
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].process = process;
 80021a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021a6:	4919      	ldr	r1, [pc, #100]	; (800220c <blocklist_insert+0x168>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3328      	adds	r3, #40	; 0x28
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].set_param = set_param;
 80021b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021bc:	4913      	ldr	r1, [pc, #76]	; (800220c <blocklist_insert+0x168>)
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	332c      	adds	r3, #44	; 0x2c
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].get_param_str = get_param_str;
 80021ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021d2:	490e      	ldr	r1, [pc, #56]	; (800220c <blocklist_insert+0x168>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3330      	adds	r3, #48	; 0x30
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].get_num_params = get_num_params;
 80021e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021e8:	4908      	ldr	r1, [pc, #32]	; (800220c <blocklist_insert+0x168>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3334      	adds	r3, #52	; 0x34
 80021f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f8:	601a      	str	r2, [r3, #0]
	return EOK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	24000c0c 	.word	0x24000c0c
 8002208:	24000c10 	.word	0x24000c10
 800220c:	24000c14 	.word	0x24000c14

08002210 <blocklist_get_by_name>:

struct Block* blocklist_get_by_name(char* name)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e019      	b.n	8002252 <blocklist_get_by_name+0x42>
	{
		if (!strcmp(block_list[i].name, name))
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <blocklist_get_by_name+0x54>)
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f855 	bl	80002e0 <strcmp>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <blocklist_get_by_name+0x3c>
		{
			return &block_list[i];
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <blocklist_get_by_name+0x54>)
 8002248:	4413      	add	r3, r2
 800224a:	e006      	b.n	800225a <blocklist_get_by_name+0x4a>
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d9e2      	bls.n	800221e <blocklist_get_by_name+0xe>
		}
	}
	return NULL;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	24000c14 	.word	0x24000c14

08002268 <modulator_create>:
#include "block_list.h"

#include <stdlib.h>

void modulator_create(char** args, uint8_t argc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
	if (argc < 1)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <modulator_create+0x20>
	{
		console_println("modulator_create <name>");
 800227a:	481a      	ldr	r0, [pc, #104]	; (80022e4 <modulator_create+0x7c>)
 800227c:	f000 f88a 	bl	8002394 <console_println>
		console_println("name = string which will be used to reference this block");
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <modulator_create+0x80>)
 8002282:	f000 f887 	bl	8002394 <console_println>
		return;
 8002286:	e02a      	b.n	80022de <modulator_create+0x76>
	}

	char* name = args[0];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]

	struct Modulator* new_modulator = malloc(sizeof(struct Modulator));
 800228e:	200c      	movs	r0, #12
 8002290:	f014 f8de 	bl	8016450 <malloc>
 8002294:	4603      	mov	r3, r0
 8002296:	60bb      	str	r3, [r7, #8]
	modulator_init(new_modulator);
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f001 f99f 	bl	80035dc <modulator_init>

	if (!new_modulator)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <modulator_create+0x44>
	{
		console_println("Failed to create a modulator");
 80022a4:	4811      	ldr	r0, [pc, #68]	; (80022ec <modulator_create+0x84>)
 80022a6:	f000 f875 	bl	8002394 <console_println>
		return;
 80022aa:	e018      	b.n	80022de <modulator_create+0x76>
	}

	if (blocklist_insert(new_modulator, args[0], modulator_process, modulator_set_param, modulator_get_param_str, modulator_get_num_params) == -1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <modulator_create+0x88>)
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <modulator_create+0x8c>)
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <modulator_create+0x90>)
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <modulator_create+0x94>)
 80022bc:	68b8      	ldr	r0, [r7, #8]
 80022be:	f7ff fef1 	bl	80020a4 <blocklist_insert>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d106      	bne.n	80022d8 <modulator_create+0x70>
	{
		console_println("Failed inserting the modulator block into the block list");
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <modulator_create+0x98>)
 80022cc:	f000 f862 	bl	8002394 <console_println>
		modulator_destroy(new_modulator);
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f001 f9bf 	bl	8003654 <modulator_destroy>
		return;
 80022d6:	e002      	b.n	80022de <modulator_create+0x76>
	}
	console_println("Modulator block created");
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <modulator_create+0x9c>)
 80022da:	f000 f85b 	bl	8002394 <console_println>
}
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	0801bc1c 	.word	0x0801bc1c
 80022e8:	0801bc34 	.word	0x0801bc34
 80022ec:	0801bc70 	.word	0x0801bc70
 80022f0:	0800370f 	.word	0x0800370f
 80022f4:	080036c7 	.word	0x080036c7
 80022f8:	08003677 	.word	0x08003677
 80022fc:	08003729 	.word	0x08003729
 8002300:	0801bc90 	.word	0x0801bc90
 8002304:	0801bccc 	.word	0x0801bccc

08002308 <console_init>:
struct Command* command_list_head;

static char* args[MAX_ARGS];

void console_init()
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	if (!serial_device)
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <console_init+0x38>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <console_init+0x2e>
		return;

	console_buffer_index = 0;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <console_init+0x3c>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
	console_buffer[CONSOLE_BUFFER_SIZE] = '\0';
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <console_init+0x40>)
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	registered_commands = 0;
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <console_init+0x44>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
	command_list_head = NULL;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <console_init+0x48>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
	console_initialized = 1;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <console_init+0x4c>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e000      	b.n	8002338 <console_init+0x30>
		return;
 8002336:	bf00      	nop
}
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	24006494 	.word	0x24006494
 8002344:	24000fd5 	.word	0x24000fd5
 8002348:	24000f94 	.word	0x24000f94
 800234c:	24000fd7 	.word	0x24000fd7
 8002350:	24000fd8 	.word	0x24000fd8
 8002354:	24000fd6 	.word	0x24000fd6

08002358 <console_print>:

void console_print(char* str)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	if (!console_initialized)
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <console_print+0x34>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <console_print+0x2c>
		return;

	size_t str_len = strlen(str);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe f819 	bl	80003a0 <strlen>
 800236e:	60f8      	str	r0, [r7, #12]
	serial_device->io_ops->write
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <console_print+0x38>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a05      	ldr	r2, [pc, #20]	; (8002390 <console_print+0x38>)
 800237a:	6810      	ldr	r0, [r2, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4798      	blx	r3
 8002382:	e000      	b.n	8002386 <console_print+0x2e>
		return;
 8002384:	bf00      	nop
		(serial_device, str, str_len);
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	24000fd6 	.word	0x24000fd6
 8002390:	24006494 	.word	0x24006494

08002394 <console_println>:

void console_println(char* str)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (!console_initialized)
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <console_println+0x28>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <console_println+0x1e>
			return;

	console_print(str);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ffd7 	bl	8002358 <console_print>
	console_print(STRING_NEWLINE);
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <console_println+0x2c>)
 80023ac:	f7ff ffd4 	bl	8002358 <console_print>
 80023b0:	e000      	b.n	80023b4 <console_println+0x20>
			return;
 80023b2:	bf00      	nop
}
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	24000fd6 	.word	0x24000fd6
 80023c0:	24000054 	.word	0x24000054

080023c4 <console_register_command>:

void console_register_command(char* name, void (*func)())
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0a4      	sub	sp, #144	; 0x90
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	char print_buf[128];
	if (!console_initialized)
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <console_register_command+0x94>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03b      	beq.n	800244e <console_register_command+0x8a>
		return;

	struct Command* new_command = malloc(sizeof(struct Command));
 80023d6:	200c      	movs	r0, #12
 80023d8:	f014 f83a 	bl	8016450 <malloc>
 80023dc:	4603      	mov	r3, r0
 80023de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	new_command->name = name;
 80023e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
	new_command->func = func;
 80023ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	605a      	str	r2, [r3, #4]
	new_command->next = NULL;
 80023f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
	if (!command_list_head)
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <console_register_command+0x98>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d104      	bne.n	800240c <console_register_command+0x48>
	{
		command_list_head = new_command;
 8002402:	4a16      	ldr	r2, [pc, #88]	; (800245c <console_register_command+0x98>)
 8002404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e013      	b.n	8002434 <console_register_command+0x70>
	}
	else
	{
		struct Command* curr = command_list_head;
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <console_register_command+0x98>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (curr->next) curr = curr->next;
 8002414:	e004      	b.n	8002420 <console_register_command+0x5c>
 8002416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f5      	bne.n	8002416 <console_register_command+0x52>
		curr->next = new_command;
 800242a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002432:	609a      	str	r2, [r3, #8]
	}
	sprintf(print_buf, "%s Registered command: %s", module_str, name);
 8002434:	f107 0008 	add.w	r0, r7, #8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <console_register_command+0x9c>)
 800243c:	4909      	ldr	r1, [pc, #36]	; (8002464 <console_register_command+0xa0>)
 800243e:	f015 fc5b 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 8002442:	f107 0308 	add.w	r3, r7, #8
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffa4 	bl	8002394 <console_println>
 800244c:	e000      	b.n	8002450 <console_register_command+0x8c>
		return;
 800244e:	bf00      	nop
}
 8002450:	3790      	adds	r7, #144	; 0x90
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	24000fd6 	.word	0x24000fd6
 800245c:	24000fd8 	.word	0x24000fd8
 8002460:	24000040 	.word	0x24000040
 8002464:	0801bce4 	.word	0x0801bce4

08002468 <console_parse>:

void console_parse()
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
	if (!console_initialized)
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <console_parse+0x100>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d073      	beq.n	800255e <console_parse+0xf6>
		return;

	if (console_buffer[0] == '\0' || console_buffer_index == 0)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <console_parse+0x104>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <console_parse+0x1e>
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <console_parse+0x108>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <console_parse+0x2c>
	{
		console_print(STRING_NEWLINE);
 8002486:	483b      	ldr	r0, [pc, #236]	; (8002574 <console_parse+0x10c>)
 8002488:	f7ff ff66 	bl	8002358 <console_print>
		console_print(STRING_PROMPT);
 800248c:	483a      	ldr	r0, [pc, #232]	; (8002578 <console_parse+0x110>)
 800248e:	f7ff ff63 	bl	8002358 <console_print>
		return;
 8002492:	e065      	b.n	8002560 <console_parse+0xf8>
	}

	uint8_t command_found = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
	struct Command* curr = command_list_head;
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <console_parse+0x114>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60bb      	str	r3, [r7, #8]
	while (curr)
 800249e:	e04b      	b.n	8002538 <console_parse+0xd0>
	{
		if (strcmp(curr->name, console_buffer) == 0)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4931      	ldr	r1, [pc, #196]	; (800256c <console_parse+0x104>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fd ff1a 	bl	80002e0 <strcmp>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d13f      	bne.n	8002532 <console_parse+0xca>
		{
			uint8_t arg_index = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]
			uint8_t arg_start_index = strlen(console_buffer) + 1;
 80024b6:	482d      	ldr	r0, [pc, #180]	; (800256c <console_parse+0x104>)
 80024b8:	f7fd ff72 	bl	80003a0 <strlen>
 80024bc:	4603      	mov	r3, r0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	71bb      	strb	r3, [r7, #6]
			while (arg_start_index < console_buffer_index && console_buffer[arg_start_index] != '\0' && arg_index < MAX_ARGS)
 80024c4:	e016      	b.n	80024f4 <console_parse+0x8c>
			{
				args[arg_index++] = &console_buffer[arg_start_index];
 80024c6:	79ba      	ldrb	r2, [r7, #6]
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	71f9      	strb	r1, [r7, #7]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <console_parse+0x104>)
 80024d2:	4413      	add	r3, r2
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <console_parse+0x118>)
 80024d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				arg_start_index += strlen(&console_buffer[arg_start_index]) + 1;
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <console_parse+0x104>)
 80024de:	4413      	add	r3, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ff5d 	bl	80003a0 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	4413      	add	r3, r2
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	71bb      	strb	r3, [r7, #6]
			while (arg_start_index < console_buffer_index && console_buffer[arg_start_index] != '\0' && arg_index < MAX_ARGS)
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <console_parse+0x108>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	79ba      	ldrb	r2, [r7, #6]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d207      	bcs.n	800250e <console_parse+0xa6>
 80024fe:	79bb      	ldrb	r3, [r7, #6]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <console_parse+0x104>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <console_parse+0xa6>
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b07      	cmp	r3, #7
 800250c:	d9db      	bls.n	80024c6 <console_parse+0x5e>
			}

			console_print(STRING_NEWLINE);
 800250e:	4819      	ldr	r0, [pc, #100]	; (8002574 <console_parse+0x10c>)
 8002510:	f7ff ff22 	bl	8002358 <console_print>
			curr->func(args, arg_index);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	4611      	mov	r1, r2
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <console_parse+0x118>)
 800251e:	4798      	blx	r3
			console_print(STRING_NEWLINE);
 8002520:	4814      	ldr	r0, [pc, #80]	; (8002574 <console_parse+0x10c>)
 8002522:	f7ff ff19 	bl	8002358 <console_print>
			console_print(STRING_PROMPT);
 8002526:	4814      	ldr	r0, [pc, #80]	; (8002578 <console_parse+0x110>)
 8002528:	f7ff ff16 	bl	8002358 <console_print>
			command_found = 1;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
			break;
 8002530:	e005      	b.n	800253e <console_parse+0xd6>
		}
		curr = curr->next;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60bb      	str	r3, [r7, #8]
	while (curr)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1b0      	bne.n	80024a0 <console_parse+0x38>
	}


	// This action is taken if no matching command was found
	if (command_found == 0)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10d      	bne.n	8002560 <console_parse+0xf8>
	{
		console_print(STRING_NEWLINE);
 8002544:	480b      	ldr	r0, [pc, #44]	; (8002574 <console_parse+0x10c>)
 8002546:	f7ff ff07 	bl	8002358 <console_print>
		console_print("Unrecognized command!");
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <console_parse+0x11c>)
 800254c:	f7ff ff04 	bl	8002358 <console_print>
		console_print(STRING_NEWLINE);
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <console_parse+0x10c>)
 8002552:	f7ff ff01 	bl	8002358 <console_print>
		console_print(STRING_PROMPT);
 8002556:	4808      	ldr	r0, [pc, #32]	; (8002578 <console_parse+0x110>)
 8002558:	f7ff fefe 	bl	8002358 <console_print>
 800255c:	e000      	b.n	8002560 <console_parse+0xf8>
		return;
 800255e:	bf00      	nop
	}
}
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	24000fd6 	.word	0x24000fd6
 800256c:	24000f94 	.word	0x24000f94
 8002570:	24000fd5 	.word	0x24000fd5
 8002574:	24000054 	.word	0x24000054
 8002578:	2400004c 	.word	0x2400004c
 800257c:	24000fd8 	.word	0x24000fd8
 8002580:	24000fdc 	.word	0x24000fdc
 8002584:	0801bd00 	.word	0x0801bd00

08002588 <console_exec>:

void console_exec(char* str)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	console_print(str);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fee1 	bl	8002358 <console_print>

	strcpy(console_buffer, str);
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4816      	ldr	r0, [pc, #88]	; (80025f4 <console_exec+0x6c>)
 800259a:	f015 fcaf 	bl	8017efc <strcpy>
	console_buffer_index = strlen(str);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fd fefe 	bl	80003a0 <strlen>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <console_exec+0x70>)
 80025aa:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < console_buffer_index; i++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e00b      	b.n	80025ca <console_exec+0x42>
	{
		if (console_buffer[i] == ' ')
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	4a0f      	ldr	r2, [pc, #60]	; (80025f4 <console_exec+0x6c>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d103      	bne.n	80025c4 <console_exec+0x3c>
			console_buffer[i] = '\0';
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <console_exec+0x6c>)
 80025c0:	2100      	movs	r1, #0
 80025c2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < console_buffer_index; i++)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <console_exec+0x70>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d3ee      	bcc.n	80025b2 <console_exec+0x2a>
	}
	console_buffer[console_buffer_index] = '\0';
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <console_exec+0x70>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <console_exec+0x6c>)
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]
	console_parse();
 80025e0:	f7ff ff42 	bl	8002468 <console_parse>
	console_buffer_index = 0;
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <console_exec+0x70>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000f94 	.word	0x24000f94
 80025f8:	24000fd5 	.word	0x24000fd5

080025fc <console_iteration>:

void console_iteration()
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
	if (!console_initialized)
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <console_iteration+0xb4>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d04d      	beq.n	80026a6 <console_iteration+0xaa>
		return;

	uint8_t next_char;
	while (serial_device->io_ops->read(serial_device, &next_char, 1))
 800260a:	e03f      	b.n	800268c <console_iteration+0x90>
	{
		switch (next_char)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b7e      	cmp	r3, #126	; 0x7e
 8002610:	dc3c      	bgt.n	800268c <console_iteration+0x90>
 8002612:	2b20      	cmp	r3, #32
 8002614:	da1d      	bge.n	8002652 <console_iteration+0x56>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d00d      	beq.n	8002636 <console_iteration+0x3a>
 800261a:	2b0d      	cmp	r3, #13
 800261c:	d136      	bne.n	800268c <console_iteration+0x90>
		{
		case KEY_ENTER:
			console_buffer[console_buffer_index] = '\0';
 800261e:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <console_iteration+0xb8>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <console_iteration+0xbc>)
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]
			console_parse();
 800262a:	f7ff ff1d 	bl	8002468 <console_parse>
			console_buffer_index = 0;
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <console_iteration+0xb8>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
			break;
 8002634:	e02a      	b.n	800268c <console_iteration+0x90>
		case KEY_BACKSPACE:
			if (console_buffer_index != 0)
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <console_iteration+0xb8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d026      	beq.n	800268c <console_iteration+0x90>
			{
				console_buffer_index--;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <console_iteration+0xb8>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <console_iteration+0xb8>)
 8002648:	701a      	strb	r2, [r3, #0]

				console_print(STRING_BACKSPACE);
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <console_iteration+0xc0>)
 800264c:	f7ff fe84 	bl	8002358 <console_print>
			}
			break;
 8002650:	e01c      	b.n	800268c <console_iteration+0x90>
		case 32 ... 126:
			if (console_buffer_index < CONSOLE_BUFFER_SIZE)
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <console_iteration+0xb8>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b3f      	cmp	r3, #63	; 0x3f
 8002658:	d817      	bhi.n	800268a <console_iteration+0x8e>
			{
				console_buffer[console_buffer_index++] = (next_char == ' ' ? '\0' : next_char);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b20      	cmp	r3, #32
 800265e:	d001      	beq.n	8002664 <console_iteration+0x68>
 8002660:	79fa      	ldrb	r2, [r7, #7]
 8002662:	e000      	b.n	8002666 <console_iteration+0x6a>
 8002664:	2200      	movs	r2, #0
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <console_iteration+0xb8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	1c59      	adds	r1, r3, #1
 800266c:	b2c8      	uxtb	r0, r1
 800266e:	4911      	ldr	r1, [pc, #68]	; (80026b4 <console_iteration+0xb8>)
 8002670:	7008      	strb	r0, [r1, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <console_iteration+0xbc>)
 8002676:	545a      	strb	r2, [r3, r1]
				serial_device->io_ops->write(serial_device, &next_char, 1);
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <console_iteration+0xc4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <console_iteration+0xc4>)
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	1df9      	adds	r1, r7, #7
 8002686:	2201      	movs	r2, #1
 8002688:	4798      	blx	r3
			}
			break;
 800268a:	bf00      	nop
	while (serial_device->io_ops->read(serial_device, &next_char, 1))
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <console_iteration+0xc4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <console_iteration+0xc4>)
 8002696:	6810      	ldr	r0, [r2, #0]
 8002698:	1df9      	adds	r1, r7, #7
 800269a:	2201      	movs	r2, #1
 800269c:	4798      	blx	r3
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1b3      	bne.n	800260c <console_iteration+0x10>
 80026a4:	e000      	b.n	80026a8 <console_iteration+0xac>
		return;
 80026a6:	bf00      	nop
		}
	}
}
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	24000fd6 	.word	0x24000fd6
 80026b4:	24000fd5 	.word	0x24000fd5
 80026b8:	24000f94 	.word	0x24000f94
 80026bc:	24000050 	.word	0x24000050
 80026c0:	24006494 	.word	0x24006494

080026c4 <help>:
 */

#include "help.h"

void help(char** args, uint8_t argc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
	struct Command* curr = command_list_head;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <help+0x3c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

	while (curr)
 80026d6:	e00a      	b.n	80026ee <help+0x2a>
	{
		console_print(curr->name);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fe3b 	bl	8002358 <console_print>
		console_print(STRING_NEWLINE);
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <help+0x40>)
 80026e4:	f7ff fe38 	bl	8002358 <console_print>
		curr = curr->next;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	60fb      	str	r3, [r7, #12]
	while (curr)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f1      	bne.n	80026d8 <help+0x14>
	}
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	24000fd8 	.word	0x24000fd8
 8002704:	24000054 	.word	0x24000054

08002708 <insblk>:
#include "block_list.h"

#include <stdlib.h>

void insblk(char** args, uint8_t argc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d809      	bhi.n	800272e <insblk+0x26>
	{
		console_println("insblk <name> <channel>");
 800271a:	4815      	ldr	r0, [pc, #84]	; (8002770 <insblk+0x68>)
 800271c:	f7ff fe3a 	bl	8002394 <console_println>
		console_println("name = name of the block to insert into the processing chain");
 8002720:	4814      	ldr	r0, [pc, #80]	; (8002774 <insblk+0x6c>)
 8002722:	f7ff fe37 	bl	8002394 <console_println>
		console_println("channel = into which channel will be block be put");
 8002726:	4814      	ldr	r0, [pc, #80]	; (8002778 <insblk+0x70>)
 8002728:	f7ff fe34 	bl	8002394 <console_println>
		return;
 800272c:	e01c      	b.n	8002768 <insblk+0x60>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fd6c 	bl	8002210 <blocklist_get_by_name>
 8002738:	60f8      	str	r0, [r7, #12]

	if (!block)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <insblk+0x40>
	{
		console_println("Invalid block type");
 8002740:	480e      	ldr	r0, [pc, #56]	; (800277c <insblk+0x74>)
 8002742:	f7ff fe27 	bl	8002394 <console_println>
		return;
 8002746:	e00f      	b.n	8002768 <insblk+0x60>
	}

	uint8_t channel = atoi(args[1]);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f013 fe79 	bl	8016446 <atoi>
 8002754:	4603      	mov	r3, r0
 8002756:	72fb      	strb	r3, [r7, #11]

	audio_engine_insblk(channel, block);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	68f9      	ldr	r1, [r7, #12]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fbd5 	bl	8001f0c <audio_engine_insblk>
	console_println("Block inserted");
 8002762:	4807      	ldr	r0, [pc, #28]	; (8002780 <insblk+0x78>)
 8002764:	f7ff fe16 	bl	8002394 <console_println>
}
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	0801bd18 	.word	0x0801bd18
 8002774:	0801bd30 	.word	0x0801bd30
 8002778:	0801bd70 	.word	0x0801bd70
 800277c:	0801bda4 	.word	0x0801bda4
 8002780:	0801bdb8 	.word	0x0801bdb8

08002784 <lsblk>:
#include "delay_line.h"

#include <stdio.h>

void lsblk(char** args, uint8_t argc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0a4      	sub	sp, #144	; 0x90
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002796:	e01d      	b.n	80027d4 <lsblk+0x50>
	{
		sprintf(print_buf, "===== Block %u =====", i);
 8002798:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	4911      	ldr	r1, [pc, #68]	; (80027e8 <lsblk+0x64>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f015 faa8 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fdf1 	bl	8002394 <console_println>
		console_println(block_list[i].name);
 80027b2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <lsblk+0x68>)
 80027c0:	4413      	add	r3, r2
 80027c2:	3304      	adds	r3, #4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fde5 	bl	8002394 <console_println>
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 80027ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80027ce:	3301      	adds	r3, #1
 80027d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80027d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80027d8:	2b0f      	cmp	r3, #15
 80027da:	d9dd      	bls.n	8002798 <lsblk+0x14>
	}
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3790      	adds	r7, #144	; 0x90
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	0801bdc8 	.word	0x0801bdc8
 80027ec:	24000c14 	.word	0x24000c14

080027f0 <lschain>:
#include "audio_engine.h"
#include "linked_list.h"
#include "console.h"

void lschain(char** args, uint8_t argc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b0a4      	sub	sp, #144	; 0x90
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
	char str[128];
	struct LinkedListElement* curr = processing_chain.head;
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <lschain+0x68>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	console_print("Input -> ");
 8002804:	4815      	ldr	r0, [pc, #84]	; (800285c <lschain+0x6c>)
 8002806:	f7ff fda7 	bl	8002358 <console_print>
	while (curr)
 800280a:	e017      	b.n	800283c <lschain+0x4c>
	{
		struct Block* curr_blk = curr->element;
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		sprintf(str, "%s -> ", curr_blk->name);
 8002816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	f107 0308 	add.w	r3, r7, #8
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <lschain+0x70>)
 8002822:	4618      	mov	r0, r3
 8002824:	f015 fa68 	bl	8017cf8 <siprintf>
		console_print(str);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fd93 	bl	8002358 <console_print>

		curr = curr->next;
 8002832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while (curr)
 800283c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e3      	bne.n	800280c <lschain+0x1c>
	}
	console_print("Output");
 8002844:	4807      	ldr	r0, [pc, #28]	; (8002864 <lschain+0x74>)
 8002846:	f7ff fd87 	bl	8002358 <console_print>
	console_println("");
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <lschain+0x78>)
 800284c:	f7ff fda2 	bl	8002394 <console_println>
}
 8002850:	bf00      	nop
 8002852:	3790      	adds	r7, #144	; 0x90
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	24000c08 	.word	0x24000c08
 800285c:	0801bde0 	.word	0x0801bde0
 8002860:	0801bdec 	.word	0x0801bdec
 8002864:	0801bdf4 	.word	0x0801bdf4
 8002868:	0801bdfc 	.word	0x0801bdfc

0800286c <lsdrv>:

#include "driver_manager.h"
#include "console.h"

void lsdrv(char** args, uint8_t argc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b0a4      	sub	sp, #144	; 0x90
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];

	for (uint8_t i = 0; i < registered_drivers; i++)
 8002878:	2300      	movs	r3, #0
 800287a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800287e:	e022      	b.n	80028c6 <lsdrv+0x5a>
	{
		sprintf(print_buf, "===== DRIVER %u =====");
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	492b      	ldr	r1, [pc, #172]	; (8002934 <lsdrv+0xc8>)
 8002886:	4618      	mov	r0, r3
 8002888:	f015 fa36 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fd7f 	bl	8002394 <console_println>
		sprintf(print_buf, "Name: %s", driver_list[i]->name);
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <lsdrv+0xcc>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <lsdrv+0xd0>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f015 fa23 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fd6c 	bl	8002394 <console_println>
	for (uint8_t i = 0; i < registered_drivers; i++)
 80028bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80028c0:	3301      	adds	r3, #1
 80028c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80028c6:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <lsdrv+0xd4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3d6      	bcc.n	8002880 <lsdrv+0x14>
	}

	console_println("");
 80028d2:	481c      	ldr	r0, [pc, #112]	; (8002944 <lsdrv+0xd8>)
 80028d4:	f7ff fd5e 	bl	8002394 <console_println>
	sprintf(print_buf, "Serial Driver: %s", serial_device->name);
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <lsdrv+0xdc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	491a      	ldr	r1, [pc, #104]	; (800294c <lsdrv+0xe0>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f015 fa07 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fd50 	bl	8002394 <console_println>
	sprintf(print_buf, "Audio Driver: %s", audio_device->name);
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <lsdrv+0xe4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	4915      	ldr	r1, [pc, #84]	; (8002954 <lsdrv+0xe8>)
 8002900:	4618      	mov	r0, r3
 8002902:	f015 f9f9 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fd42 	bl	8002394 <console_println>
	sprintf(print_buf, "USB Driver: %s", usb_device->name);
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <lsdrv+0xec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4910      	ldr	r1, [pc, #64]	; (800295c <lsdrv+0xf0>)
 800291c:	4618      	mov	r0, r3
 800291e:	f015 f9eb 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fd34 	bl	8002394 <console_println>
}
 800292c:	bf00      	nop
 800292e:	3790      	adds	r7, #144	; 0x90
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0801be00 	.word	0x0801be00
 8002938:	240000c0 	.word	0x240000c0
 800293c:	0801be18 	.word	0x0801be18
 8002940:	2400646c 	.word	0x2400646c
 8002944:	0801be24 	.word	0x0801be24
 8002948:	24006494 	.word	0x24006494
 800294c:	0801be28 	.word	0x0801be28
 8002950:	24006490 	.word	0x24006490
 8002954:	0801be3c 	.word	0x0801be3c
 8002958:	24006498 	.word	0x24006498
 800295c:	0801be50 	.word	0x0801be50

08002960 <lsparam>:
#include "lsparam.h"
#include "block_list.h"
#include "delay_line.h"

void lsparam(char** args, uint8_t argc)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b0a5      	sub	sp, #148	; 0x94
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
	if (argc < 1)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <lsparam+0x26>
	{
		console_println("lsparam <block_name>");
 8002972:	481c      	ldr	r0, [pc, #112]	; (80029e4 <lsparam+0x84>)
 8002974:	f7ff fd0e 	bl	8002394 <console_println>
		console_println("Lists all parameters contained in the <block_name> block");
 8002978:	481b      	ldr	r0, [pc, #108]	; (80029e8 <lsparam+0x88>)
 800297a:	f7ff fd0b 	bl	8002394 <console_println>
		console_println("<block_name> - Name of the block whose parameters will be listed");
 800297e:	481b      	ldr	r0, [pc, #108]	; (80029ec <lsparam+0x8c>)
 8002980:	f7ff fd08 	bl	8002394 <console_println>
		return;
 8002984:	e02b      	b.n	80029de <lsparam+0x7e>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fc40 	bl	8002210 <blocklist_get_by_name>
 8002990:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	if (!block)
 8002994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <lsparam+0x44>
	{
		console_println("Block does not exist");
 800299c:	4814      	ldr	r0, [pc, #80]	; (80029f0 <lsparam+0x90>)
 800299e:	f7ff fcf9 	bl	8002394 <console_println>
		return;
 80029a2:	e01c      	b.n	80029de <lsparam+0x7e>
	}

	char print_buf[128];
	for (uint8_t param_index = 0; param_index < block_get_num_params(block); param_index++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80029aa:	e00f      	b.n	80029cc <lsparam+0x6c>
		console_println(block_get_param_str(block, param_index));
 80029ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80029b0:	4619      	mov	r1, r3
 80029b2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029b6:	f7ff faf9 	bl	8001fac <block_get_param_str>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fce9 	bl	8002394 <console_println>
	for (uint8_t param_index = 0; param_index < block_get_num_params(block); param_index++)
 80029c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80029c6:	3301      	adds	r3, #1
 80029c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80029cc:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 80029d0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029d4:	f7ff fafc 	bl	8001fd0 <block_get_num_params>
 80029d8:	4603      	mov	r3, r0
 80029da:	429c      	cmp	r4, r3
 80029dc:	dbe6      	blt.n	80029ac <lsparam+0x4c>
}
 80029de:	3794      	adds	r7, #148	; 0x94
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	0801be60 	.word	0x0801be60
 80029e8:	0801be78 	.word	0x0801be78
 80029ec:	0801beb4 	.word	0x0801beb4
 80029f0:	0801bef8 	.word	0x0801bef8

080029f4 <mkbiquad>:
#include "block_list.h"

#include <stdlib.h>

void mkbiquad(char** args, uint8_t argc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
	if (argc < 4)
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d80f      	bhi.n	8002a26 <mkbiquad+0x32>
	{
		console_println("Usage: mkbiquad <name> <center_freq> <bandwidth> <sample_rate>");
 8002a06:	4830      	ldr	r0, [pc, #192]	; (8002ac8 <mkbiquad+0xd4>)
 8002a08:	f7ff fcc4 	bl	8002394 <console_println>
		console_println("name = string which is used to reference this block");
 8002a0c:	482f      	ldr	r0, [pc, #188]	; (8002acc <mkbiquad+0xd8>)
 8002a0e:	f7ff fcc1 	bl	8002394 <console_println>
		console_println("center_freq = center frequency of this band-pass filter");
 8002a12:	482f      	ldr	r0, [pc, #188]	; (8002ad0 <mkbiquad+0xdc>)
 8002a14:	f7ff fcbe 	bl	8002394 <console_println>
		console_println("bandwidth = bandwidth in octaves");
 8002a18:	482e      	ldr	r0, [pc, #184]	; (8002ad4 <mkbiquad+0xe0>)
 8002a1a:	f7ff fcbb 	bl	8002394 <console_println>
		console_println("sample_rate = sample rate of the audio engine");
 8002a1e:	482e      	ldr	r0, [pc, #184]	; (8002ad8 <mkbiquad+0xe4>)
 8002a20:	f7ff fcb8 	bl	8002394 <console_println>
		return;
 8002a24:	e04d      	b.n	8002ac2 <mkbiquad+0xce>
	}

	float center_freq = atof(args[1]);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f013 fd07 	bl	8016440 <atof>
 8002a32:	eeb0 7b40 	vmov.f64	d7, d0
 8002a36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float bw = atof(args[2]);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3308      	adds	r3, #8
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f013 fcfb 	bl	8016440 <atof>
 8002a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a52:	edc7 7a04 	vstr	s15, [r7, #16]
	int32_t sr = atoi(args[3]);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f013 fcf2 	bl	8016446 <atoi>
 8002a62:	60f8      	str	r0, [r7, #12]

	struct BiquadFilter* new_biquad = malloc(sizeof(struct BiquadFilter));
 8002a64:	2030      	movs	r0, #48	; 0x30
 8002a66:	f013 fcf3 	bl	8016450 <malloc>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60bb      	str	r3, [r7, #8]
	if (!new_biquad)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <mkbiquad+0x88>
	{
		console_println("Failed to allocate memory for BiquadFilter block");
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <mkbiquad+0xe8>)
 8002a76:	f7ff fc8d 	bl	8002394 <console_println>
		return;
 8002a7a:	e022      	b.n	8002ac2 <mkbiquad+0xce>
	}

	biquad_filter_init(new_biquad, center_freq, sr, bw);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a8a:	eef0 0a67 	vmov.f32	s1, s15
 8002a8e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a92:	68b8      	ldr	r0, [r7, #8]
 8002a94:	f000 fa3c 	bl	8002f10 <biquad_filter_init>
		biquad_filter_destroy(new_biquad);
		console_println("Failed to create BiquadFilter block");
		return;
	}*/

	if (blocklist_insert(new_biquad,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <mkbiquad+0xec>)
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f7ff fafb 	bl	80020a4 <blocklist_insert>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <mkbiquad+0xc8>
						 biquad_filter_process,
						 NULL,
						 NULL,
						 NULL))
	{
		console_println("Failed inserting the BiquadFilter block into the block list");
 8002ab4:	480b      	ldr	r0, [pc, #44]	; (8002ae4 <mkbiquad+0xf0>)
 8002ab6:	f7ff fc6d 	bl	8002394 <console_println>
		//biquad_filter_destroy(new_biquad);
		return;
 8002aba:	e002      	b.n	8002ac2 <mkbiquad+0xce>
	}
	console_println("BiquadFilter block created");
 8002abc:	480a      	ldr	r0, [pc, #40]	; (8002ae8 <mkbiquad+0xf4>)
 8002abe:	f7ff fc69 	bl	8002394 <console_println>
}
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	0801bf10 	.word	0x0801bf10
 8002acc:	0801bf50 	.word	0x0801bf50
 8002ad0:	0801bf84 	.word	0x0801bf84
 8002ad4:	0801bfbc 	.word	0x0801bfbc
 8002ad8:	0801bfe0 	.word	0x0801bfe0
 8002adc:	0801c010 	.word	0x0801c010
 8002ae0:	080030b5 	.word	0x080030b5
 8002ae4:	0801c044 	.word	0x0801c044
 8002ae8:	0801c080 	.word	0x0801c080

08002aec <mkdelay>:
#include "block_list.h"

#include <stdlib.h>

void mkdelay(char** args, uint8_t argc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d80c      	bhi.n	8002b18 <mkdelay+0x2c>
	{
		console_println("Usage: delayline_create <name> <num_taps> <max_delay>");
 8002afe:	482b      	ldr	r0, [pc, #172]	; (8002bac <mkdelay+0xc0>)
 8002b00:	f7ff fc48 	bl	8002394 <console_println>
		console_println("name = string which is used to reference this block");
 8002b04:	482a      	ldr	r0, [pc, #168]	; (8002bb0 <mkdelay+0xc4>)
 8002b06:	f7ff fc45 	bl	8002394 <console_println>
		console_println("num_taps = maximum number of taps for this delay line");
 8002b0a:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <mkdelay+0xc8>)
 8002b0c:	f7ff fc42 	bl	8002394 <console_println>
		console_println("max_delay = maximum possible delay in number of samples");
 8002b10:	4829      	ldr	r0, [pc, #164]	; (8002bb8 <mkdelay+0xcc>)
 8002b12:	f7ff fc3f 	bl	8002394 <console_println>
		return;
 8002b16:	e046      	b.n	8002ba6 <mkdelay+0xba>
	}

	uint8_t num_taps = atoi(args[1]);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f013 fc91 	bl	8016446 <atoi>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]
	int32_t max_delay = atoi(args[2]);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f013 fc89 	bl	8016446 <atoi>
 8002b34:	6138      	str	r0, [r7, #16]

	struct DelayLine* new_delayline = malloc(sizeof(struct DelayLine));
 8002b36:	201c      	movs	r0, #28
 8002b38:	f013 fc8a 	bl	8016450 <malloc>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]
	if (!new_delayline)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <mkdelay+0x62>
	{
		console_println("Failed to allocate memory for DelayLine block");
 8002b46:	481d      	ldr	r0, [pc, #116]	; (8002bbc <mkdelay+0xd0>)
 8002b48:	f7ff fc24 	bl	8002394 <console_println>
		return;
 8002b4c:	e02b      	b.n	8002ba6 <mkdelay+0xba>
	}

	int8_t err = delayline_init(new_delayline, num_taps, max_delay, SAMPLES_PER_BLOCK);
 8002b4e:	7df9      	ldrb	r1, [r7, #23]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fb33 	bl	80031c0 <delayline_init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	72fb      	strb	r3, [r7, #11]
	if (err)
 8002b5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <mkdelay+0x88>
	{
		delayline_destroy(new_delayline);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fbf8 	bl	800335c <delayline_destroy>
		console_println("Failed to create DelayLine block");
 8002b6c:	4814      	ldr	r0, [pc, #80]	; (8002bc0 <mkdelay+0xd4>)
 8002b6e:	f7ff fc11 	bl	8002394 <console_println>
		return;
 8002b72:	e018      	b.n	8002ba6 <mkdelay+0xba>
	}

	if (blocklist_insert(new_delayline, args[0], delayline_process, delayline_set_param, delayline_get_param_str, delayline_get_num_params) == -1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <mkdelay+0xd8>)
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <mkdelay+0xdc>)
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <mkdelay+0xe0>)
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <mkdelay+0xe4>)
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff fa8d 	bl	80020a4 <blocklist_insert>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d106      	bne.n	8002ba0 <mkdelay+0xb4>
	{
		console_println("Failed inserting the DelayLine block into the block list");
 8002b92:	4810      	ldr	r0, [pc, #64]	; (8002bd4 <mkdelay+0xe8>)
 8002b94:	f7ff fbfe 	bl	8002394 <console_println>
		delayline_destroy(new_delayline);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fbdf 	bl	800335c <delayline_destroy>
		return;
 8002b9e:	e002      	b.n	8002ba6 <mkdelay+0xba>
	}
	console_println("DelayLine block created");
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <mkdelay+0xec>)
 8002ba2:	f7ff fbf7 	bl	8002394 <console_println>
}
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	0801c09c 	.word	0x0801c09c
 8002bb0:	0801c0d4 	.word	0x0801c0d4
 8002bb4:	0801c108 	.word	0x0801c108
 8002bb8:	0801c140 	.word	0x0801c140
 8002bbc:	0801c178 	.word	0x0801c178
 8002bc0:	0801c1a8 	.word	0x0801c1a8
 8002bc4:	08003407 	.word	0x08003407
 8002bc8:	080033cd 	.word	0x080033cd
 8002bcc:	08003389 	.word	0x08003389
 8002bd0:	0800341f 	.word	0x0800341f
 8002bd4:	0801c1cc 	.word	0x0801c1cc
 8002bd8:	0801c208 	.word	0x0801c208

08002bdc <rmblk>:
#include "console.h"

#include <stdlib.h>

void rmblk(char** args, uint8_t argc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d80c      	bhi.n	8002c08 <rmblk+0x2c>
	{
		console_println("rmblk <channel> <index>");
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <rmblk+0x5c>)
 8002bf0:	f7ff fbd0 	bl	8002394 <console_println>
		console_println("Removes a block from the processing chain of the specified channel");
 8002bf4:	4811      	ldr	r0, [pc, #68]	; (8002c3c <rmblk+0x60>)
 8002bf6:	f7ff fbcd 	bl	8002394 <console_println>
		console_println("<channel> - Channel ID from which to remove the block");
 8002bfa:	4811      	ldr	r0, [pc, #68]	; (8002c40 <rmblk+0x64>)
 8002bfc:	f7ff fbca 	bl	8002394 <console_println>
		console_println("<index> - Which block to remove");
 8002c00:	4810      	ldr	r0, [pc, #64]	; (8002c44 <rmblk+0x68>)
 8002c02:	f7ff fbc7 	bl	8002394 <console_println>
		return;
 8002c06:	e013      	b.n	8002c30 <rmblk+0x54>
	}

	uint8_t channel = atoi(args[0]);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f013 fc1a 	bl	8016446 <atoi>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]
	uint32_t index = atoi(args[1]);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f013 fc12 	bl	8016446 <atoi>
 8002c22:	4603      	mov	r3, r0
 8002c24:	60bb      	str	r3, [r7, #8]

	audio_engine_rmblk(channel, index);
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f990 	bl	8001f50 <audio_engine_rmblk>
}
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0801c220 	.word	0x0801c220
 8002c3c:	0801c238 	.word	0x0801c238
 8002c40:	0801c27c 	.word	0x0801c27c
 8002c44:	0801c2b4 	.word	0x0801c2b4

08002c48 <setparam>:
#include "block.h"

#include <stdlib.h>

void setparam(char** args, uint8_t argc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
	if (argc < 3)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d80f      	bhi.n	8002c7a <setparam+0x32>
	{
		console_println("setparam <block_name> <index> <value>");
 8002c5a:	4822      	ldr	r0, [pc, #136]	; (8002ce4 <setparam+0x9c>)
 8002c5c:	f7ff fb9a 	bl	8002394 <console_println>
		console_println("Sets the identified parameter to a specified value");
 8002c60:	4821      	ldr	r0, [pc, #132]	; (8002ce8 <setparam+0xa0>)
 8002c62:	f7ff fb97 	bl	8002394 <console_println>
		console_println("<block_name> - Name of the block whose parameter will be set");
 8002c66:	4821      	ldr	r0, [pc, #132]	; (8002cec <setparam+0xa4>)
 8002c68:	f7ff fb94 	bl	8002394 <console_println>
		console_println("<index> - Index of the parameter to be set");
 8002c6c:	4820      	ldr	r0, [pc, #128]	; (8002cf0 <setparam+0xa8>)
 8002c6e:	f7ff fb91 	bl	8002394 <console_println>
		console_println("<value> - Value to which the parameter will be set");
 8002c72:	4820      	ldr	r0, [pc, #128]	; (8002cf4 <setparam+0xac>)
 8002c74:	f7ff fb8e 	bl	8002394 <console_println>
		return;
 8002c78:	e031      	b.n	8002cde <setparam+0x96>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fac6 	bl	8002210 <blocklist_get_by_name>
 8002c84:	4603      	mov	r3, r0
 8002c86:	617b      	str	r3, [r7, #20]
	uint8_t index = atoi(args[1]);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f013 fbd9 	bl	8016446 <atoi>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]
	float value = atof(args[2]);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f013 fbce 	bl	8016440 <atof>
 8002ca4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cac:	edc7 7a03 	vstr	s15, [r7, #12]

	if (!block)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <setparam+0x76>
	{
		console_println("Block does not exist");
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <setparam+0xb0>)
 8002cb8:	f7ff fb6c 	bl	8002394 <console_println>
		return;
 8002cbc:	e00f      	b.n	8002cde <setparam+0x96>
	}
	int8_t err = block_set_param(block, index, value);
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff f95a 	bl	8001f80 <block_set_param>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	72fb      	strb	r3, [r7, #11]

	if (err)
 8002cd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <setparam+0x96>
	{
		console_println("Failed to set the parameter");
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <setparam+0xb4>)
 8002cda:	f7ff fb5b 	bl	8002394 <console_println>
	}
}
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	0801c2d4 	.word	0x0801c2d4
 8002ce8:	0801c2fc 	.word	0x0801c2fc
 8002cec:	0801c330 	.word	0x0801c330
 8002cf0:	0801c370 	.word	0x0801c370
 8002cf4:	0801c39c 	.word	0x0801c39c
 8002cf8:	0801c3d0 	.word	0x0801c3d0
 8002cfc:	0801c3e8 	.word	0x0801c3e8

08002d00 <stat>:
#include "console.h"
#include "logger.h"
#include "arm_math.h"

void stat(char** args, uint8_t argc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0a6      	sub	sp, #152	; 0x98
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];
	uint32_t avg_time_int;
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002d12:	e09c      	b.n	8002e4e <stat+0x14e>
	{
		sprintf(print_buf, "===== TIMER %u =====", i);
 8002d14:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4971      	ldr	r1, [pc, #452]	; (8002ee4 <stat+0x1e4>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f014 ffea 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb33 	bl	8002394 <console_println>

		sprintf(print_buf, "Name: %s", timer_list[i].name);
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <stat+0x1e8>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d36:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	4969      	ldr	r1, [pc, #420]	; (8002eec <stat+0x1ec>)
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f014 ffd5 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002d4e:	f107 0310 	add.w	r3, r7, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fb1e 	bl	8002394 <console_println>

		logger_log_timer_avg(i, &avg_time_int);
 8002d58:	f107 020c 	add.w	r2, r7, #12
 8002d5c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 feae 	bl	8004ac4 <logger_log_timer_avg>
		float32_t temp = avg_time_int * 5 / 1000.f;
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	ee07 3a90 	vmov	s15, r3
 8002d74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d78:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002ef0 <stat+0x1f0>
 8002d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d80:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Avg: %f us", temp);
 8002d84:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d8c:	f107 0010 	add.w	r0, r7, #16
 8002d90:	ec53 2b17 	vmov	r2, r3, d7
 8002d94:	4957      	ldr	r1, [pc, #348]	; (8002ef4 <stat+0x1f4>)
 8002d96:	f014 ffaf 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff faf8 	bl	8002394 <console_println>

		temp = timer_list[i].worst_time * 5 / 1000.f;
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <stat+0x1e8>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002dac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002ef0 <stat+0x1f0>
 8002dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Worst: %f us", temp);
 8002dd4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ddc:	f107 0010 	add.w	r0, r7, #16
 8002de0:	ec53 2b17 	vmov	r2, r3, d7
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <stat+0x1f8>)
 8002de6:	f014 ff87 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fad0 	bl	8002394 <console_println>

		temp = timer_list[i].best_time * 5 / 1000.f;
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <stat+0x1e8>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002dfc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e18:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002ef0 <stat+0x1f0>
 8002e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e20:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Best: %f us", temp);
 8002e24:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e2c:	f107 0010 	add.w	r0, r7, #16
 8002e30:	ec53 2b17 	vmov	r2, r3, d7
 8002e34:	4931      	ldr	r1, [pc, #196]	; (8002efc <stat+0x1fc>)
 8002e36:	f014 ff5f 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff faa8 	bl	8002394 <console_println>
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8002e44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002e4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e52:	2b07      	cmp	r3, #7
 8002e54:	f67f af5e 	bls.w	8002d14 <stat+0x14>
	}

	console_println("");
 8002e58:	4829      	ldr	r0, [pc, #164]	; (8002f00 <stat+0x200>)
 8002e5a:	f7ff fa9b 	bl	8002394 <console_println>

	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002e64:	e035      	b.n	8002ed2 <stat+0x1d2>
	{
		sprintf(print_buf, "===== EVENTS %u =====", i);
 8002e66:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <stat+0x204>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f014 ff41 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002e76:	f107 0310 	add.w	r3, r7, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fa8a 	bl	8002394 <console_println>

		sprintf(print_buf, "Name: %s", event_list[i].name);
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <stat+0x208>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4916      	ldr	r1, [pc, #88]	; (8002eec <stat+0x1ec>)
 8002e94:	4618      	mov	r0, r3
 8002e96:	f014 ff2f 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fa78 	bl	8002394 <console_println>

		sprintf(print_buf, "Counter: %u", event_list[i].evnt_count);
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <stat+0x208>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	4915      	ldr	r1, [pc, #84]	; (8002f0c <stat+0x20c>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f014 ff1d 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8002ebe:	f107 0310 	add.w	r3, r7, #16
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fa66 	bl	8002394 <console_println>
	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 8002ec8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002ed2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	d9c5      	bls.n	8002e66 <stat+0x166>
	}
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	3798      	adds	r7, #152	; 0x98
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	0801c404 	.word	0x0801c404
 8002ee8:	240000c8 	.word	0x240000c8
 8002eec:	0801c41c 	.word	0x0801c41c
 8002ef0:	447a0000 	.word	0x447a0000
 8002ef4:	0801c428 	.word	0x0801c428
 8002ef8:	0801c434 	.word	0x0801c434
 8002efc:	0801c444 	.word	0x0801c444
 8002f00:	0801c450 	.word	0x0801c450
 8002f04:	0801c454 	.word	0x0801c454
 8002f08:	240000c4 	.word	0x240000c4
 8002f0c:	0801c46c 	.word	0x0801c46c

08002f10 <biquad_filter_init>:

void biquad_filter_init(struct BiquadFilter* bf,
						float32_t Fc,
						float32_t Fs,
						float32_t bw)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	ed2d 8b04 	vpush	{d8-d9}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f20:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f24:	ed87 1a00 	vstr	s2, [r7]
	float32_t w0 = 2.f * PI * Fc / Fs;
 8002f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f2c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80030b0 <biquad_filter_init+0x1a0>
 8002f30:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3c:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t alpha = sin(w0) * \
 8002f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f48:	eeb0 0b47 	vmov.f64	d0, d7
 8002f4c:	f017 fc14 	bl	801a778 <sin>
 8002f50:	eeb0 9b40 	vmov.f64	d9, d0
		sinh(log(2.f) / 2.f * bw * w0 / sin(w0));
 8002f54:	edd7 7a00 	vldr	s15, [r7]
 8002f58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f5c:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80030a8 <biquad_filter_init+0x198>
 8002f60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f6c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8002f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f78:	eeb0 0b47 	vmov.f64	d0, d7
 8002f7c:	f017 fbfc 	bl	801a778 <sin>
 8002f80:	eeb0 6b40 	vmov.f64	d6, d0
 8002f84:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002f88:	eeb0 0b47 	vmov.f64	d0, d7
 8002f8c:	f017 fb7c 	bl	801a688 <sinh>
 8002f90:	eeb0 7b40 	vmov.f64	d7, d0
	float32_t alpha = sin(w0) * \
 8002f94:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002f98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f9c:	edc7 7a04 	vstr	s15, [r7, #16]

	bf->a[0] = 1.f + alpha;
 8002fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	edc3 7a00 	vstr	s15, [r3]
	bf->a[1] = -2.f * cos(w0);
 8002fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fba:	eeb0 0b47 	vmov.f64	d0, d7
 8002fbe:	f017 fb8f 	bl	801a6e0 <cos>
 8002fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8002fc6:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002fce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	edc3 7a01 	vstr	s15, [r3, #4]
	bf->a[2] = 1.f - alpha;
 8002fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	edc3 7a02 	vstr	s15, [r3, #8]

	bf->b[0] = (1.f - cos(w0)) / 2.f;
 8002fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ff6:	f017 fb73 	bl	801a6e0 <cos>
 8002ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8002ffe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003002:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003006:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800300a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800300e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	edc3 7a03 	vstr	s15, [r3, #12]
	bf->b[1] = 1.f - cos(w0);
 8003018:	edd7 7a05 	vldr	s15, [r7, #20]
 800301c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003020:	eeb0 0b47 	vmov.f64	d0, d7
 8003024:	f017 fb5c 	bl	801a6e0 <cos>
 8003028:	eeb0 7b40 	vmov.f64	d7, d0
 800302c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003030:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003034:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	edc3 7a04 	vstr	s15, [r3, #16]
	bf->b[2] = (1.f - cos(w0)) / 2.f;
 800303e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003046:	eeb0 0b47 	vmov.f64	d0, d7
 800304a:	f017 fb49 	bl	801a6e0 <cos>
 800304e:	eeb0 7b40 	vmov.f64	d7, d0
 8003052:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003056:	ee36 6b47 	vsub.f64	d6, d6, d7
 800305a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800305e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003062:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	edc3 7a05 	vstr	s15, [r3, #20]

	bf->input_history[0] = 0.f;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
	bf->input_history[1] = 0.f;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	61da      	str	r2, [r3, #28]
	bf->input_history[2] = 0.f;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	621a      	str	r2, [r3, #32]

	bf->output_history[0] = 0.f;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
	bf->output_history[1] = 0.f;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
	bf->output_history[2] = 0.f;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	ecbd 8b04 	vpop	{d8-d9}
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	fefa39ef 	.word	0xfefa39ef
 80030ac:	3fd62e42 	.word	0x3fd62e42
 80030b0:	40c90fdb 	.word	0x40c90fdb

080030b4 <biquad_filter_process>:

void biquad_filter_process(struct BiquadFilter* bf,
						   float32_t* buf,
						   int32_t block_size)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
	float32_t next_output = 0.f;
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < block_size; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e06d      	b.n	80031a8 <biquad_filter_process+0xf4>
	{
		bf->input_history[2] = bf->input_history[1];
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	621a      	str	r2, [r3, #32]
		bf->input_history[1] = bf->input_history[0];
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]
		bf->input_history[0] = buf[i];
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	4413      	add	r3, r2
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	619a      	str	r2, [r3, #24]

		next_output = (bf->b[0] / bf->a[0]) * bf->input_history[0] + \
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
			(bf->b[1] / bf->a[0]) * bf->input_history[1] + \
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	ed93 6a04 	vldr	s12, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	edd3 7a07 	vldr	s15, [r3, #28]
 800311a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		next_output = (bf->b[0] / bf->a[0]) * bf->input_history[0] + \
 800311e:	ee37 7a27 	vadd.f32	s14, s14, s15
			(bf->b[2] / bf->a[0]) * bf->input_history[2] - \
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	ed93 6a05 	vldr	s12, [r3, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	edd3 7a08 	vldr	s15, [r3, #32]
 8003138:	ee66 7aa7 	vmul.f32	s15, s13, s15
			(bf->b[1] / bf->a[0]) * bf->input_history[1] + \
 800313c:	ee37 7a27 	vadd.f32	s14, s14, s15
			(bf->a[1] / bf->a[0]) * bf->output_history[0] - \
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	ed93 6a01 	vldr	s12, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
			(bf->b[2] / bf->a[0]) * bf->input_history[2] - \
 800315a:	ee37 7a67 	vsub.f32	s14, s14, s15
			(bf->a[2] / bf->a[0]) * bf->output_history[1];
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	ed93 6a02 	vldr	s12, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003174:	ee66 7aa7 	vmul.f32	s15, s13, s15
		next_output = (bf->b[0] / bf->a[0]) * bf->input_history[0] + \
 8003178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317c:	edc7 7a04 	vstr	s15, [r7, #16]
		buf[i] = next_output;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	4413      	add	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	601a      	str	r2, [r3, #0]

		bf->output_history[2] = bf->output_history[1];
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
		bf->output_history[1] = bf->output_history[0];
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
		bf->output_history[0] = next_output;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
	for (int32_t i = 0; i < block_size; i++)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	db8d      	blt.n	80030cc <biquad_filter_process+0x18>
	}
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <delayline_init>:

int8_t delayline_init(struct DelayLine* delay_line,
					  uint8_t num_taps,
					  int32_t max_delay,
					  int32_t block_size)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	460b      	mov	r3, r1
 80031ce:	72fb      	strb	r3, [r7, #11]
	if (!delay_line)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <delayline_init+0x1c>
		return -EINVAL;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e0b2      	b.n	8003342 <delayline_init+0x182>

	if (max_delay < 0 || max_delay > MAX_BUF_SIZE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db03      	blt.n	80031ea <delayline_init+0x2a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e8:	dd02      	ble.n	80031f0 <delayline_init+0x30>
		return -EINVAL;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e0a8      	b.n	8003342 <delayline_init+0x182>

	if (block_size < 0 || block_size > MAX_BUF_SIZE)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db03      	blt.n	80031fe <delayline_init+0x3e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031fc:	dd02      	ble.n	8003204 <delayline_init+0x44>
		return -EINVAL;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	e09e      	b.n	8003342 <delayline_init+0x182>

	delay_line->num_taps = num_taps;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	7afa      	ldrb	r2, [r7, #11]
 8003208:	711a      	strb	r2, [r3, #4]
	delay_line->tap_delay_base = 0;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	719a      	strb	r2, [r3, #6]
	delay_line->tap_coeff_base = num_taps;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	7afa      	ldrb	r2, [r7, #11]
 8003214:	71da      	strb	r2, [r3, #7]
	delay_line->fb_coeff_base = 2 * num_taps;
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	721a      	strb	r2, [r3, #8]
	delay_line->num_params = 2 * num_taps + 1;
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	715a      	strb	r2, [r3, #5]
	delay_line->max_delay = max_delay;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
	delay_line->buf_size = max_delay > block_size ? max_delay : max_delay + block_size;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	dc03      	bgt.n	8003244 <delayline_init+0x84>
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	e000      	b.n	8003246 <delayline_init+0x86>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	60d3      	str	r3, [r2, #12]
	delay_line->head_index = 0;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
	delay_line->buffer = malloc(delay_line->buf_size * sizeof(float32_t));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f013 f8fa 	bl	8016450 <malloc>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	615a      	str	r2, [r3, #20]

	if (!delay_line->buffer)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <delayline_init+0xb2>
	{
		return -ENOMEM;
 800326c:	f06f 0301 	mvn.w	r3, #1
 8003270:	e067      	b.n	8003342 <delayline_init+0x182>
	}

	// There are num_taps * 2 + 1 parameters since the first num_taps parameters
	// correspond to tap delay indexes, then after that there are num_taps parameters
	// which correspond to tap coeffs and finally the last parameter is the feedback volume
	delay_line->params = malloc((delay_line->num_params) * sizeof(struct Parameter));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	795b      	ldrb	r3, [r3, #5]
 8003276:	461a      	mov	r2, r3
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4618      	mov	r0, r3
 8003282:	f013 f8e5 	bl	8016450 <malloc>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < num_taps; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
 8003292:	e033      	b.n	80032fc <delayline_init+0x13c>
	{
		// Tap delays
		parameter_init(&delay_line->params[i], i, "Tap Delay", PARAM_TYPE_DELAY, 0.f, (float32_t) max_delay, 0.f);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	7dfa      	ldrb	r2, [r7, #23]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	18c8      	adds	r0, r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	7df9      	ldrb	r1, [r7, #23]
 80032b0:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800334c <delayline_init+0x18c>
 80032b4:	eef0 0a67 	vmov.f32	s1, s15
 80032b8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800334c <delayline_init+0x18c>
 80032bc:	2302      	movs	r3, #2
 80032be:	4a24      	ldr	r2, [pc, #144]	; (8003350 <delayline_init+0x190>)
 80032c0:	f001 fc5a 	bl	8004b78 <parameter_init>
		parameter_init(&delay_line->params[i + num_taps], i + num_taps, "Tap Coeff", PARAM_TYPE_COEFF, 0.f, 1.f, 0.f);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	7df9      	ldrb	r1, [r7, #23]
 80032ca:	7afb      	ldrb	r3, [r7, #11]
 80032cc:	440b      	add	r3, r1
 80032ce:	4619      	mov	r1, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	18d0      	adds	r0, r2, r3
 80032da:	7dfa      	ldrb	r2, [r7, #23]
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	4413      	add	r3, r2
 80032e0:	b2d9      	uxtb	r1, r3
 80032e2:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800334c <delayline_init+0x18c>
 80032e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80032ea:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800334c <delayline_init+0x18c>
 80032ee:	2300      	movs	r3, #0
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <delayline_init+0x194>)
 80032f2:	f001 fc41 	bl	8004b78 <parameter_init>
	for (uint8_t i = 0; i < num_taps; i++)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	3301      	adds	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
 80032fc:	7dfa      	ldrb	r2, [r7, #23]
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	429a      	cmp	r2, r3
 8003302:	d3c7      	bcc.n	8003294 <delayline_init+0xd4>
	}
	parameter_init(&delay_line->params[2 * num_taps], 2 * num_taps, "Fdb Coeff", PARAM_TYPE_COEFF, 0.f, 1.f, 0.f);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	7afa      	ldrb	r2, [r7, #11]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	18c8      	adds	r0, r1, r3
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	b2d9      	uxtb	r1, r3
 800331a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800334c <delayline_init+0x18c>
 800331e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003322:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800334c <delayline_init+0x18c>
 8003326:	2300      	movs	r3, #0
 8003328:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <delayline_init+0x198>)
 800332a:	f001 fc25 	bl	8004b78 <parameter_init>

	memset(delay_line->buffer, 0, sizeof(float32_t) * delay_line->buf_size);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6958      	ldr	r0, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	461a      	mov	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f014 fd3f 	bl	8017dbe <memset>

	return EOK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00000000 	.word	0x00000000
 8003350:	0801c478 	.word	0x0801c478
 8003354:	0801c484 	.word	0x0801c484
 8003358:	0801c490 	.word	0x0801c490

0800335c <delayline_destroy>:

int8_t delayline_destroy(struct DelayLine* delay_line)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	free(delay_line->params);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f013 f879 	bl	8016460 <free>
	free(delay_line->buffer);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4618      	mov	r0, r3
 8003374:	f013 f874 	bl	8016460 <free>
	free(delay_line);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f013 f871 	bl	8016460 <free>
}
 800337e:	bf00      	nop
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <delayline_set_param>:

int8_t delayline_set_param(struct DelayLine* delay_line, uint32_t index, float32_t value)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	ed87 0a01 	vstr	s0, [r7, #4]
	if (index >= delay_line->num_params)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	795b      	ldrb	r3, [r3, #5]
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d302      	bcc.n	80033a8 <delayline_set_param+0x20>
		return -EOOB;
 80033a2:	f06f 0303 	mvn.w	r3, #3
 80033a6:	e00d      	b.n	80033c4 <delayline_set_param+0x3c>

	return parameter_set(&delay_line->params[index], value);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 fc04 	bl	8004bca <parameter_set>
 80033c2:	4603      	mov	r3, r0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <delayline_get_param_str>:

char* delayline_get_param_str(struct DelayLine* delay_line, uint32_t index)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
	if (index >= delay_line->num_params)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	461a      	mov	r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d301      	bcc.n	80033e6 <delayline_get_param_str+0x1a>
		return NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e00b      	b.n	80033fe <delayline_get_param_str+0x32>

	return parameter_tostr(&delay_line->params[index]);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fc18 	bl	8004c2c <parameter_tostr>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <delayline_get_num_params>:

uint8_t delayline_get_num_params(struct DelayLine* delay_line)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	return delay_line->num_params;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	795b      	ldrb	r3, [r3, #5]
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <delayline_process>:

int8_t delayline_process(struct DelayLine* delay_line, float32_t* buf, int32_t block_size)
{
 800341e:	b480      	push	{r7}
 8003420:	b08d      	sub	sp, #52	; 0x34
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
	int32_t fb_index = -1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (delay_line->max_delay < delay_line->buf_size)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	da0e      	bge.n	800345a <delayline_process+0x3c>
	{
		fb_index = delay_line->head_index - delay_line->max_delay;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (fb_index < 0)
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	2b00      	cmp	r3, #0
 800344c:	da08      	bge.n	8003460 <delayline_process+0x42>
			fb_index += delay_line->buf_size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003454:	4413      	add	r3, r2
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003458:	e002      	b.n	8003460 <delayline_process+0x42>
	}
	else
		fb_index = delay_line->head_index;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c

	float32_t fb_coeff = delay_line->params[delay_line->fb_coeff_base].value;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	7a1b      	ldrb	r3, [r3, #8]
 8003468:	4619      	mov	r1, r3
 800346a:	460b      	mov	r3, r1
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
	for (int32_t i = 0; i < block_size; i++)
 8003478:	2300      	movs	r3, #0
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
 800347c:	e039      	b.n	80034f2 <delayline_process+0xd4>
	{
		delay_line->buffer[delay_line->head_index++] = buf[i] + delay_line->buffer[fb_index++] * fb_coeff;
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	ed93 7a00 	vldr	s14, [r3]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	edd3 6a00 	vldr	s13, [r3]
 800349c:	edd7 7a06 	vldr	s15, [r7, #24]
 80034a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	1c58      	adds	r0, r3, #1
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	6188      	str	r0, [r1, #24]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ba:	edc3 7a00 	vstr	s15, [r3]
		buf[i] = 0.f;
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

		if (delay_line->head_index == delay_line->buf_size)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d102      	bne.n	80034de <delayline_process+0xc0>
			delay_line->head_index = 0;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	619a      	str	r2, [r3, #24]
		if (fb_index == delay_line->buf_size)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d101      	bne.n	80034ec <delayline_process+0xce>
			fb_index = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int32_t i = 0; i < block_size; i++)
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	3301      	adds	r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	dbc1      	blt.n	800347e <delayline_process+0x60>
	}

	for (uint8_t j = 0; j < delay_line->num_taps; j++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003500:	e05f      	b.n	80035c2 <delayline_process+0x1a4>
	{
		int32_t tap_delay_value = (int32_t) delay_line->params[j].value;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	edd3 7a02 	vldr	s15, [r3, #8]
 8003518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800351c:	ee17 3a90 	vmov	r3, s15
 8003520:	617b      	str	r3, [r7, #20]
		float32_t tap_delay_coeff = delay_line->params[delay_line->tap_coeff_base + j].value;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	79db      	ldrb	r3, [r3, #7]
 800352a:	4619      	mov	r1, r3
 800352c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003530:	440b      	add	r3, r1
 8003532:	4619      	mov	r1, r3
 8003534:	460b      	mov	r3, r1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	613b      	str	r3, [r7, #16]
		int32_t tap_index = delay_line->head_index - block_size - tap_delay_value;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad2      	subs	r2, r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	623b      	str	r3, [r7, #32]
		if (tap_index < 0)
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da04      	bge.n	8003560 <delayline_process+0x142>
			tap_index += delay_line->buf_size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	623b      	str	r3, [r7, #32]

		for (int32_t i = 0; i < block_size; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	e024      	b.n	80035b0 <delayline_process+0x192>
		{
			buf[i] += delay_line->buffer[tap_index++] * tap_delay_coeff;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	6239      	str	r1, [r7, #32]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	ed93 7a00 	vldr	s14, [r3]
 8003578:	edd7 7a04 	vldr	s15, [r7, #16]
 800357c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4413      	add	r3, r2
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4413      	add	r3, r2
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	edc3 7a00 	vstr	s15, [r3]

			if (tap_index == delay_line->buf_size)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d101      	bne.n	80035aa <delayline_process+0x18c>
				tap_index = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
		for (int32_t i = 0; i < block_size; i++)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3301      	adds	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	dbd6      	blt.n	8003566 <delayline_process+0x148>
	for (uint8_t j = 0; j < delay_line->num_taps; j++)
 80035b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035bc:	3301      	adds	r3, #1
 80035be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	791b      	ldrb	r3, [r3, #4]
 80035c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d399      	bcc.n	8003502 <delayline_process+0xe4>
		}
	}

	return EOK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3734      	adds	r7, #52	; 0x34
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <modulator_init>:
#include "audio_defs.h"

#include <stdlib.h>

int8_t modulator_init(struct Modulator* modulator)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	modulator->phase = 0.f;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
	modulator->params = malloc(2 * sizeof(struct Parameter));
 80035ec:	2028      	movs	r0, #40	; 0x28
 80035ee:	f012 ff2f 	bl	8016450 <malloc>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
	parameter_init(&modulator->params[0], 0, "Frequency", PARAM_TYPE_FREQ, 0.f, 20000.f, 0.f);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8003644 <modulator_init+0x68>
 8003602:	eddf 0a11 	vldr	s1, [pc, #68]	; 8003648 <modulator_init+0x6c>
 8003606:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003644 <modulator_init+0x68>
 800360a:	2301      	movs	r3, #1
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <modulator_init+0x70>)
 800360e:	2100      	movs	r1, #0
 8003610:	f001 fab2 	bl	8004b78 <parameter_init>
	parameter_init(&modulator->params[1], 1, "Modulation Index", PARAM_TYPE_COEFF, 0.f, 1.f, 0.f);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f103 0014 	add.w	r0, r3, #20
 800361c:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8003644 <modulator_init+0x68>
 8003620:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003624:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003644 <modulator_init+0x68>
 8003628:	2300      	movs	r3, #0
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <modulator_init+0x74>)
 800362c:	2101      	movs	r1, #1
 800362e:	f001 faa3 	bl	8004b78 <parameter_init>
	modulator->num_params = 2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	711a      	strb	r2, [r3, #4]

	return EOK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00000000 	.word	0x00000000
 8003648:	469c4000 	.word	0x469c4000
 800364c:	0801c49c 	.word	0x0801c49c
 8003650:	0801c4a8 	.word	0x0801c4a8

08003654 <modulator_destroy>:

int8_t modulator_destroy(struct Modulator* modulator)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	free(modulator->params);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f012 fefd 	bl	8016460 <free>
	free(modulator);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f012 fefa 	bl	8016460 <free>
	return EOK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <modulator_set_param>:

int8_t modulator_set_param(struct Modulator* modulator, uint32_t index, float32_t value)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	ed87 0a01 	vstr	s0, [r7, #4]
	if (!modulator)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <modulator_set_param+0x1a>
		return -EINVAL;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e016      	b.n	80036be <modulator_set_param+0x48>

	if (index > modulator->num_params)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	791b      	ldrb	r3, [r3, #4]
 8003694:	461a      	mov	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4293      	cmp	r3, r2
 800369a:	d902      	bls.n	80036a2 <modulator_set_param+0x2c>
		return -EOOB;
 800369c:	f06f 0303 	mvn.w	r3, #3
 80036a0:	e00d      	b.n	80036be <modulator_set_param+0x48>

	return parameter_set(&modulator->params[index], value);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fa87 	bl	8004bca <parameter_set>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <modulator_get_param_str>:

char* modulator_get_param_str(struct Modulator* modulator, uint32_t index)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	if (!modulator)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <modulator_get_param_str+0x16>
		return -EINVAL;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e014      	b.n	8003706 <modulator_get_param_str+0x40>

	if (index > modulator->num_params)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	791b      	ldrb	r3, [r3, #4]
 80036e0:	461a      	mov	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d902      	bls.n	80036ee <modulator_get_param_str+0x28>
		return -EOOB;
 80036e8:	f06f 0303 	mvn.w	r3, #3
 80036ec:	e00b      	b.n	8003706 <modulator_get_param_str+0x40>

	return parameter_tostr(&modulator->params[index]);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 fa94 	bl	8004c2c <parameter_tostr>
 8003704:	4603      	mov	r3, r0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <modulator_get_num_params>:

uint8_t modulator_get_num_params(struct Modulator* modulator)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
	return modulator->num_params;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	791b      	ldrb	r3, [r3, #4]
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <modulator_process>:

int8_t modulator_process(struct Modulator* modulator, float32_t* buf, int32_t block_size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
	float32_t period_max = 6.2832;
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <modulator_process+0xc4>)
 8003736:	61bb      	str	r3, [r7, #24]
	float32_t freq = modulator->params[0].value;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	617b      	str	r3, [r7, #20]
	float32_t mod_index = modulator->params[1].value;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < block_size; i++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e043      	b.n	80037d8 <modulator_process+0xb0>
	{
		buf[i] *= arm_sin_f32(modulator->phase) * mod_index;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	edd3 7a02 	vldr	s15, [r3, #8]
 8003756:	eeb0 0a67 	vmov.f32	s0, s15
 800375a:	f012 fe2b 	bl	80163b4 <arm_sin_f32>
 800375e:	eeb0 7a40 	vmov.f32	s14, s0
 8003762:	edd7 7a04 	vldr	s15, [r7, #16]
 8003766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc3 7a00 	vstr	s15, [r3]

		modulator->phase += 2.f * 3.1416f * freq / (float32_t) SAMPLE_RATE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	ed93 7a02 	vldr	s14, [r3, #8]
 800378c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003790:	eddf 6a17 	vldr	s13, [pc, #92]	; 80037f0 <modulator_process+0xc8>
 8003794:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003798:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80037f4 <modulator_process+0xcc>
 800379c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80037a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	edc3 7a02 	vstr	s15, [r3, #8]
		if (modulator->phase >= period_max)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80037b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80037b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d809      	bhi.n	80037d2 <modulator_process+0xaa>
			modulator->phase -= period_max;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80037c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80037c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	edc3 7a02 	vstr	s15, [r3, #8]
	for (int32_t i = 0; i < block_size; i++)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3301      	adds	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbb7      	blt.n	8003750 <modulator_process+0x28>
	}
	return EOK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40c90ff9 	.word	0x40c90ff9
 80037f0:	40c90ff9 	.word	0x40c90ff9
 80037f4:	473b8000 	.word	0x473b8000

080037f8 <cs4272_dma_half_cmpl_callback>:
static int32_t* inactive_rx_buf = rx_buf;

static uint8_t is_running = 0;

void cs4272_dma_half_cmpl_callback()
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <cs4272_dma_half_cmpl_callback+0x1c>)
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[0];
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <cs4272_dma_half_cmpl_callback+0x20>)
 8003804:	4a05      	ldr	r2, [pc, #20]	; (800381c <cs4272_dma_half_cmpl_callback+0x24>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	24000bf8 	.word	0x24000bf8
 8003818:	24000058 	.word	0x24000058
 800381c:	24000ffc 	.word	0x24000ffc

08003820 <cs4272_dma_cmpl_callback>:

void cs4272_dma_cmpl_callback()
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <cs4272_dma_cmpl_callback+0x1c>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[RXTX_BUFFER_SIZE / 2];
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <cs4272_dma_cmpl_callback+0x20>)
 800382c:	4a05      	ldr	r2, [pc, #20]	; (8003844 <cs4272_dma_cmpl_callback+0x24>)
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	24000bf8 	.word	0x24000bf8
 8003840:	24000058 	.word	0x24000058
 8003844:	240013fc 	.word	0x240013fc

08003848 <cs4272_start>:

int8_t cs4272_start(struct Interface* intf)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
	if (is_running)
 8003850:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <cs4272_start+0x174>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <cs4272_start+0x16>
		return -EINVAL;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	e0aa      	b.n	80039b4 <cs4272_start+0x16c>

	if (!intf->private_data)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <cs4272_start+0x24>
		return -EINVAL;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e0a3      	b.n	80039b4 <cs4272_start+0x16c>

	struct CS4272_PrivateData* pd = intf->private_data;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]

	if (!pd->i2c_hndl || !pd->i2s_hndl)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <cs4272_start+0x3a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <cs4272_start+0x40>
		return -EINVAL;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e095      	b.n	80039b4 <cs4272_start+0x16c>

	memset(tx_buf, 0, sizeof(uint32_t) * RXTX_BUFFER_SIZE);
 8003888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388c:	2100      	movs	r1, #0
 800388e:	484c      	ldr	r0, [pc, #304]	; (80039c0 <cs4272_start+0x178>)
 8003890:	f014 fa95 	bl	8017dbe <memset>
	memset(rx_buf, 0, sizeof(uint32_t) * RXTX_BUFFER_SIZE);
 8003894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003898:	2100      	movs	r1, #0
 800389a:	484a      	ldr	r0, [pc, #296]	; (80039c4 <cs4272_start+0x17c>)
 800389c:	f014 fa8f 	bl	8017dbe <memset>

	HAL_I2S_RegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID, cs4272_dma_half_cmpl_callback);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <cs4272_start+0x180>)
 80038a6:	2105      	movs	r1, #5
 80038a8:	4618      	mov	r0, r3
 80038aa:	f006 f91d 	bl	8009ae8 <HAL_I2S_RegisterCallback>
	HAL_I2S_RegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_COMPLETE_CB_ID, cs4272_dma_cmpl_callback);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a46      	ldr	r2, [pc, #280]	; (80039cc <cs4272_start+0x184>)
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f006 f916 	bl	8009ae8 <HAL_I2S_RegisterCallback>

	HAL_I2SEx_TransmitReceive_DMA(pd->i2s_hndl, tx_buf, rx_buf, RXTX_BUFFER_SIZE);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6858      	ldr	r0, [r3, #4]
 80038c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <cs4272_start+0x17c>)
 80038c6:	493e      	ldr	r1, [pc, #248]	; (80039c0 <cs4272_start+0x178>)
 80038c8:	f006 fa2c 	bl	8009d24 <HAL_I2SEx_TransmitReceive_DMA>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 80038cc:	2201      	movs	r2, #1
 80038ce:	2101      	movs	r1, #1
 80038d0:	483f      	ldr	r0, [pc, #252]	; (80039d0 <cs4272_start+0x188>)
 80038d2:	f005 fb0d 	bl	8008ef0 <HAL_GPIO_WritePin>

	uint16_t addr = 0x0022;
 80038d6:	2322      	movs	r3, #34	; 0x22
 80038d8:	817b      	strh	r3, [r7, #10]
	uint8_t wr_data[2];
	// Configure CODEC
	wr_data[0] = 0x07;
 80038da:	2307      	movs	r3, #7
 80038dc:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x02;
 80038de:	2302      	movs	r3, #2
 80038e0:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f107 0208 	add.w	r2, r7, #8
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2302      	movs	r3, #2
 80038f4:	f005 fbe0 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x01;
 80038f8:	2301      	movs	r3, #1
 80038fa:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x01;
 80038fc:	2301      	movs	r3, #1
 80038fe:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	f107 0208 	add.w	r2, r7, #8
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	f242 7310 	movw	r3, #10000	; 0x2710
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2302      	movs	r3, #2
 8003912:	f005 fbd1 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x02;
 8003916:	2302      	movs	r3, #2
 8003918:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 800391a:	2300      	movs	r3, #0
 800391c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	f107 0208 	add.w	r2, r7, #8
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	f242 7310 	movw	r3, #10000	; 0x2710
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2302      	movs	r3, #2
 8003930:	f005 fbc2 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x03;
 8003934:	2303      	movs	r3, #3
 8003936:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x29;
 8003938:	2329      	movs	r3, #41	; 0x29
 800393a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	f107 0208 	add.w	r2, r7, #8
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	f242 7310 	movw	r3, #10000	; 0x2710
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2302      	movs	r3, #2
 800394e:	f005 fbb3 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x04;
 8003952:	2304      	movs	r3, #4
 8003954:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 8003956:	2300      	movs	r3, #0
 8003958:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	f107 0208 	add.w	r2, r7, #8
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	f242 7310 	movw	r3, #10000	; 0x2710
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2302      	movs	r3, #2
 800396c:	f005 fba4 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x05;
 8003970:	2305      	movs	r3, #5
 8003972:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 8003974:	2300      	movs	r3, #0
 8003976:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	f107 0208 	add.w	r2, r7, #8
 8003980:	8979      	ldrh	r1, [r7, #10]
 8003982:	f242 7310 	movw	r3, #10000	; 0x2710
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2302      	movs	r3, #2
 800398a:	f005 fb95 	bl	80090b8 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x06;
 800398e:	2306      	movs	r3, #6
 8003990:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f107 0208 	add.w	r2, r7, #8
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2302      	movs	r3, #2
 80039a8:	f005 fb86 	bl	80090b8 <HAL_I2C_Master_Transmit>

	is_running = 1;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <cs4272_start+0x174>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	701a      	strb	r2, [r3, #0]

	return EOK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	24001ffc 	.word	0x24001ffc
 80039c0:	24000ffc 	.word	0x24000ffc
 80039c4:	240017fc 	.word	0x240017fc
 80039c8:	080037f9 	.word	0x080037f9
 80039cc:	08003821 	.word	0x08003821
 80039d0:	58021000 	.word	0x58021000

080039d4 <cs4272_stop>:

int8_t cs4272_stop(struct Interface* intf)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	if (!is_running)
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <cs4272_stop+0x68>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <cs4272_stop+0x16>
		return -EINVAL;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	e024      	b.n	8003a34 <cs4272_stop+0x60>

	struct CS4272_PrivateData* pd = intf->private_data;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60fb      	str	r3, [r7, #12]

	if (!pd->i2c_hndl || !pd->i2s_hndl)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <cs4272_stop+0x2c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <cs4272_stop+0x32>
		return -EINVAL;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	e016      	b.n	8003a34 <cs4272_stop+0x60>

	HAL_I2S_DMAStop(pd->i2s_hndl);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f006 fa6a 	bl	8009ee4 <HAL_I2S_DMAStop>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	480a      	ldr	r0, [pc, #40]	; (8003a40 <cs4272_stop+0x6c>)
 8003a16:	f005 fa6b 	bl	8008ef0 <HAL_GPIO_WritePin>
	HAL_I2S_UnRegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2105      	movs	r1, #5
 8003a20:	4618      	mov	r0, r3
 8003a22:	f006 f8ed 	bl	8009c00 <HAL_I2S_UnRegisterCallback>
	HAL_I2S_UnRegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_COMPLETE_CB_ID);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f006 f8e7 	bl	8009c00 <HAL_I2S_UnRegisterCallback>

	return EOK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	24001ffc 	.word	0x24001ffc
 8003a40:	58021000 	.word	0x58021000

08003a44 <cs4272_read>:

int8_t cs4272_read(struct Interface* intf, void* buf, size_t len)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	return EOK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <cs4272_write>:

int8_t cs4272_write(struct Interface* intf, void* buf, size_t len)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	if (!is_running)
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <cs4272_write+0x10c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <cs4272_write+0x1a>
		return -EINVAL;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	e072      	b.n	8003b60 <cs4272_write+0x100>
	if (len < SAMPLES_PER_BLOCK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7e:	d801      	bhi.n	8003a84 <cs4272_write+0x24>
		return -ERBUFUDF;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e06d      	b.n	8003b60 <cs4272_write+0x100>
	if (len > SAMPLES_PER_BLOCK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d901      	bls.n	8003a8e <cs4272_write+0x2e>
		return -ERBUFOVF;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e068      	b.n	8003b60 <cs4272_write+0x100>

	float32_t* chl_buf = &((float32_t*)buf)[0];
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	617b      	str	r3, [r7, #20]
	float32_t* chr_buf = &((float32_t*)buf)[SAMPLES_PER_BLOCK];
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a98:	613b      	str	r3, [r7, #16]
	int32_t ch_buf_index = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
	int32_t tx_buf_index = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]

	while (tx_buf_index < RXTX_BUFFER_SIZE >> 1)
 8003aa2:	e05a      	b.n	8003b5a <cs4272_write+0xfa>
	{
		inactive_tx_buf[tx_buf_index] = (int32_t)((chl_buf[ch_buf_index]) * 8388607);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4413      	add	r3, r2
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003b70 <cs4272_write+0x110>
 8003ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <cs4272_write+0x114>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	ee17 2a90 	vmov	r2, s15
 8003aca:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 1] = (int32_t)((chr_buf[ch_buf_index]) * 8388607);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003b70 <cs4272_write+0x110>
 8003adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <cs4272_write+0x114>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003af0:	ee17 2a90 	vmov	r2, s15
 8003af4:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 2] = (int32_t)((chl_buf[ch_buf_index + 1]) * 8388607);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003b70 <cs4272_write+0x110>
 8003b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <cs4272_write+0x114>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3302      	adds	r3, #2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b1c:	ee17 2a90 	vmov	r2, s15
 8003b20:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 3] = (int32_t)((chr_buf[ch_buf_index + 1]) * 8388607);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003b70 <cs4272_write+0x110>
 8003b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <cs4272_write+0x114>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	3303      	adds	r3, #3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b48:	ee17 2a90 	vmov	r2, s15
 8003b4c:	601a      	str	r2, [r3, #0]

		tx_buf_index += 4;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	3304      	adds	r3, #4
 8003b52:	61bb      	str	r3, [r7, #24]
		ch_buf_index += 2;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3302      	adds	r3, #2
 8003b58:	61fb      	str	r3, [r7, #28]
	while (tx_buf_index < RXTX_BUFFER_SIZE >> 1)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	dda1      	ble.n	8003aa4 <cs4272_write+0x44>
	}
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3724      	adds	r7, #36	; 0x24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	24001ffc 	.word	0x24001ffc
 8003b70:	4afffffe 	.word	0x4afffffe
 8003b74:	24000058 	.word	0x24000058

08003b78 <cs4272_ioctl>:

int8_t cs4272_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	if (!is_running)
 8003b82:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <cs4272_ioctl+0x28>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <cs4272_ioctl+0x18>
		return -EINVAL;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	e000      	b.n	8003b92 <cs4272_ioctl+0x1a>
	return 0;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	24001ffc 	.word	0x24001ffc

08003ba4 <intper_dma_half_cmpl_callback>:

static uint16_t tx_buf[BUFFER_SIZE];
static uint16_t* inactive_tx_buf;

void intper_dma_half_cmpl_callback()
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <intper_dma_half_cmpl_callback+0x1c>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[0];
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <intper_dma_half_cmpl_callback+0x20>)
 8003bb0:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <intper_dma_half_cmpl_callback+0x24>)
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	24000bf8 	.word	0x24000bf8
 8003bc4:	24002200 	.word	0x24002200
 8003bc8:	24002000 	.word	0x24002000

08003bcc <intper_dma_cmpl_callback>:

void intper_dma_cmpl_callback()
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <intper_dma_cmpl_callback+0x1c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[BUFFER_SIZE / 2];
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <intper_dma_cmpl_callback+0x20>)
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <intper_dma_cmpl_callback+0x24>)
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	24000bf8 	.word	0x24000bf8
 8003bec:	24002200 	.word	0x24002200
 8003bf0:	24002100 	.word	0x24002100

08003bf4 <intper_start>:

int32_t intper_start(struct Interface* intf)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
	if (is_running)
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <intper_start+0x9c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <intper_start+0x16>
		return -EINVAL;
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	e03d      	b.n	8003c86 <intper_start+0x92>

	if (!intf->private_data)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <intper_start+0x24>
		return -EINVAL;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
 8003c16:	e036      	b.n	8003c86 <intper_start+0x92>
	struct IntPerDrvPrivateData* private_data = intf->private_data;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60fb      	str	r3, [r7, #12]

	if (!private_data->hdac || !private_data->htim)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <intper_start+0x3a>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <intper_start+0x40>
		return -EINVAL;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	e028      	b.n	8003c86 <intper_start+0x92>

	memset(tx_buf, 0, sizeof(uint16_t) * BUFFER_SIZE);
 8003c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4816      	ldr	r0, [pc, #88]	; (8003c94 <intper_start+0xa0>)
 8003c3c:	f014 f8bf 	bl	8017dbe <memset>
	inactive_tx_buf = &tx_buf[SAMPLES_PER_BLOCK];
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <intper_start+0xa4>)
 8003c42:	4a16      	ldr	r2, [pc, #88]	; (8003c9c <intper_start+0xa8>)
 8003c44:	601a      	str	r2, [r3, #0]

	HAL_DAC_RegisterCallback(private_data->hdac, HAL_DAC_CH1_HALF_COMPLETE_CB_ID, intper_dma_half_cmpl_callback);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <intper_start+0xac>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fd74 	bl	800573c <HAL_DAC_RegisterCallback>
	HAL_DAC_RegisterCallback(private_data->hdac, HAL_DAC_CH1_COMPLETE_CB_ID, intper_dma_cmpl_callback);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <intper_start+0xb0>)
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 fd6d 	bl	800573c <HAL_DAC_RegisterCallback>

	HAL_DAC_Start_DMA(private_data->hdac,
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <intper_start+0xa0>)
 8003c70:	2100      	movs	r1, #0
 8003c72:	f001 fa93 	bl	800519c <HAL_DAC_Start_DMA>
		DAC_CHANNEL_1,
		tx_buf,
		SAMPLES_PER_BLOCK * 2, DAC_ALIGN_12B_R);

	HAL_TIM_Base_Start(private_data->htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f00b fb6c 	bl	800f358 <HAL_TIM_Base_Start>
	is_running = 1;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <intper_start+0x9c>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	24001ffd 	.word	0x24001ffd
 8003c94:	24002000 	.word	0x24002000
 8003c98:	24002200 	.word	0x24002200
 8003c9c:	24002100 	.word	0x24002100
 8003ca0:	08003ba5 	.word	0x08003ba5
 8003ca4:	08003bcd 	.word	0x08003bcd

08003ca8 <intper_stop>:

int8_t intper_stop(struct Interface* intf)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	if (!intf->private_data)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <intper_stop+0x16>
		return -EINVAL;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	e01b      	b.n	8003cf6 <intper_stop+0x4e>
	struct IntPerDrvPrivateData* private_data = intf->private_data;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60fb      	str	r3, [r7, #12]

	if (!private_data->hdac || !private_data->htim)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <intper_stop+0x2c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <intper_stop+0x32>
		return -EINVAL;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	e00d      	b.n	8003cf6 <intper_stop+0x4e>

	HAL_DAC_Stop_DMA(private_data->hdac, DAC_CHANNEL_1);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 fb1b 	bl	800531c <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(private_data->htim);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f00b fba4 	bl	800f438 <HAL_TIM_Base_Stop>

	is_running = 0;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <intper_stop+0x58>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	24001ffd 	.word	0x24001ffd

08003d04 <intper_read>:

int32_t intper_read(struct Interface* intf, void* buf, size_t len)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <intper_write>:

int32_t intper_write(struct Interface* intf, void* buf, size_t len)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
	if (!is_running)
 8003d2c:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <intper_write+0x8c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <intper_write+0x1a>
		return -EINVAL;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
 8003d38:	e031      	b.n	8003d9e <intper_write+0x7e>
	if (len < SAMPLES_PER_BLOCK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d3e:	d802      	bhi.n	8003d46 <intper_write+0x26>
		return -ERBUFUDF;
 8003d40:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8003d44:	e02b      	b.n	8003d9e <intper_write+0x7e>
	if (len > SAMPLES_PER_BLOCK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d902      	bls.n	8003d52 <intper_write+0x32>
		return -ERBUFOVF;
 8003d4c:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 8003d50:	e025      	b.n	8003d9e <intper_write+0x7e>
	float* buf_float = (float*) buf;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < SAMPLES_PER_BLOCK; i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e01c      	b.n	8003d96 <intper_write+0x76>
	{
		uint16_t sample = (uint16_t)((buf_float[i] + 1.f) * 2048.f);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4413      	add	r3, r2
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d70:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003db0 <intper_write+0x90>
 8003d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7c:	ee17 3a90 	vmov	r3, s15
 8003d80:	82fb      	strh	r3, [r7, #22]
		inactive_tx_buf[i] = (uint16_t) sample;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <intper_write+0x94>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	8afa      	ldrh	r2, [r7, #22]
 8003d8e:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < SAMPLES_PER_BLOCK; i++)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b7f      	cmp	r3, #127	; 0x7f
 8003d9a:	d9df      	bls.n	8003d5c <intper_write+0x3c>
	}
	return 0;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	24001ffd 	.word	0x24001ffd
 8003db0:	45000000 	.word	0x45000000
 8003db4:	24002200 	.word	0x24002200

08003db8 <intper_ioctl>:

int32_t intper_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	if (!is_running)
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <intper_ioctl+0x28>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <intper_ioctl+0x18>
		return -EINVAL;
 8003dca:	f04f 33ff 	mov.w	r3, #4294967295
 8003dce:	e000      	b.n	8003dd2 <intper_ioctl+0x1a>
	return 0;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	24001ffd 	.word	0x24001ffd

08003de4 <uart_start>:
static uint8_t recv;

static uint8_t uart_lock;

int8_t uart_start(struct Interface* intf)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	if (is_init)
 8003dec:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <uart_start+0x68>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <uart_start+0x16>
		return -EINVAL;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	e024      	b.n	8003e44 <uart_start+0x60>

	if (intf->private_data == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <uart_start+0x24>
		return -EINVAL;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
 8003e06:	e01d      	b.n	8003e44 <uart_start+0x60>

	huart = intf->private_data;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <uart_start+0x6c>)
 8003e0e:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &recv, 1);
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <uart_start+0x6c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	490f      	ldr	r1, [pc, #60]	; (8003e54 <uart_start+0x70>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00c f833 	bl	800fe84 <HAL_UART_Receive_IT>

	rx_head = 0;
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <uart_start+0x74>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
	rx_tail = 0;
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <uart_start+0x78>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
	rx_used = 0;
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <uart_start+0x7c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
	recv = 0;
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <uart_start+0x70>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

	uart_lock = 0;
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <uart_start+0x80>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]

	is_init = 1;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <uart_start+0x68>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
	return 0;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	24002208 	.word	0x24002208
 8003e50:	24002204 	.word	0x24002204
 8003e54:	24002258 	.word	0x24002258
 8003e58:	2400224c 	.word	0x2400224c
 8003e5c:	24002250 	.word	0x24002250
 8003e60:	24002254 	.word	0x24002254
 8003e64:	24002259 	.word	0x24002259

08003e68 <uart_stop>:

int8_t uart_stop(struct Interface* intf)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <uart_read>:

int8_t uart_read(struct Interface* intf, void* buf, size_t len)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
	size_t to_copy = rx_used < len ? rx_used : len;
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <uart_read+0x70>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4293      	cmp	r3, r2
 8003e94:	bf28      	it	cs
 8003e96:	4613      	movcs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
	uint8_t* char_buf = (uint8_t*) buf;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < to_copy; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e019      	b.n	8003ed8 <uart_read+0x58>
	{
		char_buf[i] = rx_buf[rx_head++];
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <uart_read+0x74>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	4912      	ldr	r1, [pc, #72]	; (8003ef4 <uart_read+0x74>)
 8003eac:	600a      	str	r2, [r1, #0]
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	4910      	ldr	r1, [pc, #64]	; (8003ef8 <uart_read+0x78>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	7013      	strb	r3, [r2, #0]

		if (rx_head == UART_RECV_BUF_SIZE)
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <uart_read+0x74>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d102      	bne.n	8003ec8 <uart_read+0x48>
			rx_head = 0;
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <uart_read+0x74>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
		rx_used--;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <uart_read+0x70>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <uart_read+0x70>)
 8003ed0:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < to_copy; i++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3e1      	bcc.n	8003ea4 <uart_read+0x24>
	}
	return to_copy;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	b25b      	sxtb	r3, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3724      	adds	r7, #36	; 0x24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	24002254 	.word	0x24002254
 8003ef4:	2400224c 	.word	0x2400224c
 8003ef8:	2400220c 	.word	0x2400220c

08003efc <uart_write>:

int8_t uart_write(struct Interface* intf, void* buf, size_t len)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(intf->private_data, buf, len, 1000000);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6898      	ldr	r0, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <uart_write+0x28>)
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	f00b ff28 	bl	800fd68 <HAL_UART_Transmit>
	return len;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	b25b      	sxtb	r3, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	000f4240 	.word	0x000f4240

08003f28 <uart_ioctl>:

int8_t uart_ioctl(struct Interface* intf, uint32_t ctlId)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]

}
 8003f32:	bf00      	nop
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	if (rx_used < UART_RECV_BUF_SIZE)
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_UART_RxCpltCallback+0x4c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b3f      	cmp	r3, #63	; 0x3f
 8003f62:	d814      	bhi.n	8003f8e <HAL_UART_RxCpltCallback+0x3a>
	{
		rx_buf[rx_tail++] = recv;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_UART_RxCpltCallback+0x50>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_UART_RxCpltCallback+0x50>)
 8003f6c:	600a      	str	r2, [r1, #0]
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <HAL_UART_RxCpltCallback+0x54>)
 8003f70:	7811      	ldrb	r1, [r2, #0]
 8003f72:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <HAL_UART_RxCpltCallback+0x58>)
 8003f74:	54d1      	strb	r1, [r2, r3]

		if (rx_tail == UART_RECV_BUF_SIZE)
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_UART_RxCpltCallback+0x50>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d102      	bne.n	8003f84 <HAL_UART_RxCpltCallback+0x30>
			rx_tail = 0;
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_UART_RxCpltCallback+0x50>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
		rx_used++;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_UART_RxCpltCallback+0x4c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <HAL_UART_RxCpltCallback+0x4c>)
 8003f8c:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(huart, &recv, 1);
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4905      	ldr	r1, [pc, #20]	; (8003fa8 <HAL_UART_RxCpltCallback+0x54>)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f00b ff76 	bl	800fe84 <HAL_UART_Receive_IT>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	24002254 	.word	0x24002254
 8003fa4:	24002250 	.word	0x24002250
 8003fa8:	24002258 	.word	0x24002258
 8003fac:	2400220c 	.word	0x2400220c

08003fb0 <usb_start>:
static int32_t rx_head_block;
static int32_t rx_tail_block;
static int32_t rx_used_blocks;

int8_t usb_start(struct Interface* intf)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	bf00      	nop
	__disable_irq();
	if (is_init)
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <usb_start+0x50>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <usb_start+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc4:	b662      	cpsie	i
}
 8003fc6:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	e011      	b.n	8003ff2 <usb_start+0x42>
	}

	rx_head_block = 0;
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <usb_start+0x54>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
	rx_tail_block = 0;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <usb_start+0x58>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
	rx_used_blocks = 0;
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <usb_start+0x5c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
	rx_accumulator_used = 0;
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <usb_start+0x60>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

	is_init = 1;
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <usb_start+0x50>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fec:	b662      	cpsie	i
}
 8003fee:	bf00      	nop

	__enable_irq();
	return EOK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2400225a 	.word	0x2400225a
 8004004:	24006460 	.word	0x24006460
 8004008:	24006464 	.word	0x24006464
 800400c:	24006468 	.word	0x24006468
 8004010:	2400245c 	.word	0x2400245c

08004014 <usb_stop>:

int8_t usb_stop(struct Interface* intf)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800401c:	b672      	cpsid	i
}
 800401e:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <usb_stop+0x30>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <usb_stop+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 8004028:	b662      	cpsie	i
}
 800402a:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	e002      	b.n	8004038 <usb_stop+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8004032:	b662      	cpsie	i
}
 8004034:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	2400225a 	.word	0x2400225a

08004048 <usb_read>:


int8_t usb_read(struct Interface* intf, void* buf, size_t len)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004054:	b672      	cpsid	i
}
 8004056:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <usb_read+0x78>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <usb_read+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8004060:	b662      	cpsie	i
}
 8004062:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e025      	b.n	80040b6 <usb_read+0x6e>
	}

	if (len != SAMPLES_PER_BLOCK * 2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d004      	beq.n	800407c <usb_read+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8004072:	b662      	cpsie	i
}
 8004074:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e01c      	b.n	80040b6 <usb_read+0x6e>
	}

	float32_t* dst_buf = buf;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	617b      	str	r3, [r7, #20]
	memcpy(dst_buf, &rx_buffer[rx_head_block * SAMPLES_PER_BLOCK], sizeof(float32_t) * len);
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <usb_read+0x7c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	01db      	lsls	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <usb_read+0x80>)
 800408a:	1899      	adds	r1, r3, r2
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	461a      	mov	r2, r3
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f013 ff3a 	bl	8017f0c <memcpy>
	{
		__enable_irq();
		return -EINVAL;
	}*/

	rx_head_block += 2;
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <usb_read+0x7c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3302      	adds	r3, #2
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <usb_read+0x7c>)
 80040a0:	6013      	str	r3, [r2, #0]
	if (rx_head_block == USB_AUDIOCLASS_RXBUF_BLOCKS)
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <usb_read+0x7c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d102      	bne.n	80040b0 <usb_read+0x68>
		rx_head_block = 0;
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <usb_read+0x7c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040b0:	b662      	cpsie	i
}
 80040b2:	bf00      	nop
	//rx_used_blocks -= 2;

	__enable_irq();
	return EOK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2400225a 	.word	0x2400225a
 80040c4:	24006460 	.word	0x24006460
 80040c8:	24002460 	.word	0x24002460

080040cc <usb_write>:

int8_t usb_write(struct Interface* intf, void* buf, size_t len)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80040d8:	b672      	cpsid	i
}
 80040da:	bf00      	nop
	__disable_irq();
	if (!is_init)
 80040dc:	4b33      	ldr	r3, [pc, #204]	; (80041ac <usb_write+0xe0>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <usb_write+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 80040e4:	b662      	cpsie	i
}
 80040e6:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e05a      	b.n	80041a4 <usb_write+0xd8>
	}

	uint8_t* buf_uint8p = buf;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61fb      	str	r3, [r7, #28]
	int32_t rx_accumulator_free = ACCUMULATOR_BUFFER_SIZE - rx_accumulator_used;
 80040f2:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <usb_write+0xe4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80040fa:	61bb      	str	r3, [r7, #24]
	int32_t rx_accumulator_leftover = len - rx_accumulator_free;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
	if (rx_accumulator_free < len)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d937      	bls.n	800417c <usb_write+0xb0>
	{
		memcpy(&rx_accumulator[rx_accumulator_used], buf_uint8p, rx_accumulator_free);
 800410c:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <usb_write+0xe4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <usb_write+0xe8>)
 8004112:	4413      	add	r3, r2
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	4618      	mov	r0, r3
 800411a:	f013 fef7 	bl	8017f0c <memcpy>
		rx_accumulator_used += rx_accumulator_free;
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <usb_write+0xe4>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	4413      	add	r3, r2
 8004126:	4a22      	ldr	r2, [pc, #136]	; (80041b0 <usb_write+0xe4>)
 8004128:	6013      	str	r3, [r2, #0]
			rx_accumulator_used = 0;
			memcpy(&rx_accumulator[0], buf_uint8p, rx_accumulator_leftover);
			__enable_irq();
			return -EINVAL;
		}*/
		encoder_decode_2ch_16b(&rx_buffer[rx_tail_block * SAMPLES_PER_BLOCK],
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <usb_write+0xec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	01db      	lsls	r3, r3, #7
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <usb_write+0xf0>)
 8004134:	1898      	adds	r0, r3, r2
							   &rx_buffer[(rx_tail_block + 1) * SAMPLES_PER_BLOCK],
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <usb_write+0xec>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	01db      	lsls	r3, r3, #7
		encoder_decode_2ch_16b(&rx_buffer[rx_tail_block * SAMPLES_PER_BLOCK],
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <usb_write+0xf0>)
 8004142:	1899      	adds	r1, r3, r2
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <usb_write+0xe8>)
 8004148:	f000 f9ce 	bl	80044e8 <encoder_decode_2ch_16b>
							   rx_accumulator,
							   SAMPLES_PER_BLOCK);
		//rx_used_blocks += 2;
		rx_tail_block += 2;
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <usb_write+0xec>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3302      	adds	r3, #2
 8004152:	4a19      	ldr	r2, [pc, #100]	; (80041b8 <usb_write+0xec>)
 8004154:	6013      	str	r3, [r2, #0]
		if (rx_tail_block == USB_AUDIOCLASS_RXBUF_BLOCKS)
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <usb_write+0xec>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d102      	bne.n	8004164 <usb_write+0x98>
			rx_tail_block = 0;
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <usb_write+0xec>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

		memcpy(&rx_accumulator[0], &buf_uint8p[rx_accumulator_free], rx_accumulator_leftover);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4619      	mov	r1, r3
 800416e:	4811      	ldr	r0, [pc, #68]	; (80041b4 <usb_write+0xe8>)
 8004170:	f013 fecc 	bl	8017f0c <memcpy>
		rx_accumulator_used = rx_accumulator_leftover;
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <usb_write+0xe4>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e010      	b.n	800419e <usb_write+0xd2>
	}
	else
	{
		memcpy(&rx_accumulator[rx_accumulator_used], buf, len);
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <usb_write+0xe4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <usb_write+0xe8>)
 8004182:	4413      	add	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	4618      	mov	r0, r3
 800418a:	f013 febf 	bl	8017f0c <memcpy>
		rx_accumulator_used += len;
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <usb_write+0xe4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	461a      	mov	r2, r3
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <usb_write+0xe4>)
 800419c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800419e:	b662      	cpsie	i
}
 80041a0:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2400225a 	.word	0x2400225a
 80041b0:	2400245c 	.word	0x2400245c
 80041b4:	2400225c 	.word	0x2400225c
 80041b8:	24006464 	.word	0x24006464
 80041bc:	24002460 	.word	0x24002460

080041c0 <usb_ioctl>:

int8_t usb_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041ca:	b672      	cpsid	i
}
 80041cc:	bf00      	nop
	__disable_irq();
	if (!is_init)
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <usb_ioctl+0x34>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d104      	bne.n	80041e0 <usb_ioctl+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 80041d6:	b662      	cpsie	i
}
 80041d8:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e002      	b.n	80041e6 <usb_ioctl+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 80041e0:	b662      	cpsie	i
}
 80041e2:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2400225a 	.word	0x2400225a

080041f8 <drvman_init>:
struct Interface* audio_device = NULL;
struct Interface* serial_device = NULL;
struct Interface* usb_device = NULL;

void drvman_init()
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
	registered_drivers = 0;
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <drvman_init+0x48>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

	for (size_t i = registered_drivers; i < MAX_DRIVERS; i++)
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <drvman_init+0x48>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	e007      	b.n	800421c <drvman_init+0x24>
		drivers[i] = NULL;
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <drvman_init+0x4c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2100      	movs	r1, #0
 8004212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = registered_drivers; i < MAX_DRIVERS; i++)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3301      	adds	r3, #1
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b07      	cmp	r3, #7
 8004220:	d9f4      	bls.n	800420c <drvman_init+0x14>

	audio_device = NULL;
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <drvman_init+0x50>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
	serial_device = NULL;
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <drvman_init+0x54>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
	usb_device = NULL;
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <drvman_init+0x58>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	2400646c 	.word	0x2400646c
 8004244:	24006470 	.word	0x24006470
 8004248:	24006490 	.word	0x24006490
 800424c:	24006494 	.word	0x24006494
 8004250:	24006498 	.word	0x24006498

08004254 <drvman_register_driver>:

void drvman_register_driver(struct Interface* driver)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b0a2      	sub	sp, #136	; 0x88
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
	char print_buf[128];
	if (!driver)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <drvman_register_driver+0x28>
	{
		sprintf(print_buf, "%s Tried to register a NULL driver", module_str);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <drvman_register_driver+0x7c>)
 8004268:	491a      	ldr	r1, [pc, #104]	; (80042d4 <drvman_register_driver+0x80>)
 800426a:	4618      	mov	r0, r3
 800426c:	f013 fd44 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe f88d 	bl	8002394 <console_println>
 800427a:	e026      	b.n	80042ca <drvman_register_driver+0x76>
		return;
	}

	if (registered_drivers < MAX_DRIVERS)
 800427c:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <drvman_register_driver+0x84>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b07      	cmp	r3, #7
 8004282:	d816      	bhi.n	80042b2 <drvman_register_driver+0x5e>
	{
		drivers[registered_drivers++] = driver;
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <drvman_register_driver+0x84>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	4913      	ldr	r1, [pc, #76]	; (80042d8 <drvman_register_driver+0x84>)
 800428c:	600a      	str	r2, [r1, #0]
 800428e:	4913      	ldr	r1, [pc, #76]	; (80042dc <drvman_register_driver+0x88>)
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		sprintf(print_buf, "%s Registered driver: %s", module_str, driver->name);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f107 0008 	add.w	r0, r7, #8
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <drvman_register_driver+0x7c>)
 80042a0:	490f      	ldr	r1, [pc, #60]	; (80042e0 <drvman_register_driver+0x8c>)
 80042a2:	f013 fd29 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe f872 	bl	8002394 <console_println>
 80042b0:	e00b      	b.n	80042ca <drvman_register_driver+0x76>
	}
	else
	{
		sprintf(print_buf, "%s No free driver slots", module_str);
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <drvman_register_driver+0x7c>)
 80042b8:	490a      	ldr	r1, [pc, #40]	; (80042e4 <drvman_register_driver+0x90>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f013 fd1c 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80042c0:	f107 0308 	add.w	r3, r7, #8
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe f865 	bl	8002394 <console_println>
	}
}
 80042ca:	3788      	adds	r7, #136	; 0x88
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	240000ac 	.word	0x240000ac
 80042d4:	0801c4bc 	.word	0x0801c4bc
 80042d8:	2400646c 	.word	0x2400646c
 80042dc:	24006470 	.word	0x24006470
 80042e0:	0801c4e0 	.word	0x0801c4e0
 80042e4:	0801c4fc 	.word	0x0801c4fc

080042e8 <drvman_set_serial_driver>:

void drvman_set_serial_driver(uint8_t driver_id)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0a2      	sub	sp, #136	; 0x88
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b07      	cmp	r3, #7
 80042f6:	d90c      	bls.n	8004312 <drvman_set_serial_driver+0x2a>
	{
		sprintf(print_buf, "%s Serial driver ID out of range", module_str);
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <drvman_set_serial_driver+0x90>)
 80042fe:	491f      	ldr	r1, [pc, #124]	; (800437c <drvman_set_serial_driver+0x94>)
 8004300:	4618      	mov	r0, r3
 8004302:	f013 fcf9 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe f842 	bl	8002394 <console_println>
		return;
 8004310:	e02e      	b.n	8004370 <drvman_set_serial_driver+0x88>
	}

	if (!drivers[driver_id])
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <drvman_set_serial_driver+0x98>)
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <drvman_set_serial_driver+0x50>
	{
		sprintf(print_buf, "%s Target serial driver is NULL", module_str);
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <drvman_set_serial_driver+0x90>)
 8004324:	4917      	ldr	r1, [pc, #92]	; (8004384 <drvman_set_serial_driver+0x9c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f013 fce6 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f82f 	bl	8002394 <console_println>
		return;
 8004336:	e01b      	b.n	8004370 <drvman_set_serial_driver+0x88>
	}

	serial_device = drivers[driver_id];
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	4a11      	ldr	r2, [pc, #68]	; (8004380 <drvman_set_serial_driver+0x98>)
 800433c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004340:	4a11      	ldr	r2, [pc, #68]	; (8004388 <drvman_set_serial_driver+0xa0>)
 8004342:	6013      	str	r3, [r2, #0]
	serial_device->io_ops->start(serial_device);
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <drvman_set_serial_driver+0xa0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <drvman_set_serial_driver+0xa0>)
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	4610      	mov	r0, r2
 8004352:	4798      	blx	r3

	sprintf(print_buf, "%s Set serial driver: %s", module_str, serial_device->name);
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <drvman_set_serial_driver+0xa0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f107 0008 	add.w	r0, r7, #8
 800435e:	4a06      	ldr	r2, [pc, #24]	; (8004378 <drvman_set_serial_driver+0x90>)
 8004360:	490a      	ldr	r1, [pc, #40]	; (800438c <drvman_set_serial_driver+0xa4>)
 8004362:	f013 fcc9 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f812 	bl	8002394 <console_println>
}
 8004370:	3788      	adds	r7, #136	; 0x88
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	240000ac 	.word	0x240000ac
 800437c:	0801c514 	.word	0x0801c514
 8004380:	24006470 	.word	0x24006470
 8004384:	0801c538 	.word	0x0801c538
 8004388:	24006494 	.word	0x24006494
 800438c:	0801c558 	.word	0x0801c558

08004390 <drvman_set_audio_driver>:

void drvman_set_audio_driver(uint8_t driver_id)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0a2      	sub	sp, #136	; 0x88
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b07      	cmp	r3, #7
 800439e:	d90c      	bls.n	80043ba <drvman_set_audio_driver+0x2a>
	{
		sprintf(print_buf, "%s Audio driver ID out of range", module_str);
 80043a0:	f107 0308 	add.w	r3, r7, #8
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <drvman_set_audio_driver+0x94>)
 80043a6:	4920      	ldr	r1, [pc, #128]	; (8004428 <drvman_set_audio_driver+0x98>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f013 fca5 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd ffee 	bl	8002394 <console_println>
		return;
 80043b8:	e030      	b.n	800441c <drvman_set_audio_driver+0x8c>
	}

	if (!drivers[driver_id])
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <drvman_set_audio_driver+0x9c>)
 80043be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10c      	bne.n	80043e0 <drvman_set_audio_driver+0x50>
	{
		sprintf(print_buf, "%s Target audio driver is NULL", module_str);
 80043c6:	f107 0308 	add.w	r3, r7, #8
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <drvman_set_audio_driver+0x94>)
 80043cc:	4918      	ldr	r1, [pc, #96]	; (8004430 <drvman_set_audio_driver+0xa0>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f013 fc92 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fd ffdb 	bl	8002394 <console_println>
		return;
 80043de:	e01d      	b.n	800441c <drvman_set_audio_driver+0x8c>
	}

	audio_device = drivers[driver_id];
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <drvman_set_audio_driver+0x9c>)
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	4a12      	ldr	r2, [pc, #72]	; (8004434 <drvman_set_audio_driver+0xa4>)
 80043ea:	6013      	str	r3, [r2, #0]
	audio_device->io_ops->start(audio_device);
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <drvman_set_audio_driver+0xa4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <drvman_set_audio_driver+0xa4>)
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	4610      	mov	r0, r2
 80043fa:	4798      	blx	r3

	sprintf(print_buf, "%s Set audio driver: %s", module_str, drivers[driver_id]->name);
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4a0b      	ldr	r2, [pc, #44]	; (800442c <drvman_set_audio_driver+0x9c>)
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f107 0008 	add.w	r0, r7, #8
 800440a:	4a06      	ldr	r2, [pc, #24]	; (8004424 <drvman_set_audio_driver+0x94>)
 800440c:	490a      	ldr	r1, [pc, #40]	; (8004438 <drvman_set_audio_driver+0xa8>)
 800440e:	f013 fc73 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd ffbc 	bl	8002394 <console_println>
}
 800441c:	3788      	adds	r7, #136	; 0x88
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	240000ac 	.word	0x240000ac
 8004428:	0801c574 	.word	0x0801c574
 800442c:	24006470 	.word	0x24006470
 8004430:	0801c594 	.word	0x0801c594
 8004434:	24006490 	.word	0x24006490
 8004438:	0801c5b4 	.word	0x0801c5b4

0800443c <drvman_set_usb_driver>:

void drvman_set_usb_driver(uint8_t driver_id)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b0a2      	sub	sp, #136	; 0x88
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b07      	cmp	r3, #7
 800444a:	d90c      	bls.n	8004466 <drvman_set_usb_driver+0x2a>
	{
		sprintf(print_buf, "%s USB ID out of range", module_str);
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <drvman_set_usb_driver+0x94>)
 8004452:	4920      	ldr	r1, [pc, #128]	; (80044d4 <drvman_set_usb_driver+0x98>)
 8004454:	4618      	mov	r0, r3
 8004456:	f013 fc4f 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd ff98 	bl	8002394 <console_println>
		return;
 8004464:	e030      	b.n	80044c8 <drvman_set_usb_driver+0x8c>
	}

	if (!drivers[driver_id])
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <drvman_set_usb_driver+0x9c>)
 800446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <drvman_set_usb_driver+0x50>
	{
		sprintf(print_buf, "%s Target USB driver is NULL", module_str);
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <drvman_set_usb_driver+0x94>)
 8004478:	4918      	ldr	r1, [pc, #96]	; (80044dc <drvman_set_usb_driver+0xa0>)
 800447a:	4618      	mov	r0, r3
 800447c:	f013 fc3c 	bl	8017cf8 <siprintf>
		console_println(print_buf);
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd ff85 	bl	8002394 <console_println>
		return;
 800448a:	e01d      	b.n	80044c8 <drvman_set_usb_driver+0x8c>
	}

	usb_device = drivers[driver_id];
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <drvman_set_usb_driver+0x9c>)
 8004490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <drvman_set_usb_driver+0xa4>)
 8004496:	6013      	str	r3, [r2, #0]
	usb_device->io_ops->start(usb_device);
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <drvman_set_usb_driver+0xa4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0f      	ldr	r2, [pc, #60]	; (80044e0 <drvman_set_usb_driver+0xa4>)
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	4610      	mov	r0, r2
 80044a6:	4798      	blx	r3

	sprintf(print_buf, "%s Set USB driver: %s", module_str, drivers[driver_id]->name);
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <drvman_set_usb_driver+0x9c>)
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f107 0008 	add.w	r0, r7, #8
 80044b6:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <drvman_set_usb_driver+0x94>)
 80044b8:	490a      	ldr	r1, [pc, #40]	; (80044e4 <drvman_set_usb_driver+0xa8>)
 80044ba:	f013 fc1d 	bl	8017cf8 <siprintf>
	console_println(print_buf);
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd ff66 	bl	8002394 <console_println>
}
 80044c8:	3788      	adds	r7, #136	; 0x88
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	240000ac 	.word	0x240000ac
 80044d4:	0801c5cc 	.word	0x0801c5cc
 80044d8:	24006470 	.word	0x24006470
 80044dc:	0801c5e4 	.word	0x0801c5e4
 80044e0:	24006498 	.word	0x24006498
 80044e4:	0801c604 	.word	0x0801c604

080044e8 <encoder_decode_2ch_16b>:
// Loop unroll by a factor of 4

// This function seems to run about 2x faster then the generic decoder implementation
// (108 us vs 210 us) in debug mode
int8_t encoder_decode_2ch_16b(float32_t* dst_ch1, float32_t* dst_ch2, uint8_t* src, int32_t block_size)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b08b      	sub	sp, #44	; 0x2c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
	if (block_size & 0x7)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <encoder_decode_2ch_16b+0x1e>
		return -EINVBLKSIZE;
 8004500:	f06f 0302 	mvn.w	r3, #2
 8004504:	e0b8      	b.n	8004678 <encoder_decode_2ch_16b+0x190>

	int32_t dst_index = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t src_index = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
	float32_t normalization_factor = 1.f / 32768.f;
 800450e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8004512:	61fb      	str	r3, [r7, #28]

	int16_t samples[4];
	while (dst_index < block_size)
 8004514:	e0aa      	b.n	800466c <encoder_decode_2ch_16b+0x184>
	{
		samples[0] = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	82bb      	strh	r3, [r7, #20]
		samples[1] = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	82fb      	strh	r3, [r7, #22]
		samples[2] = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	833b      	strh	r3, [r7, #24]
		samples[3] = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	837b      	strh	r3, [r7, #26]

		samples[0] = src[src_index + 1];
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	3301      	adds	r3, #1
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b21b      	sxth	r3, r3
 8004532:	82bb      	strh	r3, [r7, #20]
		samples[1] = src[src_index + 3];
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	3303      	adds	r3, #3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b21b      	sxth	r3, r3
 8004540:	82fb      	strh	r3, [r7, #22]
		samples[2] = src[src_index + 5];
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	3305      	adds	r3, #5
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b21b      	sxth	r3, r3
 800454e:	833b      	strh	r3, [r7, #24]
		samples[3] = src[src_index + 7];
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	3307      	adds	r3, #7
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	b21b      	sxth	r3, r3
 800455c:	837b      	strh	r3, [r7, #26]

		samples[0] <<= 8;
 800455e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	b21b      	sxth	r3, r3
 8004566:	82bb      	strh	r3, [r7, #20]
		samples[1] <<= 8;
 8004568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	b21b      	sxth	r3, r3
 8004570:	82fb      	strh	r3, [r7, #22]
		samples[2] <<= 8;
 8004572:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	b21b      	sxth	r3, r3
 800457a:	833b      	strh	r3, [r7, #24]
		samples[3] <<= 8;
 800457c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	b21b      	sxth	r3, r3
 8004584:	837b      	strh	r3, [r7, #26]

		samples[0] |= src[src_index];
 8004586:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	440b      	add	r3, r1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b21b      	sxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b21b      	sxth	r3, r3
 8004598:	82bb      	strh	r3, [r7, #20]
		samples[1] |= src[src_index + 2];
 800459a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	3302      	adds	r3, #2
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	440b      	add	r3, r1
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	4313      	orrs	r3, r2
 80045ac:	b21b      	sxth	r3, r3
 80045ae:	82fb      	strh	r3, [r7, #22]
		samples[2] |= src[src_index + 4];
 80045b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	3304      	adds	r3, #4
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	440b      	add	r3, r1
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b21b      	sxth	r3, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	833b      	strh	r3, [r7, #24]
		samples[3] |= src[src_index + 6];
 80045c6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	3306      	adds	r3, #6
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	440b      	add	r3, r1
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	b21b      	sxth	r3, r3
 80045d6:	4313      	orrs	r3, r2
 80045d8:	b21b      	sxth	r3, r3
 80045da:	837b      	strh	r3, [r7, #26]

		dst_ch1[dst_index] = (float32_t) samples[0] * normalization_factor;
 80045dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	edc3 7a00 	vstr	s15, [r3]
		dst_ch2[dst_index] = (float32_t) samples[1] * normalization_factor;
 80045fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	4413      	add	r3, r2
 8004610:	edd7 7a07 	vldr	s15, [r7, #28]
 8004614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004618:	edc3 7a00 	vstr	s15, [r3]
		dst_ch1[dst_index + 1] = (float32_t) samples[2] * normalization_factor;
 800461c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	3301      	adds	r3, #1
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	edd7 7a07 	vldr	s15, [r7, #28]
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc3 7a00 	vstr	s15, [r3]
		dst_ch2[dst_index + 1] = (float32_t) samples[3] * normalization_factor;
 800463e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	3301      	adds	r3, #1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	4413      	add	r3, r2
 8004654:	edd7 7a07 	vldr	s15, [r7, #28]
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc3 7a00 	vstr	s15, [r3]

		src_index += 8;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	3308      	adds	r3, #8
 8004664:	623b      	str	r3, [r7, #32]
		dst_index += 2;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	3302      	adds	r3, #2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
	while (dst_index < block_size)
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	f6ff af50 	blt.w	8004516 <encoder_decode_2ch_16b+0x2e>
	}
	return EOK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	372c      	adds	r7, #44	; 0x2c
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <linkedlist_insert>:
{
	ll->head = NULL;
}

int8_t linkedlist_insert(struct LinkedList* ll, void* element, uint32_t index)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	if (!ll)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <linkedlist_insert+0x18>
		return -EINVAL;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e04d      	b.n	8004738 <linkedlist_insert+0xb4>

	struct LinkedListElement* new_element = malloc(sizeof(struct LinkedListElement));
 800469c:	2008      	movs	r0, #8
 800469e:	f011 fed7 	bl	8016450 <malloc>
 80046a2:	4603      	mov	r3, r0
 80046a4:	617b      	str	r3, [r7, #20]
	if (!new_element)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <linkedlist_insert+0x2e>
		return -ENOMEM;
 80046ac:	f06f 0301 	mvn.w	r3, #1
 80046b0:	e042      	b.n	8004738 <linkedlist_insert+0xb4>
	new_element->element = element;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	601a      	str	r2, [r3, #0]
	new_element->next = NULL;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]

	if (!ll->head)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <linkedlist_insert+0x4c>
	{
		ll->head = new_element;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	601a      	str	r2, [r3, #0]
		return EOK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e033      	b.n	8004738 <linkedlist_insert+0xb4>
	}

	if (!index)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <linkedlist_insert+0x64>
	{
		ll->head = new_element;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	601a      	str	r2, [r3, #0]
		new_element->next = ll->head;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	605a      	str	r2, [r3, #4]
		return EOK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e027      	b.n	8004738 <linkedlist_insert+0xb4>
	}

	struct LinkedListElement* curr = ll->head;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < (index - 1) && curr->next != NULL; i++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e005      	b.n	8004700 <linkedlist_insert+0x7c>
		curr = curr->next;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < (index - 1) && curr->next != NULL; i++)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	429a      	cmp	r2, r3
 8004708:	d203      	bcs.n	8004712 <linkedlist_insert+0x8e>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <linkedlist_insert+0x70>

	if (!curr->next)
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <linkedlist_insert+0xa0>
	{
		curr->next = new_element;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	605a      	str	r2, [r3, #4]
		return EOK;
 8004720:	2300      	movs	r3, #0
 8004722:	e009      	b.n	8004738 <linkedlist_insert+0xb4>
	}

	struct LinkedListElement* old_curr_next = curr->next;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
	curr->next = new_element;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	605a      	str	r2, [r3, #4]
	new_element->next = old_curr_next;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	605a      	str	r2, [r3, #4]
	return EOK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <linkedlist_remove>:

int8_t linkedlist_remove(struct LinkedList* ll, uint32_t index)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	if (!ll)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <linkedlist_remove+0x16>
		return -EINVAL;
 8004750:	f04f 33ff 	mov.w	r3, #4294967295
 8004754:	e032      	b.n	80047bc <linkedlist_remove+0x7c>

	if (!ll->head)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <linkedlist_remove+0x22>
		return EOK;
 800475e:	2300      	movs	r3, #0
 8004760:	e02c      	b.n	80047bc <linkedlist_remove+0x7c>

	struct LinkedListElement* prev = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
	struct LinkedListElement* curr = ll->head;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	613b      	str	r3, [r7, #16]

	for (uint32_t i = 0; i < index && curr->next != NULL; i++)
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e007      	b.n	8004782 <linkedlist_remove+0x42>
	{
		prev = curr;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	617b      	str	r3, [r7, #20]
		curr = curr->next;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < index && curr->next != NULL; i++)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d203      	bcs.n	8004792 <linkedlist_remove+0x52>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ef      	bne.n	8004772 <linkedlist_remove+0x32>
	}

	if (curr == ll->head)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d107      	bne.n	80047ac <linkedlist_remove+0x6c>
	{
		ll->head = curr->next;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
		free(curr);
 80047a4:	6938      	ldr	r0, [r7, #16]
 80047a6:	f011 fe5b 	bl	8016460 <free>
 80047aa:	e006      	b.n	80047ba <linkedlist_remove+0x7a>
	}
	else
	{
		prev->next = curr->next;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	605a      	str	r2, [r3, #4]
		free(curr);
 80047b4:	6938      	ldr	r0, [r7, #16]
 80047b6:	f011 fe53 	bl	8016460 <free>
	}
	return EOK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <logger_init>:
struct LogTimer* timer_list = timers;

TIM_HandleTypeDef* tim_hndl = NULL;

int8_t logger_init(TIM_HandleTypeDef* htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	if (!htim)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <logger_init+0x14>
		return -EINVAL;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	e06f      	b.n	80048b8 <logger_init+0xf4>

	tim_hndl = htim;
 80047d8:	4a39      	ldr	r2, [pc, #228]	; (80048c0 <logger_init+0xfc>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]

	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e04d      	b.n	8004880 <logger_init+0xbc>
	{
		timers[i].head = 0;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <logger_init+0x100>)
 80047e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
		timers[i].last_start = 0;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	4a32      	ldr	r2, [pc, #200]	; (80048c4 <logger_init+0x100>)
 80047fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

		for (uint8_t j = 0; j < MEASUREMENTS_PER_TIMER; j++)
 800480e:	2300      	movs	r3, #0
 8004810:	73bb      	strb	r3, [r7, #14]
 8004812:	e00f      	b.n	8004834 <logger_init+0x70>
			timers[i].measurements[j] = 0;
 8004814:	7bfa      	ldrb	r2, [r7, #15]
 8004816:	7bb9      	ldrb	r1, [r7, #14]
 8004818:	482a      	ldr	r0, [pc, #168]	; (80048c4 <logger_init+0x100>)
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	440b      	add	r3, r1
 8004826:	3302      	adds	r3, #2
 8004828:	2200      	movs	r2, #0
 800482a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (uint8_t j = 0; j < MEASUREMENTS_PER_TIMER; j++)
 800482e:	7bbb      	ldrb	r3, [r7, #14]
 8004830:	3301      	adds	r3, #1
 8004832:	73bb      	strb	r3, [r7, #14]
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	2b3f      	cmp	r3, #63	; 0x3f
 8004838:	d9ec      	bls.n	8004814 <logger_init+0x50>

		timers[i].name = "";
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <logger_init+0x100>)
 800483e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <logger_init+0x104>)
 800484a:	601a      	str	r2, [r3, #0]
		timers[i].worst_time = 0;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <logger_init+0x100>)
 8004850:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
		timers[i].best_time = 0xFFFFFFFF;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <logger_init+0x100>)
 8004866:	f44f 718a 	mov.w	r1, #276	; 0x114
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	3301      	adds	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d9ae      	bls.n	80047e4 <logger_init+0x20>
	}

	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	737b      	strb	r3, [r7, #13]
 800488a:	e00d      	b.n	80048a8 <logger_init+0xe4>
	{
		events[i].name = "";
 800488c:	7b7b      	ldrb	r3, [r7, #13]
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <logger_init+0x108>)
 8004890:	490d      	ldr	r1, [pc, #52]	; (80048c8 <logger_init+0x104>)
 8004892:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		events[i].evnt_count = 0;
 8004896:	7b7b      	ldrb	r3, [r7, #13]
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <logger_init+0x108>)
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 80048a2:	7b7b      	ldrb	r3, [r7, #13]
 80048a4:	3301      	adds	r3, #1
 80048a6:	737b      	strb	r3, [r7, #13]
 80048a8:	7b7b      	ldrb	r3, [r7, #13]
 80048aa:	2b07      	cmp	r3, #7
 80048ac:	d9ee      	bls.n	800488c <logger_init+0xc8>
	}
	HAL_TIM_Base_Start(tim_hndl);
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <logger_init+0xfc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f00a fd50 	bl	800f358 <HAL_TIM_Base_Start>
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	24006d7c 	.word	0x24006d7c
 80048c4:	240064dc 	.word	0x240064dc
 80048c8:	0801c61c 	.word	0x0801c61c
 80048cc:	2400649c 	.word	0x2400649c

080048d0 <logger_timer_set_name>:

int8_t logger_timer_set_name(uint8_t timer_id, char* name)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	d902      	bls.n	80048e8 <logger_timer_set_name+0x18>
		return -EINVAL;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e009      	b.n	80048fc <logger_timer_set_name+0x2c>

	timers[timer_id].name = name;
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <logger_timer_set_name+0x38>)
 80048ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]
	return EOK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	240064dc 	.word	0x240064dc

0800490c <logger_log_timer_start>:

int8_t logger_log_timer_start(uint8_t timer_id)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	2b07      	cmp	r3, #7
 800491a:	d902      	bls.n	8004922 <logger_log_timer_start+0x16>
		return -EINVAL;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	e015      	b.n	800494e <logger_log_timer_start+0x42>

	if (!tim_hndl)
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <logger_log_timer_start+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <logger_log_timer_start+0x24>
		return -EINVAL;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	e00e      	b.n	800494e <logger_log_timer_start+0x42>

	timers[timer_id].last_start = tim_hndl->Instance->CNT;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <logger_log_timer_start+0x50>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800493a:	4909      	ldr	r1, [pc, #36]	; (8004960 <logger_log_timer_start+0x54>)
 800493c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8004940:	fb00 f303 	mul.w	r3, r0, r3
 8004944:	440b      	add	r3, r1
 8004946:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800494a:	601a      	str	r2, [r3, #0]

	return EOK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	24006d7c 	.word	0x24006d7c
 8004960:	240064dc 	.word	0x240064dc

08004964 <logger_log_timer_stop>:

int8_t logger_log_timer_stop(uint8_t timer_id)
{
 8004964:	b4b0      	push	{r4, r5, r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	2b07      	cmp	r3, #7
 8004972:	d902      	bls.n	800497a <logger_log_timer_stop+0x16>
		return -EINVAL;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	e09b      	b.n	8004ab2 <logger_log_timer_stop+0x14e>

	if (!tim_hndl)
 800497a:	4b50      	ldr	r3, [pc, #320]	; (8004abc <logger_log_timer_stop+0x158>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <logger_log_timer_stop+0x24>
		return -EINVAL;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e094      	b.n	8004ab2 <logger_log_timer_stop+0x14e>

	uint32_t time_stop = tim_hndl->Instance->CNT;
 8004988:	4b4c      	ldr	r3, [pc, #304]	; (8004abc <logger_log_timer_stop+0x158>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	60bb      	str	r3, [r7, #8]
	uint32_t measured_time;
	if (time_stop < timers[timer_id].last_start)
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	4a4a      	ldr	r2, [pc, #296]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004996:	f44f 718a 	mov.w	r1, #276	; 0x114
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d20e      	bcs.n	80049ca <logger_log_timer_stop+0x66>
		measured_time = 0xFFFFFFFF - timers[timer_id].last_start + time_stop;
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	4a44      	ldr	r2, [pc, #272]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 80049b0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00c      	b.n	80049e4 <logger_log_timer_stop+0x80>
	else
		measured_time = time_stop - timers[timer_id].last_start;
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	4a3c      	ldr	r2, [pc, #240]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 80049ce:	f44f 718a 	mov.w	r1, #276	; 0x114
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	60fb      	str	r3, [r7, #12]

	timers[timer_id].measurements[timers[timer_id].head++] = measured_time;
 80049e4:	79fa      	ldrb	r2, [r7, #7]
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	4835      	ldr	r0, [pc, #212]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 80049ea:	f44f 718a 	mov.w	r1, #276	; 0x114
 80049ee:	fb03 f101 	mul.w	r1, r3, r1
 80049f2:	4401      	add	r1, r0
 80049f4:	3104      	adds	r1, #4
 80049f6:	7809      	ldrb	r1, [r1, #0]
 80049f8:	1c48      	adds	r0, r1, #1
 80049fa:	b2c5      	uxtb	r5, r0
 80049fc:	4830      	ldr	r0, [pc, #192]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 80049fe:	f44f 748a 	mov.w	r4, #276	; 0x114
 8004a02:	fb04 f303 	mul.w	r3, r4, r3
 8004a06:	4403      	add	r3, r0
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	7018      	strb	r0, [r3, #0]
 8004a0e:	4608      	mov	r0, r1
 8004a10:	492b      	ldr	r1, [pc, #172]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	4403      	add	r3, r0
 8004a1e:	3302      	adds	r3, #2
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (timers[timer_id].head >= MEASUREMENTS_PER_TIMER)
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	4a25      	ldr	r2, [pc, #148]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a2a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b3f      	cmp	r3, #63	; 0x3f
 8004a3a:	d909      	bls.n	8004a50 <logger_log_timer_stop+0xec>
		timers[timer_id].head = 0;
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a40:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]

	if (measured_time > timers[timer_id].worst_time)
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d90a      	bls.n	8004a80 <logger_log_timer_stop+0x11c>
		timers[timer_id].worst_time = measured_time;
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a6e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

	if (measured_time < timers[timer_id].best_time)
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a84:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d20a      	bcs.n	8004ab0 <logger_log_timer_stop+0x14c>
		timers[timer_id].best_time = measured_time;
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <logger_log_timer_stop+0x15c>)
 8004a9e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	601a      	str	r2, [r3, #0]

	return EOK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bcb0      	pop	{r4, r5, r7}
 8004aba:	4770      	bx	lr
 8004abc:	24006d7c 	.word	0x24006d7c
 8004ac0:	240064dc 	.word	0x240064dc

08004ac4 <logger_log_timer_avg>:

int8_t logger_log_timer_avg(uint8_t timer_id, uint32_t* avg_time)
{
 8004ac4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8004ac8:	b087      	sub	sp, #28
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	6039      	str	r1, [r7, #0]
 8004ad0:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	2b07      	cmp	r3, #7
 8004ad6:	d902      	bls.n	8004ade <logger_log_timer_avg+0x1a>
		return -EINVAL;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e042      	b.n	8004b64 <logger_log_timer_avg+0xa0>

	if (!tim_hndl)
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <logger_log_timer_avg+0xac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <logger_log_timer_avg+0x28>
		return -EINVAL;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	e03b      	b.n	8004b64 <logger_log_timer_avg+0xa0>

	if (!avg_time)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <logger_log_timer_avg+0x34>
		return -EINVAL;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	e035      	b.n	8004b64 <logger_log_timer_avg+0xa0>

	*avg_time = 0;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

	uint64_t avg_sum = 0;
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < MEASUREMENTS_PER_TIMER; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e019      	b.n	8004b44 <logger_log_timer_avg+0x80>
	{
		avg_sum += timers[timer_id].measurements[i];
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	7bf9      	ldrb	r1, [r7, #15]
 8004b14:	4817      	ldr	r0, [pc, #92]	; (8004b74 <logger_log_timer_avg+0xb0>)
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	440b      	add	r3, r1
 8004b22:	3302      	adds	r3, #2
 8004b24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	461c      	mov	r4, r3
 8004b2c:	4615      	mov	r5, r2
 8004b2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b32:	eb12 0804 	adds.w	r8, r2, r4
 8004b36:	eb43 0905 	adc.w	r9, r3, r5
 8004b3a:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < MEASUREMENTS_PER_TIMER; i++)
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	3301      	adds	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b3f      	cmp	r3, #63	; 0x3f
 8004b48:	d9e2      	bls.n	8004b10 <logger_log_timer_avg+0x4c>
	}
	*avg_time = avg_sum / MEASUREMENTS_PER_TIMER;
 8004b4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	0982      	lsrs	r2, r0, #6
 8004b58:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8004b5c:	098b      	lsrs	r3, r1, #6
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	601a      	str	r2, [r3, #0]

	return EOK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8004b6e:	4770      	bx	lr
 8004b70:	24006d7c 	.word	0x24006d7c
 8004b74:	240064dc 	.word	0x240064dc

08004b78 <parameter_init>:
#define PTYPE_OTHER_UNIT ""

char param_str[128];

int8_t parameter_init(struct Parameter* param, uint8_t id, char* name, enum ParameterType type, float32_t min, float32_t max, float32_t init_value)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6178      	str	r0, [r7, #20]
 8004b80:	60fa      	str	r2, [r7, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b88:	edc7 0a01 	vstr	s1, [r7, #4]
 8004b8c:	ed87 1a00 	vstr	s2, [r7]
 8004b90:	460b      	mov	r3, r1
 8004b92:	74fb      	strb	r3, [r7, #19]
 8004b94:	4613      	mov	r3, r2
 8004b96:	74bb      	strb	r3, [r7, #18]
	param->name = name;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]
	param->id = id;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	7cfa      	ldrb	r2, [r7, #19]
 8004ba2:	711a      	strb	r2, [r3, #4]
	param->type = type;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	7cba      	ldrb	r2, [r7, #18]
 8004ba8:	715a      	strb	r2, [r3, #5]
	param->min = min;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	60da      	str	r2, [r3, #12]
	param->max = max;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	611a      	str	r2, [r3, #16]
	param->value = init_value;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]
}
 8004bbc:	bf00      	nop
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <parameter_set>:

int8_t parameter_set(struct Parameter* param, float32_t value)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	ed87 0a00 	vstr	s0, [r7]
	if (!param)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <parameter_set+0x18>
		return -EINVAL;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	e01d      	b.n	8004c1e <parameter_set+0x54>

	if (value < param->min)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004be8:	ed97 7a00 	vldr	s14, [r7]
 8004bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d502      	bpl.n	8004bfc <parameter_set+0x32>
		return -EINVAL;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfa:	e010      	b.n	8004c1e <parameter_set+0x54>

	if (value > param->max)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c02:	ed97 7a00 	vldr	s14, [r7]
 8004c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	dd02      	ble.n	8004c16 <parameter_set+0x4c>
		return -EINVAL;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
 8004c14:	e003      	b.n	8004c1e <parameter_set+0x54>

	param->value = value;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	609a      	str	r2, [r3, #8]
	return EOK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <parameter_tostr>:

char* parameter_tostr(struct Parameter* param)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08e      	sub	sp, #56	; 0x38
 8004c30:	af0a      	add	r7, sp, #40	; 0x28
 8004c32:	6078      	str	r0, [r7, #4]
	if (!param)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <parameter_tostr+0x12>
		return NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e045      	b.n	8004cca <parameter_tostr+0x9e>

	char* unit = PTYPE_OTHER_UNIT;
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <parameter_tostr+0xa8>)
 8004c40:	60fb      	str	r3, [r7, #12]
	switch (param->type)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	795b      	ldrb	r3, [r3, #5]
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d81b      	bhi.n	8004c82 <parameter_tostr+0x56>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <parameter_tostr+0x24>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c65 	.word	0x08004c65
 8004c54:	08004c6b 	.word	0x08004c6b
 8004c58:	08004c71 	.word	0x08004c71
 8004c5c:	08004c77 	.word	0x08004c77
 8004c60:	08004c7d 	.word	0x08004c7d
	{
	case PARAM_TYPE_COEFF:
		unit = PTYPE_COEFF_UNIT;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <parameter_tostr+0xa8>)
 8004c66:	60fb      	str	r3, [r7, #12]
		break;
 8004c68:	e00b      	b.n	8004c82 <parameter_tostr+0x56>
	case PARAM_TYPE_FREQ:
		unit = PTYPE_FREQ_UNIT;
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <parameter_tostr+0xac>)
 8004c6c:	60fb      	str	r3, [r7, #12]
		break;
 8004c6e:	e008      	b.n	8004c82 <parameter_tostr+0x56>
	case PARAM_TYPE_DELAY:
		unit = PTYPE_DELAY_UNIT;
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <parameter_tostr+0xb0>)
 8004c72:	60fb      	str	r3, [r7, #12]
		break;
 8004c74:	e005      	b.n	8004c82 <parameter_tostr+0x56>
	case PARAM_TYPE_PHASE:
		unit = PTYPE_PHASE_UNIT;
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <parameter_tostr+0xb4>)
 8004c78:	60fb      	str	r3, [r7, #12]
		break;
 8004c7a:	e002      	b.n	8004c82 <parameter_tostr+0x56>
	case PARAM_TYPE_OTHER:
		unit = PTYPE_OTHER_UNIT;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <parameter_tostr+0xa8>)
 8004c7e:	60fb      	str	r3, [r7, #12]
		break;
 8004c80:	bf00      	nop
	}

	snprintf(param_str, 128, "%d | %s: %.3f %s | Min: %.3f | Max: %.3f", param->id, param->name, param->value, unit, param->min, param->max);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	edd2 7a02 	vldr	s15, [r2, #8]
 8004c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	edd2 6a03 	vldr	s13, [r2, #12]
 8004c9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	edd2 5a04 	vldr	s11, [r2, #16]
 8004ca6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8004caa:	ed8d 5b08 	vstr	d5, [sp, #32]
 8004cae:	ed8d 6b06 	vstr	d6, [sp, #24]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	9204      	str	r2, [sp, #16]
 8004cb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <parameter_tostr+0xb8>)
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	4809      	ldr	r0, [pc, #36]	; (8004ce8 <parameter_tostr+0xbc>)
 8004cc4:	f012 ffe4 	bl	8017c90 <sniprintf>
	return param_str;
 8004cc8:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <parameter_tostr+0xbc>)
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	0801c620 	.word	0x0801c620
 8004cd8:	0801c624 	.word	0x0801c624
 8004cdc:	0801c628 	.word	0x0801c628
 8004ce0:	0801c630 	.word	0x0801c630
 8004ce4:	0801c634 	.word	0x0801c634
 8004ce8:	24006d80 	.word	0x24006d80

08004cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f000 f9b0 	bl	8005058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cf8:	f007 fc02 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_Init+0x68>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	4913      	ldr	r1, [pc, #76]	; (8004d58 <HAL_Init+0x6c>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_Init+0x68>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_Init+0x6c>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_Init+0x70>)
 8004d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <HAL_Init+0x74>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d36:	200f      	movs	r0, #15
 8004d38:	f000 f814 	bl	8004d64 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e002      	b.n	8004d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d46:	f7fc fb59 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	58024400 	.word	0x58024400
 8004d58:	0801c6a8 	.word	0x0801c6a8
 8004d5c:	24000004 	.word	0x24000004
 8004d60:	24000000 	.word	0x24000000

08004d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_InitTick+0x60>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e021      	b.n	8004dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_InitTick+0x64>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_InitTick+0x60>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f9a3 	bl	80050da <HAL_SYSTICK_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00e      	b.n	8004dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d80a      	bhi.n	8004dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da4:	2200      	movs	r2, #0
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	f000 f95f 	bl	800506e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db0:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <HAL_InitTick+0x68>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	240000d0 	.word	0x240000d0
 8004dc8:	24000000 	.word	0x24000000
 8004dcc:	240000cc 	.word	0x240000cc

08004dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_IncTick+0x20>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_IncTick+0x24>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_IncTick+0x24>)
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	240000d0 	.word	0x240000d0
 8004df4:	24006e00 	.word	0x24006e00

08004df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_GetTick+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	24006e00 	.word	0x24006e00

08004e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff ffee 	bl	8004df8 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d005      	beq.n	8004e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_Delay+0x44>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e36:	bf00      	nop
 8004e38:	f7ff ffde 	bl	8004df8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d8f7      	bhi.n	8004e38 <HAL_Delay+0x28>
  {
  }
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	240000d0 	.word	0x240000d0

08004e58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_GetREVID+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	0c1b      	lsrs	r3, r3, #16
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	5c001000 	.word	0x5c001000

08004e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e98:	4b06      	ldr	r3, [pc, #24]	; (8004eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	05fa0000 	.word	0x05fa0000

08004eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0a1b      	lsrs	r3, r3, #8
 8004ec2:	f003 0307 	and.w	r3, r3, #7
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0b      	blt.n	8004efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	f003 021f 	and.w	r2, r3, #31
 8004eec:	4907      	ldr	r1, [pc, #28]	; (8004f0c <__NVIC_EnableIRQ+0x38>)
 8004eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8004efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100

08004f10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db12      	blt.n	8004f48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	490a      	ldr	r1, [pc, #40]	; (8004f54 <__NVIC_DisableIRQ+0x44>)
 8004f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2001      	movs	r0, #1
 8004f32:	fa00 f202 	lsl.w	r2, r0, r2
 8004f36:	3320      	adds	r3, #32
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f3c:	f3bf 8f4f 	dsb	sy
}
 8004f40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f42:	f3bf 8f6f 	isb	sy
}
 8004f46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	e000e100 	.word	0xe000e100

08004f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db0a      	blt.n	8004f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <__NVIC_SetPriority+0x4c>)
 8004f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f80:	e00a      	b.n	8004f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4908      	ldr	r1, [pc, #32]	; (8004fa8 <__NVIC_SetPriority+0x50>)
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	440b      	add	r3, r1
 8004f96:	761a      	strb	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf28      	it	cs
 8004fca:	2304      	movcs	r3, #4
 8004fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d902      	bls.n	8004fdc <NVIC_EncodePriority+0x30>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3b03      	subs	r3, #3
 8004fda:	e000      	b.n	8004fde <NVIC_EncodePriority+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	4313      	orrs	r3, r2
         );
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005024:	d301      	bcc.n	800502a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005026:	2301      	movs	r3, #1
 8005028:	e00f      	b.n	800504a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <SysTick_Config+0x40>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005032:	210f      	movs	r1, #15
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	f7ff ff8e 	bl	8004f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <SysTick_Config+0x40>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <SysTick_Config+0x40>)
 8005044:	2207      	movs	r2, #7
 8005046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000e010 	.word	0xe000e010

08005058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff05 	bl	8004e70 <__NVIC_SetPriorityGrouping>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800507c:	f7ff ff1c 	bl	8004eb8 <__NVIC_GetPriorityGrouping>
 8005080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7ff ff90 	bl	8004fac <NVIC_EncodePriority>
 800508c:	4602      	mov	r2, r0
 800508e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ff5f 	bl	8004f58 <__NVIC_SetPriority>
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff0f 	bl	8004ed4 <__NVIC_EnableIRQ>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ff1f 	bl	8004f10 <__NVIC_DisableIRQ>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ff96 	bl	8005014 <SysTick_Config>
 80050e8:	4603      	mov	r3, r0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e034      	b.n	8005170 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	791b      	ldrb	r3, [r3, #4]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d125      	bne.n	800515c <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a19      	ldr	r2, [pc, #100]	; (8005178 <HAL_DAC_Init+0x84>)
 8005114:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_DAC_Init+0x88>)
 800511a:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_DAC_Init+0x8c>)
 8005120:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a17      	ldr	r2, [pc, #92]	; (8005184 <HAL_DAC_Init+0x90>)
 8005126:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_DAC_Init+0x94>)
 800512c:	625a      	str	r2, [r3, #36]	; 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a16      	ldr	r2, [pc, #88]	; (800518c <HAL_DAC_Init+0x98>)
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_DAC_Init+0x9c>)
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_DAC_Init+0xa0>)
 800513e:	631a      	str	r2, [r3, #48]	; 0x30

    if (hdac->MspInitCallback == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <HAL_DAC_Init+0xa4>)
 800514c:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08005467 	.word	0x08005467
 800517c:	0800547b 	.word	0x0800547b
 8005180:	0800548f 	.word	0x0800548f
 8005184:	080054a3 	.word	0x080054a3
 8005188:	080058d7 	.word	0x080058d7
 800518c:	080058eb 	.word	0x080058eb
 8005190:	080058ff 	.word	0x080058ff
 8005194:	08005913 	.word	0x08005913
 8005198:	08001431 	.word	0x08001431

0800519c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e0a2      	b.n	80052fa <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	795b      	ldrb	r3, [r3, #5]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_DAC_Start_DMA+0x24>
 80051bc:	2302      	movs	r3, #2
 80051be:	e09c      	b.n	80052fa <HAL_DAC_Start_DMA+0x15e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2202      	movs	r2, #2
 80051ca:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d129      	bne.n	8005226 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4a4b      	ldr	r2, [pc, #300]	; (8005304 <HAL_DAC_Start_DMA+0x168>)
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a4a      	ldr	r2, [pc, #296]	; (8005308 <HAL_DAC_Start_DMA+0x16c>)
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	4a49      	ldr	r2, [pc, #292]	; (800530c <HAL_DAC_Start_DMA+0x170>)
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_DAC_Start_DMA+0x6c>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d005      	beq.n	8005212 <HAL_DAC_Start_DMA+0x76>
 8005206:	e009      	b.n	800521c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	613b      	str	r3, [r7, #16]
        break;
 8005210:	e033      	b.n	800527a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	613b      	str	r3, [r7, #16]
        break;
 800521a:	e02e      	b.n	800527a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3310      	adds	r3, #16
 8005222:	613b      	str	r3, [r7, #16]
        break;
 8005224:	e029      	b.n	800527a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4a39      	ldr	r2, [pc, #228]	; (8005310 <HAL_DAC_Start_DMA+0x174>)
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4a38      	ldr	r2, [pc, #224]	; (8005314 <HAL_DAC_Start_DMA+0x178>)
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4a37      	ldr	r2, [pc, #220]	; (8005318 <HAL_DAC_Start_DMA+0x17c>)
 800523c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800524c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_DAC_Start_DMA+0xc0>
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2b04      	cmp	r3, #4
 8005258:	d005      	beq.n	8005266 <HAL_DAC_Start_DMA+0xca>
 800525a:	e009      	b.n	8005270 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	613b      	str	r3, [r7, #16]
        break;
 8005264:	e009      	b.n	800527a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3318      	adds	r3, #24
 800526c:	613b      	str	r3, [r7, #16]
        break;
 800526e:	e004      	b.n	800527a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	331c      	adds	r3, #28
 8005276:	613b      	str	r3, [r7, #16]
        break;
 8005278:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d111      	bne.n	80052a4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6898      	ldr	r0, [r3, #8]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	f001 f88f 	bl	80063bc <HAL_DMA_Start_IT>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
 80052a2:	e010      	b.n	80052c6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80052b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68d8      	ldr	r0, [r3, #12]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	f001 f87d 	bl	80063bc <HAL_DMA_Start_IT>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2201      	movs	r2, #1
 80052e0:	409a      	lsls	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e005      	b.n	80052f8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f043 0204 	orr.w	r2, r3, #4
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	08005865 	.word	0x08005865
 8005308:	08005889 	.word	0x08005889
 800530c:	080058a7 	.word	0x080058a7
 8005310:	08005927 	.word	0x08005927
 8005314:	0800594b 	.word	0x0800594b
 8005318:	08005969 	.word	0x08005969

0800531c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e03e      	b.n	80053ae <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	43da      	mvns	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	400a      	ands	r2, r1
 800534c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2201      	movs	r2, #1
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43da      	mvns	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	400a      	ands	r2, r1
 8005368:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10d      	bne.n	800538c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fa8b 	bl	8006890 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e00c      	b.n	80053a6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fa7d 	bl	8006890 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80053a4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01e      	beq.n	8005416 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d019      	beq.n	8005416 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800540c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01e      	beq.n	800545e <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d019      	beq.n	800545e <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f043 0202 	orr.w	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005444:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_DAC_ConfigChannel+0x1e>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e12a      	b.n	8005730 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	795b      	ldrb	r3, [r3, #5]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_DAC_ConfigChannel+0x2e>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e124      	b.n	8005730 <HAL_DAC_ConfigChannel+0x278>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2202      	movs	r2, #2
 80054f0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d17a      	bne.n	80055f0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054fa:	f7ff fc7d 	bl	8004df8 <HAL_GetTick>
 80054fe:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d13d      	bne.n	8005582 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005506:	e018      	b.n	800553a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005508:	f7ff fc76 	bl	8004df8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d911      	bls.n	800553a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	4b86      	ldr	r3, [pc, #536]	; (8005738 <HAL_DAC_ConfigChannel+0x280>)
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f043 0208 	orr.w	r2, r3, #8
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2203      	movs	r2, #3
 8005534:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0fa      	b.n	8005730 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005540:	4b7d      	ldr	r3, [pc, #500]	; (8005738 <HAL_DAC_ConfigChannel+0x280>)
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1df      	bne.n	8005508 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	6992      	ldr	r2, [r2, #24]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
 8005552:	e020      	b.n	8005596 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005554:	f7ff fc50 	bl	8004df8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	d90f      	bls.n	8005582 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005568:	2b00      	cmp	r3, #0
 800556a:	da0a      	bge.n	8005582 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f043 0208 	orr.w	r2, r3, #8
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2203      	movs	r2, #3
 800557c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0d6      	b.n	8005730 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	2b00      	cmp	r3, #0
 800558a:	dbe3      	blt.n	8005554 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	6992      	ldr	r2, [r2, #24]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	ea02 0103 	and.w	r1, r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	21ff      	movs	r1, #255	; 0xff
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	ea02 0103 	and.w	r1, r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	409a      	lsls	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d11d      	bne.n	8005634 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	221f      	movs	r2, #31
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2207      	movs	r2, #7
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005658:	2300      	movs	r3, #0
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	e00f      	b.n	800567e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d102      	bne.n	800566c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005666:	2301      	movs	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	e008      	b.n	800567e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005674:	2301      	movs	r3, #1
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	e001      	b.n	800567e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800567a:	2300      	movs	r3, #0
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43da      	mvns	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	400a      	ands	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	22c0      	movs	r2, #192	; 0xc0
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43da      	mvns	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	400a      	ands	r2, r1
 800571e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800572c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20008000 	.word	0x20008000

0800573c <HAL_DAC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval status
  */
HAL_StatusTypeDef HAL_DAC_RegisterCallback(DAC_HandleTypeDef *hdac, HAL_DAC_CallbackIDTypeDef CallbackID,
                                           pDAC_CallbackTypeDef pCallback)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	460b      	mov	r3, r1
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DAC_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e07f      	b.n	8005858 <HAL_DAC_RegisterCallback+0x11c>
  }

  if (pCallback == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_DAC_RegisterCallback+0x32>
  {
    /* Update the error code */
    hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f043 0210 	orr.w	r2, r3, #16
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e074      	b.n	8005858 <HAL_DAC_RegisterCallback+0x11c>
  }

  if (hdac->State == HAL_DAC_STATE_READY)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	791b      	ldrb	r3, [r3, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d14a      	bne.n	800580e <HAL_DAC_RegisterCallback+0xd2>
  {
    switch (CallbackID)
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	2b09      	cmp	r3, #9
 800577c:	d83e      	bhi.n	80057fc <HAL_DAC_RegisterCallback+0xc0>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_DAC_RegisterCallback+0x48>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057bd 	.word	0x080057bd
 8005790:	080057c5 	.word	0x080057c5
 8005794:	080057cd 	.word	0x080057cd
 8005798:	080057d5 	.word	0x080057d5
 800579c:	080057dd 	.word	0x080057dd
 80057a0:	080057e5 	.word	0x080057e5
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057f5 	.word	0x080057f5
    {
      case HAL_DAC_CH1_COMPLETE_CB_ID :
        hdac->ConvCpltCallbackCh1 = pCallback;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	615a      	str	r2, [r3, #20]
        break;
 80057b2:	e050      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_HALF_COMPLETE_CB_ID :
        hdac->ConvHalfCpltCallbackCh1 = pCallback;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	619a      	str	r2, [r3, #24]
        break;
 80057ba:	e04c      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_ERROR_ID :
        hdac->ErrorCallbackCh1 = pCallback;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	61da      	str	r2, [r3, #28]
        break;
 80057c2:	e048      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_UNDERRUN_CB_ID :
        hdac->DMAUnderrunCallbackCh1 = pCallback;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]
        break;
 80057ca:	e044      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>

      case HAL_DAC_CH2_COMPLETE_CB_ID :
        hdac->ConvCpltCallbackCh2 = pCallback;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80057d2:	e040      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_HALF_COMPLETE_CB_ID :
        hdac->ConvHalfCpltCallbackCh2 = pCallback;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80057da:	e03c      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_ERROR_ID :
        hdac->ErrorCallbackCh2 = pCallback;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80057e2:	e038      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_UNDERRUN_CB_ID :
        hdac->DMAUnderrunCallbackCh2 = pCallback;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80057ea:	e034      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>

      case HAL_DAC_MSPINIT_CB_ID :
        hdac->MspInitCallback = pCallback;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80057f2:	e030      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_MSPDEINIT_CB_ID :
        hdac->MspDeInitCallback = pCallback;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80057fa:	e02c      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      default :
        /* Update the error code */
        hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f043 0210 	orr.w	r2, r3, #16
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	611a      	str	r2, [r3, #16]
        /* update return status */
        status =  HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
        break;
 800580c:	e023      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
    }
  }
  else if (hdac->State == HAL_DAC_STATE_RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	791b      	ldrb	r3, [r3, #4]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d116      	bne.n	8005846 <HAL_DAC_RegisterCallback+0x10a>
  {
    switch (CallbackID)
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d002      	beq.n	8005824 <HAL_DAC_RegisterCallback+0xe8>
 800581e:	2b09      	cmp	r3, #9
 8005820:	d004      	beq.n	800582c <HAL_DAC_RegisterCallback+0xf0>
 8005822:	e007      	b.n	8005834 <HAL_DAC_RegisterCallback+0xf8>
    {
      case HAL_DAC_MSPINIT_CB_ID :
        hdac->MspInitCallback = pCallback;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800582a:	e014      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_MSPDEINIT_CB_ID :
        hdac->MspDeInitCallback = pCallback;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 8005832:	e010      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
      default :
        /* Update the error code */
        hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f043 0210 	orr.w	r2, r3, #16
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	611a      	str	r2, [r3, #16]
        /* update return status */
        status =  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	75fb      	strb	r3, [r7, #23]
        break;
 8005844:	e007      	b.n	8005856 <HAL_DAC_RegisterCallback+0x11a>
    }
  }
  else
  {
    /* Update the error code */
    hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f043 0210 	orr.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	611a      	str	r2, [r3, #16]
    /* update return status */
    status =  HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	711a      	strb	r2, [r3, #4]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f043 0204 	orr.w	r2, r3, #4
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	711a      	strb	r2, [r3, #4]
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	711a      	strb	r2, [r3, #4]
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f043 0204 	orr.w	r2, r3, #4
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	711a      	strb	r2, [r3, #4]
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059a0:	f7ff fa2a 	bl	8004df8 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e316      	b.n	8005fde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <HAL_DMA_Init+0x1b8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a65      	ldr	r2, [pc, #404]	; (8005b54 <HAL_DMA_Init+0x1bc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <HAL_DMA_Init+0x1c0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a62      	ldr	r2, [pc, #392]	; (8005b5c <HAL_DMA_Init+0x1c4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a60      	ldr	r2, [pc, #384]	; (8005b60 <HAL_DMA_Init+0x1c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5f      	ldr	r2, [pc, #380]	; (8005b64 <HAL_DMA_Init+0x1cc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5d      	ldr	r2, [pc, #372]	; (8005b68 <HAL_DMA_Init+0x1d0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5c      	ldr	r2, [pc, #368]	; (8005b6c <HAL_DMA_Init+0x1d4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5a      	ldr	r2, [pc, #360]	; (8005b70 <HAL_DMA_Init+0x1d8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a59      	ldr	r2, [pc, #356]	; (8005b74 <HAL_DMA_Init+0x1dc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a57      	ldr	r2, [pc, #348]	; (8005b78 <HAL_DMA_Init+0x1e0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a56      	ldr	r2, [pc, #344]	; (8005b7c <HAL_DMA_Init+0x1e4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a54      	ldr	r2, [pc, #336]	; (8005b80 <HAL_DMA_Init+0x1e8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a53      	ldr	r2, [pc, #332]	; (8005b84 <HAL_DMA_Init+0x1ec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a51      	ldr	r2, [pc, #324]	; (8005b88 <HAL_DMA_Init+0x1f0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_Init+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a50      	ldr	r2, [pc, #320]	; (8005b8c <HAL_DMA_Init+0x1f4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Init+0xbc>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <HAL_DMA_Init+0xbe>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 813b 	beq.w	8005cd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a37      	ldr	r2, [pc, #220]	; (8005b50 <HAL_DMA_Init+0x1b8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d04a      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <HAL_DMA_Init+0x1bc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d045      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a34      	ldr	r2, [pc, #208]	; (8005b58 <HAL_DMA_Init+0x1c0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d040      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a33      	ldr	r2, [pc, #204]	; (8005b5c <HAL_DMA_Init+0x1c4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d03b      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a31      	ldr	r2, [pc, #196]	; (8005b60 <HAL_DMA_Init+0x1c8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d036      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a30      	ldr	r2, [pc, #192]	; (8005b64 <HAL_DMA_Init+0x1cc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d031      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2e      	ldr	r2, [pc, #184]	; (8005b68 <HAL_DMA_Init+0x1d0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d02c      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	; (8005b6c <HAL_DMA_Init+0x1d4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d027      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <HAL_DMA_Init+0x1d8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d022      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <HAL_DMA_Init+0x1dc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d01d      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a28      	ldr	r2, [pc, #160]	; (8005b78 <HAL_DMA_Init+0x1e0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <HAL_DMA_Init+0x1e4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a25      	ldr	r2, [pc, #148]	; (8005b80 <HAL_DMA_Init+0x1e8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a24      	ldr	r2, [pc, #144]	; (8005b84 <HAL_DMA_Init+0x1ec>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <HAL_DMA_Init+0x1f0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_DMA_Init+0x174>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <HAL_DMA_Init+0x1f4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d108      	bne.n	8005b1e <HAL_DMA_Init+0x186>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e007      	b.n	8005b2e <HAL_DMA_Init+0x196>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0201 	bic.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b2e:	e02f      	b.n	8005b90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b30:	f7ff f962 	bl	8004df8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d928      	bls.n	8005b90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2203      	movs	r2, #3
 8005b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e246      	b.n	8005fde <HAL_DMA_Init+0x646>
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1c8      	bne.n	8005b30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4b83      	ldr	r3, [pc, #524]	; (8005db8 <HAL_DMA_Init+0x420>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d107      	bne.n	8005bf4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	4313      	orrs	r3, r2
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005bf4:	4b71      	ldr	r3, [pc, #452]	; (8005dbc <HAL_DMA_Init+0x424>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <HAL_DMA_Init+0x428>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c00:	d328      	bcc.n	8005c54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b28      	cmp	r3, #40	; 0x28
 8005c08:	d903      	bls.n	8005c12 <HAL_DMA_Init+0x27a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c10:	d917      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b3e      	cmp	r3, #62	; 0x3e
 8005c18:	d903      	bls.n	8005c22 <HAL_DMA_Init+0x28a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b42      	cmp	r3, #66	; 0x42
 8005c20:	d90f      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b46      	cmp	r3, #70	; 0x46
 8005c28:	d903      	bls.n	8005c32 <HAL_DMA_Init+0x29a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b48      	cmp	r3, #72	; 0x48
 8005c30:	d907      	bls.n	8005c42 <HAL_DMA_Init+0x2aa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b4e      	cmp	r3, #78	; 0x4e
 8005c38:	d905      	bls.n	8005c46 <HAL_DMA_Init+0x2ae>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b52      	cmp	r3, #82	; 0x52
 8005c40:	d801      	bhi.n	8005c46 <HAL_DMA_Init+0x2ae>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_DMA_Init+0x2b0>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d117      	bne.n	8005cae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 fce9 	bl	8008668 <DMA_CheckFifoParam>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e197      	b.n	8005fde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f002 fc24 	bl	8008504 <DMA_CalcBaseAndBitshift>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	f003 031f 	and.w	r3, r3, #31
 8005cc8:	223f      	movs	r2, #63	; 0x3f
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	e0cd      	b.n	8005e6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3b      	ldr	r2, [pc, #236]	; (8005dc4 <HAL_DMA_Init+0x42c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a39      	ldr	r2, [pc, #228]	; (8005dc8 <HAL_DMA_Init+0x430>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a38      	ldr	r2, [pc, #224]	; (8005dcc <HAL_DMA_Init+0x434>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a36      	ldr	r2, [pc, #216]	; (8005dd0 <HAL_DMA_Init+0x438>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a35      	ldr	r2, [pc, #212]	; (8005dd4 <HAL_DMA_Init+0x43c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <HAL_DMA_Init+0x440>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a32      	ldr	r2, [pc, #200]	; (8005ddc <HAL_DMA_Init+0x444>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_Init+0x38a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	; (8005de0 <HAL_DMA_Init+0x448>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d101      	bne.n	8005d26 <HAL_DMA_Init+0x38e>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_DMA_Init+0x390>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8097 	beq.w	8005e5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a24      	ldr	r2, [pc, #144]	; (8005dc4 <HAL_DMA_Init+0x42c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d021      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <HAL_DMA_Init+0x430>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01c      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_DMA_Init+0x434>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d017      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <HAL_DMA_Init+0x438>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d012      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <HAL_DMA_Init+0x43c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00d      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_DMA_Init+0x440>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d008      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_DMA_Init+0x444>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA_Init+0x3e4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	; (8005de0 <HAL_DMA_Init+0x448>)
 8005d7a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <HAL_DMA_Init+0x44c>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d021      	beq.n	8005de8 <HAL_DMA_Init+0x450>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d102      	bne.n	8005db2 <HAL_DMA_Init+0x41a>
 8005dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005db0:	e01b      	b.n	8005dea <HAL_DMA_Init+0x452>
 8005db2:	2300      	movs	r3, #0
 8005db4:	e019      	b.n	8005dea <HAL_DMA_Init+0x452>
 8005db6:	bf00      	nop
 8005db8:	fe10803f 	.word	0xfe10803f
 8005dbc:	5c001000 	.word	0x5c001000
 8005dc0:	ffff0000 	.word	0xffff0000
 8005dc4:	58025408 	.word	0x58025408
 8005dc8:	5802541c 	.word	0x5802541c
 8005dcc:	58025430 	.word	0x58025430
 8005dd0:	58025444 	.word	0x58025444
 8005dd4:	58025458 	.word	0x58025458
 8005dd8:	5802546c 	.word	0x5802546c
 8005ddc:	58025480 	.word	0x58025480
 8005de0:	58025494 	.word	0x58025494
 8005de4:	fffe000f 	.word	0xfffe000f
 8005de8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68d2      	ldr	r2, [r2, #12]
 8005dee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b6e      	ldr	r3, [pc, #440]	; (8005fe8 <HAL_DMA_Init+0x650>)
 8005e30:	4413      	add	r3, r2
 8005e32:	4a6e      	ldr	r2, [pc, #440]	; (8005fec <HAL_DMA_Init+0x654>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f002 fb5f 	bl	8008504 <DMA_CalcBaseAndBitshift>
 8005e46:	4603      	mov	r3, r0
 8005e48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2201      	movs	r2, #1
 8005e54:	409a      	lsls	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	e008      	b.n	8005e6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2240      	movs	r2, #64	; 0x40
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2203      	movs	r2, #3
 8005e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0b7      	b.n	8005fde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5f      	ldr	r2, [pc, #380]	; (8005ff0 <HAL_DMA_Init+0x658>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d072      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5d      	ldr	r2, [pc, #372]	; (8005ff4 <HAL_DMA_Init+0x65c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d06d      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5c      	ldr	r2, [pc, #368]	; (8005ff8 <HAL_DMA_Init+0x660>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d068      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5a      	ldr	r2, [pc, #360]	; (8005ffc <HAL_DMA_Init+0x664>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d063      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a59      	ldr	r2, [pc, #356]	; (8006000 <HAL_DMA_Init+0x668>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d05e      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a57      	ldr	r2, [pc, #348]	; (8006004 <HAL_DMA_Init+0x66c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d059      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a56      	ldr	r2, [pc, #344]	; (8006008 <HAL_DMA_Init+0x670>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d054      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a54      	ldr	r2, [pc, #336]	; (800600c <HAL_DMA_Init+0x674>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d04f      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a53      	ldr	r2, [pc, #332]	; (8006010 <HAL_DMA_Init+0x678>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d04a      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a51      	ldr	r2, [pc, #324]	; (8006014 <HAL_DMA_Init+0x67c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d045      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a50      	ldr	r2, [pc, #320]	; (8006018 <HAL_DMA_Init+0x680>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d040      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a4e      	ldr	r2, [pc, #312]	; (800601c <HAL_DMA_Init+0x684>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d03b      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4d      	ldr	r2, [pc, #308]	; (8006020 <HAL_DMA_Init+0x688>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d036      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a4b      	ldr	r2, [pc, #300]	; (8006024 <HAL_DMA_Init+0x68c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d031      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a4a      	ldr	r2, [pc, #296]	; (8006028 <HAL_DMA_Init+0x690>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d02c      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a48      	ldr	r2, [pc, #288]	; (800602c <HAL_DMA_Init+0x694>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d027      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a47      	ldr	r2, [pc, #284]	; (8006030 <HAL_DMA_Init+0x698>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d022      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a45      	ldr	r2, [pc, #276]	; (8006034 <HAL_DMA_Init+0x69c>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01d      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a44      	ldr	r2, [pc, #272]	; (8006038 <HAL_DMA_Init+0x6a0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a42      	ldr	r2, [pc, #264]	; (800603c <HAL_DMA_Init+0x6a4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a41      	ldr	r2, [pc, #260]	; (8006040 <HAL_DMA_Init+0x6a8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3f      	ldr	r2, [pc, #252]	; (8006044 <HAL_DMA_Init+0x6ac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3e      	ldr	r2, [pc, #248]	; (8006048 <HAL_DMA_Init+0x6b0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_DMA_Init+0x5c6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a3c      	ldr	r2, [pc, #240]	; (800604c <HAL_DMA_Init+0x6b4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_Init+0x5ca>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_DMA_Init+0x5cc>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d032      	beq.n	8005fce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f002 fbf9 	bl	8008760 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d102      	bne.n	8005f7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_DMA_Init+0x624>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d80c      	bhi.n	8005fbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 fc76 	bl	8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	e008      	b.n	8005fce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	a7fdabf8 	.word	0xa7fdabf8
 8005fec:	cccccccd 	.word	0xcccccccd
 8005ff0:	40020010 	.word	0x40020010
 8005ff4:	40020028 	.word	0x40020028
 8005ff8:	40020040 	.word	0x40020040
 8005ffc:	40020058 	.word	0x40020058
 8006000:	40020070 	.word	0x40020070
 8006004:	40020088 	.word	0x40020088
 8006008:	400200a0 	.word	0x400200a0
 800600c:	400200b8 	.word	0x400200b8
 8006010:	40020410 	.word	0x40020410
 8006014:	40020428 	.word	0x40020428
 8006018:	40020440 	.word	0x40020440
 800601c:	40020458 	.word	0x40020458
 8006020:	40020470 	.word	0x40020470
 8006024:	40020488 	.word	0x40020488
 8006028:	400204a0 	.word	0x400204a0
 800602c:	400204b8 	.word	0x400204b8
 8006030:	58025408 	.word	0x58025408
 8006034:	5802541c 	.word	0x5802541c
 8006038:	58025430 	.word	0x58025430
 800603c:	58025444 	.word	0x58025444
 8006040:	58025458 	.word	0x58025458
 8006044:	5802546c 	.word	0x5802546c
 8006048:	58025480 	.word	0x58025480
 800604c:	58025494 	.word	0x58025494

08006050 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e1a8      	b.n	80063b4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a82      	ldr	r2, [pc, #520]	; (8006270 <HAL_DMA_DeInit+0x220>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d04a      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a80      	ldr	r2, [pc, #512]	; (8006274 <HAL_DMA_DeInit+0x224>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d045      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a7f      	ldr	r2, [pc, #508]	; (8006278 <HAL_DMA_DeInit+0x228>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d040      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7d      	ldr	r2, [pc, #500]	; (800627c <HAL_DMA_DeInit+0x22c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d03b      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a7c      	ldr	r2, [pc, #496]	; (8006280 <HAL_DMA_DeInit+0x230>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d036      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a7a      	ldr	r2, [pc, #488]	; (8006284 <HAL_DMA_DeInit+0x234>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d031      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a79      	ldr	r2, [pc, #484]	; (8006288 <HAL_DMA_DeInit+0x238>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d02c      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a77      	ldr	r2, [pc, #476]	; (800628c <HAL_DMA_DeInit+0x23c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d027      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a76      	ldr	r2, [pc, #472]	; (8006290 <HAL_DMA_DeInit+0x240>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d022      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a74      	ldr	r2, [pc, #464]	; (8006294 <HAL_DMA_DeInit+0x244>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01d      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	; (8006298 <HAL_DMA_DeInit+0x248>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d018      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a71      	ldr	r2, [pc, #452]	; (800629c <HAL_DMA_DeInit+0x24c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a70      	ldr	r2, [pc, #448]	; (80062a0 <HAL_DMA_DeInit+0x250>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00e      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_DMA_DeInit+0x254>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a6d      	ldr	r2, [pc, #436]	; (80062a8 <HAL_DMA_DeInit+0x258>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_DMA_DeInit+0xb2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6b      	ldr	r2, [pc, #428]	; (80062ac <HAL_DMA_DeInit+0x25c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <HAL_DMA_DeInit+0xc4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <HAL_DMA_DeInit+0xd4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a51      	ldr	r2, [pc, #324]	; (8006270 <HAL_DMA_DeInit+0x220>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d04a      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a50      	ldr	r2, [pc, #320]	; (8006274 <HAL_DMA_DeInit+0x224>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d045      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a4e      	ldr	r2, [pc, #312]	; (8006278 <HAL_DMA_DeInit+0x228>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d040      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4d      	ldr	r2, [pc, #308]	; (800627c <HAL_DMA_DeInit+0x22c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d03b      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4b      	ldr	r2, [pc, #300]	; (8006280 <HAL_DMA_DeInit+0x230>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d036      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4a      	ldr	r2, [pc, #296]	; (8006284 <HAL_DMA_DeInit+0x234>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d031      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a48      	ldr	r2, [pc, #288]	; (8006288 <HAL_DMA_DeInit+0x238>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02c      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a47      	ldr	r2, [pc, #284]	; (800628c <HAL_DMA_DeInit+0x23c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d027      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a45      	ldr	r2, [pc, #276]	; (8006290 <HAL_DMA_DeInit+0x240>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d022      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a44      	ldr	r2, [pc, #272]	; (8006294 <HAL_DMA_DeInit+0x244>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01d      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a42      	ldr	r2, [pc, #264]	; (8006298 <HAL_DMA_DeInit+0x248>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d018      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a41      	ldr	r2, [pc, #260]	; (800629c <HAL_DMA_DeInit+0x24c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3f      	ldr	r2, [pc, #252]	; (80062a0 <HAL_DMA_DeInit+0x250>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00e      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3e      	ldr	r2, [pc, #248]	; (80062a4 <HAL_DMA_DeInit+0x254>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d009      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <HAL_DMA_DeInit+0x258>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_DMA_DeInit+0x174>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3b      	ldr	r2, [pc, #236]	; (80062ac <HAL_DMA_DeInit+0x25c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_DMA_DeInit+0x178>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_DMA_DeInit+0x17a>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d025      	beq.n	800621a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2200      	movs	r2, #0
 80061ec:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2221      	movs	r2, #33	; 0x21
 80061fc:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 f980 	bl	8008504 <DMA_CalcBaseAndBitshift>
 8006204:	4603      	mov	r3, r0
 8006206:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	223f      	movs	r2, #63	; 0x3f
 8006212:	409a      	lsls	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	609a      	str	r2, [r3, #8]
 8006218:	e081      	b.n	800631e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <HAL_DMA_DeInit+0x260>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d022      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <HAL_DMA_DeInit+0x264>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01d      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_DMA_DeInit+0x268>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d018      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1f      	ldr	r2, [pc, #124]	; (80062bc <HAL_DMA_DeInit+0x26c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <HAL_DMA_DeInit+0x270>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00e      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_DMA_DeInit+0x274>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d009      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_DMA_DeInit+0x278>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <HAL_DMA_DeInit+0x21a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <HAL_DMA_DeInit+0x27c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d132      	bne.n	80062d0 <HAL_DMA_DeInit+0x280>
 800626a:	2301      	movs	r3, #1
 800626c:	e031      	b.n	80062d2 <HAL_DMA_DeInit+0x282>
 800626e:	bf00      	nop
 8006270:	40020010 	.word	0x40020010
 8006274:	40020028 	.word	0x40020028
 8006278:	40020040 	.word	0x40020040
 800627c:	40020058 	.word	0x40020058
 8006280:	40020070 	.word	0x40020070
 8006284:	40020088 	.word	0x40020088
 8006288:	400200a0 	.word	0x400200a0
 800628c:	400200b8 	.word	0x400200b8
 8006290:	40020410 	.word	0x40020410
 8006294:	40020428 	.word	0x40020428
 8006298:	40020440 	.word	0x40020440
 800629c:	40020458 	.word	0x40020458
 80062a0:	40020470 	.word	0x40020470
 80062a4:	40020488 	.word	0x40020488
 80062a8:	400204a0 	.word	0x400204a0
 80062ac:	400204b8 	.word	0x400204b8
 80062b0:	58025408 	.word	0x58025408
 80062b4:	5802541c 	.word	0x5802541c
 80062b8:	58025430 	.word	0x58025430
 80062bc:	58025444 	.word	0x58025444
 80062c0:	58025458 	.word	0x58025458
 80062c4:	5802546c 	.word	0x5802546c
 80062c8:	58025480 	.word	0x58025480
 80062cc:	58025494 	.word	0x58025494
 80062d0:	2300      	movs	r3, #0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d021      	beq.n	800631a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2200      	movs	r2, #0
 80062ec:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2200      	movs	r2, #0
 80062f4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f002 f900 	bl	8008504 <DMA_CalcBaseAndBitshift>
 8006304:	4603      	mov	r3, r0
 8006306:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	e001      	b.n	800631e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e04a      	b.n	80063b4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f002 fa1e 	bl	8008760 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800633c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <HAL_DMA_DeInit+0x316>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b08      	cmp	r3, #8
 800634c:	d80b      	bhi.n	8006366 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f002 faa0 	bl	8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006364:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e226      	b.n	8006826 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_Start_IT+0x2a>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e21f      	b.n	8006826 <HAL_DMA_Start_IT+0x46a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f040 820a 	bne.w	8006810 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a68      	ldr	r2, [pc, #416]	; (80065b0 <HAL_DMA_Start_IT+0x1f4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a66      	ldr	r2, [pc, #408]	; (80065b4 <HAL_DMA_Start_IT+0x1f8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a65      	ldr	r2, [pc, #404]	; (80065b8 <HAL_DMA_Start_IT+0x1fc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a63      	ldr	r2, [pc, #396]	; (80065bc <HAL_DMA_Start_IT+0x200>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a62      	ldr	r2, [pc, #392]	; (80065c0 <HAL_DMA_Start_IT+0x204>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a60      	ldr	r2, [pc, #384]	; (80065c4 <HAL_DMA_Start_IT+0x208>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a5f      	ldr	r2, [pc, #380]	; (80065c8 <HAL_DMA_Start_IT+0x20c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a5d      	ldr	r2, [pc, #372]	; (80065cc <HAL_DMA_Start_IT+0x210>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5c      	ldr	r2, [pc, #368]	; (80065d0 <HAL_DMA_Start_IT+0x214>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5a      	ldr	r2, [pc, #360]	; (80065d4 <HAL_DMA_Start_IT+0x218>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a59      	ldr	r2, [pc, #356]	; (80065d8 <HAL_DMA_Start_IT+0x21c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a57      	ldr	r2, [pc, #348]	; (80065dc <HAL_DMA_Start_IT+0x220>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a56      	ldr	r2, [pc, #344]	; (80065e0 <HAL_DMA_Start_IT+0x224>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a54      	ldr	r2, [pc, #336]	; (80065e4 <HAL_DMA_Start_IT+0x228>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a53      	ldr	r2, [pc, #332]	; (80065e8 <HAL_DMA_Start_IT+0x22c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_Start_IT+0xee>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a51      	ldr	r2, [pc, #324]	; (80065ec <HAL_DMA_Start_IT+0x230>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <HAL_DMA_Start_IT+0x100>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <HAL_DMA_Start_IT+0x110>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f001 fe6a 	bl	80081ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <HAL_DMA_Start_IT+0x1f4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a33      	ldr	r2, [pc, #204]	; (80065b4 <HAL_DMA_Start_IT+0x1f8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a31      	ldr	r2, [pc, #196]	; (80065b8 <HAL_DMA_Start_IT+0x1fc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a30      	ldr	r2, [pc, #192]	; (80065bc <HAL_DMA_Start_IT+0x200>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <HAL_DMA_Start_IT+0x204>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <HAL_DMA_Start_IT+0x208>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <HAL_DMA_Start_IT+0x20c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <HAL_DMA_Start_IT+0x210>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a28      	ldr	r2, [pc, #160]	; (80065d0 <HAL_DMA_Start_IT+0x214>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <HAL_DMA_Start_IT+0x218>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a25      	ldr	r2, [pc, #148]	; (80065d8 <HAL_DMA_Start_IT+0x21c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a24      	ldr	r2, [pc, #144]	; (80065dc <HAL_DMA_Start_IT+0x220>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <HAL_DMA_Start_IT+0x224>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <HAL_DMA_Start_IT+0x228>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <HAL_DMA_Start_IT+0x22c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_Start_IT+0x1bc>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1e      	ldr	r2, [pc, #120]	; (80065ec <HAL_DMA_Start_IT+0x230>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_DMA_Start_IT+0x1c0>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_DMA_Start_IT+0x1c2>
 800657c:	2300      	movs	r3, #0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f023 021e 	bic.w	r2, r3, #30
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0216 	orr.w	r2, r2, #22
 8006594:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03e      	beq.n	800661c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0208 	orr.w	r2, r2, #8
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e035      	b.n	800661c <HAL_DMA_Start_IT+0x260>
 80065b0:	40020010 	.word	0x40020010
 80065b4:	40020028 	.word	0x40020028
 80065b8:	40020040 	.word	0x40020040
 80065bc:	40020058 	.word	0x40020058
 80065c0:	40020070 	.word	0x40020070
 80065c4:	40020088 	.word	0x40020088
 80065c8:	400200a0 	.word	0x400200a0
 80065cc:	400200b8 	.word	0x400200b8
 80065d0:	40020410 	.word	0x40020410
 80065d4:	40020428 	.word	0x40020428
 80065d8:	40020440 	.word	0x40020440
 80065dc:	40020458 	.word	0x40020458
 80065e0:	40020470 	.word	0x40020470
 80065e4:	40020488 	.word	0x40020488
 80065e8:	400204a0 	.word	0x400204a0
 80065ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 020e 	bic.w	r2, r3, #14
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 020a 	orr.w	r2, r2, #10
 8006602:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0204 	orr.w	r2, r2, #4
 800661a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a83      	ldr	r2, [pc, #524]	; (8006830 <HAL_DMA_Start_IT+0x474>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d072      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a82      	ldr	r2, [pc, #520]	; (8006834 <HAL_DMA_Start_IT+0x478>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d06d      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a80      	ldr	r2, [pc, #512]	; (8006838 <HAL_DMA_Start_IT+0x47c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d068      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a7f      	ldr	r2, [pc, #508]	; (800683c <HAL_DMA_Start_IT+0x480>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d063      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7d      	ldr	r2, [pc, #500]	; (8006840 <HAL_DMA_Start_IT+0x484>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d05e      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7c      	ldr	r2, [pc, #496]	; (8006844 <HAL_DMA_Start_IT+0x488>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d059      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a7a      	ldr	r2, [pc, #488]	; (8006848 <HAL_DMA_Start_IT+0x48c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d054      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a79      	ldr	r2, [pc, #484]	; (800684c <HAL_DMA_Start_IT+0x490>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d04f      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a77      	ldr	r2, [pc, #476]	; (8006850 <HAL_DMA_Start_IT+0x494>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d04a      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a76      	ldr	r2, [pc, #472]	; (8006854 <HAL_DMA_Start_IT+0x498>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d045      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a74      	ldr	r2, [pc, #464]	; (8006858 <HAL_DMA_Start_IT+0x49c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d040      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a73      	ldr	r2, [pc, #460]	; (800685c <HAL_DMA_Start_IT+0x4a0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d03b      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a71      	ldr	r2, [pc, #452]	; (8006860 <HAL_DMA_Start_IT+0x4a4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d036      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a70      	ldr	r2, [pc, #448]	; (8006864 <HAL_DMA_Start_IT+0x4a8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d031      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a6e      	ldr	r2, [pc, #440]	; (8006868 <HAL_DMA_Start_IT+0x4ac>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02c      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a6d      	ldr	r2, [pc, #436]	; (800686c <HAL_DMA_Start_IT+0x4b0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d027      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a6b      	ldr	r2, [pc, #428]	; (8006870 <HAL_DMA_Start_IT+0x4b4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a6a      	ldr	r2, [pc, #424]	; (8006874 <HAL_DMA_Start_IT+0x4b8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a68      	ldr	r2, [pc, #416]	; (8006878 <HAL_DMA_Start_IT+0x4bc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a67      	ldr	r2, [pc, #412]	; (800687c <HAL_DMA_Start_IT+0x4c0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a65      	ldr	r2, [pc, #404]	; (8006880 <HAL_DMA_Start_IT+0x4c4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a64      	ldr	r2, [pc, #400]	; (8006884 <HAL_DMA_Start_IT+0x4c8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a62      	ldr	r2, [pc, #392]	; (8006888 <HAL_DMA_Start_IT+0x4cc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_DMA_Start_IT+0x350>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a61      	ldr	r2, [pc, #388]	; (800688c <HAL_DMA_Start_IT+0x4d0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_DMA_Start_IT+0x354>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_DMA_Start_IT+0x356>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006732:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800674a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a37      	ldr	r2, [pc, #220]	; (8006830 <HAL_DMA_Start_IT+0x474>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04a      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a36      	ldr	r2, [pc, #216]	; (8006834 <HAL_DMA_Start_IT+0x478>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d045      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a34      	ldr	r2, [pc, #208]	; (8006838 <HAL_DMA_Start_IT+0x47c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d040      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a33      	ldr	r2, [pc, #204]	; (800683c <HAL_DMA_Start_IT+0x480>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d03b      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a31      	ldr	r2, [pc, #196]	; (8006840 <HAL_DMA_Start_IT+0x484>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d036      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a30      	ldr	r2, [pc, #192]	; (8006844 <HAL_DMA_Start_IT+0x488>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d031      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2e      	ldr	r2, [pc, #184]	; (8006848 <HAL_DMA_Start_IT+0x48c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d02c      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2d      	ldr	r2, [pc, #180]	; (800684c <HAL_DMA_Start_IT+0x490>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d027      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2b      	ldr	r2, [pc, #172]	; (8006850 <HAL_DMA_Start_IT+0x494>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2a      	ldr	r2, [pc, #168]	; (8006854 <HAL_DMA_Start_IT+0x498>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01d      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a28      	ldr	r2, [pc, #160]	; (8006858 <HAL_DMA_Start_IT+0x49c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a27      	ldr	r2, [pc, #156]	; (800685c <HAL_DMA_Start_IT+0x4a0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a25      	ldr	r2, [pc, #148]	; (8006860 <HAL_DMA_Start_IT+0x4a4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a24      	ldr	r2, [pc, #144]	; (8006864 <HAL_DMA_Start_IT+0x4a8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	; (8006868 <HAL_DMA_Start_IT+0x4ac>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_DMA_Start_IT+0x430>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <HAL_DMA_Start_IT+0x4b0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <HAL_DMA_Start_IT+0x442>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e012      	b.n	8006824 <HAL_DMA_Start_IT+0x468>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0201 	orr.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e009      	b.n	8006824 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006816:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40020010 	.word	0x40020010
 8006834:	40020028 	.word	0x40020028
 8006838:	40020040 	.word	0x40020040
 800683c:	40020058 	.word	0x40020058
 8006840:	40020070 	.word	0x40020070
 8006844:	40020088 	.word	0x40020088
 8006848:	400200a0 	.word	0x400200a0
 800684c:	400200b8 	.word	0x400200b8
 8006850:	40020410 	.word	0x40020410
 8006854:	40020428 	.word	0x40020428
 8006858:	40020440 	.word	0x40020440
 800685c:	40020458 	.word	0x40020458
 8006860:	40020470 	.word	0x40020470
 8006864:	40020488 	.word	0x40020488
 8006868:	400204a0 	.word	0x400204a0
 800686c:	400204b8 	.word	0x400204b8
 8006870:	58025408 	.word	0x58025408
 8006874:	5802541c 	.word	0x5802541c
 8006878:	58025430 	.word	0x58025430
 800687c:	58025444 	.word	0x58025444
 8006880:	58025458 	.word	0x58025458
 8006884:	5802546c 	.word	0x5802546c
 8006888:	58025480 	.word	0x58025480
 800688c:	58025494 	.word	0x58025494

08006890 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006898:	f7fe faae 	bl	8004df8 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e2dc      	b.n	8006e62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d008      	beq.n	80068c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e2cd      	b.n	8006e62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a76      	ldr	r2, [pc, #472]	; (8006aa4 <HAL_DMA_Abort+0x214>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d04a      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a74      	ldr	r2, [pc, #464]	; (8006aa8 <HAL_DMA_Abort+0x218>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d045      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a73      	ldr	r2, [pc, #460]	; (8006aac <HAL_DMA_Abort+0x21c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d040      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a71      	ldr	r2, [pc, #452]	; (8006ab0 <HAL_DMA_Abort+0x220>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d03b      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a70      	ldr	r2, [pc, #448]	; (8006ab4 <HAL_DMA_Abort+0x224>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d036      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6e      	ldr	r2, [pc, #440]	; (8006ab8 <HAL_DMA_Abort+0x228>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d031      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a6d      	ldr	r2, [pc, #436]	; (8006abc <HAL_DMA_Abort+0x22c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d02c      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a6b      	ldr	r2, [pc, #428]	; (8006ac0 <HAL_DMA_Abort+0x230>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d027      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6a      	ldr	r2, [pc, #424]	; (8006ac4 <HAL_DMA_Abort+0x234>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d022      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a68      	ldr	r2, [pc, #416]	; (8006ac8 <HAL_DMA_Abort+0x238>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01d      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a67      	ldr	r2, [pc, #412]	; (8006acc <HAL_DMA_Abort+0x23c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d018      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a65      	ldr	r2, [pc, #404]	; (8006ad0 <HAL_DMA_Abort+0x240>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a64      	ldr	r2, [pc, #400]	; (8006ad4 <HAL_DMA_Abort+0x244>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00e      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a62      	ldr	r2, [pc, #392]	; (8006ad8 <HAL_DMA_Abort+0x248>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a61      	ldr	r2, [pc, #388]	; (8006adc <HAL_DMA_Abort+0x24c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d004      	beq.n	8006966 <HAL_DMA_Abort+0xd6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5f      	ldr	r2, [pc, #380]	; (8006ae0 <HAL_DMA_Abort+0x250>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <HAL_DMA_Abort+0xda>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_DMA_Abort+0xdc>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d013      	beq.n	8006998 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 021e 	bic.w	r2, r2, #30
 800697e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800698e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e00a      	b.n	80069ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 020e 	bic.w	r2, r2, #14
 80069a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3c      	ldr	r2, [pc, #240]	; (8006aa4 <HAL_DMA_Abort+0x214>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d072      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3a      	ldr	r2, [pc, #232]	; (8006aa8 <HAL_DMA_Abort+0x218>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d06d      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a39      	ldr	r2, [pc, #228]	; (8006aac <HAL_DMA_Abort+0x21c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d068      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a37      	ldr	r2, [pc, #220]	; (8006ab0 <HAL_DMA_Abort+0x220>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d063      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a36      	ldr	r2, [pc, #216]	; (8006ab4 <HAL_DMA_Abort+0x224>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d05e      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a34      	ldr	r2, [pc, #208]	; (8006ab8 <HAL_DMA_Abort+0x228>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d059      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a33      	ldr	r2, [pc, #204]	; (8006abc <HAL_DMA_Abort+0x22c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d054      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a31      	ldr	r2, [pc, #196]	; (8006ac0 <HAL_DMA_Abort+0x230>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d04f      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a30      	ldr	r2, [pc, #192]	; (8006ac4 <HAL_DMA_Abort+0x234>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d04a      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <HAL_DMA_Abort+0x238>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d045      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2d      	ldr	r2, [pc, #180]	; (8006acc <HAL_DMA_Abort+0x23c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d040      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <HAL_DMA_Abort+0x240>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d03b      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <HAL_DMA_Abort+0x244>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d036      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a28      	ldr	r2, [pc, #160]	; (8006ad8 <HAL_DMA_Abort+0x248>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d031      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a27      	ldr	r2, [pc, #156]	; (8006adc <HAL_DMA_Abort+0x24c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d02c      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <HAL_DMA_Abort+0x250>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d027      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <HAL_DMA_Abort+0x254>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d022      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <HAL_DMA_Abort+0x258>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d01d      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a21      	ldr	r2, [pc, #132]	; (8006aec <HAL_DMA_Abort+0x25c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d018      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <HAL_DMA_Abort+0x260>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <HAL_DMA_Abort+0x264>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00e      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <HAL_DMA_Abort+0x268>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <HAL_DMA_Abort+0x26c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <HAL_DMA_Abort+0x20e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_DMA_Abort+0x270>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d132      	bne.n	8006b04 <HAL_DMA_Abort+0x274>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e031      	b.n	8006b06 <HAL_DMA_Abort+0x276>
 8006aa2:	bf00      	nop
 8006aa4:	40020010 	.word	0x40020010
 8006aa8:	40020028 	.word	0x40020028
 8006aac:	40020040 	.word	0x40020040
 8006ab0:	40020058 	.word	0x40020058
 8006ab4:	40020070 	.word	0x40020070
 8006ab8:	40020088 	.word	0x40020088
 8006abc:	400200a0 	.word	0x400200a0
 8006ac0:	400200b8 	.word	0x400200b8
 8006ac4:	40020410 	.word	0x40020410
 8006ac8:	40020428 	.word	0x40020428
 8006acc:	40020440 	.word	0x40020440
 8006ad0:	40020458 	.word	0x40020458
 8006ad4:	40020470 	.word	0x40020470
 8006ad8:	40020488 	.word	0x40020488
 8006adc:	400204a0 	.word	0x400204a0
 8006ae0:	400204b8 	.word	0x400204b8
 8006ae4:	58025408 	.word	0x58025408
 8006ae8:	5802541c 	.word	0x5802541c
 8006aec:	58025430 	.word	0x58025430
 8006af0:	58025444 	.word	0x58025444
 8006af4:	58025458 	.word	0x58025458
 8006af8:	5802546c 	.word	0x5802546c
 8006afc:	58025480 	.word	0x58025480
 8006b00:	58025494 	.word	0x58025494
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6d      	ldr	r2, [pc, #436]	; (8006cd4 <HAL_DMA_Abort+0x444>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04a      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a6b      	ldr	r2, [pc, #428]	; (8006cd8 <HAL_DMA_Abort+0x448>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d045      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6a      	ldr	r2, [pc, #424]	; (8006cdc <HAL_DMA_Abort+0x44c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d040      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a68      	ldr	r2, [pc, #416]	; (8006ce0 <HAL_DMA_Abort+0x450>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a67      	ldr	r2, [pc, #412]	; (8006ce4 <HAL_DMA_Abort+0x454>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d036      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a65      	ldr	r2, [pc, #404]	; (8006ce8 <HAL_DMA_Abort+0x458>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d031      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a64      	ldr	r2, [pc, #400]	; (8006cec <HAL_DMA_Abort+0x45c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d02c      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a62      	ldr	r2, [pc, #392]	; (8006cf0 <HAL_DMA_Abort+0x460>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d027      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a61      	ldr	r2, [pc, #388]	; (8006cf4 <HAL_DMA_Abort+0x464>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a5f      	ldr	r2, [pc, #380]	; (8006cf8 <HAL_DMA_Abort+0x468>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a5e      	ldr	r2, [pc, #376]	; (8006cfc <HAL_DMA_Abort+0x46c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d018      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5c      	ldr	r2, [pc, #368]	; (8006d00 <HAL_DMA_Abort+0x470>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <HAL_DMA_Abort+0x474>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a59      	ldr	r2, [pc, #356]	; (8006d08 <HAL_DMA_Abort+0x478>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a58      	ldr	r2, [pc, #352]	; (8006d0c <HAL_DMA_Abort+0x47c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_DMA_Abort+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a56      	ldr	r2, [pc, #344]	; (8006d10 <HAL_DMA_Abort+0x480>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <HAL_DMA_Abort+0x33c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e007      	b.n	8006bdc <HAL_DMA_Abort+0x34c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bdc:	e013      	b.n	8006c06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bde:	f7fe f90b 	bl	8004df8 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d90c      	bls.n	8006c06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e12d      	b.n	8006e62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2f      	ldr	r2, [pc, #188]	; (8006cd4 <HAL_DMA_Abort+0x444>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d04a      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2d      	ldr	r2, [pc, #180]	; (8006cd8 <HAL_DMA_Abort+0x448>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d045      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_DMA_Abort+0x44c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d040      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a2a      	ldr	r2, [pc, #168]	; (8006ce0 <HAL_DMA_Abort+0x450>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d03b      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a29      	ldr	r2, [pc, #164]	; (8006ce4 <HAL_DMA_Abort+0x454>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d036      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <HAL_DMA_Abort+0x458>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d031      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a26      	ldr	r2, [pc, #152]	; (8006cec <HAL_DMA_Abort+0x45c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d02c      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a24      	ldr	r2, [pc, #144]	; (8006cf0 <HAL_DMA_Abort+0x460>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d027      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <HAL_DMA_Abort+0x464>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d022      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a21      	ldr	r2, [pc, #132]	; (8006cf8 <HAL_DMA_Abort+0x468>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d01d      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <HAL_DMA_Abort+0x46c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d018      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <HAL_DMA_Abort+0x470>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <HAL_DMA_Abort+0x474>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_DMA_Abort+0x478>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1a      	ldr	r2, [pc, #104]	; (8006d0c <HAL_DMA_Abort+0x47c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_DMA_Abort+0x422>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <HAL_DMA_Abort+0x480>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_DMA_Abort+0x426>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <HAL_DMA_Abort+0x428>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d02b      	beq.n	8006d14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	223f      	movs	r2, #63	; 0x3f
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
 8006cd2:	e02a      	b.n	8006d2a <HAL_DMA_Abort+0x49a>
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2201      	movs	r2, #1
 8006d24:	409a      	lsls	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a4f      	ldr	r2, [pc, #316]	; (8006e6c <HAL_DMA_Abort+0x5dc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d072      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a4d      	ldr	r2, [pc, #308]	; (8006e70 <HAL_DMA_Abort+0x5e0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d06d      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4c      	ldr	r2, [pc, #304]	; (8006e74 <HAL_DMA_Abort+0x5e4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d068      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a4a      	ldr	r2, [pc, #296]	; (8006e78 <HAL_DMA_Abort+0x5e8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d063      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a49      	ldr	r2, [pc, #292]	; (8006e7c <HAL_DMA_Abort+0x5ec>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d05e      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a47      	ldr	r2, [pc, #284]	; (8006e80 <HAL_DMA_Abort+0x5f0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d059      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a46      	ldr	r2, [pc, #280]	; (8006e84 <HAL_DMA_Abort+0x5f4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d054      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a44      	ldr	r2, [pc, #272]	; (8006e88 <HAL_DMA_Abort+0x5f8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04f      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a43      	ldr	r2, [pc, #268]	; (8006e8c <HAL_DMA_Abort+0x5fc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d04a      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a41      	ldr	r2, [pc, #260]	; (8006e90 <HAL_DMA_Abort+0x600>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d045      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a40      	ldr	r2, [pc, #256]	; (8006e94 <HAL_DMA_Abort+0x604>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d040      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3e      	ldr	r2, [pc, #248]	; (8006e98 <HAL_DMA_Abort+0x608>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d03b      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3d      	ldr	r2, [pc, #244]	; (8006e9c <HAL_DMA_Abort+0x60c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d036      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3b      	ldr	r2, [pc, #236]	; (8006ea0 <HAL_DMA_Abort+0x610>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d031      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3a      	ldr	r2, [pc, #232]	; (8006ea4 <HAL_DMA_Abort+0x614>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d02c      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a38      	ldr	r2, [pc, #224]	; (8006ea8 <HAL_DMA_Abort+0x618>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d027      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a37      	ldr	r2, [pc, #220]	; (8006eac <HAL_DMA_Abort+0x61c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d022      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a35      	ldr	r2, [pc, #212]	; (8006eb0 <HAL_DMA_Abort+0x620>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01d      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a34      	ldr	r2, [pc, #208]	; (8006eb4 <HAL_DMA_Abort+0x624>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d018      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a32      	ldr	r2, [pc, #200]	; (8006eb8 <HAL_DMA_Abort+0x628>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a31      	ldr	r2, [pc, #196]	; (8006ebc <HAL_DMA_Abort+0x62c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2f      	ldr	r2, [pc, #188]	; (8006ec0 <HAL_DMA_Abort+0x630>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ec4 <HAL_DMA_Abort+0x634>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_DMA_Abort+0x58a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <HAL_DMA_Abort+0x638>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_DMA_Abort+0x58e>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_DMA_Abort+0x590>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40020010 	.word	0x40020010
 8006e70:	40020028 	.word	0x40020028
 8006e74:	40020040 	.word	0x40020040
 8006e78:	40020058 	.word	0x40020058
 8006e7c:	40020070 	.word	0x40020070
 8006e80:	40020088 	.word	0x40020088
 8006e84:	400200a0 	.word	0x400200a0
 8006e88:	400200b8 	.word	0x400200b8
 8006e8c:	40020410 	.word	0x40020410
 8006e90:	40020428 	.word	0x40020428
 8006e94:	40020440 	.word	0x40020440
 8006e98:	40020458 	.word	0x40020458
 8006e9c:	40020470 	.word	0x40020470
 8006ea0:	40020488 	.word	0x40020488
 8006ea4:	400204a0 	.word	0x400204a0
 8006ea8:	400204b8 	.word	0x400204b8
 8006eac:	58025408 	.word	0x58025408
 8006eb0:	5802541c 	.word	0x5802541c
 8006eb4:	58025430 	.word	0x58025430
 8006eb8:	58025444 	.word	0x58025444
 8006ebc:	58025458 	.word	0x58025458
 8006ec0:	5802546c 	.word	0x5802546c
 8006ec4:	58025480 	.word	0x58025480
 8006ec8:	58025494 	.word	0x58025494

08006ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e237      	b.n	800734e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e22c      	b.n	800734e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_DMA_Abort_IT+0x1a0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d04a      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5b      	ldr	r2, [pc, #364]	; (8007070 <HAL_DMA_Abort_IT+0x1a4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d045      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a59      	ldr	r2, [pc, #356]	; (8007074 <HAL_DMA_Abort_IT+0x1a8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d040      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a58      	ldr	r2, [pc, #352]	; (8007078 <HAL_DMA_Abort_IT+0x1ac>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d03b      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a56      	ldr	r2, [pc, #344]	; (800707c <HAL_DMA_Abort_IT+0x1b0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d036      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a55      	ldr	r2, [pc, #340]	; (8007080 <HAL_DMA_Abort_IT+0x1b4>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d031      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a53      	ldr	r2, [pc, #332]	; (8007084 <HAL_DMA_Abort_IT+0x1b8>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d02c      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a52      	ldr	r2, [pc, #328]	; (8007088 <HAL_DMA_Abort_IT+0x1bc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d027      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a50      	ldr	r2, [pc, #320]	; (800708c <HAL_DMA_Abort_IT+0x1c0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d022      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4f      	ldr	r2, [pc, #316]	; (8007090 <HAL_DMA_Abort_IT+0x1c4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d01d      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4d      	ldr	r2, [pc, #308]	; (8007094 <HAL_DMA_Abort_IT+0x1c8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d018      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4c      	ldr	r2, [pc, #304]	; (8007098 <HAL_DMA_Abort_IT+0x1cc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a4a      	ldr	r2, [pc, #296]	; (800709c <HAL_DMA_Abort_IT+0x1d0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00e      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a49      	ldr	r2, [pc, #292]	; (80070a0 <HAL_DMA_Abort_IT+0x1d4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d009      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a47      	ldr	r2, [pc, #284]	; (80070a4 <HAL_DMA_Abort_IT+0x1d8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_DMA_Abort_IT+0xc8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a46      	ldr	r2, [pc, #280]	; (80070a8 <HAL_DMA_Abort_IT+0x1dc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <HAL_DMA_Abort_IT+0xcc>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_DMA_Abort_IT+0xce>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8086 	beq.w	80070ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2f      	ldr	r2, [pc, #188]	; (800706c <HAL_DMA_Abort_IT+0x1a0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d04a      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <HAL_DMA_Abort_IT+0x1a4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d045      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <HAL_DMA_Abort_IT+0x1a8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d040      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <HAL_DMA_Abort_IT+0x1ac>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d03b      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a29      	ldr	r2, [pc, #164]	; (800707c <HAL_DMA_Abort_IT+0x1b0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d036      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a28      	ldr	r2, [pc, #160]	; (8007080 <HAL_DMA_Abort_IT+0x1b4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d031      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a26      	ldr	r2, [pc, #152]	; (8007084 <HAL_DMA_Abort_IT+0x1b8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d02c      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_DMA_Abort_IT+0x1bc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d027      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	; (800708c <HAL_DMA_Abort_IT+0x1c0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d022      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a22      	ldr	r2, [pc, #136]	; (8007090 <HAL_DMA_Abort_IT+0x1c4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_DMA_Abort_IT+0x1c8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <HAL_DMA_Abort_IT+0x1cc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1d      	ldr	r2, [pc, #116]	; (800709c <HAL_DMA_Abort_IT+0x1d0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <HAL_DMA_Abort_IT+0x1d4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1a      	ldr	r2, [pc, #104]	; (80070a4 <HAL_DMA_Abort_IT+0x1d8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_DMA_Abort_IT+0x17c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a19      	ldr	r2, [pc, #100]	; (80070a8 <HAL_DMA_Abort_IT+0x1dc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d108      	bne.n	800705a <HAL_DMA_Abort_IT+0x18e>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e178      	b.n	800734c <HAL_DMA_Abort_IT+0x480>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e16f      	b.n	800734c <HAL_DMA_Abort_IT+0x480>
 800706c:	40020010 	.word	0x40020010
 8007070:	40020028 	.word	0x40020028
 8007074:	40020040 	.word	0x40020040
 8007078:	40020058 	.word	0x40020058
 800707c:	40020070 	.word	0x40020070
 8007080:	40020088 	.word	0x40020088
 8007084:	400200a0 	.word	0x400200a0
 8007088:	400200b8 	.word	0x400200b8
 800708c:	40020410 	.word	0x40020410
 8007090:	40020428 	.word	0x40020428
 8007094:	40020440 	.word	0x40020440
 8007098:	40020458 	.word	0x40020458
 800709c:	40020470 	.word	0x40020470
 80070a0:	40020488 	.word	0x40020488
 80070a4:	400204a0 	.word	0x400204a0
 80070a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 020e 	bic.w	r2, r2, #14
 80070ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a6c      	ldr	r2, [pc, #432]	; (8007274 <HAL_DMA_Abort_IT+0x3a8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d04a      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a6b      	ldr	r2, [pc, #428]	; (8007278 <HAL_DMA_Abort_IT+0x3ac>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d045      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a69      	ldr	r2, [pc, #420]	; (800727c <HAL_DMA_Abort_IT+0x3b0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d040      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a68      	ldr	r2, [pc, #416]	; (8007280 <HAL_DMA_Abort_IT+0x3b4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d03b      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a66      	ldr	r2, [pc, #408]	; (8007284 <HAL_DMA_Abort_IT+0x3b8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d036      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a65      	ldr	r2, [pc, #404]	; (8007288 <HAL_DMA_Abort_IT+0x3bc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d031      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a63      	ldr	r2, [pc, #396]	; (800728c <HAL_DMA_Abort_IT+0x3c0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d02c      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a62      	ldr	r2, [pc, #392]	; (8007290 <HAL_DMA_Abort_IT+0x3c4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d027      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a60      	ldr	r2, [pc, #384]	; (8007294 <HAL_DMA_Abort_IT+0x3c8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d022      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5f      	ldr	r2, [pc, #380]	; (8007298 <HAL_DMA_Abort_IT+0x3cc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d01d      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a5d      	ldr	r2, [pc, #372]	; (800729c <HAL_DMA_Abort_IT+0x3d0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d018      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a5c      	ldr	r2, [pc, #368]	; (80072a0 <HAL_DMA_Abort_IT+0x3d4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d013      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5a      	ldr	r2, [pc, #360]	; (80072a4 <HAL_DMA_Abort_IT+0x3d8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00e      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a59      	ldr	r2, [pc, #356]	; (80072a8 <HAL_DMA_Abort_IT+0x3dc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d009      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a57      	ldr	r2, [pc, #348]	; (80072ac <HAL_DMA_Abort_IT+0x3e0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_DMA_Abort_IT+0x290>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a56      	ldr	r2, [pc, #344]	; (80072b0 <HAL_DMA_Abort_IT+0x3e4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d108      	bne.n	800716e <HAL_DMA_Abort_IT+0x2a2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e007      	b.n	800717e <HAL_DMA_Abort_IT+0x2b2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0201 	bic.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3c      	ldr	r2, [pc, #240]	; (8007274 <HAL_DMA_Abort_IT+0x3a8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d072      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3a      	ldr	r2, [pc, #232]	; (8007278 <HAL_DMA_Abort_IT+0x3ac>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d06d      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a39      	ldr	r2, [pc, #228]	; (800727c <HAL_DMA_Abort_IT+0x3b0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d068      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a37      	ldr	r2, [pc, #220]	; (8007280 <HAL_DMA_Abort_IT+0x3b4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d063      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a36      	ldr	r2, [pc, #216]	; (8007284 <HAL_DMA_Abort_IT+0x3b8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d05e      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a34      	ldr	r2, [pc, #208]	; (8007288 <HAL_DMA_Abort_IT+0x3bc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d059      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a33      	ldr	r2, [pc, #204]	; (800728c <HAL_DMA_Abort_IT+0x3c0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d054      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a31      	ldr	r2, [pc, #196]	; (8007290 <HAL_DMA_Abort_IT+0x3c4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04f      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a30      	ldr	r2, [pc, #192]	; (8007294 <HAL_DMA_Abort_IT+0x3c8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2e      	ldr	r2, [pc, #184]	; (8007298 <HAL_DMA_Abort_IT+0x3cc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2d      	ldr	r2, [pc, #180]	; (800729c <HAL_DMA_Abort_IT+0x3d0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2b      	ldr	r2, [pc, #172]	; (80072a0 <HAL_DMA_Abort_IT+0x3d4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <HAL_DMA_Abort_IT+0x3d8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a28      	ldr	r2, [pc, #160]	; (80072a8 <HAL_DMA_Abort_IT+0x3dc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a27      	ldr	r2, [pc, #156]	; (80072ac <HAL_DMA_Abort_IT+0x3e0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a25      	ldr	r2, [pc, #148]	; (80072b0 <HAL_DMA_Abort_IT+0x3e4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a24      	ldr	r2, [pc, #144]	; (80072b4 <HAL_DMA_Abort_IT+0x3e8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	; (80072b8 <HAL_DMA_Abort_IT+0x3ec>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <HAL_DMA_Abort_IT+0x3f0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <HAL_DMA_Abort_IT+0x3f4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	; (80072c4 <HAL_DMA_Abort_IT+0x3f8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <HAL_DMA_Abort_IT+0x3fc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_DMA_Abort_IT+0x400>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_DMA_Abort_IT+0x3a2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <HAL_DMA_Abort_IT+0x404>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d132      	bne.n	80072d4 <HAL_DMA_Abort_IT+0x408>
 800726e:	2301      	movs	r3, #1
 8007270:	e031      	b.n	80072d6 <HAL_DMA_Abort_IT+0x40a>
 8007272:	bf00      	nop
 8007274:	40020010 	.word	0x40020010
 8007278:	40020028 	.word	0x40020028
 800727c:	40020040 	.word	0x40020040
 8007280:	40020058 	.word	0x40020058
 8007284:	40020070 	.word	0x40020070
 8007288:	40020088 	.word	0x40020088
 800728c:	400200a0 	.word	0x400200a0
 8007290:	400200b8 	.word	0x400200b8
 8007294:	40020410 	.word	0x40020410
 8007298:	40020428 	.word	0x40020428
 800729c:	40020440 	.word	0x40020440
 80072a0:	40020458 	.word	0x40020458
 80072a4:	40020470 	.word	0x40020470
 80072a8:	40020488 	.word	0x40020488
 80072ac:	400204a0 	.word	0x400204a0
 80072b0:	400204b8 	.word	0x400204b8
 80072b4:	58025408 	.word	0x58025408
 80072b8:	5802541c 	.word	0x5802541c
 80072bc:	58025430 	.word	0x58025430
 80072c0:	58025444 	.word	0x58025444
 80072c4:	58025458 	.word	0x58025458
 80072c8:	5802546c 	.word	0x5802546c
 80072cc:	58025480 	.word	0x58025480
 80072d0:	58025494 	.word	0x58025494
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2201      	movs	r2, #1
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007308:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800731c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007320:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800732a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop

08007358 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007364:	4b67      	ldr	r3, [pc, #412]	; (8007504 <HAL_DMA_IRQHandler+0x1ac>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a67      	ldr	r2, [pc, #412]	; (8007508 <HAL_DMA_IRQHandler+0x1b0>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	0a9b      	lsrs	r3, r3, #10
 8007370:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a5f      	ldr	r2, [pc, #380]	; (800750c <HAL_DMA_IRQHandler+0x1b4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d04a      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a5d      	ldr	r2, [pc, #372]	; (8007510 <HAL_DMA_IRQHandler+0x1b8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d045      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a5c      	ldr	r2, [pc, #368]	; (8007514 <HAL_DMA_IRQHandler+0x1bc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d040      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a5a      	ldr	r2, [pc, #360]	; (8007518 <HAL_DMA_IRQHandler+0x1c0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d03b      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a59      	ldr	r2, [pc, #356]	; (800751c <HAL_DMA_IRQHandler+0x1c4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d036      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a57      	ldr	r2, [pc, #348]	; (8007520 <HAL_DMA_IRQHandler+0x1c8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d031      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a56      	ldr	r2, [pc, #344]	; (8007524 <HAL_DMA_IRQHandler+0x1cc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d02c      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a54      	ldr	r2, [pc, #336]	; (8007528 <HAL_DMA_IRQHandler+0x1d0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d027      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a53      	ldr	r2, [pc, #332]	; (800752c <HAL_DMA_IRQHandler+0x1d4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a51      	ldr	r2, [pc, #324]	; (8007530 <HAL_DMA_IRQHandler+0x1d8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a50      	ldr	r2, [pc, #320]	; (8007534 <HAL_DMA_IRQHandler+0x1dc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a4e      	ldr	r2, [pc, #312]	; (8007538 <HAL_DMA_IRQHandler+0x1e0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4d      	ldr	r2, [pc, #308]	; (800753c <HAL_DMA_IRQHandler+0x1e4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a4b      	ldr	r2, [pc, #300]	; (8007540 <HAL_DMA_IRQHandler+0x1e8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4a      	ldr	r2, [pc, #296]	; (8007544 <HAL_DMA_IRQHandler+0x1ec>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_DMA_IRQHandler+0xd2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a48      	ldr	r2, [pc, #288]	; (8007548 <HAL_DMA_IRQHandler+0x1f0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <HAL_DMA_IRQHandler+0xd6>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_DMA_IRQHandler+0xd8>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 842b 	beq.w	8007c8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2208      	movs	r2, #8
 8007440:	409a      	lsls	r2, r3
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4013      	ands	r3, r2
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 80a2 	beq.w	8007590 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2e      	ldr	r2, [pc, #184]	; (800750c <HAL_DMA_IRQHandler+0x1b4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d04a      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2d      	ldr	r2, [pc, #180]	; (8007510 <HAL_DMA_IRQHandler+0x1b8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d045      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2b      	ldr	r2, [pc, #172]	; (8007514 <HAL_DMA_IRQHandler+0x1bc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d040      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <HAL_DMA_IRQHandler+0x1c0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d03b      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a28      	ldr	r2, [pc, #160]	; (800751c <HAL_DMA_IRQHandler+0x1c4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d036      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a27      	ldr	r2, [pc, #156]	; (8007520 <HAL_DMA_IRQHandler+0x1c8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d031      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a25      	ldr	r2, [pc, #148]	; (8007524 <HAL_DMA_IRQHandler+0x1cc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02c      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a24      	ldr	r2, [pc, #144]	; (8007528 <HAL_DMA_IRQHandler+0x1d0>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d027      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a22      	ldr	r2, [pc, #136]	; (800752c <HAL_DMA_IRQHandler+0x1d4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d022      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a21      	ldr	r2, [pc, #132]	; (8007530 <HAL_DMA_IRQHandler+0x1d8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d01d      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <HAL_DMA_IRQHandler+0x1dc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d018      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <HAL_DMA_IRQHandler+0x1e0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a1c      	ldr	r2, [pc, #112]	; (800753c <HAL_DMA_IRQHandler+0x1e4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <HAL_DMA_IRQHandler+0x1e8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a19      	ldr	r2, [pc, #100]	; (8007544 <HAL_DMA_IRQHandler+0x1ec>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_IRQHandler+0x194>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a18      	ldr	r2, [pc, #96]	; (8007548 <HAL_DMA_IRQHandler+0x1f0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d12f      	bne.n	800754c <HAL_DMA_IRQHandler+0x1f4>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e02e      	b.n	8007560 <HAL_DMA_IRQHandler+0x208>
 8007502:	bf00      	nop
 8007504:	24000000 	.word	0x24000000
 8007508:	1b4e81b5 	.word	0x1b4e81b5
 800750c:	40020010 	.word	0x40020010
 8007510:	40020028 	.word	0x40020028
 8007514:	40020040 	.word	0x40020040
 8007518:	40020058 	.word	0x40020058
 800751c:	40020070 	.word	0x40020070
 8007520:	40020088 	.word	0x40020088
 8007524:	400200a0 	.word	0x400200a0
 8007528:	400200b8 	.word	0x400200b8
 800752c:	40020410 	.word	0x40020410
 8007530:	40020428 	.word	0x40020428
 8007534:	40020440 	.word	0x40020440
 8007538:	40020458 	.word	0x40020458
 800753c:	40020470 	.word	0x40020470
 8007540:	40020488 	.word	0x40020488
 8007544:	400204a0 	.word	0x400204a0
 8007548:	400204b8 	.word	0x400204b8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d015      	beq.n	8007590 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0204 	bic.w	r2, r2, #4
 8007572:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007578:	f003 031f 	and.w	r3, r3, #31
 800757c:	2208      	movs	r2, #8
 800757e:	409a      	lsls	r2, r3
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f043 0201 	orr.w	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	fa22 f303 	lsr.w	r3, r2, r3
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d06e      	beq.n	8007684 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a69      	ldr	r2, [pc, #420]	; (8007750 <HAL_DMA_IRQHandler+0x3f8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d04a      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a67      	ldr	r2, [pc, #412]	; (8007754 <HAL_DMA_IRQHandler+0x3fc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d045      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a66      	ldr	r2, [pc, #408]	; (8007758 <HAL_DMA_IRQHandler+0x400>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d040      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a64      	ldr	r2, [pc, #400]	; (800775c <HAL_DMA_IRQHandler+0x404>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d03b      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a63      	ldr	r2, [pc, #396]	; (8007760 <HAL_DMA_IRQHandler+0x408>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d036      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a61      	ldr	r2, [pc, #388]	; (8007764 <HAL_DMA_IRQHandler+0x40c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d031      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a60      	ldr	r2, [pc, #384]	; (8007768 <HAL_DMA_IRQHandler+0x410>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d02c      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a5e      	ldr	r2, [pc, #376]	; (800776c <HAL_DMA_IRQHandler+0x414>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d027      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a5d      	ldr	r2, [pc, #372]	; (8007770 <HAL_DMA_IRQHandler+0x418>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d022      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5b      	ldr	r2, [pc, #364]	; (8007774 <HAL_DMA_IRQHandler+0x41c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01d      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a5a      	ldr	r2, [pc, #360]	; (8007778 <HAL_DMA_IRQHandler+0x420>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d018      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a58      	ldr	r2, [pc, #352]	; (800777c <HAL_DMA_IRQHandler+0x424>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a57      	ldr	r2, [pc, #348]	; (8007780 <HAL_DMA_IRQHandler+0x428>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00e      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a55      	ldr	r2, [pc, #340]	; (8007784 <HAL_DMA_IRQHandler+0x42c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d009      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a54      	ldr	r2, [pc, #336]	; (8007788 <HAL_DMA_IRQHandler+0x430>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_DMA_IRQHandler+0x2ee>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a52      	ldr	r2, [pc, #328]	; (800778c <HAL_DMA_IRQHandler+0x434>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d10a      	bne.n	800765c <HAL_DMA_IRQHandler+0x304>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf14      	ite	ne
 8007654:	2301      	movne	r3, #1
 8007656:	2300      	moveq	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	e003      	b.n	8007664 <HAL_DMA_IRQHandler+0x30c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2201      	movs	r2, #1
 8007672:	409a      	lsls	r2, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	f043 0202 	orr.w	r2, r3, #2
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2204      	movs	r2, #4
 800768e:	409a      	lsls	r2, r3
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 808f 	beq.w	80077b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a2c      	ldr	r2, [pc, #176]	; (8007750 <HAL_DMA_IRQHandler+0x3f8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04a      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a2a      	ldr	r2, [pc, #168]	; (8007754 <HAL_DMA_IRQHandler+0x3fc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d045      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a29      	ldr	r2, [pc, #164]	; (8007758 <HAL_DMA_IRQHandler+0x400>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d040      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a27      	ldr	r2, [pc, #156]	; (800775c <HAL_DMA_IRQHandler+0x404>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d03b      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <HAL_DMA_IRQHandler+0x408>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d036      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a24      	ldr	r2, [pc, #144]	; (8007764 <HAL_DMA_IRQHandler+0x40c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d031      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a23      	ldr	r2, [pc, #140]	; (8007768 <HAL_DMA_IRQHandler+0x410>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d02c      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a21      	ldr	r2, [pc, #132]	; (800776c <HAL_DMA_IRQHandler+0x414>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d027      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a20      	ldr	r2, [pc, #128]	; (8007770 <HAL_DMA_IRQHandler+0x418>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <HAL_DMA_IRQHandler+0x41c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01d      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <HAL_DMA_IRQHandler+0x420>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1b      	ldr	r2, [pc, #108]	; (800777c <HAL_DMA_IRQHandler+0x424>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_DMA_IRQHandler+0x428>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a18      	ldr	r2, [pc, #96]	; (8007784 <HAL_DMA_IRQHandler+0x42c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <HAL_DMA_IRQHandler+0x430>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_DMA_IRQHandler+0x3e2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_DMA_IRQHandler+0x434>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d12a      	bne.n	8007790 <HAL_DMA_IRQHandler+0x438>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf14      	ite	ne
 8007748:	2301      	movne	r3, #1
 800774a:	2300      	moveq	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	e023      	b.n	8007798 <HAL_DMA_IRQHandler+0x440>
 8007750:	40020010 	.word	0x40020010
 8007754:	40020028 	.word	0x40020028
 8007758:	40020040 	.word	0x40020040
 800775c:	40020058 	.word	0x40020058
 8007760:	40020070 	.word	0x40020070
 8007764:	40020088 	.word	0x40020088
 8007768:	400200a0 	.word	0x400200a0
 800776c:	400200b8 	.word	0x400200b8
 8007770:	40020410 	.word	0x40020410
 8007774:	40020428 	.word	0x40020428
 8007778:	40020440 	.word	0x40020440
 800777c:	40020458 	.word	0x40020458
 8007780:	40020470 	.word	0x40020470
 8007784:	40020488 	.word	0x40020488
 8007788:	400204a0 	.word	0x400204a0
 800778c:	400204b8 	.word	0x400204b8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	2204      	movs	r2, #4
 80077a6:	409a      	lsls	r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b0:	f043 0204 	orr.w	r2, r3, #4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	2210      	movs	r2, #16
 80077c2:	409a      	lsls	r2, r3
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80a6 	beq.w	800791a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a85      	ldr	r2, [pc, #532]	; (80079e8 <HAL_DMA_IRQHandler+0x690>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d04a      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a83      	ldr	r2, [pc, #524]	; (80079ec <HAL_DMA_IRQHandler+0x694>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d045      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a82      	ldr	r2, [pc, #520]	; (80079f0 <HAL_DMA_IRQHandler+0x698>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d040      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a80      	ldr	r2, [pc, #512]	; (80079f4 <HAL_DMA_IRQHandler+0x69c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d03b      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7f      	ldr	r2, [pc, #508]	; (80079f8 <HAL_DMA_IRQHandler+0x6a0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d036      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7d      	ldr	r2, [pc, #500]	; (80079fc <HAL_DMA_IRQHandler+0x6a4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d031      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a7c      	ldr	r2, [pc, #496]	; (8007a00 <HAL_DMA_IRQHandler+0x6a8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d02c      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a7a      	ldr	r2, [pc, #488]	; (8007a04 <HAL_DMA_IRQHandler+0x6ac>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d027      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a79      	ldr	r2, [pc, #484]	; (8007a08 <HAL_DMA_IRQHandler+0x6b0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d022      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a77      	ldr	r2, [pc, #476]	; (8007a0c <HAL_DMA_IRQHandler+0x6b4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01d      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a76      	ldr	r2, [pc, #472]	; (8007a10 <HAL_DMA_IRQHandler+0x6b8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d018      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a74      	ldr	r2, [pc, #464]	; (8007a14 <HAL_DMA_IRQHandler+0x6bc>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a73      	ldr	r2, [pc, #460]	; (8007a18 <HAL_DMA_IRQHandler+0x6c0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a71      	ldr	r2, [pc, #452]	; (8007a1c <HAL_DMA_IRQHandler+0x6c4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a70      	ldr	r2, [pc, #448]	; (8007a20 <HAL_DMA_IRQHandler+0x6c8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_DMA_IRQHandler+0x516>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6e      	ldr	r2, [pc, #440]	; (8007a24 <HAL_DMA_IRQHandler+0x6cc>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d10a      	bne.n	8007884 <HAL_DMA_IRQHandler+0x52c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	e009      	b.n	8007898 <HAL_DMA_IRQHandler+0x540>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03e      	beq.n	800791a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a0:	f003 031f 	and.w	r3, r3, #31
 80078a4:	2210      	movs	r2, #16
 80078a6:	409a      	lsls	r2, r3
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d108      	bne.n	80078da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d024      	beq.n	800791a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
 80078d8:	e01f      	b.n	800791a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01b      	beq.n	800791a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	e016      	b.n	800791a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d107      	bne.n	800790a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0208 	bic.w	r2, r2, #8
 8007908:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2220      	movs	r2, #32
 8007924:	409a      	lsls	r2, r3
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8110 	beq.w	8007b50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2c      	ldr	r2, [pc, #176]	; (80079e8 <HAL_DMA_IRQHandler+0x690>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d04a      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <HAL_DMA_IRQHandler+0x694>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d045      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a29      	ldr	r2, [pc, #164]	; (80079f0 <HAL_DMA_IRQHandler+0x698>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d040      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <HAL_DMA_IRQHandler+0x69c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d03b      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a26      	ldr	r2, [pc, #152]	; (80079f8 <HAL_DMA_IRQHandler+0x6a0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d036      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a25      	ldr	r2, [pc, #148]	; (80079fc <HAL_DMA_IRQHandler+0x6a4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d031      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <HAL_DMA_IRQHandler+0x6a8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d02c      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a22      	ldr	r2, [pc, #136]	; (8007a04 <HAL_DMA_IRQHandler+0x6ac>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d027      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <HAL_DMA_IRQHandler+0x6b0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d022      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <HAL_DMA_IRQHandler+0x6b4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d01d      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1d      	ldr	r2, [pc, #116]	; (8007a10 <HAL_DMA_IRQHandler+0x6b8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d018      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <HAL_DMA_IRQHandler+0x6bc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1a      	ldr	r2, [pc, #104]	; (8007a18 <HAL_DMA_IRQHandler+0x6c0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00e      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a19      	ldr	r2, [pc, #100]	; (8007a1c <HAL_DMA_IRQHandler+0x6c4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d009      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a17      	ldr	r2, [pc, #92]	; (8007a20 <HAL_DMA_IRQHandler+0x6c8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d004      	beq.n	80079d0 <HAL_DMA_IRQHandler+0x678>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <HAL_DMA_IRQHandler+0x6cc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d12b      	bne.n	8007a28 <HAL_DMA_IRQHandler+0x6d0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf14      	ite	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	2300      	moveq	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	e02a      	b.n	8007a3c <HAL_DMA_IRQHandler+0x6e4>
 80079e6:	bf00      	nop
 80079e8:	40020010 	.word	0x40020010
 80079ec:	40020028 	.word	0x40020028
 80079f0:	40020040 	.word	0x40020040
 80079f4:	40020058 	.word	0x40020058
 80079f8:	40020070 	.word	0x40020070
 80079fc:	40020088 	.word	0x40020088
 8007a00:	400200a0 	.word	0x400200a0
 8007a04:	400200b8 	.word	0x400200b8
 8007a08:	40020410 	.word	0x40020410
 8007a0c:	40020428 	.word	0x40020428
 8007a10:	40020440 	.word	0x40020440
 8007a14:	40020458 	.word	0x40020458
 8007a18:	40020470 	.word	0x40020470
 8007a1c:	40020488 	.word	0x40020488
 8007a20:	400204a0 	.word	0x400204a0
 8007a24:	400204b8 	.word	0x400204b8
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8087 	beq.w	8007b50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	409a      	lsls	r2, r3
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d139      	bne.n	8007ad2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0216 	bic.w	r2, r2, #22
 8007a6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695a      	ldr	r2, [r3, #20]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d103      	bne.n	8007a8e <HAL_DMA_IRQHandler+0x736>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0208 	bic.w	r2, r2, #8
 8007a9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	223f      	movs	r2, #63	; 0x3f
 8007aa8:	409a      	lsls	r2, r3
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 834a 	beq.w	800815c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
          }
          return;
 8007ad0:	e344      	b.n	800815c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d018      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d108      	bne.n	8007b00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	4798      	blx	r3
 8007afe:	e027      	b.n	8007b50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d023      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
 8007b10:	e01e      	b.n	8007b50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10f      	bne.n	8007b40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0210 	bic.w	r2, r2, #16
 8007b2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8306 	beq.w	8008166 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 8088 	beq.w	8007c78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a7a      	ldr	r2, [pc, #488]	; (8007d60 <HAL_DMA_IRQHandler+0xa08>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d04a      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a79      	ldr	r2, [pc, #484]	; (8007d64 <HAL_DMA_IRQHandler+0xa0c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d045      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a77      	ldr	r2, [pc, #476]	; (8007d68 <HAL_DMA_IRQHandler+0xa10>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d040      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a76      	ldr	r2, [pc, #472]	; (8007d6c <HAL_DMA_IRQHandler+0xa14>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d03b      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a74      	ldr	r2, [pc, #464]	; (8007d70 <HAL_DMA_IRQHandler+0xa18>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d036      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a73      	ldr	r2, [pc, #460]	; (8007d74 <HAL_DMA_IRQHandler+0xa1c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d031      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a71      	ldr	r2, [pc, #452]	; (8007d78 <HAL_DMA_IRQHandler+0xa20>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d02c      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a70      	ldr	r2, [pc, #448]	; (8007d7c <HAL_DMA_IRQHandler+0xa24>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d027      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a6e      	ldr	r2, [pc, #440]	; (8007d80 <HAL_DMA_IRQHandler+0xa28>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d022      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6d      	ldr	r2, [pc, #436]	; (8007d84 <HAL_DMA_IRQHandler+0xa2c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d01d      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6b      	ldr	r2, [pc, #428]	; (8007d88 <HAL_DMA_IRQHandler+0xa30>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d018      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a6a      	ldr	r2, [pc, #424]	; (8007d8c <HAL_DMA_IRQHandler+0xa34>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a68      	ldr	r2, [pc, #416]	; (8007d90 <HAL_DMA_IRQHandler+0xa38>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00e      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a67      	ldr	r2, [pc, #412]	; (8007d94 <HAL_DMA_IRQHandler+0xa3c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d009      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a65      	ldr	r2, [pc, #404]	; (8007d98 <HAL_DMA_IRQHandler+0xa40>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x8b8>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a64      	ldr	r2, [pc, #400]	; (8007d9c <HAL_DMA_IRQHandler+0xa44>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d108      	bne.n	8007c22 <HAL_DMA_IRQHandler+0x8ca>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e007      	b.n	8007c32 <HAL_DMA_IRQHandler+0x8da>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d307      	bcc.n	8007c4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f2      	bne.n	8007c32 <HAL_DMA_IRQHandler+0x8da>
 8007c4c:	e000      	b.n	8007c50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2203      	movs	r2, #3
 8007c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c66:	e003      	b.n	8007c70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8272 	beq.w	8008166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
 8007c8a:	e26c      	b.n	8008166 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a43      	ldr	r2, [pc, #268]	; (8007da0 <HAL_DMA_IRQHandler+0xa48>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d022      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a42      	ldr	r2, [pc, #264]	; (8007da4 <HAL_DMA_IRQHandler+0xa4c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d01d      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a40      	ldr	r2, [pc, #256]	; (8007da8 <HAL_DMA_IRQHandler+0xa50>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d018      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <HAL_DMA_IRQHandler+0xa54>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d013      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a3d      	ldr	r2, [pc, #244]	; (8007db0 <HAL_DMA_IRQHandler+0xa58>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00e      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <HAL_DMA_IRQHandler+0xa5c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d009      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a3a      	ldr	r2, [pc, #232]	; (8007db8 <HAL_DMA_IRQHandler+0xa60>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <HAL_DMA_IRQHandler+0x984>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a39      	ldr	r2, [pc, #228]	; (8007dbc <HAL_DMA_IRQHandler+0xa64>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d101      	bne.n	8007ce0 <HAL_DMA_IRQHandler+0x988>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e000      	b.n	8007ce2 <HAL_DMA_IRQHandler+0x98a>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 823f 	beq.w	8008166 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	409a      	lsls	r2, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80cd 	beq.w	8007ea0 <HAL_DMA_IRQHandler+0xb48>
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80c7 	beq.w	8007ea0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d049      	beq.n	8007dc0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8210 	beq.w	8008160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d48:	e20a      	b.n	8008160 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8206 	beq.w	8008160 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d5c:	e200      	b.n	8008160 <HAL_DMA_IRQHandler+0xe08>
 8007d5e:	bf00      	nop
 8007d60:	40020010 	.word	0x40020010
 8007d64:	40020028 	.word	0x40020028
 8007d68:	40020040 	.word	0x40020040
 8007d6c:	40020058 	.word	0x40020058
 8007d70:	40020070 	.word	0x40020070
 8007d74:	40020088 	.word	0x40020088
 8007d78:	400200a0 	.word	0x400200a0
 8007d7c:	400200b8 	.word	0x400200b8
 8007d80:	40020410 	.word	0x40020410
 8007d84:	40020428 	.word	0x40020428
 8007d88:	40020440 	.word	0x40020440
 8007d8c:	40020458 	.word	0x40020458
 8007d90:	40020470 	.word	0x40020470
 8007d94:	40020488 	.word	0x40020488
 8007d98:	400204a0 	.word	0x400204a0
 8007d9c:	400204b8 	.word	0x400204b8
 8007da0:	58025408 	.word	0x58025408
 8007da4:	5802541c 	.word	0x5802541c
 8007da8:	58025430 	.word	0x58025430
 8007dac:	58025444 	.word	0x58025444
 8007db0:	58025458 	.word	0x58025458
 8007db4:	5802546c 	.word	0x5802546c
 8007db8:	58025480 	.word	0x58025480
 8007dbc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d160      	bne.n	8007e8c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a7f      	ldr	r2, [pc, #508]	; (8007fcc <HAL_DMA_IRQHandler+0xc74>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a7d      	ldr	r2, [pc, #500]	; (8007fd0 <HAL_DMA_IRQHandler+0xc78>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a7c      	ldr	r2, [pc, #496]	; (8007fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a7a      	ldr	r2, [pc, #488]	; (8007fd8 <HAL_DMA_IRQHandler+0xc80>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a79      	ldr	r2, [pc, #484]	; (8007fdc <HAL_DMA_IRQHandler+0xc84>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a77      	ldr	r2, [pc, #476]	; (8007fe0 <HAL_DMA_IRQHandler+0xc88>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a76      	ldr	r2, [pc, #472]	; (8007fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a74      	ldr	r2, [pc, #464]	; (8007fe8 <HAL_DMA_IRQHandler+0xc90>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a73      	ldr	r2, [pc, #460]	; (8007fec <HAL_DMA_IRQHandler+0xc94>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a71      	ldr	r2, [pc, #452]	; (8007ff0 <HAL_DMA_IRQHandler+0xc98>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a70      	ldr	r2, [pc, #448]	; (8007ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a6e      	ldr	r2, [pc, #440]	; (8007ff8 <HAL_DMA_IRQHandler+0xca0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6d      	ldr	r2, [pc, #436]	; (8007ffc <HAL_DMA_IRQHandler+0xca4>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a6b      	ldr	r2, [pc, #428]	; (8008000 <HAL_DMA_IRQHandler+0xca8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a6a      	ldr	r2, [pc, #424]	; (8008004 <HAL_DMA_IRQHandler+0xcac>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xb12>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a68      	ldr	r2, [pc, #416]	; (8008008 <HAL_DMA_IRQHandler+0xcb0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <HAL_DMA_IRQHandler+0xb24>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0208 	bic.w	r2, r2, #8
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e007      	b.n	8007e8c <HAL_DMA_IRQHandler+0xb34>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0204 	bic.w	r2, r2, #4
 8007e8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8165 	beq.w	8008160 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e9e:	e15f      	b.n	8008160 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80c5 	beq.w	8008040 <HAL_DMA_IRQHandler+0xce8>
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80bf 	beq.w	8008040 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2202      	movs	r2, #2
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d018      	beq.n	8007f0e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 813a 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ef8:	e134      	b.n	8008164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8130 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f0c:	e12a      	b.n	8008164 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f040 8089 	bne.w	800802c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a2b      	ldr	r2, [pc, #172]	; (8007fcc <HAL_DMA_IRQHandler+0xc74>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d04a      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <HAL_DMA_IRQHandler+0xc78>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d045      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <HAL_DMA_IRQHandler+0xc7c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d040      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <HAL_DMA_IRQHandler+0xc80>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d03b      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <HAL_DMA_IRQHandler+0xc84>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d036      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a23      	ldr	r2, [pc, #140]	; (8007fe0 <HAL_DMA_IRQHandler+0xc88>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d031      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <HAL_DMA_IRQHandler+0xc8c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d02c      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <HAL_DMA_IRQHandler+0xc90>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d027      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <HAL_DMA_IRQHandler+0xc94>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d022      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1d      	ldr	r2, [pc, #116]	; (8007ff0 <HAL_DMA_IRQHandler+0xc98>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d01d      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_DMA_IRQHandler+0xc9c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ff8 <HAL_DMA_IRQHandler+0xca0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d013      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a19      	ldr	r2, [pc, #100]	; (8007ffc <HAL_DMA_IRQHandler+0xca4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a17      	ldr	r2, [pc, #92]	; (8008000 <HAL_DMA_IRQHandler+0xca8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a16      	ldr	r2, [pc, #88]	; (8008004 <HAL_DMA_IRQHandler+0xcac>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d004      	beq.n	8007fba <HAL_DMA_IRQHandler+0xc62>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a14      	ldr	r2, [pc, #80]	; (8008008 <HAL_DMA_IRQHandler+0xcb0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d128      	bne.n	800800c <HAL_DMA_IRQHandler+0xcb4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0214 	bic.w	r2, r2, #20
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e027      	b.n	800801c <HAL_DMA_IRQHandler+0xcc4>
 8007fcc:	40020010 	.word	0x40020010
 8007fd0:	40020028 	.word	0x40020028
 8007fd4:	40020040 	.word	0x40020040
 8007fd8:	40020058 	.word	0x40020058
 8007fdc:	40020070 	.word	0x40020070
 8007fe0:	40020088 	.word	0x40020088
 8007fe4:	400200a0 	.word	0x400200a0
 8007fe8:	400200b8 	.word	0x400200b8
 8007fec:	40020410 	.word	0x40020410
 8007ff0:	40020428 	.word	0x40020428
 8007ff4:	40020440 	.word	0x40020440
 8007ff8:	40020458 	.word	0x40020458
 8007ffc:	40020470 	.word	0x40020470
 8008000:	40020488 	.word	0x40020488
 8008004:	400204a0 	.word	0x400204a0
 8008008:	400204b8 	.word	0x400204b8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 020a 	bic.w	r2, r2, #10
 800801a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8097 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800803e:	e091      	b.n	8008164 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008044:	f003 031f 	and.w	r3, r3, #31
 8008048:	2208      	movs	r2, #8
 800804a:	409a      	lsls	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	4013      	ands	r3, r2
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8088 	beq.w	8008166 <HAL_DMA_IRQHandler+0xe0e>
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8082 	beq.w	8008166 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a41      	ldr	r2, [pc, #260]	; (800816c <HAL_DMA_IRQHandler+0xe14>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d04a      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a3f      	ldr	r2, [pc, #252]	; (8008170 <HAL_DMA_IRQHandler+0xe18>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d045      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3e      	ldr	r2, [pc, #248]	; (8008174 <HAL_DMA_IRQHandler+0xe1c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d040      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a3c      	ldr	r2, [pc, #240]	; (8008178 <HAL_DMA_IRQHandler+0xe20>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d03b      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a3b      	ldr	r2, [pc, #236]	; (800817c <HAL_DMA_IRQHandler+0xe24>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d036      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a39      	ldr	r2, [pc, #228]	; (8008180 <HAL_DMA_IRQHandler+0xe28>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d031      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a38      	ldr	r2, [pc, #224]	; (8008184 <HAL_DMA_IRQHandler+0xe2c>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d02c      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a36      	ldr	r2, [pc, #216]	; (8008188 <HAL_DMA_IRQHandler+0xe30>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d027      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a35      	ldr	r2, [pc, #212]	; (800818c <HAL_DMA_IRQHandler+0xe34>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d022      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a33      	ldr	r2, [pc, #204]	; (8008190 <HAL_DMA_IRQHandler+0xe38>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01d      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a32      	ldr	r2, [pc, #200]	; (8008194 <HAL_DMA_IRQHandler+0xe3c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d018      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a30      	ldr	r2, [pc, #192]	; (8008198 <HAL_DMA_IRQHandler+0xe40>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2f      	ldr	r2, [pc, #188]	; (800819c <HAL_DMA_IRQHandler+0xe44>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00e      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2d      	ldr	r2, [pc, #180]	; (80081a0 <HAL_DMA_IRQHandler+0xe48>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d009      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2c      	ldr	r2, [pc, #176]	; (80081a4 <HAL_DMA_IRQHandler+0xe4c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d004      	beq.n	8008102 <HAL_DMA_IRQHandler+0xdaa>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2a      	ldr	r2, [pc, #168]	; (80081a8 <HAL_DMA_IRQHandler+0xe50>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d108      	bne.n	8008114 <HAL_DMA_IRQHandler+0xdbc>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 021c 	bic.w	r2, r2, #28
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	e007      	b.n	8008124 <HAL_DMA_IRQHandler+0xdcc>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 020e 	bic.w	r2, r2, #14
 8008122:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	2201      	movs	r2, #1
 800812e:	409a      	lsls	r2, r3
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
 800815a:	e004      	b.n	8008166 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800815c:	bf00      	nop
 800815e:	e002      	b.n	8008166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008164:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008166:	3728      	adds	r7, #40	; 0x28
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40020010 	.word	0x40020010
 8008170:	40020028 	.word	0x40020028
 8008174:	40020040 	.word	0x40020040
 8008178:	40020058 	.word	0x40020058
 800817c:	40020070 	.word	0x40020070
 8008180:	40020088 	.word	0x40020088
 8008184:	400200a0 	.word	0x400200a0
 8008188:	400200b8 	.word	0x400200b8
 800818c:	40020410 	.word	0x40020410
 8008190:	40020428 	.word	0x40020428
 8008194:	40020440 	.word	0x40020440
 8008198:	40020458 	.word	0x40020458
 800819c:	40020470 	.word	0x40020470
 80081a0:	40020488 	.word	0x40020488
 80081a4:	400204a0 	.word	0x400204a0
 80081a8:	400204b8 	.word	0x400204b8

080081ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a7f      	ldr	r2, [pc, #508]	; (80083c8 <DMA_SetConfig+0x21c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d072      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a7d      	ldr	r2, [pc, #500]	; (80083cc <DMA_SetConfig+0x220>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d06d      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a7c      	ldr	r2, [pc, #496]	; (80083d0 <DMA_SetConfig+0x224>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d068      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a7a      	ldr	r2, [pc, #488]	; (80083d4 <DMA_SetConfig+0x228>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d063      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a79      	ldr	r2, [pc, #484]	; (80083d8 <DMA_SetConfig+0x22c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d05e      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a77      	ldr	r2, [pc, #476]	; (80083dc <DMA_SetConfig+0x230>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d059      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a76      	ldr	r2, [pc, #472]	; (80083e0 <DMA_SetConfig+0x234>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d054      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a74      	ldr	r2, [pc, #464]	; (80083e4 <DMA_SetConfig+0x238>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d04f      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a73      	ldr	r2, [pc, #460]	; (80083e8 <DMA_SetConfig+0x23c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a71      	ldr	r2, [pc, #452]	; (80083ec <DMA_SetConfig+0x240>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a70      	ldr	r2, [pc, #448]	; (80083f0 <DMA_SetConfig+0x244>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a6e      	ldr	r2, [pc, #440]	; (80083f4 <DMA_SetConfig+0x248>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a6d      	ldr	r2, [pc, #436]	; (80083f8 <DMA_SetConfig+0x24c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a6b      	ldr	r2, [pc, #428]	; (80083fc <DMA_SetConfig+0x250>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a6a      	ldr	r2, [pc, #424]	; (8008400 <DMA_SetConfig+0x254>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a68      	ldr	r2, [pc, #416]	; (8008404 <DMA_SetConfig+0x258>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a67      	ldr	r2, [pc, #412]	; (8008408 <DMA_SetConfig+0x25c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a65      	ldr	r2, [pc, #404]	; (800840c <DMA_SetConfig+0x260>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a64      	ldr	r2, [pc, #400]	; (8008410 <DMA_SetConfig+0x264>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a62      	ldr	r2, [pc, #392]	; (8008414 <DMA_SetConfig+0x268>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a61      	ldr	r2, [pc, #388]	; (8008418 <DMA_SetConfig+0x26c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a5f      	ldr	r2, [pc, #380]	; (800841c <DMA_SetConfig+0x270>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a5e      	ldr	r2, [pc, #376]	; (8008420 <DMA_SetConfig+0x274>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <DMA_SetConfig+0x10a>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a5c      	ldr	r2, [pc, #368]	; (8008424 <DMA_SetConfig+0x278>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <DMA_SetConfig+0x10e>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <DMA_SetConfig+0x110>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00d      	beq.n	80082dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d004      	beq.n	80082dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a39      	ldr	r2, [pc, #228]	; (80083c8 <DMA_SetConfig+0x21c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d04a      	beq.n	800837c <DMA_SetConfig+0x1d0>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a38      	ldr	r2, [pc, #224]	; (80083cc <DMA_SetConfig+0x220>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d045      	beq.n	800837c <DMA_SetConfig+0x1d0>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a36      	ldr	r2, [pc, #216]	; (80083d0 <DMA_SetConfig+0x224>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d040      	beq.n	800837c <DMA_SetConfig+0x1d0>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a35      	ldr	r2, [pc, #212]	; (80083d4 <DMA_SetConfig+0x228>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d03b      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a33      	ldr	r2, [pc, #204]	; (80083d8 <DMA_SetConfig+0x22c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d036      	beq.n	800837c <DMA_SetConfig+0x1d0>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a32      	ldr	r2, [pc, #200]	; (80083dc <DMA_SetConfig+0x230>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d031      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a30      	ldr	r2, [pc, #192]	; (80083e0 <DMA_SetConfig+0x234>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d02c      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a2f      	ldr	r2, [pc, #188]	; (80083e4 <DMA_SetConfig+0x238>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d027      	beq.n	800837c <DMA_SetConfig+0x1d0>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a2d      	ldr	r2, [pc, #180]	; (80083e8 <DMA_SetConfig+0x23c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d022      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a2c      	ldr	r2, [pc, #176]	; (80083ec <DMA_SetConfig+0x240>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d01d      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a2a      	ldr	r2, [pc, #168]	; (80083f0 <DMA_SetConfig+0x244>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <DMA_SetConfig+0x1d0>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a29      	ldr	r2, [pc, #164]	; (80083f4 <DMA_SetConfig+0x248>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a27      	ldr	r2, [pc, #156]	; (80083f8 <DMA_SetConfig+0x24c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <DMA_SetConfig+0x1d0>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a26      	ldr	r2, [pc, #152]	; (80083fc <DMA_SetConfig+0x250>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a24      	ldr	r2, [pc, #144]	; (8008400 <DMA_SetConfig+0x254>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <DMA_SetConfig+0x1d0>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a23      	ldr	r2, [pc, #140]	; (8008404 <DMA_SetConfig+0x258>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d101      	bne.n	8008380 <DMA_SetConfig+0x1d4>
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <DMA_SetConfig+0x1d6>
 8008380:	2300      	movs	r3, #0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d059      	beq.n	800843a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	223f      	movs	r2, #63	; 0x3f
 8008390:	409a      	lsls	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b40      	cmp	r3, #64	; 0x40
 80083b4:	d138      	bne.n	8008428 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083c6:	e086      	b.n	80084d6 <DMA_SetConfig+0x32a>
 80083c8:	40020010 	.word	0x40020010
 80083cc:	40020028 	.word	0x40020028
 80083d0:	40020040 	.word	0x40020040
 80083d4:	40020058 	.word	0x40020058
 80083d8:	40020070 	.word	0x40020070
 80083dc:	40020088 	.word	0x40020088
 80083e0:	400200a0 	.word	0x400200a0
 80083e4:	400200b8 	.word	0x400200b8
 80083e8:	40020410 	.word	0x40020410
 80083ec:	40020428 	.word	0x40020428
 80083f0:	40020440 	.word	0x40020440
 80083f4:	40020458 	.word	0x40020458
 80083f8:	40020470 	.word	0x40020470
 80083fc:	40020488 	.word	0x40020488
 8008400:	400204a0 	.word	0x400204a0
 8008404:	400204b8 	.word	0x400204b8
 8008408:	58025408 	.word	0x58025408
 800840c:	5802541c 	.word	0x5802541c
 8008410:	58025430 	.word	0x58025430
 8008414:	58025444 	.word	0x58025444
 8008418:	58025458 	.word	0x58025458
 800841c:	5802546c 	.word	0x5802546c
 8008420:	58025480 	.word	0x58025480
 8008424:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	60da      	str	r2, [r3, #12]
}
 8008438:	e04d      	b.n	80084d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a29      	ldr	r2, [pc, #164]	; (80084e4 <DMA_SetConfig+0x338>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d022      	beq.n	800848a <DMA_SetConfig+0x2de>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a27      	ldr	r2, [pc, #156]	; (80084e8 <DMA_SetConfig+0x33c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01d      	beq.n	800848a <DMA_SetConfig+0x2de>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a26      	ldr	r2, [pc, #152]	; (80084ec <DMA_SetConfig+0x340>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d018      	beq.n	800848a <DMA_SetConfig+0x2de>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a24      	ldr	r2, [pc, #144]	; (80084f0 <DMA_SetConfig+0x344>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d013      	beq.n	800848a <DMA_SetConfig+0x2de>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a23      	ldr	r2, [pc, #140]	; (80084f4 <DMA_SetConfig+0x348>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00e      	beq.n	800848a <DMA_SetConfig+0x2de>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a21      	ldr	r2, [pc, #132]	; (80084f8 <DMA_SetConfig+0x34c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d009      	beq.n	800848a <DMA_SetConfig+0x2de>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a20      	ldr	r2, [pc, #128]	; (80084fc <DMA_SetConfig+0x350>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <DMA_SetConfig+0x2de>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1e      	ldr	r2, [pc, #120]	; (8008500 <DMA_SetConfig+0x354>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d101      	bne.n	800848e <DMA_SetConfig+0x2e2>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <DMA_SetConfig+0x2e4>
 800848e:	2300      	movs	r3, #0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d020      	beq.n	80084d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	2201      	movs	r2, #1
 800849e:	409a      	lsls	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d108      	bne.n	80084c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	60da      	str	r2, [r3, #12]
}
 80084c4:	e007      	b.n	80084d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	60da      	str	r2, [r3, #12]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	58025408 	.word	0x58025408
 80084e8:	5802541c 	.word	0x5802541c
 80084ec:	58025430 	.word	0x58025430
 80084f0:	58025444 	.word	0x58025444
 80084f4:	58025458 	.word	0x58025458
 80084f8:	5802546c 	.word	0x5802546c
 80084fc:	58025480 	.word	0x58025480
 8008500:	58025494 	.word	0x58025494

08008504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a42      	ldr	r2, [pc, #264]	; (800861c <DMA_CalcBaseAndBitshift+0x118>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d04a      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a41      	ldr	r2, [pc, #260]	; (8008620 <DMA_CalcBaseAndBitshift+0x11c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d045      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a3f      	ldr	r2, [pc, #252]	; (8008624 <DMA_CalcBaseAndBitshift+0x120>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d040      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a3e      	ldr	r2, [pc, #248]	; (8008628 <DMA_CalcBaseAndBitshift+0x124>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d03b      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a3c      	ldr	r2, [pc, #240]	; (800862c <DMA_CalcBaseAndBitshift+0x128>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d036      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a3b      	ldr	r2, [pc, #236]	; (8008630 <DMA_CalcBaseAndBitshift+0x12c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d031      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a39      	ldr	r2, [pc, #228]	; (8008634 <DMA_CalcBaseAndBitshift+0x130>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d02c      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a38      	ldr	r2, [pc, #224]	; (8008638 <DMA_CalcBaseAndBitshift+0x134>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d027      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a36      	ldr	r2, [pc, #216]	; (800863c <DMA_CalcBaseAndBitshift+0x138>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d022      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a35      	ldr	r2, [pc, #212]	; (8008640 <DMA_CalcBaseAndBitshift+0x13c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d01d      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a33      	ldr	r2, [pc, #204]	; (8008644 <DMA_CalcBaseAndBitshift+0x140>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a32      	ldr	r2, [pc, #200]	; (8008648 <DMA_CalcBaseAndBitshift+0x144>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a30      	ldr	r2, [pc, #192]	; (800864c <DMA_CalcBaseAndBitshift+0x148>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00e      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a2f      	ldr	r2, [pc, #188]	; (8008650 <DMA_CalcBaseAndBitshift+0x14c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d009      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a2d      	ldr	r2, [pc, #180]	; (8008654 <DMA_CalcBaseAndBitshift+0x150>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <DMA_CalcBaseAndBitshift+0xa8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <DMA_CalcBaseAndBitshift+0x154>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d101      	bne.n	80085b0 <DMA_CalcBaseAndBitshift+0xac>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <DMA_CalcBaseAndBitshift+0xae>
 80085b0:	2300      	movs	r3, #0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d024      	beq.n	8008600 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	3b10      	subs	r3, #16
 80085be:	4a27      	ldr	r2, [pc, #156]	; (800865c <DMA_CalcBaseAndBitshift+0x158>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	4a24      	ldr	r2, [pc, #144]	; (8008660 <DMA_CalcBaseAndBitshift+0x15c>)
 80085d0:	5cd3      	ldrb	r3, [r2, r3]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d908      	bls.n	80085f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b1f      	ldr	r3, [pc, #124]	; (8008664 <DMA_CalcBaseAndBitshift+0x160>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	659a      	str	r2, [r3, #88]	; 0x58
 80085ee:	e00d      	b.n	800860c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <DMA_CalcBaseAndBitshift+0x160>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6593      	str	r3, [r2, #88]	; 0x58
 80085fe:	e005      	b.n	800860c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	40020010 	.word	0x40020010
 8008620:	40020028 	.word	0x40020028
 8008624:	40020040 	.word	0x40020040
 8008628:	40020058 	.word	0x40020058
 800862c:	40020070 	.word	0x40020070
 8008630:	40020088 	.word	0x40020088
 8008634:	400200a0 	.word	0x400200a0
 8008638:	400200b8 	.word	0x400200b8
 800863c:	40020410 	.word	0x40020410
 8008640:	40020428 	.word	0x40020428
 8008644:	40020440 	.word	0x40020440
 8008648:	40020458 	.word	0x40020458
 800864c:	40020470 	.word	0x40020470
 8008650:	40020488 	.word	0x40020488
 8008654:	400204a0 	.word	0x400204a0
 8008658:	400204b8 	.word	0x400204b8
 800865c:	aaaaaaab 	.word	0xaaaaaaab
 8008660:	0801c6b8 	.word	0x0801c6b8
 8008664:	fffffc00 	.word	0xfffffc00

08008668 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d120      	bne.n	80086be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	2b03      	cmp	r3, #3
 8008682:	d858      	bhi.n	8008736 <DMA_CheckFifoParam+0xce>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <DMA_CheckFifoParam+0x24>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086af 	.word	0x080086af
 8008694:	0800869d 	.word	0x0800869d
 8008698:	08008737 	.word	0x08008737
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d048      	beq.n	800873a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ac:	e045      	b.n	800873a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086b6:	d142      	bne.n	800873e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086bc:	e03f      	b.n	800873e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c6:	d123      	bne.n	8008710 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d838      	bhi.n	8008742 <DMA_CheckFifoParam+0xda>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <DMA_CheckFifoParam+0x70>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080086e9 	.word	0x080086e9
 80086dc:	080086ef 	.word	0x080086ef
 80086e0:	080086e9 	.word	0x080086e9
 80086e4:	08008701 	.word	0x08008701
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73fb      	strb	r3, [r7, #15]
        break;
 80086ec:	e030      	b.n	8008750 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d025      	beq.n	8008746 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086fe:	e022      	b.n	8008746 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008708:	d11f      	bne.n	800874a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800870e:	e01c      	b.n	800874a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	2b02      	cmp	r3, #2
 8008716:	d902      	bls.n	800871e <DMA_CheckFifoParam+0xb6>
 8008718:	2b03      	cmp	r3, #3
 800871a:	d003      	beq.n	8008724 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800871c:	e018      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	73fb      	strb	r3, [r7, #15]
        break;
 8008722:	e015      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
    break;
 8008734:	e00b      	b.n	800874e <DMA_CheckFifoParam+0xe6>
        break;
 8008736:	bf00      	nop
 8008738:	e00a      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        break;
 800873a:	bf00      	nop
 800873c:	e008      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        break;
 800873e:	bf00      	nop
 8008740:	e006      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        break;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        break;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
        break;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <DMA_CheckFifoParam+0xe8>
    break;
 800874e:	bf00      	nop
    }
  }

  return status;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop

08008760 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a38      	ldr	r2, [pc, #224]	; (8008854 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d022      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a36      	ldr	r2, [pc, #216]	; (8008858 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d01d      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a35      	ldr	r2, [pc, #212]	; (800885c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d018      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a33      	ldr	r2, [pc, #204]	; (8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a32      	ldr	r2, [pc, #200]	; (8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00e      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a30      	ldr	r2, [pc, #192]	; (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d009      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2f      	ldr	r2, [pc, #188]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d004      	beq.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a2d      	ldr	r2, [pc, #180]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d101      	bne.n	80087c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087c2:	2300      	movs	r3, #0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01a      	beq.n	80087fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	3b08      	subs	r3, #8
 80087d0:	4a28      	ldr	r2, [pc, #160]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087d2:	fba2 2303 	umull	r2, r3, r2, r3
 80087d6:	091b      	lsrs	r3, r3, #4
 80087d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4b26      	ldr	r3, [pc, #152]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a24      	ldr	r2, [pc, #144]	; (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 031f 	and.w	r3, r3, #31
 80087f4:	2201      	movs	r2, #1
 80087f6:	409a      	lsls	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80087fc:	e024      	b.n	8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	3b10      	subs	r3, #16
 8008806:	4a1e      	ldr	r2, [pc, #120]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	091b      	lsrs	r3, r3, #4
 800880e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a1c      	ldr	r2, [pc, #112]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d806      	bhi.n	8008826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d902      	bls.n	8008826 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3308      	adds	r3, #8
 8008824:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	461a      	mov	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a16      	ldr	r2, [pc, #88]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008838:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	2201      	movs	r2, #1
 8008842:	409a      	lsls	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	58025408 	.word	0x58025408
 8008858:	5802541c 	.word	0x5802541c
 800885c:	58025430 	.word	0x58025430
 8008860:	58025444 	.word	0x58025444
 8008864:	58025458 	.word	0x58025458
 8008868:	5802546c 	.word	0x5802546c
 800886c:	58025480 	.word	0x58025480
 8008870:	58025494 	.word	0x58025494
 8008874:	cccccccd 	.word	0xcccccccd
 8008878:	16009600 	.word	0x16009600
 800887c:	58025880 	.word	0x58025880
 8008880:	aaaaaaab 	.word	0xaaaaaaab
 8008884:	400204b8 	.word	0x400204b8
 8008888:	4002040f 	.word	0x4002040f
 800888c:	10008200 	.word	0x10008200
 8008890:	40020880 	.word	0x40020880

08008894 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d04a      	beq.n	8008940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b08      	cmp	r3, #8
 80088ae:	d847      	bhi.n	8008940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a25      	ldr	r2, [pc, #148]	; (800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d022      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a24      	ldr	r2, [pc, #144]	; (8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d01d      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a22      	ldr	r2, [pc, #136]	; (8008954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d018      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a21      	ldr	r2, [pc, #132]	; (8008958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1f      	ldr	r2, [pc, #124]	; (800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00e      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1e      	ldr	r2, [pc, #120]	; (8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d009      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1c      	ldr	r2, [pc, #112]	; (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d004      	beq.n	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d101      	bne.n	8008904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008904:	2300      	movs	r3, #0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	4b17      	ldr	r3, [pc, #92]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a15      	ldr	r2, [pc, #84]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800891c:	671a      	str	r2, [r3, #112]	; 0x70
 800891e:	e009      	b.n	8008934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	461a      	mov	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a11      	ldr	r2, [pc, #68]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008932:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3b01      	subs	r3, #1
 8008938:	2201      	movs	r2, #1
 800893a:	409a      	lsls	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008940:	bf00      	nop
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	58025408 	.word	0x58025408
 8008950:	5802541c 	.word	0x5802541c
 8008954:	58025430 	.word	0x58025430
 8008958:	58025444 	.word	0x58025444
 800895c:	58025458 	.word	0x58025458
 8008960:	5802546c 	.word	0x5802546c
 8008964:	58025480 	.word	0x58025480
 8008968:	58025494 	.word	0x58025494
 800896c:	1600963f 	.word	0x1600963f
 8008970:	58025940 	.word	0x58025940
 8008974:	1000823f 	.word	0x1000823f
 8008978:	40020940 	.word	0x40020940

0800897c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800897c:	b480      	push	{r7}
 800897e:	b089      	sub	sp, #36	; 0x24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800898a:	4b89      	ldr	r3, [pc, #548]	; (8008bb0 <HAL_GPIO_Init+0x234>)
 800898c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800898e:	e194      	b.n	8008cba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	2101      	movs	r1, #1
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	fa01 f303 	lsl.w	r3, r1, r3
 800899c:	4013      	ands	r3, r2
 800899e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 8186 	beq.w	8008cb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d005      	beq.n	80089c0 <HAL_GPIO_Init+0x44>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d130      	bne.n	8008a22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	2203      	movs	r2, #3
 80089cc:	fa02 f303 	lsl.w	r3, r2, r3
 80089d0:	43db      	mvns	r3, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4013      	ands	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	fa02 f303 	lsl.w	r3, r2, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089f6:	2201      	movs	r2, #1
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	fa02 f303 	lsl.w	r3, r2, r3
 80089fe:	43db      	mvns	r3, r3
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4013      	ands	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	091b      	lsrs	r3, r3, #4
 8008a0c:	f003 0201 	and.w	r2, r3, #1
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d017      	beq.n	8008a5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	2203      	movs	r2, #3
 8008a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	4013      	ands	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689a      	ldr	r2, [r3, #8]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d123      	bne.n	8008ab2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	08da      	lsrs	r2, r3, #3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3208      	adds	r2, #8
 8008a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	220f      	movs	r2, #15
 8008a82:	fa02 f303 	lsl.w	r3, r2, r3
 8008a86:	43db      	mvns	r3, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	08da      	lsrs	r2, r3, #3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3208      	adds	r2, #8
 8008aac:	69b9      	ldr	r1, [r7, #24]
 8008aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	2203      	movs	r2, #3
 8008abe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac2:	43db      	mvns	r3, r3
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0203 	and.w	r2, r3, #3
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 80e0 	beq.w	8008cb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008af4:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <HAL_GPIO_Init+0x238>)
 8008af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008afa:	4a2e      	ldr	r2, [pc, #184]	; (8008bb4 <HAL_GPIO_Init+0x238>)
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b04:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <HAL_GPIO_Init+0x238>)
 8008b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b12:	4a29      	ldr	r2, [pc, #164]	; (8008bb8 <HAL_GPIO_Init+0x23c>)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	089b      	lsrs	r3, r3, #2
 8008b18:	3302      	adds	r3, #2
 8008b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	220f      	movs	r2, #15
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4013      	ands	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a20      	ldr	r2, [pc, #128]	; (8008bbc <HAL_GPIO_Init+0x240>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d052      	beq.n	8008be4 <HAL_GPIO_Init+0x268>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <HAL_GPIO_Init+0x244>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d031      	beq.n	8008baa <HAL_GPIO_Init+0x22e>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1e      	ldr	r2, [pc, #120]	; (8008bc4 <HAL_GPIO_Init+0x248>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d02b      	beq.n	8008ba6 <HAL_GPIO_Init+0x22a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1d      	ldr	r2, [pc, #116]	; (8008bc8 <HAL_GPIO_Init+0x24c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d025      	beq.n	8008ba2 <HAL_GPIO_Init+0x226>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1c      	ldr	r2, [pc, #112]	; (8008bcc <HAL_GPIO_Init+0x250>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d01f      	beq.n	8008b9e <HAL_GPIO_Init+0x222>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a1b      	ldr	r2, [pc, #108]	; (8008bd0 <HAL_GPIO_Init+0x254>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d019      	beq.n	8008b9a <HAL_GPIO_Init+0x21e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <HAL_GPIO_Init+0x258>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <HAL_GPIO_Init+0x21a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a19      	ldr	r2, [pc, #100]	; (8008bd8 <HAL_GPIO_Init+0x25c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00d      	beq.n	8008b92 <HAL_GPIO_Init+0x216>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_GPIO_Init+0x260>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d007      	beq.n	8008b8e <HAL_GPIO_Init+0x212>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a17      	ldr	r2, [pc, #92]	; (8008be0 <HAL_GPIO_Init+0x264>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d101      	bne.n	8008b8a <HAL_GPIO_Init+0x20e>
 8008b86:	2309      	movs	r3, #9
 8008b88:	e02d      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b8a:	230a      	movs	r3, #10
 8008b8c:	e02b      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	e029      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b92:	2307      	movs	r3, #7
 8008b94:	e027      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b96:	2306      	movs	r3, #6
 8008b98:	e025      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b9a:	2305      	movs	r3, #5
 8008b9c:	e023      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	e021      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e01f      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e01d      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e01b      	b.n	8008be6 <HAL_GPIO_Init+0x26a>
 8008bae:	bf00      	nop
 8008bb0:	58000080 	.word	0x58000080
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	58000400 	.word	0x58000400
 8008bbc:	58020000 	.word	0x58020000
 8008bc0:	58020400 	.word	0x58020400
 8008bc4:	58020800 	.word	0x58020800
 8008bc8:	58020c00 	.word	0x58020c00
 8008bcc:	58021000 	.word	0x58021000
 8008bd0:	58021400 	.word	0x58021400
 8008bd4:	58021800 	.word	0x58021800
 8008bd8:	58021c00 	.word	0x58021c00
 8008bdc:	58022000 	.word	0x58022000
 8008be0:	58022400 	.word	0x58022400
 8008be4:	2300      	movs	r3, #0
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	f002 0203 	and.w	r2, r2, #3
 8008bec:	0092      	lsls	r2, r2, #2
 8008bee:	4093      	lsls	r3, r2
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bf6:	4938      	ldr	r1, [pc, #224]	; (8008cd8 <HAL_GPIO_Init+0x35c>)
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	089b      	lsrs	r3, r3, #2
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	43db      	mvns	r3, r3
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	4013      	ands	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4013      	ands	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4013      	ands	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f47f ae63 	bne.w	8008990 <HAL_GPIO_Init+0x14>
  }
}
 8008cca:	bf00      	nop
 8008ccc:	bf00      	nop
 8008cce:	3724      	adds	r7, #36	; 0x24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	58000400 	.word	0x58000400

08008cdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008cea:	4b75      	ldr	r3, [pc, #468]	; (8008ec0 <HAL_GPIO_DeInit+0x1e4>)
 8008cec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008cee:	e0d9      	b.n	8008ea4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80cc 	beq.w	8008e9e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d06:	4a6f      	ldr	r2, [pc, #444]	; (8008ec4 <HAL_GPIO_DeInit+0x1e8>)
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	220f      	movs	r2, #15
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	4013      	ands	r3, r2
 8008d26:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a67      	ldr	r2, [pc, #412]	; (8008ec8 <HAL_GPIO_DeInit+0x1ec>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d037      	beq.n	8008da0 <HAL_GPIO_DeInit+0xc4>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a66      	ldr	r2, [pc, #408]	; (8008ecc <HAL_GPIO_DeInit+0x1f0>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d031      	beq.n	8008d9c <HAL_GPIO_DeInit+0xc0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a65      	ldr	r2, [pc, #404]	; (8008ed0 <HAL_GPIO_DeInit+0x1f4>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d02b      	beq.n	8008d98 <HAL_GPIO_DeInit+0xbc>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a64      	ldr	r2, [pc, #400]	; (8008ed4 <HAL_GPIO_DeInit+0x1f8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d025      	beq.n	8008d94 <HAL_GPIO_DeInit+0xb8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a63      	ldr	r2, [pc, #396]	; (8008ed8 <HAL_GPIO_DeInit+0x1fc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d01f      	beq.n	8008d90 <HAL_GPIO_DeInit+0xb4>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a62      	ldr	r2, [pc, #392]	; (8008edc <HAL_GPIO_DeInit+0x200>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d019      	beq.n	8008d8c <HAL_GPIO_DeInit+0xb0>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a61      	ldr	r2, [pc, #388]	; (8008ee0 <HAL_GPIO_DeInit+0x204>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d013      	beq.n	8008d88 <HAL_GPIO_DeInit+0xac>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a60      	ldr	r2, [pc, #384]	; (8008ee4 <HAL_GPIO_DeInit+0x208>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00d      	beq.n	8008d84 <HAL_GPIO_DeInit+0xa8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a5f      	ldr	r2, [pc, #380]	; (8008ee8 <HAL_GPIO_DeInit+0x20c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <HAL_GPIO_DeInit+0xa4>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a5e      	ldr	r2, [pc, #376]	; (8008eec <HAL_GPIO_DeInit+0x210>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d101      	bne.n	8008d7c <HAL_GPIO_DeInit+0xa0>
 8008d78:	2309      	movs	r3, #9
 8008d7a:	e012      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d7c:	230a      	movs	r3, #10
 8008d7e:	e010      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d80:	2308      	movs	r3, #8
 8008d82:	e00e      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d84:	2307      	movs	r3, #7
 8008d86:	e00c      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d88:	2306      	movs	r3, #6
 8008d8a:	e00a      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d8c:	2305      	movs	r3, #5
 8008d8e:	e008      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d90:	2304      	movs	r3, #4
 8008d92:	e006      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d94:	2303      	movs	r3, #3
 8008d96:	e004      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e002      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <HAL_GPIO_DeInit+0xc6>
 8008da0:	2300      	movs	r3, #0
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f002 0203 	and.w	r2, r2, #3
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	4093      	lsls	r3, r2
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d136      	bne.n	8008e20 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	43db      	mvns	r3, r3
 8008dba:	401a      	ands	r2, r3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	401a      	ands	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	43db      	mvns	r3, r3
 8008dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ddc:	4013      	ands	r3, r2
 8008dde:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	43db      	mvns	r3, r3
 8008dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dee:	4013      	ands	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	220f      	movs	r2, #15
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e02:	4a30      	ldr	r2, [pc, #192]	; (8008ec4 <HAL_GPIO_DeInit+0x1e8>)
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	089b      	lsrs	r3, r3, #2
 8008e08:	3302      	adds	r3, #2
 8008e0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	43da      	mvns	r2, r3
 8008e12:	482c      	ldr	r0, [pc, #176]	; (8008ec4 <HAL_GPIO_DeInit+0x1e8>)
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	089b      	lsrs	r3, r3, #2
 8008e18:	400a      	ands	r2, r1
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	2103      	movs	r1, #3
 8008e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	08da      	lsrs	r2, r3, #3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3208      	adds	r2, #8
 8008e3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	220f      	movs	r2, #15
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	08d2      	lsrs	r2, r2, #3
 8008e54:	4019      	ands	r1, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3208      	adds	r2, #8
 8008e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	2103      	movs	r1, #3
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	401a      	ands	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	2101      	movs	r1, #1
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	2103      	movs	r1, #3
 8008e92:	fa01 f303 	lsl.w	r3, r1, r3
 8008e96:	43db      	mvns	r3, r3
 8008e98:	401a      	ands	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f47f af1f 	bne.w	8008cf0 <HAL_GPIO_DeInit+0x14>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	58000080 	.word	0x58000080
 8008ec4:	58000400 	.word	0x58000400
 8008ec8:	58020000 	.word	0x58020000
 8008ecc:	58020400 	.word	0x58020400
 8008ed0:	58020800 	.word	0x58020800
 8008ed4:	58020c00 	.word	0x58020c00
 8008ed8:	58021000 	.word	0x58021000
 8008edc:	58021400 	.word	0x58021400
 8008ee0:	58021800 	.word	0x58021800
 8008ee4:	58021c00 	.word	0x58021c00
 8008ee8:	58022000 	.word	0x58022000
 8008eec:	58022400 	.word	0x58022400

08008ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	807b      	strh	r3, [r7, #2]
 8008efc:	4613      	mov	r3, r2
 8008efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f00:	787b      	ldrb	r3, [r7, #1]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f06:	887a      	ldrh	r2, [r7, #2]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f0c:	e003      	b.n	8008f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f0e:	887b      	ldrh	r3, [r7, #2]
 8008f10:	041a      	lsls	r2, r3, #16
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	619a      	str	r2, [r3, #24]
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008f2c:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <HAL_HSEM_FastTake+0x2c>)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3320      	adds	r3, #32
 8008f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f36:	4a07      	ldr	r2, [pc, #28]	; (8008f54 <HAL_HSEM_FastTake+0x30>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d101      	bne.n	8008f40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e000      	b.n	8008f42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	58026400 	.word	0x58026400
 8008f54:	80000300 	.word	0x80000300

08008f58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008f62:	4906      	ldr	r1, [pc, #24]	; (8008f7c <HAL_HSEM_Release+0x24>)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	58026400 	.word	0x58026400

08008f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e08b      	b.n	80090aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7f8 faf6 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0201 	bic.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d107      	bne.n	8008ffa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	e006      	b.n	8009008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d108      	bne.n	8009022 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800901e:	605a      	str	r2, [r3, #4]
 8009020:	e007      	b.n	8009032 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6859      	ldr	r1, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b1d      	ldr	r3, [pc, #116]	; (80090b4 <HAL_I2C_Init+0x134>)
 800903e:	430b      	orrs	r3, r1
 8009040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	699b      	ldr	r3, [r3, #24]
 8009062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69d9      	ldr	r1, [r3, #28]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	02008000 	.word	0x02008000

080090b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af02      	add	r7, sp, #8
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	461a      	mov	r2, r3
 80090c4:	460b      	mov	r3, r1
 80090c6:	817b      	strh	r3, [r7, #10]
 80090c8:	4613      	mov	r3, r2
 80090ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	f040 80fd 	bne.w	80092d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d101      	bne.n	80090e8 <HAL_I2C_Master_Transmit+0x30>
 80090e4:	2302      	movs	r3, #2
 80090e6:	e0f6      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090f0:	f7fb fe82 	bl	8004df8 <HAL_GetTick>
 80090f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	2319      	movs	r3, #25
 80090fc:	2201      	movs	r2, #1
 80090fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 f914 	bl	8009330 <I2C_WaitOnFlagUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0e1      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2221      	movs	r2, #33	; 0x21
 8009116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2210      	movs	r2, #16
 800911e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	893a      	ldrh	r2, [r7, #8]
 8009132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913e:	b29b      	uxth	r3, r3
 8009140:	2bff      	cmp	r3, #255	; 0xff
 8009142:	d906      	bls.n	8009152 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	22ff      	movs	r2, #255	; 0xff
 8009148:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800914a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e007      	b.n	8009162 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009156:	b29a      	uxth	r2, r3
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800915c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009160:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d024      	beq.n	80091b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	781a      	ldrb	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	3301      	adds	r3, #1
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	8979      	ldrh	r1, [r7, #10]
 80091a6:	4b4e      	ldr	r3, [pc, #312]	; (80092e0 <HAL_I2C_Master_Transmit+0x228>)
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fa83 	bl	80096b8 <I2C_TransferConfig>
 80091b2:	e066      	b.n	8009282 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	8979      	ldrh	r1, [r7, #10]
 80091bc:	4b48      	ldr	r3, [pc, #288]	; (80092e0 <HAL_I2C_Master_Transmit+0x228>)
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fa78 	bl	80096b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80091c8:	e05b      	b.n	8009282 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	6a39      	ldr	r1, [r7, #32]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 f907 	bl	80093e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e07b      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	781a      	ldrb	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d034      	beq.n	8009282 <HAL_I2C_Master_Transmit+0x1ca>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921c:	2b00      	cmp	r3, #0
 800921e:	d130      	bne.n	8009282 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	2200      	movs	r2, #0
 8009228:	2180      	movs	r1, #128	; 0x80
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f880 	bl	8009330 <I2C_WaitOnFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e04d      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923e:	b29b      	uxth	r3, r3
 8009240:	2bff      	cmp	r3, #255	; 0xff
 8009242:	d90e      	bls.n	8009262 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	22ff      	movs	r2, #255	; 0xff
 8009248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924e:	b2da      	uxtb	r2, r3
 8009250:	8979      	ldrh	r1, [r7, #10]
 8009252:	2300      	movs	r3, #0
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 fa2c 	bl	80096b8 <I2C_TransferConfig>
 8009260:	e00f      	b.n	8009282 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009270:	b2da      	uxtb	r2, r3
 8009272:	8979      	ldrh	r1, [r7, #10]
 8009274:	2300      	movs	r3, #0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fa1b 	bl	80096b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009286:	b29b      	uxth	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d19e      	bne.n	80091ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	6a39      	ldr	r1, [r7, #32]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f8ed 	bl	8009470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e01a      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2220      	movs	r2, #32
 80092a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6859      	ldr	r1, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <HAL_I2C_Master_Transmit+0x22c>)
 80092b4:	400b      	ands	r3, r1
 80092b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	e000      	b.n	80092d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80092d4:	2302      	movs	r3, #2
  }
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	80002000 	.word	0x80002000
 80092e4:	fe00e800 	.word	0xfe00e800

080092e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d103      	bne.n	8009306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2200      	movs	r2, #0
 8009304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b01      	cmp	r3, #1
 8009312:	d007      	beq.n	8009324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	619a      	str	r2, [r3, #24]
  }
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	4613      	mov	r3, r2
 800933e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009340:	e03b      	b.n	80093ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f8d6 	bl	80094f8 <I2C_IsErrorOccurred>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e041      	b.n	80093da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d02d      	beq.n	80093ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935e:	f7fb fd4b 	bl	8004df8 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d302      	bcc.n	8009374 <I2C_WaitOnFlagUntilTimeout+0x44>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d122      	bne.n	80093ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4013      	ands	r3, r2
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	bf0c      	ite	eq
 8009384:	2301      	moveq	r3, #1
 8009386:	2300      	movne	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	429a      	cmp	r2, r3
 8009390:	d113      	bne.n	80093ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	f043 0220 	orr.w	r2, r3, #32
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e00f      	b.n	80093da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4013      	ands	r3, r2
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	bf0c      	ite	eq
 80093ca:	2301      	moveq	r3, #1
 80093cc:	2300      	movne	r3, #0
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d0b4      	beq.n	8009342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093ee:	e033      	b.n	8009458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f87f 	bl	80094f8 <I2C_IsErrorOccurred>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e031      	b.n	8009468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d025      	beq.n	8009458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800940c:	f7fb fcf4 	bl	8004df8 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	429a      	cmp	r2, r3
 800941a:	d302      	bcc.n	8009422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d11a      	bne.n	8009458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b02      	cmp	r3, #2
 800942e:	d013      	beq.n	8009458 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009434:	f043 0220 	orr.w	r2, r3, #32
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e007      	b.n	8009468 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d1c4      	bne.n	80093f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800947c:	e02f      	b.n	80094de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f000 f838 	bl	80094f8 <I2C_IsErrorOccurred>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e02d      	b.n	80094ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009492:	f7fb fcb1 	bl	8004df8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11a      	bne.n	80094de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d013      	beq.n	80094de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	f043 0220 	orr.w	r2, r3, #32
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e007      	b.n	80094ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d1c8      	bne.n	800947e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08a      	sub	sp, #40	; 0x28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d068      	beq.n	80095f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2210      	movs	r2, #16
 800952a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800952c:	e049      	b.n	80095c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d045      	beq.n	80095c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009536:	f7fb fc5f 	bl	8004df8 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d302      	bcc.n	800954c <I2C_IsErrorOccurred+0x54>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d13a      	bne.n	80095c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009556:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800955e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800956a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800956e:	d121      	bne.n	80095b4 <I2C_IsErrorOccurred+0xbc>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009576:	d01d      	beq.n	80095b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009578:	7cfb      	ldrb	r3, [r7, #19]
 800957a:	2b20      	cmp	r3, #32
 800957c:	d01a      	beq.n	80095b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685a      	ldr	r2, [r3, #4]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800958c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800958e:	f7fb fc33 	bl	8004df8 <HAL_GetTick>
 8009592:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009594:	e00e      	b.n	80095b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009596:	f7fb fc2f 	bl	8004df8 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b19      	cmp	r3, #25
 80095a2:	d907      	bls.n	80095b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	f043 0320 	orr.w	r3, r3, #32
 80095aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80095b2:	e006      	b.n	80095c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b20      	cmp	r3, #32
 80095c0:	d1e9      	bne.n	8009596 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f003 0320 	and.w	r3, r3, #32
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	d003      	beq.n	80095d8 <I2C_IsErrorOccurred+0xe0>
 80095d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0aa      	beq.n	800952e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2220      	movs	r2, #32
 80095e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	f043 0304 	orr.w	r3, r3, #4
 80095ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f043 0308 	orr.w	r3, r3, #8
 8009630:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800963a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	f043 0302 	orr.w	r3, r3, #2
 8009652:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800965c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01c      	beq.n	80096a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff fe3b 	bl	80092e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6859      	ldr	r1, [r3, #4]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <I2C_IsErrorOccurred+0x1bc>)
 800967e:	400b      	ands	r3, r1
 8009680:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	431a      	orrs	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3728      	adds	r7, #40	; 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	fe00e800 	.word	0xfe00e800

080096b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607b      	str	r3, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	817b      	strh	r3, [r7, #10]
 80096c6:	4613      	mov	r3, r2
 80096c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ca:	897b      	ldrh	r3, [r7, #10]
 80096cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096d0:	7a7b      	ldrb	r3, [r7, #9]
 80096d2:	041b      	lsls	r3, r3, #16
 80096d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	0d5b      	lsrs	r3, r3, #21
 80096f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80096f6:	4b08      	ldr	r3, [pc, #32]	; (8009718 <I2C_TransferConfig+0x60>)
 80096f8:	430b      	orrs	r3, r1
 80096fa:	43db      	mvns	r3, r3
 80096fc:	ea02 0103 	and.w	r1, r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800970a:	bf00      	nop
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	03ff63ff 	.word	0x03ff63ff

0800971c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b20      	cmp	r3, #32
 8009730:	d138      	bne.n	80097a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800973c:	2302      	movs	r3, #2
 800973e:	e032      	b.n	80097a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2224      	movs	r2, #36	; 0x24
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0201 	bic.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800976e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6819      	ldr	r1, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f042 0201 	orr.w	r2, r2, #1
 800978e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	e000      	b.n	80097a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097a4:	2302      	movs	r3, #2
  }
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b085      	sub	sp, #20
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b20      	cmp	r3, #32
 80097c6:	d139      	bne.n	800983c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097d2:	2302      	movs	r3, #2
 80097d4:	e033      	b.n	800983e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2224      	movs	r2, #36	; 0x24
 80097e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0201 	bic.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2220      	movs	r2, #32
 800982c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	e000      	b.n	800983e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800983c:	2302      	movs	r3, #2
  }
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e12a      	b.n	8009ab4 <HAL_I2S_Init+0x268>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d123      	bne.n	80098b2 <HAL_I2S_Init+0x66>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
    /* Init the I2S Callback settings */
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a91      	ldr	r2, [pc, #580]	; (8009abc <HAL_I2S_Init+0x270>)
 8009876:	655a      	str	r2, [r3, #84]	; 0x54
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a91      	ldr	r2, [pc, #580]	; (8009ac0 <HAL_I2S_Init+0x274>)
 800987c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a90      	ldr	r2, [pc, #576]	; (8009ac4 <HAL_I2S_Init+0x278>)
 8009882:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a90      	ldr	r2, [pc, #576]	; (8009ac8 <HAL_I2S_Init+0x27c>)
 8009888:	661a      	str	r2, [r3, #96]	; 0x60
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a8f      	ldr	r2, [pc, #572]	; (8009acc <HAL_I2S_Init+0x280>)
 800988e:	665a      	str	r2, [r3, #100]	; 0x64
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a8f      	ldr	r2, [pc, #572]	; (8009ad0 <HAL_I2S_Init+0x284>)
 8009894:	669a      	str	r2, [r3, #104]	; 0x68
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a8e      	ldr	r2, [pc, #568]	; (8009ad4 <HAL_I2S_Init+0x288>)
 800989a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (hi2s->MspInitCallback == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <HAL_I2S_Init+0x5e>
    {
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a8c      	ldr	r2, [pc, #560]	; (8009ad8 <HAL_I2S_Init+0x28c>)
 80098a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d107      	bne.n	80098d8 <HAL_I2S_Init+0x8c>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0201 	bic.w	r2, r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2200      	movs	r2, #0
 80098de:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d008      	beq.n	80098fa <HAL_I2S_Init+0xae>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b06      	cmp	r3, #6
 80098ee:	d004      	beq.n	80098fa <HAL_I2S_Init+0xae>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b0a      	cmp	r3, #10
 80098f6:	f040 8087 	bne.w	8009a08 <HAL_I2S_Init+0x1bc>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d05a      	beq.n	80099b8 <HAL_I2S_Init+0x16c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <HAL_I2S_Init+0xc4>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800990a:	2302      	movs	r3, #2
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e001      	b.n	8009914 <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	2b30      	cmp	r3, #48	; 0x30
 800991a:	d003      	beq.n	8009924 <HAL_I2S_Init+0xd8>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8009920:	2bb0      	cmp	r3, #176	; 0xb0
 8009922:	d102      	bne.n	800992a <HAL_I2S_Init+0xde>
      {
        ispcm = 1UL;
 8009924:	2301      	movs	r3, #1
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	e001      	b.n	800992e <HAL_I2S_Init+0xe2>
      }
      else
      {
        ispcm = 0UL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800992e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009932:	f04f 0100 	mov.w	r1, #0
 8009936:	f004 f9c3 	bl	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800993a:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009944:	d113      	bne.n	800996e <HAL_I2S_Init+0x122>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8009946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	fbb2 f2f3 	udiv	r2, r2, r3
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	fbb2 f3f3 	udiv	r3, r2, r3
 8009968:	3305      	adds	r3, #5
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	e014      	b.n	8009998 <HAL_I2S_Init+0x14c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800996e:	2220      	movs	r2, #32
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	fa22 f303 	lsr.w	r3, r2, r3
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	3305      	adds	r3, #5
 8009996:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4a50      	ldr	r2, [pc, #320]	; (8009adc <HAL_I2S_Init+0x290>)
 800999c:	fba2 2303 	umull	r2, r3, r2, r3
 80099a0:	08db      	lsrs	r3, r3, #3
 80099a2:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	61fb      	str	r3, [r7, #28]
 80099b6:	e003      	b.n	80099c0 <HAL_I2S_Init+0x174>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80099bc:	2300      	movs	r3, #0
 80099be:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d102      	bne.n	80099cc <HAL_I2S_Init+0x180>
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d002      	beq.n	80099d2 <HAL_I2S_Init+0x186>
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2bff      	cmp	r3, #255	; 0xff
 80099d0:	d907      	bls.n	80099e2 <HAL_I2S_Init+0x196>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	f043 0210 	orr.w	r2, r3, #16
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e068      	b.n	8009ab4 <HAL_I2S_Init+0x268>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <HAL_I2S_Init+0x1a0>
    {
      i2sodd = 1UL;
 80099e8:	2301      	movs	r3, #1
 80099ea:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099f2:	4b3b      	ldr	r3, [pc, #236]	; (8009ae0 <HAL_I2S_Init+0x294>)
 80099f4:	4013      	ands	r3, r2
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	0411      	lsls	r1, r2, #16
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	0612      	lsls	r2, r2, #24
 80099fe:	4311      	orrs	r1, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a0e:	4b35      	ldr	r3, [pc, #212]	; (8009ae4 <HAL_I2S_Init+0x298>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6851      	ldr	r1, [r2, #4]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6892      	ldr	r2, [r2, #8]
 8009a1a:	4311      	orrs	r1, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	68d2      	ldr	r2, [r2, #12]
 8009a20:	4311      	orrs	r1, r2
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	6992      	ldr	r2, [r2, #24]
 8009a26:	4311      	orrs	r1, r2
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6a12      	ldr	r2, [r2, #32]
 8009a2c:	4311      	orrs	r1, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a32:	4311      	orrs	r1, r2
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6912      	ldr	r2, [r2, #16]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0201 	orr.w	r2, r2, #1
 8009a44:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f640 72f8 	movw	r2, #4088	; 0xff8
 8009a4e:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a5e:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69da      	ldr	r2, [r3, #28]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d007      	beq.n	8009a8e <HAL_I2S_Init+0x242>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	2b06      	cmp	r3, #6
 8009a84:	d003      	beq.n	8009a8e <HAL_I2S_Init+0x242>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2b0a      	cmp	r3, #10
 8009a8c:	d10a      	bne.n	8009aa4 <HAL_I2S_Init+0x258>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3720      	adds	r7, #32
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	0800a191 	.word	0x0800a191
 8009ac0:	0800a1b9 	.word	0x0800a1b9
 8009ac4:	0800a1e1 	.word	0x0800a1e1
 8009ac8:	0800a17d 	.word	0x0800a17d
 8009acc:	0800a1a5 	.word	0x0800a1a5
 8009ad0:	0800a1cd 	.word	0x0800a1cd
 8009ad4:	0800a1f5 	.word	0x0800a1f5
 8009ad8:	0800166d 	.word	0x0800166d
 8009adc:	cccccccd 	.word	0xcccccccd
 8009ae0:	fe00ffff 	.word	0xfe00ffff
 8009ae4:	fdff9040 	.word	0xfdff9040

08009ae8 <HAL_I2S_RegisterCallback>:
  *         to register callbacks for HAL_I2S_MSPINIT_CB_ID and HAL_I2S_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_RegisterCallback(I2S_HandleTypeDef *hi2s, HAL_I2S_CallbackIDTypeDef CallbackID,
                                           pI2S_CallbackTypeDef pCallback)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	460b      	mov	r3, r1
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d107      	bne.n	8009b10 <HAL_I2S_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2s->ErrorCode |= HAL_I2S_ERROR_INVALID_CALLBACK;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e070      	b.n	8009bf2 <HAL_I2S_RegisterCallback+0x10a>
  }

  if (HAL_I2S_STATE_READY == hi2s->State)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d144      	bne.n	8009ba6 <HAL_I2S_RegisterCallback+0xbe>
  {
    switch (CallbackID)
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	2b08      	cmp	r3, #8
 8009b20:	d838      	bhi.n	8009b94 <HAL_I2S_RegisterCallback+0xac>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <HAL_I2S_RegisterCallback+0x40>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b5d 	.word	0x08009b5d
 8009b34:	08009b65 	.word	0x08009b65
 8009b38:	08009b6d 	.word	0x08009b6d
 8009b3c:	08009b75 	.word	0x08009b75
 8009b40:	08009b7d 	.word	0x08009b7d
 8009b44:	08009b85 	.word	0x08009b85
 8009b48:	08009b8d 	.word	0x08009b8d
    {
      case HAL_I2S_TX_COMPLETE_CB_ID :
        hi2s->TxCpltCallback = pCallback;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009b52:	e04d      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_RX_COMPLETE_CB_ID :
        hi2s->RxCpltCallback = pCallback;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009b5a:	e049      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_TX_RX_COMPLETE_CB_ID :
        hi2s->TxRxCpltCallback = pCallback;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009b62:	e045      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_TX_HALF_COMPLETE_CB_ID :
        hi2s->TxHalfCpltCallback = pCallback;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009b6a:	e041      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_RX_HALF_COMPLETE_CB_ID :
        hi2s->RxHalfCpltCallback = pCallback;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009b72:	e03d      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>


      case HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID :
        hi2s->TxRxHalfCpltCallback = pCallback;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009b7a:	e039      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_ERROR_CB_ID :
        hi2s->ErrorCallback = pCallback;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009b82:	e035      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = pCallback;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009b8a:	e031      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = pCallback;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009b92:	e02d      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
        break;
 8009ba4:	e024      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>
    }
  }
  else if (HAL_I2S_STATE_RESET == hi2s->State)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d116      	bne.n	8009be0 <HAL_I2S_RegisterCallback+0xf8>
  {
    switch (CallbackID)
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	2b07      	cmp	r3, #7
 8009bb6:	d002      	beq.n	8009bbe <HAL_I2S_RegisterCallback+0xd6>
 8009bb8:	2b08      	cmp	r3, #8
 8009bba:	d004      	beq.n	8009bc6 <HAL_I2S_RegisterCallback+0xde>
 8009bbc:	e007      	b.n	8009bce <HAL_I2S_RegisterCallback+0xe6>
    {
      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = pCallback;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009bc4:	e014      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = pCallback;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009bcc:	e010      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
        break;
 8009bde:	e007      	b.n	8009bf0 <HAL_I2S_RegisterCallback+0x108>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Return error status */
    status =  HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <HAL_I2S_UnRegisterCallback>:
  * @note   The HAL_I2S_UnRegisterCallback() may be called before HAL_I2S_Init() in HAL_I2S_STATE_RESET
  *         to un-register callbacks for HAL_I2S_MSPINIT_CB_ID and HAL_I2S_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_UnRegisterCallback(I2S_HandleTypeDef *hi2s, HAL_I2S_CallbackIDTypeDef CallbackID)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_I2S_STATE_READY == hi2s->State)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d144      	bne.n	8009ca6 <HAL_I2S_UnRegisterCallback+0xa6>
  {
    switch (CallbackID)
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d838      	bhi.n	8009c94 <HAL_I2S_UnRegisterCallback+0x94>
 8009c22:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <HAL_I2S_UnRegisterCallback+0x28>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c55 	.word	0x08009c55
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	08009c65 	.word	0x08009c65
 8009c38:	08009c6d 	.word	0x08009c6d
 8009c3c:	08009c75 	.word	0x08009c75
 8009c40:	08009c7d 	.word	0x08009c7d
 8009c44:	08009c85 	.word	0x08009c85
 8009c48:	08009c8d 	.word	0x08009c8d
    {
      case HAL_I2S_TX_COMPLETE_CB_ID :
        hi2s->TxCpltCallback = HAL_I2S_TxCpltCallback;                /* Legacy weak TxCpltCallback       */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a2c      	ldr	r2, [pc, #176]	; (8009d00 <HAL_I2S_UnRegisterCallback+0x100>)
 8009c50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009c52:	e04d      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_RX_COMPLETE_CB_ID :
        hi2s->RxCpltCallback = HAL_I2S_RxCpltCallback;                /* Legacy weak RxCpltCallback       */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a2b      	ldr	r2, [pc, #172]	; (8009d04 <HAL_I2S_UnRegisterCallback+0x104>)
 8009c58:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009c5a:	e049      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_RX_COMPLETE_CB_ID :
        hi2s->TxRxCpltCallback = HAL_I2SEx_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback     */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a2a      	ldr	r2, [pc, #168]	; (8009d08 <HAL_I2S_UnRegisterCallback+0x108>)
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009c62:	e045      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_HALF_COMPLETE_CB_ID :
        hi2s->TxHalfCpltCallback = HAL_I2S_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback   */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a29      	ldr	r2, [pc, #164]	; (8009d0c <HAL_I2S_UnRegisterCallback+0x10c>)
 8009c68:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009c6a:	e041      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_RX_HALF_COMPLETE_CB_ID :
        hi2s->RxHalfCpltCallback = HAL_I2S_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback   */
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a28      	ldr	r2, [pc, #160]	; (8009d10 <HAL_I2S_UnRegisterCallback+0x110>)
 8009c70:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009c72:	e03d      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID :
        hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a27      	ldr	r2, [pc, #156]	; (8009d14 <HAL_I2S_UnRegisterCallback+0x114>)
 8009c78:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009c7a:	e039      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_ERROR_CB_ID :
        hi2s->ErrorCallback = HAL_I2S_ErrorCallback;                  /* Legacy weak ErrorCallback        */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a26      	ldr	r2, [pc, #152]	; (8009d18 <HAL_I2S_UnRegisterCallback+0x118>)
 8009c80:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009c82:	e035      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = HAL_I2S_MspInit;                      /* Legacy weak MspInit              */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a25      	ldr	r2, [pc, #148]	; (8009d1c <HAL_I2S_UnRegisterCallback+0x11c>)
 8009c88:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009c8a:	e031      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = HAL_I2S_MspDeInit;                  /* Legacy weak MspDeInit            */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a24      	ldr	r2, [pc, #144]	; (8009d20 <HAL_I2S_UnRegisterCallback+0x120>)
 8009c90:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009c92:	e02d      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
        break;
 8009ca4:	e024      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>
    }
  }
  else if (HAL_I2S_STATE_RESET == hi2s->State)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d116      	bne.n	8009ce0 <HAL_I2S_UnRegisterCallback+0xe0>
  {
    switch (CallbackID)
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	2b07      	cmp	r3, #7
 8009cb6:	d002      	beq.n	8009cbe <HAL_I2S_UnRegisterCallback+0xbe>
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d004      	beq.n	8009cc6 <HAL_I2S_UnRegisterCallback+0xc6>
 8009cbc:	e007      	b.n	8009cce <HAL_I2S_UnRegisterCallback+0xce>
    {
      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = HAL_I2S_MspInit;                      /* Legacy weak MspInit              */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a16      	ldr	r2, [pc, #88]	; (8009d1c <HAL_I2S_UnRegisterCallback+0x11c>)
 8009cc2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009cc4:	e014      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = HAL_I2S_MspDeInit;                  /* Legacy weak MspDeInit            */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a15      	ldr	r2, [pc, #84]	; (8009d20 <HAL_I2S_UnRegisterCallback+0x120>)
 8009cca:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009ccc:	e010      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8009cde:	e007      	b.n	8009cf0 <HAL_I2S_UnRegisterCallback+0xf0>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Return error status */
    status =  HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	0800a191 	.word	0x0800a191
 8009d04:	0800a1b9 	.word	0x0800a1b9
 8009d08:	0800a1e1 	.word	0x0800a1e1
 8009d0c:	0800a17d 	.word	0x0800a17d
 8009d10:	0800a1a5 	.word	0x0800a1a5
 8009d14:	0800a1cd 	.word	0x0800a1cd
 8009d18:	0800a1f5 	.word	0x0800a1f5
 8009d1c:	0800166d 	.word	0x0800166d
 8009d20:	0800186d 	.word	0x0800186d

08009d24 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d002      	beq.n	8009d48 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8009d42:	887b      	ldrh	r3, [r7, #2]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e0c0      	b.n	8009ece <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d001      	beq.n	8009d5c <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e0b8      	b.n	8009ece <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_I2SEx_TransmitReceive_DMA+0x48>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e0b0      	b.n	8009ece <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	887a      	ldrh	r2, [r7, #2]
 8009d84:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	887a      	ldrh	r2, [r7, #2]
 8009d8a:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	887a      	ldrh	r2, [r7, #2]
 8009d90:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	887a      	ldrh	r2, [r7, #2]
 8009d96:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2205      	movs	r2, #5
 8009da2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009db4:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dba:	4a47      	ldr	r2, [pc, #284]	; (8009ed8 <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8009dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc2:	4a46      	ldr	r2, [pc, #280]	; (8009edc <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 8009dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dca:	4a45      	ldr	r2, [pc, #276]	; (8009ee0 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 8009dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3320      	adds	r3, #32
 8009dde:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009de4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8009de6:	f7fc fae9 	bl	80063bc <HAL_DMA_Start_IT>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d011      	beq.n	8009e14 <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df4:	f043 0208 	orr.w	r2, r3, #8
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	e05c      	b.n	8009ece <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d107      	bne.n	8009e32 <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e30:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3330      	adds	r3, #48	; 0x30
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009e48:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8009e4a:	f7fc fab7 	bl	80063bc <HAL_DMA_Start_IT>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d011      	beq.n	8009e78 <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e58:	f043 0208 	orr.w	r2, r3, #8
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	e02a      	b.n	8009ece <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d107      	bne.n	8009e96 <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689a      	ldr	r2, [r3, #8]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d107      	bne.n	8009eb4 <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec2:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	0800a263 	.word	0x0800a263
 8009edc:	0800a209 	.word	0x0800a209
 8009ee0:	0800a281 	.word	0x0800a281

08009ee4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009efe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f0e:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00f      	beq.n	8009f38 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fc fcb7 	bl	8006890 <HAL_DMA_Abort>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d007      	beq.n	8009f38 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2c:	f043 0208 	orr.w	r2, r3, #8
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00f      	beq.n	8009f60 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fc fca3 	bl	8006890 <HAL_DMA_Abort>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f54:	f043 0208 	orr.w	r2, r3, #8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d130      	bne.n	800a012 <HAL_I2S_IRQHandler+0x8e>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d008      	beq.n	8009fcc <HAL_I2S_IRQHandler+0x48>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d103      	bne.n	8009fcc <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01d      	beq.n	800a012 <HAL_I2S_IRQHandler+0x8e>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6919      	ldr	r1, [r3, #16]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	4b64      	ldr	r3, [pc, #400]	; (800a174 <HAL_I2S_IRQHandler+0x1f0>)
 8009fe2:	400b      	ands	r3, r1
 8009fe4:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff4:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a002:	f043 0202 	orr.w	r2, r3, #2
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d130      	bne.n	800a080 <HAL_I2S_IRQHandler+0xfc>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <HAL_I2S_IRQHandler+0xb6>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <HAL_I2S_IRQHandler+0xb6>
    {
      hi2s->TxISR(hi2s);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01d      	beq.n	800a080 <HAL_I2S_IRQHandler+0xfc>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691a      	ldr	r2, [r3, #16]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 800a052:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0220 	orr.w	r2, r2, #32
 800a062:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a070:	f043 0204 	orr.w	r2, r3, #4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a086:	b2db      	uxtb	r3, r3
 800a088:	2b05      	cmp	r3, #5
 800a08a:	d16e      	bne.n	800a16a <HAL_I2S_IRQHandler+0x1e6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <HAL_I2S_IRQHandler+0x122>
    {
      hi2s->TxISR(hi2s);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d008      	beq.n	800a0c2 <HAL_I2S_IRQHandler+0x13e>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <HAL_I2S_IRQHandler+0x13e>
    {
      hi2s->RxISR(hi2s);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d008      	beq.n	800a0de <HAL_I2S_IRQHandler+0x15a>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <HAL_I2S_IRQHandler+0x15a>
    {
      hi2s->TxISR(hi2s);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 0320 	and.w	r3, r3, #32
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01d      	beq.n	800a124 <HAL_I2S_IRQHandler+0x1a0>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6919      	ldr	r1, [r3, #16]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <HAL_I2S_IRQHandler+0x1f4>)
 800a0f4:	400b      	ands	r3, r1
 800a0f6:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699a      	ldr	r2, [r3, #24]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0220 	orr.w	r2, r2, #32
 800a106:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a114:	f043 0204 	orr.w	r2, r3, #4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	4798      	blx	r3
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d01d      	beq.n	800a16a <HAL_I2S_IRQHandler+0x1e6>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	6919      	ldr	r1, [r3, #16]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <HAL_I2S_IRQHandler+0x1f4>)
 800a13a:	400b      	ands	r3, r1
 800a13c:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	699a      	ldr	r2, [r3, #24]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a14c:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15a:	f043 0202 	orr.w	r2, r3, #2
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a16a:	bf00      	nop
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	fffffe9e 	.word	0xfffffe9e
 800a178:	fffffe9c 	.word	0xfffffe9c

0800a17c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d119      	bne.n	800a252 <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a22c:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a242:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	4798      	blx	r3
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a25a:	bf00      	nop
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	4798      	blx	r3
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a278:	bf00      	nop
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a29c:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b6:	f043 0208 	orr.w	r2, r3, #8
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	4798      	blx	r3
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b086      	sub	sp, #24
 800a2d2:	af02      	add	r7, sp, #8
 800a2d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e0fe      	b.n	800a4de <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f00b fcf5 	bl	8015ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4618      	mov	r0, r3
 800a308:	f008 fa27 	bl	801275a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6818      	ldr	r0, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7c1a      	ldrb	r2, [r3, #16]
 800a314:	f88d 2000 	strb.w	r2, [sp]
 800a318:	3304      	adds	r3, #4
 800a31a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a31c:	f008 f8f8 	bl	8012510 <USB_CoreInit>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2202      	movs	r2, #2
 800a32a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e0d5      	b.n	800a4de <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f008 fa1f 	bl	801277c <USB_SetCurrentMode>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0c6      	b.n	800a4de <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
 800a354:	e04a      	b.n	800a3ec <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a356:	7bfa      	ldrb	r2, [r7, #15]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4613      	mov	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	3315      	adds	r3, #21
 800a366:	2201      	movs	r2, #1
 800a368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a36a:	7bfa      	ldrb	r2, [r7, #15]
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	4613      	mov	r3, r2
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	4413      	add	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	440b      	add	r3, r1
 800a378:	3314      	adds	r3, #20
 800a37a:	7bfa      	ldrb	r2, [r7, #15]
 800a37c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a37e:	7bfa      	ldrb	r2, [r7, #15]
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	b298      	uxth	r0, r3
 800a384:	6879      	ldr	r1, [r7, #4]
 800a386:	4613      	mov	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	440b      	add	r3, r1
 800a390:	332e      	adds	r3, #46	; 0x2e
 800a392:	4602      	mov	r2, r0
 800a394:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a396:	7bfa      	ldrb	r2, [r7, #15]
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	3318      	adds	r3, #24
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a3aa:	7bfa      	ldrb	r2, [r7, #15]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	331c      	adds	r3, #28
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a3be:	7bfa      	ldrb	r2, [r7, #15]
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	440b      	add	r3, r1
 800a3cc:	3320      	adds	r3, #32
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a3d2:	7bfa      	ldrb	r2, [r7, #15]
 800a3d4:	6879      	ldr	r1, [r7, #4]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	4413      	add	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	440b      	add	r3, r1
 800a3e0:	3324      	adds	r3, #36	; 0x24
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	73fb      	strb	r3, [r7, #15]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	791b      	ldrb	r3, [r3, #4]
 800a3f0:	7bfa      	ldrb	r2, [r7, #15]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3af      	bcc.n	800a356 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
 800a3fa:	e044      	b.n	800a486 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a3fc:	7bfa      	ldrb	r2, [r7, #15]
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a412:	7bfa      	ldrb	r2, [r7, #15]
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	440b      	add	r3, r1
 800a420:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a428:	7bfa      	ldrb	r2, [r7, #15]
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4613      	mov	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800a43a:	2200      	movs	r2, #0
 800a43c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a43e:	7bfa      	ldrb	r2, [r7, #15]
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	4613      	mov	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a454:	7bfa      	ldrb	r2, [r7, #15]
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	4613      	mov	r3, r2
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	4413      	add	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a46a:	7bfa      	ldrb	r2, [r7, #15]
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	4413      	add	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	3301      	adds	r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	7bfa      	ldrb	r2, [r7, #15]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d3b5      	bcc.n	800a3fc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6818      	ldr	r0, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7c1a      	ldrb	r2, [r3, #16]
 800a498:	f88d 2000 	strb.w	r2, [sp]
 800a49c:	3304      	adds	r3, #4
 800a49e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4a0:	f008 f9b8 	bl	8012814 <USB_DevInit>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e013      	b.n	800a4de <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7b1b      	ldrb	r3, [r3, #12]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d102      	bne.n	800a4d2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f001 f96d 	bl	800b7ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f009 f9f7 	bl	80138ca <USB_DevDisconnect>

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d101      	bne.n	800a502 <HAL_PCD_Start+0x1c>
 800a4fe:	2302      	movs	r3, #2
 800a500:	e022      	b.n	800a548 <HAL_PCD_Start+0x62>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d105      	bne.n	800a52a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f008 f902 	bl	8012738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4618      	mov	r0, r3
 800a53a:	f009 f9a5 	bl	8013888 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b08d      	sub	sp, #52	; 0x34
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f009 fa63 	bl	8013a32 <USB_GetMode>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 84b9 	bne.w	800aee6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f009 f9c7 	bl	801390c <USB_ReadInterrupts>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 84af 	beq.w	800aee4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f009 f9b4 	bl	801390c <USB_ReadInterrupts>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d107      	bne.n	800a5be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	695a      	ldr	r2, [r3, #20]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f002 0202 	and.w	r2, r2, #2
 800a5bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f009 f9a2 	bl	801390c <USB_ReadInterrupts>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	f003 0310 	and.w	r3, r3, #16
 800a5ce:	2b10      	cmp	r3, #16
 800a5d0:	d161      	bne.n	800a696 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0210 	bic.w	r2, r2, #16
 800a5e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	f003 020f 	and.w	r2, r3, #15
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	3304      	adds	r3, #4
 800a600:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	0c5b      	lsrs	r3, r3, #17
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d124      	bne.n	800a658 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a614:	4013      	ands	r3, r2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d035      	beq.n	800a686 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	091b      	lsrs	r3, r3, #4
 800a622:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a628:	b29b      	uxth	r3, r3
 800a62a:	461a      	mov	r2, r3
 800a62c:	6a38      	ldr	r0, [r7, #32]
 800a62e:	f008 ffd9 	bl	80135e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	091b      	lsrs	r3, r3, #4
 800a63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a63e:	441a      	add	r2, r3
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	695a      	ldr	r2, [r3, #20]
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	091b      	lsrs	r3, r3, #4
 800a64c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a650:	441a      	add	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	615a      	str	r2, [r3, #20]
 800a656:	e016      	b.n	800a686 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	0c5b      	lsrs	r3, r3, #17
 800a65c:	f003 030f 	and.w	r3, r3, #15
 800a660:	2b06      	cmp	r3, #6
 800a662:	d110      	bne.n	800a686 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a66a:	2208      	movs	r2, #8
 800a66c:	4619      	mov	r1, r3
 800a66e:	6a38      	ldr	r0, [r7, #32]
 800a670:	f008 ffb8 	bl	80135e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	695a      	ldr	r2, [r3, #20]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a680:	441a      	add	r2, r3
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0210 	orr.w	r2, r2, #16
 800a694:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f009 f936 	bl	801390c <USB_ReadInterrupts>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6aa:	f040 80a7 	bne.w	800a7fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f009 f93b 	bl	8013932 <USB_ReadDevAllOutEpInterrupt>
 800a6bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a6be:	e099      	b.n	800a7f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 808e 	beq.w	800a7e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f009 f95f 	bl	801399a <USB_ReadDevOutEPInterrupt>
 800a6dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00c      	beq.n	800a702 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a6fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fecf 	bl	800b4a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f003 0308 	and.w	r3, r3, #8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00c      	beq.n	800a726 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	461a      	mov	r2, r3
 800a71a:	2308      	movs	r3, #8
 800a71c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 ffa5 	bl	800b670 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f003 0310 	and.w	r3, r3, #16
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d008      	beq.n	800a742 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73c:	461a      	mov	r2, r3
 800a73e:	2310      	movs	r3, #16
 800a740:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d030      	beq.n	800a7ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a754:	2b80      	cmp	r3, #128	; 0x80
 800a756:	d109      	bne.n	800a76c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a76a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a76e:	4613      	mov	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4413      	add	r3, r2
 800a77e:	3304      	adds	r3, #4
 800a780:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	78db      	ldrb	r3, [r3, #3]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d108      	bne.n	800a79c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2200      	movs	r2, #0
 800a78e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f00b fbfa 	bl	8015f90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d008      	beq.n	800a7ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2320      	movs	r3, #32
 800a7c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d009      	beq.n	800a7e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	085b      	lsrs	r3, r3, #1
 800a7f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f47f af62 	bne.w	800a6c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4618      	mov	r0, r3
 800a802:	f009 f883 	bl	801390c <USB_ReadInterrupts>
 800a806:	4603      	mov	r3, r0
 800a808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a810:	f040 80db 	bne.w	800a9ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f009 f8a4 	bl	8013966 <USB_ReadDevAllInEpInterrupt>
 800a81e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a824:	e0cd      	b.n	800a9c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 80c2 	beq.w	800a9b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f009 f8ca 	bl	80139d6 <USB_ReadDevInEPInterrupt>
 800a842:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d057      	beq.n	800a8fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	f003 030f 	and.w	r3, r3, #15
 800a854:	2201      	movs	r2, #1
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	43db      	mvns	r3, r3
 800a868:	69f9      	ldr	r1, [r7, #28]
 800a86a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a86e:	4013      	ands	r3, r2
 800a870:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87e:	461a      	mov	r2, r3
 800a880:	2301      	movs	r3, #1
 800a882:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	799b      	ldrb	r3, [r3, #6]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d132      	bne.n	800a8f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a890:	4613      	mov	r3, r2
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	440b      	add	r3, r1
 800a89a:	3320      	adds	r3, #32
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4403      	add	r3, r0
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4419      	add	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4403      	add	r3, r0
 800a8c0:	3320      	adds	r3, #32
 800a8c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d113      	bne.n	800a8f2 <HAL_PCD_IRQHandler+0x3a2>
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3324      	adds	r3, #36	; 0x24
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6818      	ldr	r0, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	f009 f8d3 	bl	8013a98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f00b fac4 	bl	8015e86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b00      	cmp	r3, #0
 800a906:	d008      	beq.n	800a91a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	461a      	mov	r2, r3
 800a916:	2308      	movs	r3, #8
 800a918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f003 0310 	and.w	r3, r3, #16
 800a920:	2b00      	cmp	r3, #0
 800a922:	d008      	beq.n	800a936 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a930:	461a      	mov	r2, r3
 800a932:	2310      	movs	r3, #16
 800a934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d008      	beq.n	800a952 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94c:	461a      	mov	r2, r3
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d023      	beq.n	800a9a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a95c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a95e:	6a38      	ldr	r0, [r7, #32]
 800a960:	f008 f8b6 	bl	8012ad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	3310      	adds	r3, #16
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	4413      	add	r3, r2
 800a974:	3304      	adds	r3, #4
 800a976:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	78db      	ldrb	r3, [r3, #3]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d108      	bne.n	800a992 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2200      	movs	r2, #0
 800a984:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f00b fb11 	bl	8015fb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99e:	461a      	mov	r2, r3
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a9ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fce8 	bl	800b386 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f47f af2e 	bne.w	800a826 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f008 ff9c 	bl	801390c <USB_ReadInterrupts>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9de:	d122      	bne.n	800aa26 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d108      	bne.n	800aa10 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800aa06:	2100      	movs	r1, #0
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fef3 	bl	800b7f4 <HAL_PCDEx_LPM_Callback>
 800aa0e:	e002      	b.n	800aa16 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f00b faaf 	bl	8015f74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aa24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f008 ff6e 	bl	801390c <USB_ReadInterrupts>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa3a:	d112      	bne.n	800aa62 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d102      	bne.n	800aa52 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f00b fa6b 	bl	8015f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	695a      	ldr	r2, [r3, #20]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800aa60:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f008 ff50 	bl	801390c <USB_ReadInterrupts>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa76:	d121      	bne.n	800aabc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695a      	ldr	r2, [r3, #20]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800aa86:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d111      	bne.n	800aab6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa0:	089b      	lsrs	r3, r3, #2
 800aaa2:	f003 020f 	and.w	r2, r3, #15
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800aaac:	2101      	movs	r1, #1
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fea0 	bl	800b7f4 <HAL_PCDEx_LPM_Callback>
 800aab4:	e002      	b.n	800aabc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f00b fa36 	bl	8015f28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f008 ff23 	bl	801390c <USB_ReadInterrupts>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	f040 80b7 	bne.w	800ac42 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aae2:	f023 0301 	bic.w	r3, r3, #1
 800aae6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2110      	movs	r1, #16
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f007 ffee 	bl	8012ad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaf8:	e046      	b.n	800ab88 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab06:	461a      	mov	r2, r3
 800ab08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	015a      	lsls	r2, r3, #5
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	4413      	add	r3, r2
 800ab16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	0151      	lsls	r1, r2, #5
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	440a      	add	r2, r1
 800ab24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ab2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab52:	0151      	lsls	r1, r2, #5
 800ab54:	69fa      	ldr	r2, [r7, #28]
 800ab56:	440a      	add	r2, r1
 800ab58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab72:	0151      	lsls	r1, r2, #5
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	440a      	add	r2, r1
 800ab78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	3301      	adds	r3, #1
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	791b      	ldrb	r3, [r3, #4]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d3b2      	bcc.n	800aafa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aba2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800aba6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7bdb      	ldrb	r3, [r3, #15]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d016      	beq.n	800abde <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abc0:	f043 030b 	orr.w	r3, r3, #11
 800abc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abd6:	f043 030b 	orr.w	r3, r3, #11
 800abda:	6453      	str	r3, [r2, #68]	; 0x44
 800abdc:	e015      	b.n	800ac0a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe4:	695a      	ldr	r2, [r3, #20]
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abec:	4619      	mov	r1, r3
 800abee:	f242 032b 	movw	r3, #8235	; 0x202b
 800abf2:	4313      	orrs	r3, r2
 800abf4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac04:	f043 030b 	orr.w	r3, r3, #11
 800ac08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	69fa      	ldr	r2, [r7, #28]
 800ac14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f008 ff33 	bl	8013a98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	695a      	ldr	r2, [r3, #20]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ac40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f008 fe60 	bl	801390c <USB_ReadInterrupts>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac56:	d123      	bne.n	800aca0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f008 fef7 	bl	8013a50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f007 ffab 	bl	8012bc2 <USB_GetDevSpeed>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681c      	ldr	r4, [r3, #0]
 800ac78:	f001 fdbc 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800ac7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac82:	461a      	mov	r2, r3
 800ac84:	4620      	mov	r0, r4
 800ac86:	f007 fcb5 	bl	80125f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f00b f923 	bl	8015ed6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695a      	ldr	r2, [r3, #20]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800ac9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f008 fe31 	bl	801390c <USB_ReadInterrupts>
 800acaa:	4603      	mov	r3, r0
 800acac:	f003 0308 	and.w	r3, r3, #8
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d10a      	bne.n	800acca <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f00b f900 	bl	8015eba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f002 0208 	and.w	r2, r2, #8
 800acc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4618      	mov	r0, r3
 800acd0:	f008 fe1c 	bl	801390c <USB_ReadInterrupts>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acda:	2b80      	cmp	r3, #128	; 0x80
 800acdc:	d123      	bne.n	800ad26 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acea:	2301      	movs	r3, #1
 800acec:	627b      	str	r3, [r7, #36]	; 0x24
 800acee:	e014      	b.n	800ad1a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf4:	4613      	mov	r3, r2
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	f203 2357 	addw	r3, r3, #599	; 0x257
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d105      	bne.n	800ad14 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fb08 	bl	800b324 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	3301      	adds	r3, #1
 800ad18:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	791b      	ldrb	r3, [r3, #4]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d3e4      	bcc.n	800acf0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f008 fdee 	bl	801390c <USB_ReadInterrupts>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad3a:	d13c      	bne.n	800adb6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad40:	e02b      	b.n	800ad9a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad56:	4613      	mov	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	3318      	adds	r3, #24
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d115      	bne.n	800ad94 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ad68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da12      	bge.n	800ad94 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad72:	4613      	mov	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	4413      	add	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	3317      	adds	r3, #23
 800ad7e:	2201      	movs	r2, #1
 800ad80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fac8 	bl	800b324 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	3301      	adds	r3, #1
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	791b      	ldrb	r3, [r3, #4]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d3cd      	bcc.n	800ad42 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	695a      	ldr	r2, [r3, #20]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800adb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4618      	mov	r0, r3
 800adbc:	f008 fda6 	bl	801390c <USB_ReadInterrupts>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adca:	d156      	bne.n	800ae7a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800adcc:	2301      	movs	r3, #1
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
 800add0:	e045      	b.n	800ae5e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade6:	4613      	mov	r3, r2
 800ade8:	00db      	lsls	r3, r3, #3
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	440b      	add	r3, r1
 800adf0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d12e      	bne.n	800ae58 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800adfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da2b      	bge.n	800ae58 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800ae0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d121      	bne.n	800ae58 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae18:	4613      	mov	r3, r2
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	f203 2357 	addw	r3, r3, #599	; 0x257
 800ae26:	2201      	movs	r2, #1
 800ae28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae54:	6053      	str	r3, [r2, #4]
            break;
 800ae56:	e008      	b.n	800ae6a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	791b      	ldrb	r3, [r3, #4]
 800ae62:	461a      	mov	r2, r3
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d3b3      	bcc.n	800add2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695a      	ldr	r2, [r3, #20]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ae78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f008 fd44 	bl	801390c <USB_ReadInterrupts>
 800ae84:	4603      	mov	r3, r0
 800ae86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8e:	d10a      	bne.n	800aea6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f00b f8a1 	bl	8015fd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	695a      	ldr	r2, [r3, #20]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f008 fd2e 	bl	801390c <USB_ReadInterrupts>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f003 0304 	and.w	r3, r3, #4
 800aeb6:	2b04      	cmp	r3, #4
 800aeb8:	d115      	bne.n	800aee6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f00b f891 	bl	8015ff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6859      	ldr	r1, [r3, #4]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	430a      	orrs	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	e000      	b.n	800aee6 <HAL_PCD_IRQHandler+0x996>
      return;
 800aee4:	bf00      	nop
    }
  }
}
 800aee6:	3734      	adds	r7, #52	; 0x34
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}

0800aeec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_PCD_SetAddress+0x1a>
 800af02:	2302      	movs	r3, #2
 800af04:	e012      	b.n	800af2c <HAL_PCD_SetAddress+0x40>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	78fa      	ldrb	r2, [r7, #3]
 800af12:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f008 fc8d 	bl	801383c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	461a      	mov	r2, r3
 800af42:	4603      	mov	r3, r0
 800af44:	70fb      	strb	r3, [r7, #3]
 800af46:	460b      	mov	r3, r1
 800af48:	803b      	strh	r3, [r7, #0]
 800af4a:	4613      	mov	r3, r2
 800af4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800af52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af56:	2b00      	cmp	r3, #0
 800af58:	da0f      	bge.n	800af7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	f003 020f 	and.w	r2, r3, #15
 800af60:	4613      	mov	r3, r2
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	3310      	adds	r3, #16
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	4413      	add	r3, r2
 800af6e:	3304      	adds	r3, #4
 800af70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	705a      	strb	r2, [r3, #1]
 800af78:	e00f      	b.n	800af9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	f003 020f 	and.w	r2, r3, #15
 800af80:	4613      	mov	r3, r2
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	4413      	add	r3, r2
 800af90:	3304      	adds	r3, #4
 800af92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800af9a:	78fb      	ldrb	r3, [r7, #3]
 800af9c:	f003 030f 	and.w	r3, r3, #15
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800afa6:	883a      	ldrh	r2, [r7, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	78ba      	ldrb	r2, [r7, #2]
 800afb0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	785b      	ldrb	r3, [r3, #1]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d004      	beq.n	800afc4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800afc4:	78bb      	ldrb	r3, [r7, #2]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d102      	bne.n	800afd0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <HAL_PCD_EP_Open+0xaa>
 800afda:	2302      	movs	r3, #2
 800afdc:	e00e      	b.n	800affc <HAL_PCD_EP_Open+0xc8>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68f9      	ldr	r1, [r7, #12]
 800afec:	4618      	mov	r0, r3
 800afee:	f007 fe0d 	bl	8012c0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800affa:	7afb      	ldrb	r3, [r7, #11]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b014:	2b00      	cmp	r3, #0
 800b016:	da0f      	bge.n	800b038 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	f003 020f 	and.w	r2, r3, #15
 800b01e:	4613      	mov	r3, r2
 800b020:	00db      	lsls	r3, r3, #3
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	3310      	adds	r3, #16
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	4413      	add	r3, r2
 800b02c:	3304      	adds	r3, #4
 800b02e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2201      	movs	r2, #1
 800b034:	705a      	strb	r2, [r3, #1]
 800b036:	e00f      	b.n	800b058 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b038:	78fb      	ldrb	r3, [r7, #3]
 800b03a:	f003 020f 	and.w	r2, r3, #15
 800b03e:	4613      	mov	r3, r2
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	3304      	adds	r3, #4
 800b050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b058:	78fb      	ldrb	r3, [r7, #3]
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <HAL_PCD_EP_Close+0x6e>
 800b06e:	2302      	movs	r3, #2
 800b070:	e00e      	b.n	800b090 <HAL_PCD_EP_Close+0x8c>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2201      	movs	r2, #1
 800b076:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	4618      	mov	r0, r3
 800b082:	f007 fe4b 	bl	8012d1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b0a8:	7afb      	ldrb	r3, [r7, #11]
 800b0aa:	f003 020f 	and.w	r2, r3, #15
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	00db      	lsls	r3, r3, #3
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	4413      	add	r3, r2
 800b0be:	3304      	adds	r3, #4
 800b0c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0da:	7afb      	ldrb	r3, [r7, #11]
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	799b      	ldrb	r3, [r3, #6]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d102      	bne.n	800b0f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	799b      	ldrb	r3, [r3, #6]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	6979      	ldr	r1, [r7, #20]
 800b100:	f007 fee8 	bl	8012ed4 <USB_EPStartXfer>

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b10e:	b480      	push	{r7}
 800b110:	b083      	sub	sp, #12
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	460b      	mov	r3, r1
 800b118:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b11a:	78fb      	ldrb	r3, [r7, #3]
 800b11c:	f003 020f 	and.w	r2, r3, #15
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	4613      	mov	r3, r2
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	4413      	add	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	440b      	add	r3, r1
 800b12c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800b130:	681b      	ldr	r3, [r3, #0]
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b086      	sub	sp, #24
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
 800b14a:	460b      	mov	r3, r1
 800b14c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	f003 020f 	and.w	r2, r3, #15
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	3310      	adds	r3, #16
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4413      	add	r3, r2
 800b162:	3304      	adds	r3, #4
 800b164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2200      	movs	r2, #0
 800b176:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2201      	movs	r2, #1
 800b17c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	f003 030f 	and.w	r3, r3, #15
 800b184:	b2da      	uxtb	r2, r3
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	799b      	ldrb	r3, [r3, #6]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d102      	bne.n	800b198 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	799b      	ldrb	r3, [r3, #6]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6979      	ldr	r1, [r7, #20]
 800b1a4:	f007 fe96 	bl	8012ed4 <USB_EPStartXfer>

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	f003 030f 	and.w	r3, r3, #15
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	7912      	ldrb	r2, [r2, #4]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d901      	bls.n	800b1d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e04f      	b.n	800b270 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da0f      	bge.n	800b1f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	f003 020f 	and.w	r2, r3, #15
 800b1de:	4613      	mov	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	3310      	adds	r3, #16
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	705a      	strb	r2, [r3, #1]
 800b1f6:	e00d      	b.n	800b214 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b1f8:	78fa      	ldrb	r2, [r7, #3]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	4413      	add	r3, r2
 800b20a:	3304      	adds	r3, #4
 800b20c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b21a:	78fb      	ldrb	r3, [r7, #3]
 800b21c:	f003 030f 	and.w	r3, r3, #15
 800b220:	b2da      	uxtb	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <HAL_PCD_EP_SetStall+0x82>
 800b230:	2302      	movs	r3, #2
 800b232:	e01d      	b.n	800b270 <HAL_PCD_EP_SetStall+0xbe>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68f9      	ldr	r1, [r7, #12]
 800b242:	4618      	mov	r0, r3
 800b244:	f008 fa26 	bl	8013694 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 030f 	and.w	r3, r3, #15
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	7999      	ldrb	r1, [r3, #6]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b260:	461a      	mov	r2, r3
 800b262:	f008 fc19 	bl	8013a98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b284:	78fb      	ldrb	r3, [r7, #3]
 800b286:	f003 030f 	and.w	r3, r3, #15
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	7912      	ldrb	r2, [r2, #4]
 800b28e:	4293      	cmp	r3, r2
 800b290:	d901      	bls.n	800b296 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e042      	b.n	800b31c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da0f      	bge.n	800b2be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	f003 020f 	and.w	r2, r3, #15
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	3310      	adds	r3, #16
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	705a      	strb	r2, [r3, #1]
 800b2bc:	e00f      	b.n	800b2de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2be:	78fb      	ldrb	r3, [r7, #3]
 800b2c0:	f003 020f 	and.w	r2, r3, #15
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	4413      	add	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2e4:	78fb      	ldrb	r3, [r7, #3]
 800b2e6:	f003 030f 	and.w	r3, r3, #15
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d101      	bne.n	800b2fe <HAL_PCD_EP_ClrStall+0x86>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e00e      	b.n	800b31c <HAL_PCD_EP_ClrStall+0xa4>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68f9      	ldr	r1, [r7, #12]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f008 fa2f 	bl	8013770 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b334:	2b00      	cmp	r3, #0
 800b336:	da0c      	bge.n	800b352 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	f003 020f 	and.w	r2, r3, #15
 800b33e:	4613      	mov	r3, r2
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	3310      	adds	r3, #16
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	4413      	add	r3, r2
 800b34c:	3304      	adds	r3, #4
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e00c      	b.n	800b36c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b352:	78fb      	ldrb	r3, [r7, #3]
 800b354:	f003 020f 	and.w	r2, r3, #15
 800b358:	4613      	mov	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	4413      	add	r3, r2
 800b368:	3304      	adds	r3, #4
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68f9      	ldr	r1, [r7, #12]
 800b372:	4618      	mov	r0, r3
 800b374:	f008 f84e 	bl	8013414 <USB_EPStopXfer>
 800b378:	4603      	mov	r3, r0
 800b37a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b08a      	sub	sp, #40	; 0x28
 800b38a:	af02      	add	r7, sp, #8
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	3310      	adds	r3, #16
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	695a      	ldr	r2, [r3, #20]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d901      	bls.n	800b3be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e06b      	b.n	800b496 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d902      	bls.n	800b3da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	089b      	lsrs	r3, r3, #2
 800b3e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3e2:	e02a      	b.n	800b43a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	691a      	ldr	r2, [r3, #16]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d902      	bls.n	800b400 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	3303      	adds	r3, #3
 800b404:	089b      	lsrs	r3, r3, #2
 800b406:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68d9      	ldr	r1, [r3, #12]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	4603      	mov	r3, r0
 800b41c:	6978      	ldr	r0, [r7, #20]
 800b41e:	f008 f8a3 	bl	8013568 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	441a      	add	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	695a      	ldr	r2, [r3, #20]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	441a      	add	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b44a:	69ba      	ldr	r2, [r7, #24]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d809      	bhi.n	800b464 <PCD_WriteEmptyTxFifo+0xde>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	695a      	ldr	r2, [r3, #20]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b458:	429a      	cmp	r2, r3
 800b45a:	d203      	bcs.n	800b464 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1bf      	bne.n	800b3e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d811      	bhi.n	800b494 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	2201      	movs	r2, #1
 800b478:	fa02 f303 	lsl.w	r3, r2, r3
 800b47c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	43db      	mvns	r3, r3
 800b48a:	6939      	ldr	r1, [r7, #16]
 800b48c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b490:	4013      	ands	r3, r2
 800b492:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	333c      	adds	r3, #60	; 0x3c
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	015a      	lsls	r2, r3, #5
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	799b      	ldrb	r3, [r3, #6]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d17b      	bne.n	800b5ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f003 0308 	and.w	r3, r3, #8
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d015      	beq.n	800b50c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	4a61      	ldr	r2, [pc, #388]	; (800b668 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	f240 80b9 	bls.w	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80b3 	beq.w	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	015a      	lsls	r2, r3, #5
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b502:	461a      	mov	r2, r3
 800b504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b508:	6093      	str	r3, [r2, #8]
 800b50a:	e0a7      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b00      	cmp	r3, #0
 800b514:	d009      	beq.n	800b52a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	015a      	lsls	r2, r3, #5
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	4413      	add	r3, r2
 800b51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b522:	461a      	mov	r2, r3
 800b524:	2320      	movs	r3, #32
 800b526:	6093      	str	r3, [r2, #8]
 800b528:	e098      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b530:	2b00      	cmp	r3, #0
 800b532:	f040 8093 	bne.w	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	4a4b      	ldr	r2, [pc, #300]	; (800b668 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d90f      	bls.n	800b55e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00a      	beq.n	800b55e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b554:	461a      	mov	r2, r3
 800b556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55a:	6093      	str	r3, [r2, #8]
 800b55c:	e07e      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	4613      	mov	r3, r2
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	4413      	add	r3, r2
 800b570:	3304      	adds	r3, #4
 800b572:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6a1a      	ldr	r2, [r3, #32]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	0159      	lsls	r1, r3, #5
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	440b      	add	r3, r1
 800b580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b58a:	1ad2      	subs	r2, r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d114      	bne.n	800b5c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d109      	bne.n	800b5b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	f008 fa74 	bl	8013a98 <USB_EP0_OutStart>
 800b5b0:	e006      	b.n	800b5c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	68da      	ldr	r2, [r3, #12]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	441a      	add	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f00a fc42 	bl	8015e50 <HAL_PCD_DataOutStageCallback>
 800b5cc:	e046      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	4a26      	ldr	r2, [pc, #152]	; (800b66c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d124      	bne.n	800b620 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	015a      	lsls	r2, r3, #5
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5f2:	6093      	str	r3, [r2, #8]
 800b5f4:	e032      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d008      	beq.n	800b612 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60c:	461a      	mov	r2, r3
 800b60e:	2320      	movs	r3, #32
 800b610:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f00a fc19 	bl	8015e50 <HAL_PCD_DataOutStageCallback>
 800b61e:	e01d      	b.n	800b65c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d114      	bne.n	800b650 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	4613      	mov	r3, r2
 800b62c:	00db      	lsls	r3, r3, #3
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	440b      	add	r3, r1
 800b634:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d108      	bne.n	800b650 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b648:	461a      	mov	r2, r3
 800b64a:	2100      	movs	r1, #0
 800b64c:	f008 fa24 	bl	8013a98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f00a fbfa 	bl	8015e50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3720      	adds	r7, #32
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	4f54300a 	.word	0x4f54300a
 800b66c:	4f54310a 	.word	0x4f54310a

0800b670 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	333c      	adds	r3, #60	; 0x3c
 800b688:	3304      	adds	r3, #4
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	4a15      	ldr	r2, [pc, #84]	; (800b6f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d90e      	bls.n	800b6c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d009      	beq.n	800b6c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6bc:	461a      	mov	r2, r3
 800b6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f00a fbb1 	bl	8015e2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	4a0a      	ldr	r2, [pc, #40]	; (800b6f8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d90c      	bls.n	800b6ec <PCD_EP_OutSetupPacket_int+0x7c>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	799b      	ldrb	r3, [r3, #6]
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d108      	bne.n	800b6ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	f008 f9d6 	bl	8013a98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	4f54300a 	.word	0x4f54300a

0800b6fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
 800b708:	4613      	mov	r3, r2
 800b70a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b714:	78fb      	ldrb	r3, [r7, #3]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d107      	bne.n	800b72a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b71a:	883b      	ldrh	r3, [r7, #0]
 800b71c:	0419      	lsls	r1, r3, #16
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	430a      	orrs	r2, r1
 800b726:	629a      	str	r2, [r3, #40]	; 0x28
 800b728:	e028      	b.n	800b77c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b730:	0c1b      	lsrs	r3, r3, #16
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	4413      	add	r3, r2
 800b736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
 800b73c:	e00d      	b.n	800b75a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	7bfb      	ldrb	r3, [r7, #15]
 800b744:	3340      	adds	r3, #64	; 0x40
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	0c1b      	lsrs	r3, r3, #16
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	4413      	add	r3, r2
 800b752:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	3301      	adds	r3, #1
 800b758:	73fb      	strb	r3, [r7, #15]
 800b75a:	7bfa      	ldrb	r2, [r7, #15]
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	3b01      	subs	r3, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	d3ec      	bcc.n	800b73e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b764:	883b      	ldrh	r3, [r7, #0]
 800b766:	0418      	lsls	r0, r3, #16
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6819      	ldr	r1, [r3, #0]
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	3b01      	subs	r3, #1
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	4302      	orrs	r2, r0
 800b774:	3340      	adds	r3, #64	; 0x40
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	887a      	ldrh	r2, [r7, #2]
 800b79c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <HAL_PCDEx_ActivateLPM+0x44>)
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	10000003 	.word	0x10000003

0800b7f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b814:	4b29      	ldr	r3, [pc, #164]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	2b06      	cmp	r3, #6
 800b81e:	d00a      	beq.n	800b836 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b820:	4b26      	ldr	r3, [pc, #152]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d001      	beq.n	800b832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e040      	b.n	800b8b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	e03e      	b.n	800b8b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b836:	4b21      	ldr	r3, [pc, #132]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b83e:	491f      	ldr	r1, [pc, #124]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4313      	orrs	r3, r2
 800b844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b846:	f7f9 fad7 	bl	8004df8 <HAL_GetTick>
 800b84a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b84c:	e009      	b.n	800b862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b84e:	f7f9 fad3 	bl	8004df8 <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b85c:	d901      	bls.n	800b862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e028      	b.n	800b8b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b862:	4b16      	ldr	r3, [pc, #88]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b86e:	d1ee      	bne.n	800b84e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b1e      	cmp	r3, #30
 800b874:	d008      	beq.n	800b888 <HAL_PWREx_ConfigSupply+0x7c>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b2e      	cmp	r3, #46	; 0x2e
 800b87a:	d005      	beq.n	800b888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b1d      	cmp	r3, #29
 800b880:	d002      	beq.n	800b888 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b2d      	cmp	r3, #45	; 0x2d
 800b886:	d114      	bne.n	800b8b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b888:	f7f9 fab6 	bl	8004df8 <HAL_GetTick>
 800b88c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b88e:	e009      	b.n	800b8a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b890:	f7f9 fab2 	bl	8004df8 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b89e:	d901      	bls.n	800b8a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e007      	b.n	800b8b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <HAL_PWREx_ConfigSupply+0xb0>)
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8b0:	d1ee      	bne.n	800b890 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	58024800 	.word	0x58024800

0800b8c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a04      	ldr	r2, [pc, #16]	; (800b8dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b8ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8ce:	60d3      	str	r3, [r2, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	58024800 	.word	0x58024800

0800b8e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08c      	sub	sp, #48	; 0x30
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f000 bc48 	b.w	800c184 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8088 	beq.w	800ba12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b902:	4b99      	ldr	r3, [pc, #612]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b90a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b90c:	4b96      	ldr	r3, [pc, #600]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b910:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b10      	cmp	r3, #16
 800b916:	d007      	beq.n	800b928 <HAL_RCC_OscConfig+0x48>
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	2b18      	cmp	r3, #24
 800b91c:	d111      	bne.n	800b942 <HAL_RCC_OscConfig+0x62>
 800b91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	2b02      	cmp	r3, #2
 800b926:	d10c      	bne.n	800b942 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b928:	4b8f      	ldr	r3, [pc, #572]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d06d      	beq.n	800ba10 <HAL_RCC_OscConfig+0x130>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d169      	bne.n	800ba10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f000 bc21 	b.w	800c184 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b94a:	d106      	bne.n	800b95a <HAL_RCC_OscConfig+0x7a>
 800b94c:	4b86      	ldr	r3, [pc, #536]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a85      	ldr	r2, [pc, #532]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	e02e      	b.n	800b9b8 <HAL_RCC_OscConfig+0xd8>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10c      	bne.n	800b97c <HAL_RCC_OscConfig+0x9c>
 800b962:	4b81      	ldr	r3, [pc, #516]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a80      	ldr	r2, [pc, #512]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	4b7e      	ldr	r3, [pc, #504]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a7d      	ldr	r2, [pc, #500]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	e01d      	b.n	800b9b8 <HAL_RCC_OscConfig+0xd8>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b984:	d10c      	bne.n	800b9a0 <HAL_RCC_OscConfig+0xc0>
 800b986:	4b78      	ldr	r3, [pc, #480]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a77      	ldr	r2, [pc, #476]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b98c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	4b75      	ldr	r3, [pc, #468]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a74      	ldr	r2, [pc, #464]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e00b      	b.n	800b9b8 <HAL_RCC_OscConfig+0xd8>
 800b9a0:	4b71      	ldr	r3, [pc, #452]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a70      	ldr	r2, [pc, #448]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b9a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	4b6e      	ldr	r3, [pc, #440]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a6d      	ldr	r2, [pc, #436]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b9b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d013      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c0:	f7f9 fa1a 	bl	8004df8 <HAL_GetTick>
 800b9c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9c8:	f7f9 fa16 	bl	8004df8 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b64      	cmp	r3, #100	; 0x64
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e3d4      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b9da:	4b63      	ldr	r3, [pc, #396]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0f0      	beq.n	800b9c8 <HAL_RCC_OscConfig+0xe8>
 800b9e6:	e014      	b.n	800ba12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e8:	f7f9 fa06 	bl	8004df8 <HAL_GetTick>
 800b9ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9ee:	e008      	b.n	800ba02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9f0:	f7f9 fa02 	bl	8004df8 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b64      	cmp	r3, #100	; 0x64
 800b9fc:	d901      	bls.n	800ba02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e3c0      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba02:	4b59      	ldr	r3, [pc, #356]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1f0      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x110>
 800ba0e:	e000      	b.n	800ba12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0302 	and.w	r3, r3, #2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80ca 	beq.w	800bbb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba20:	4b51      	ldr	r3, [pc, #324]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba2a:	4b4f      	ldr	r3, [pc, #316]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ba30:	6a3b      	ldr	r3, [r7, #32]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <HAL_RCC_OscConfig+0x166>
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	2b18      	cmp	r3, #24
 800ba3a:	d156      	bne.n	800baea <HAL_RCC_OscConfig+0x20a>
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	f003 0303 	and.w	r3, r3, #3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d151      	bne.n	800baea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba46:	4b48      	ldr	r3, [pc, #288]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <HAL_RCC_OscConfig+0x17e>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e392      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ba5e:	4b42      	ldr	r3, [pc, #264]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f023 0219 	bic.w	r2, r3, #25
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	493f      	ldr	r1, [pc, #252]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba70:	f7f9 f9c2 	bl	8004df8 <HAL_GetTick>
 800ba74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba78:	f7f9 f9be 	bl	8004df8 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e37c      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba8a:	4b37      	ldr	r3, [pc, #220]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0304 	and.w	r3, r3, #4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0f0      	beq.n	800ba78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba96:	f7f9 f9df 	bl	8004e58 <HAL_GetREVID>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f241 0203 	movw	r2, #4099	; 0x1003
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d817      	bhi.n	800bad4 <HAL_RCC_OscConfig+0x1f4>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	2b40      	cmp	r3, #64	; 0x40
 800baaa:	d108      	bne.n	800babe <HAL_RCC_OscConfig+0x1de>
 800baac:	4b2e      	ldr	r3, [pc, #184]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bab4:	4a2c      	ldr	r2, [pc, #176]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800babc:	e07a      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800babe:	4b2a      	ldr	r3, [pc, #168]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	031b      	lsls	r3, r3, #12
 800bacc:	4926      	ldr	r1, [pc, #152]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bad2:	e06f      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	061b      	lsls	r3, r3, #24
 800bae2:	4921      	ldr	r1, [pc, #132]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bae8:	e064      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d047      	beq.n	800bb82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800baf2:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f023 0219 	bic.w	r2, r3, #25
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	491a      	ldr	r1, [pc, #104]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb00:	4313      	orrs	r3, r2
 800bb02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb04:	f7f9 f978 	bl	8004df8 <HAL_GetTick>
 800bb08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb0a:	e008      	b.n	800bb1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb0c:	f7f9 f974 	bl	8004df8 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e332      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb1e:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0304 	and.w	r3, r3, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0f0      	beq.n	800bb0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb2a:	f7f9 f995 	bl	8004e58 <HAL_GetREVID>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	f241 0203 	movw	r2, #4099	; 0x1003
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d819      	bhi.n	800bb6c <HAL_RCC_OscConfig+0x28c>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	2b40      	cmp	r3, #64	; 0x40
 800bb3e:	d108      	bne.n	800bb52 <HAL_RCC_OscConfig+0x272>
 800bb40:	4b09      	ldr	r3, [pc, #36]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bb48:	4a07      	ldr	r2, [pc, #28]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb4e:	6053      	str	r3, [r2, #4]
 800bb50:	e030      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
 800bb52:	4b05      	ldr	r3, [pc, #20]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	031b      	lsls	r3, r3, #12
 800bb60:	4901      	ldr	r1, [pc, #4]	; (800bb68 <HAL_RCC_OscConfig+0x288>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	604b      	str	r3, [r1, #4]
 800bb66:	e025      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
 800bb68:	58024400 	.word	0x58024400
 800bb6c:	4b9a      	ldr	r3, [pc, #616]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	061b      	lsls	r3, r3, #24
 800bb7a:	4997      	ldr	r1, [pc, #604]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	604b      	str	r3, [r1, #4]
 800bb80:	e018      	b.n	800bbb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb82:	4b95      	ldr	r3, [pc, #596]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a94      	ldr	r2, [pc, #592]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb8e:	f7f9 f933 	bl	8004df8 <HAL_GetTick>
 800bb92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bb94:	e008      	b.n	800bba8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb96:	f7f9 f92f 	bl	8004df8 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d901      	bls.n	800bba8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e2ed      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bba8:	4b8b      	ldr	r3, [pc, #556]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f003 0304 	and.w	r3, r3, #4
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1f0      	bne.n	800bb96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 80a9 	beq.w	800bd14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbc2:	4b85      	ldr	r3, [pc, #532]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbcc:	4b82      	ldr	r3, [pc, #520]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b08      	cmp	r3, #8
 800bbd6:	d007      	beq.n	800bbe8 <HAL_RCC_OscConfig+0x308>
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	2b18      	cmp	r3, #24
 800bbdc:	d13a      	bne.n	800bc54 <HAL_RCC_OscConfig+0x374>
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d135      	bne.n	800bc54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bbe8:	4b7b      	ldr	r3, [pc, #492]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d005      	beq.n	800bc00 <HAL_RCC_OscConfig+0x320>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	2b80      	cmp	r3, #128	; 0x80
 800bbfa:	d001      	beq.n	800bc00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e2c1      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc00:	f7f9 f92a 	bl	8004e58 <HAL_GetREVID>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d817      	bhi.n	800bc3e <HAL_RCC_OscConfig+0x35e>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	2b20      	cmp	r3, #32
 800bc14:	d108      	bne.n	800bc28 <HAL_RCC_OscConfig+0x348>
 800bc16:	4b70      	ldr	r3, [pc, #448]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bc1e:	4a6e      	ldr	r2, [pc, #440]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc26:	e075      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc28:	4b6b      	ldr	r3, [pc, #428]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	069b      	lsls	r3, r3, #26
 800bc36:	4968      	ldr	r1, [pc, #416]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc3c:	e06a      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc3e:	4b66      	ldr	r3, [pc, #408]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	061b      	lsls	r3, r3, #24
 800bc4c:	4962      	ldr	r1, [pc, #392]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc52:	e05f      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d042      	beq.n	800bce2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bc5c:	4b5e      	ldr	r3, [pc, #376]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a5d      	ldr	r2, [pc, #372]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc68:	f7f9 f8c6 	bl	8004df8 <HAL_GetTick>
 800bc6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc6e:	e008      	b.n	800bc82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bc70:	f7f9 f8c2 	bl	8004df8 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e280      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc82:	4b55      	ldr	r3, [pc, #340]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0f0      	beq.n	800bc70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc8e:	f7f9 f8e3 	bl	8004e58 <HAL_GetREVID>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d817      	bhi.n	800bccc <HAL_RCC_OscConfig+0x3ec>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a1b      	ldr	r3, [r3, #32]
 800bca0:	2b20      	cmp	r3, #32
 800bca2:	d108      	bne.n	800bcb6 <HAL_RCC_OscConfig+0x3d6>
 800bca4:	4b4c      	ldr	r3, [pc, #304]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bcac:	4a4a      	ldr	r2, [pc, #296]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bcae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcb2:	6053      	str	r3, [r2, #4]
 800bcb4:	e02e      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
 800bcb6:	4b48      	ldr	r3, [pc, #288]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	069b      	lsls	r3, r3, #26
 800bcc4:	4944      	ldr	r1, [pc, #272]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	604b      	str	r3, [r1, #4]
 800bcca:	e023      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
 800bccc:	4b42      	ldr	r3, [pc, #264]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	061b      	lsls	r3, r3, #24
 800bcda:	493f      	ldr	r1, [pc, #252]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60cb      	str	r3, [r1, #12]
 800bce0:	e018      	b.n	800bd14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bce2:	4b3d      	ldr	r3, [pc, #244]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a3c      	ldr	r2, [pc, #240]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcee:	f7f9 f883 	bl	8004df8 <HAL_GetTick>
 800bcf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bcf4:	e008      	b.n	800bd08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bcf6:	f7f9 f87f 	bl	8004df8 <HAL_GetTick>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d901      	bls.n	800bd08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e23d      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd08:	4b33      	ldr	r3, [pc, #204]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f0      	bne.n	800bcf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0308 	and.w	r3, r3, #8
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d036      	beq.n	800bd8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	695b      	ldr	r3, [r3, #20]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d019      	beq.n	800bd5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd28:	4b2b      	ldr	r3, [pc, #172]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd2c:	4a2a      	ldr	r2, [pc, #168]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd34:	f7f9 f860 	bl	8004df8 <HAL_GetTick>
 800bd38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd3a:	e008      	b.n	800bd4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd3c:	f7f9 f85c 	bl	8004df8 <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e21a      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd4e:	4b22      	ldr	r3, [pc, #136]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd52:	f003 0302 	and.w	r3, r3, #2
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0f0      	beq.n	800bd3c <HAL_RCC_OscConfig+0x45c>
 800bd5a:	e018      	b.n	800bd8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd5c:	4b1e      	ldr	r3, [pc, #120]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd60:	4a1d      	ldr	r2, [pc, #116]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd68:	f7f9 f846 	bl	8004df8 <HAL_GetTick>
 800bd6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bd6e:	e008      	b.n	800bd82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd70:	f7f9 f842 	bl	8004df8 <HAL_GetTick>
 800bd74:	4602      	mov	r2, r0
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	1ad3      	subs	r3, r2, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d901      	bls.n	800bd82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e200      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bd82:	4b15      	ldr	r3, [pc, #84]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1f0      	bne.n	800bd70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0320 	and.w	r3, r3, #32
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d039      	beq.n	800be0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d01c      	beq.n	800bddc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bda2:	4b0d      	ldr	r3, [pc, #52]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a0c      	ldr	r2, [pc, #48]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bda8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bdac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bdae:	f7f9 f823 	bl	8004df8 <HAL_GetTick>
 800bdb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bdb4:	e008      	b.n	800bdc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdb6:	f7f9 f81f 	bl	8004df8 <HAL_GetTick>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d901      	bls.n	800bdc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e1dd      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bdc8:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <HAL_RCC_OscConfig+0x4f8>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0f0      	beq.n	800bdb6 <HAL_RCC_OscConfig+0x4d6>
 800bdd4:	e01b      	b.n	800be0e <HAL_RCC_OscConfig+0x52e>
 800bdd6:	bf00      	nop
 800bdd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bddc:	4b9b      	ldr	r3, [pc, #620]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a9a      	ldr	r2, [pc, #616]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bde2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bde6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bde8:	f7f9 f806 	bl	8004df8 <HAL_GetTick>
 800bdec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bdee:	e008      	b.n	800be02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdf0:	f7f9 f802 	bl	8004df8 <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d901      	bls.n	800be02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e1c0      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be02:	4b92      	ldr	r3, [pc, #584]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1f0      	bne.n	800bdf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0304 	and.w	r3, r3, #4
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 8081 	beq.w	800bf1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800be1c:	4b8c      	ldr	r3, [pc, #560]	; (800c050 <HAL_RCC_OscConfig+0x770>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a8b      	ldr	r2, [pc, #556]	; (800c050 <HAL_RCC_OscConfig+0x770>)
 800be22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be28:	f7f8 ffe6 	bl	8004df8 <HAL_GetTick>
 800be2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be2e:	e008      	b.n	800be42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be30:	f7f8 ffe2 	bl	8004df8 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b64      	cmp	r3, #100	; 0x64
 800be3c:	d901      	bls.n	800be42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e1a0      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be42:	4b83      	ldr	r3, [pc, #524]	; (800c050 <HAL_RCC_OscConfig+0x770>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0f0      	beq.n	800be30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d106      	bne.n	800be64 <HAL_RCC_OscConfig+0x584>
 800be56:	4b7d      	ldr	r3, [pc, #500]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5a:	4a7c      	ldr	r2, [pc, #496]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be5c:	f043 0301 	orr.w	r3, r3, #1
 800be60:	6713      	str	r3, [r2, #112]	; 0x70
 800be62:	e02d      	b.n	800bec0 <HAL_RCC_OscConfig+0x5e0>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10c      	bne.n	800be86 <HAL_RCC_OscConfig+0x5a6>
 800be6c:	4b77      	ldr	r3, [pc, #476]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be70:	4a76      	ldr	r2, [pc, #472]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be72:	f023 0301 	bic.w	r3, r3, #1
 800be76:	6713      	str	r3, [r2, #112]	; 0x70
 800be78:	4b74      	ldr	r3, [pc, #464]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be7c:	4a73      	ldr	r2, [pc, #460]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be7e:	f023 0304 	bic.w	r3, r3, #4
 800be82:	6713      	str	r3, [r2, #112]	; 0x70
 800be84:	e01c      	b.n	800bec0 <HAL_RCC_OscConfig+0x5e0>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b05      	cmp	r3, #5
 800be8c:	d10c      	bne.n	800bea8 <HAL_RCC_OscConfig+0x5c8>
 800be8e:	4b6f      	ldr	r3, [pc, #444]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be92:	4a6e      	ldr	r2, [pc, #440]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be94:	f043 0304 	orr.w	r3, r3, #4
 800be98:	6713      	str	r3, [r2, #112]	; 0x70
 800be9a:	4b6c      	ldr	r3, [pc, #432]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800be9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be9e:	4a6b      	ldr	r2, [pc, #428]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	6713      	str	r3, [r2, #112]	; 0x70
 800bea6:	e00b      	b.n	800bec0 <HAL_RCC_OscConfig+0x5e0>
 800bea8:	4b68      	ldr	r3, [pc, #416]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	4a67      	ldr	r2, [pc, #412]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	6713      	str	r3, [r2, #112]	; 0x70
 800beb4:	4b65      	ldr	r3, [pc, #404]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800beb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb8:	4a64      	ldr	r2, [pc, #400]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800beba:	f023 0304 	bic.w	r3, r3, #4
 800bebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d015      	beq.n	800bef4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bec8:	f7f8 ff96 	bl	8004df8 <HAL_GetTick>
 800becc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bece:	e00a      	b.n	800bee6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bed0:	f7f8 ff92 	bl	8004df8 <HAL_GetTick>
 800bed4:	4602      	mov	r2, r0
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	f241 3288 	movw	r2, #5000	; 0x1388
 800bede:	4293      	cmp	r3, r2
 800bee0:	d901      	bls.n	800bee6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e14e      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bee6:	4b59      	ldr	r3, [pc, #356]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beea:	f003 0302 	and.w	r3, r3, #2
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0ee      	beq.n	800bed0 <HAL_RCC_OscConfig+0x5f0>
 800bef2:	e014      	b.n	800bf1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bef4:	f7f8 ff80 	bl	8004df8 <HAL_GetTick>
 800bef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800befa:	e00a      	b.n	800bf12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800befc:	f7f8 ff7c 	bl	8004df8 <HAL_GetTick>
 800bf00:	4602      	mov	r2, r0
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d901      	bls.n	800bf12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e138      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf12:	4b4e      	ldr	r3, [pc, #312]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf16:	f003 0302 	and.w	r3, r3, #2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1ee      	bne.n	800befc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 812d 	beq.w	800c182 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bf28:	4b48      	ldr	r3, [pc, #288]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf30:	2b18      	cmp	r3, #24
 800bf32:	f000 80bd 	beq.w	800c0b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	f040 809e 	bne.w	800c07c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf40:	4b42      	ldr	r3, [pc, #264]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a41      	ldr	r2, [pc, #260]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf4c:	f7f8 ff54 	bl	8004df8 <HAL_GetTick>
 800bf50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf52:	e008      	b.n	800bf66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf54:	f7f8 ff50 	bl	8004df8 <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d901      	bls.n	800bf66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e10e      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf66:	4b39      	ldr	r3, [pc, #228]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f0      	bne.n	800bf54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf72:	4b36      	ldr	r3, [pc, #216]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf76:	4b37      	ldr	r3, [pc, #220]	; (800c054 <HAL_RCC_OscConfig+0x774>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bf82:	0112      	lsls	r2, r2, #4
 800bf84:	430a      	orrs	r2, r1
 800bf86:	4931      	ldr	r1, [pc, #196]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf90:	3b01      	subs	r3, #1
 800bf92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	025b      	lsls	r3, r3, #9
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	041b      	lsls	r3, r3, #16
 800bfaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	061b      	lsls	r3, r3, #24
 800bfb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfbc:	4923      	ldr	r1, [pc, #140]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bfc2:	4b22      	ldr	r3, [pc, #136]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc6:	4a21      	ldr	r2, [pc, #132]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfc8:	f023 0301 	bic.w	r3, r3, #1
 800bfcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bfce:	4b1f      	ldr	r3, [pc, #124]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd2:	4b21      	ldr	r3, [pc, #132]	; (800c058 <HAL_RCC_OscConfig+0x778>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bfda:	00d2      	lsls	r2, r2, #3
 800bfdc:	491b      	ldr	r1, [pc, #108]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	f023 020c 	bic.w	r2, r3, #12
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	4917      	ldr	r1, [pc, #92]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bff4:	4b15      	ldr	r3, [pc, #84]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	f023 0202 	bic.w	r2, r3, #2
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c000:	4912      	ldr	r1, [pc, #72]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c002:	4313      	orrs	r3, r2
 800c004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	4a10      	ldr	r2, [pc, #64]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c016:	4a0d      	ldr	r2, [pc, #52]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c01c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c01e:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	4a0a      	ldr	r2, [pc, #40]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	4a07      	ldr	r2, [pc, #28]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c030:	f043 0301 	orr.w	r3, r3, #1
 800c034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a04      	ldr	r2, [pc, #16]	; (800c04c <HAL_RCC_OscConfig+0x76c>)
 800c03c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c042:	f7f8 fed9 	bl	8004df8 <HAL_GetTick>
 800c046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c048:	e011      	b.n	800c06e <HAL_RCC_OscConfig+0x78e>
 800c04a:	bf00      	nop
 800c04c:	58024400 	.word	0x58024400
 800c050:	58024800 	.word	0x58024800
 800c054:	fffffc0c 	.word	0xfffffc0c
 800c058:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c05c:	f7f8 fecc 	bl	8004df8 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	2b02      	cmp	r3, #2
 800c068:	d901      	bls.n	800c06e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e08a      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c06e:	4b47      	ldr	r3, [pc, #284]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0f0      	beq.n	800c05c <HAL_RCC_OscConfig+0x77c>
 800c07a:	e082      	b.n	800c182 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c07c:	4b43      	ldr	r3, [pc, #268]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a42      	ldr	r2, [pc, #264]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c088:	f7f8 feb6 	bl	8004df8 <HAL_GetTick>
 800c08c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c08e:	e008      	b.n	800c0a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c090:	f7f8 feb2 	bl	8004df8 <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d901      	bls.n	800c0a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e070      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0a2:	4b3a      	ldr	r3, [pc, #232]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1f0      	bne.n	800c090 <HAL_RCC_OscConfig+0x7b0>
 800c0ae:	e068      	b.n	800c182 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c0b0:	4b36      	ldr	r3, [pc, #216]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c0b6:	4b35      	ldr	r3, [pc, #212]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d031      	beq.n	800c128 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f003 0203 	and.w	r2, r3, #3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d12a      	bne.n	800c128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	091b      	lsrs	r3, r3, #4
 800c0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d122      	bne.n	800c128 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d11a      	bne.n	800c128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	0a5b      	lsrs	r3, r3, #9
 800c0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c100:	429a      	cmp	r2, r3
 800c102:	d111      	bne.n	800c128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	0c1b      	lsrs	r3, r3, #16
 800c108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c112:	429a      	cmp	r2, r3
 800c114:	d108      	bne.n	800c128 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	0e1b      	lsrs	r3, r3, #24
 800c11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c122:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c124:	429a      	cmp	r2, r3
 800c126:	d001      	beq.n	800c12c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e02b      	b.n	800c184 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c12c:	4b17      	ldr	r3, [pc, #92]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c130:	08db      	lsrs	r3, r3, #3
 800c132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c136:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d01f      	beq.n	800c182 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c142:	4b12      	ldr	r3, [pc, #72]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	4a11      	ldr	r2, [pc, #68]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c148:	f023 0301 	bic.w	r3, r3, #1
 800c14c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c14e:	f7f8 fe53 	bl	8004df8 <HAL_GetTick>
 800c152:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c154:	bf00      	nop
 800c156:	f7f8 fe4f 	bl	8004df8 <HAL_GetTick>
 800c15a:	4602      	mov	r2, r0
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	4293      	cmp	r3, r2
 800c160:	d0f9      	beq.n	800c156 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c162:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c166:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <HAL_RCC_OscConfig+0x8b0>)
 800c168:	4013      	ands	r3, r2
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c16e:	00d2      	lsls	r2, r2, #3
 800c170:	4906      	ldr	r1, [pc, #24]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c172:	4313      	orrs	r3, r2
 800c174:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17a:	4a04      	ldr	r2, [pc, #16]	; (800c18c <HAL_RCC_OscConfig+0x8ac>)
 800c17c:	f043 0301 	orr.w	r3, r3, #1
 800c180:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3730      	adds	r7, #48	; 0x30
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	58024400 	.word	0x58024400
 800c190:	ffff0007 	.word	0xffff0007

0800c194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e19c      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c1a8:	4b8a      	ldr	r3, [pc, #552]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 030f 	and.w	r3, r3, #15
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d910      	bls.n	800c1d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1b6:	4b87      	ldr	r3, [pc, #540]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f023 020f 	bic.w	r2, r3, #15
 800c1be:	4985      	ldr	r1, [pc, #532]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1c6:	4b83      	ldr	r3, [pc, #524]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 030f 	and.w	r3, r3, #15
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d001      	beq.n	800c1d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e184      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d010      	beq.n	800c206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	4b7b      	ldr	r3, [pc, #492]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d908      	bls.n	800c206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c1f4:	4b78      	ldr	r3, [pc, #480]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c1f6:	699b      	ldr	r3, [r3, #24]
 800c1f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	691b      	ldr	r3, [r3, #16]
 800c200:	4975      	ldr	r1, [pc, #468]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c202:	4313      	orrs	r3, r2
 800c204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0308 	and.w	r3, r3, #8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d010      	beq.n	800c234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695a      	ldr	r2, [r3, #20]
 800c216:	4b70      	ldr	r3, [pc, #448]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c218:	69db      	ldr	r3, [r3, #28]
 800c21a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c21e:	429a      	cmp	r2, r3
 800c220:	d908      	bls.n	800c234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c222:	4b6d      	ldr	r3, [pc, #436]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	496a      	ldr	r1, [pc, #424]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c230:	4313      	orrs	r3, r2
 800c232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0310 	and.w	r3, r3, #16
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d010      	beq.n	800c262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	699a      	ldr	r2, [r3, #24]
 800c244:	4b64      	ldr	r3, [pc, #400]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d908      	bls.n	800c262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c250:	4b61      	ldr	r3, [pc, #388]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c252:	69db      	ldr	r3, [r3, #28]
 800c254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	495e      	ldr	r1, [pc, #376]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c25e:	4313      	orrs	r3, r2
 800c260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 0320 	and.w	r3, r3, #32
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d010      	beq.n	800c290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	69da      	ldr	r2, [r3, #28]
 800c272:	4b59      	ldr	r3, [pc, #356]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d908      	bls.n	800c290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c27e:	4b56      	ldr	r3, [pc, #344]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	4953      	ldr	r1, [pc, #332]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d010      	beq.n	800c2be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68da      	ldr	r2, [r3, #12]
 800c2a0:	4b4d      	ldr	r3, [pc, #308]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	f003 030f 	and.w	r3, r3, #15
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d908      	bls.n	800c2be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2ac:	4b4a      	ldr	r3, [pc, #296]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f023 020f 	bic.w	r2, r3, #15
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4947      	ldr	r1, [pc, #284]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d055      	beq.n	800c376 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c2ca:	4b43      	ldr	r3, [pc, #268]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	4940      	ldr	r1, [pc, #256]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d107      	bne.n	800c2f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2e4:	4b3c      	ldr	r3, [pc, #240]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d121      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e0f6      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	2b03      	cmp	r3, #3
 800c2fa:	d107      	bne.n	800c30c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c2fc:	4b36      	ldr	r3, [pc, #216]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d115      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e0ea      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d107      	bne.n	800c324 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c314:	4b30      	ldr	r3, [pc, #192]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e0de      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c324:	4b2c      	ldr	r3, [pc, #176]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e0d6      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c334:	4b28      	ldr	r3, [pc, #160]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	f023 0207 	bic.w	r2, r3, #7
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	4925      	ldr	r1, [pc, #148]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c342:	4313      	orrs	r3, r2
 800c344:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c346:	f7f8 fd57 	bl	8004df8 <HAL_GetTick>
 800c34a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c34c:	e00a      	b.n	800c364 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c34e:	f7f8 fd53 	bl	8004df8 <HAL_GetTick>
 800c352:	4602      	mov	r2, r0
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	f241 3288 	movw	r2, #5000	; 0x1388
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d901      	bls.n	800c364 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c360:	2303      	movs	r3, #3
 800c362:	e0be      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c364:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	429a      	cmp	r2, r3
 800c374:	d1eb      	bne.n	800c34e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d010      	beq.n	800c3a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	f003 030f 	and.w	r3, r3, #15
 800c38e:	429a      	cmp	r2, r3
 800c390:	d208      	bcs.n	800c3a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c392:	4b11      	ldr	r3, [pc, #68]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	f023 020f 	bic.w	r2, r3, #15
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	490e      	ldr	r1, [pc, #56]	; (800c3d8 <HAL_RCC_ClockConfig+0x244>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 030f 	and.w	r3, r3, #15
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d214      	bcs.n	800c3dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f023 020f 	bic.w	r2, r3, #15
 800c3ba:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3c2:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <HAL_RCC_ClockConfig+0x240>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 030f 	and.w	r3, r3, #15
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d005      	beq.n	800c3dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e086      	b.n	800c4e2 <HAL_RCC_ClockConfig+0x34e>
 800c3d4:	52002000 	.word	0x52002000
 800c3d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d010      	beq.n	800c40a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691a      	ldr	r2, [r3, #16]
 800c3ec:	4b3f      	ldr	r3, [pc, #252]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d208      	bcs.n	800c40a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c3f8:	4b3c      	ldr	r3, [pc, #240]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	4939      	ldr	r1, [pc, #228]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c406:	4313      	orrs	r3, r2
 800c408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0308 	and.w	r3, r3, #8
 800c412:	2b00      	cmp	r3, #0
 800c414:	d010      	beq.n	800c438 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695a      	ldr	r2, [r3, #20]
 800c41a:	4b34      	ldr	r3, [pc, #208]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c422:	429a      	cmp	r2, r3
 800c424:	d208      	bcs.n	800c438 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c426:	4b31      	ldr	r3, [pc, #196]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	492e      	ldr	r1, [pc, #184]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c434:	4313      	orrs	r3, r2
 800c436:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0310 	and.w	r3, r3, #16
 800c440:	2b00      	cmp	r3, #0
 800c442:	d010      	beq.n	800c466 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	699a      	ldr	r2, [r3, #24]
 800c448:	4b28      	ldr	r3, [pc, #160]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c44a:	69db      	ldr	r3, [r3, #28]
 800c44c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c450:	429a      	cmp	r2, r3
 800c452:	d208      	bcs.n	800c466 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c454:	4b25      	ldr	r3, [pc, #148]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4922      	ldr	r1, [pc, #136]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c462:	4313      	orrs	r3, r2
 800c464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0320 	and.w	r3, r3, #32
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d010      	beq.n	800c494 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	69da      	ldr	r2, [r3, #28]
 800c476:	4b1d      	ldr	r3, [pc, #116]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c47e:	429a      	cmp	r2, r3
 800c480:	d208      	bcs.n	800c494 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c482:	4b1a      	ldr	r3, [pc, #104]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	4917      	ldr	r1, [pc, #92]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c490:	4313      	orrs	r3, r2
 800c492:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c494:	f000 f834 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 800c498:	4602      	mov	r2, r0
 800c49a:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	0a1b      	lsrs	r3, r3, #8
 800c4a0:	f003 030f 	and.w	r3, r3, #15
 800c4a4:	4912      	ldr	r1, [pc, #72]	; (800c4f0 <HAL_RCC_ClockConfig+0x35c>)
 800c4a6:	5ccb      	ldrb	r3, [r1, r3]
 800c4a8:	f003 031f 	and.w	r3, r3, #31
 800c4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c4b2:	4b0e      	ldr	r3, [pc, #56]	; (800c4ec <HAL_RCC_ClockConfig+0x358>)
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	4a0d      	ldr	r2, [pc, #52]	; (800c4f0 <HAL_RCC_ClockConfig+0x35c>)
 800c4bc:	5cd3      	ldrb	r3, [r2, r3]
 800c4be:	f003 031f 	and.w	r3, r3, #31
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c8:	4a0a      	ldr	r2, [pc, #40]	; (800c4f4 <HAL_RCC_ClockConfig+0x360>)
 800c4ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c4cc:	4a0a      	ldr	r2, [pc, #40]	; (800c4f8 <HAL_RCC_ClockConfig+0x364>)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <HAL_RCC_ClockConfig+0x368>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f8 fc44 	bl	8004d64 <HAL_InitTick>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	0801c6a8 	.word	0x0801c6a8
 800c4f4:	24000004 	.word	0x24000004
 800c4f8:	24000000 	.word	0x24000000
 800c4fc:	240000cc 	.word	0x240000cc

0800c500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c500:	b480      	push	{r7}
 800c502:	b089      	sub	sp, #36	; 0x24
 800c504:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c506:	4bb3      	ldr	r3, [pc, #716]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c50e:	2b18      	cmp	r3, #24
 800c510:	f200 8155 	bhi.w	800c7be <HAL_RCC_GetSysClockFreq+0x2be>
 800c514:	a201      	add	r2, pc, #4	; (adr r2, 800c51c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51a:	bf00      	nop
 800c51c:	0800c581 	.word	0x0800c581
 800c520:	0800c7bf 	.word	0x0800c7bf
 800c524:	0800c7bf 	.word	0x0800c7bf
 800c528:	0800c7bf 	.word	0x0800c7bf
 800c52c:	0800c7bf 	.word	0x0800c7bf
 800c530:	0800c7bf 	.word	0x0800c7bf
 800c534:	0800c7bf 	.word	0x0800c7bf
 800c538:	0800c7bf 	.word	0x0800c7bf
 800c53c:	0800c5a7 	.word	0x0800c5a7
 800c540:	0800c7bf 	.word	0x0800c7bf
 800c544:	0800c7bf 	.word	0x0800c7bf
 800c548:	0800c7bf 	.word	0x0800c7bf
 800c54c:	0800c7bf 	.word	0x0800c7bf
 800c550:	0800c7bf 	.word	0x0800c7bf
 800c554:	0800c7bf 	.word	0x0800c7bf
 800c558:	0800c7bf 	.word	0x0800c7bf
 800c55c:	0800c5ad 	.word	0x0800c5ad
 800c560:	0800c7bf 	.word	0x0800c7bf
 800c564:	0800c7bf 	.word	0x0800c7bf
 800c568:	0800c7bf 	.word	0x0800c7bf
 800c56c:	0800c7bf 	.word	0x0800c7bf
 800c570:	0800c7bf 	.word	0x0800c7bf
 800c574:	0800c7bf 	.word	0x0800c7bf
 800c578:	0800c7bf 	.word	0x0800c7bf
 800c57c:	0800c5b3 	.word	0x0800c5b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c580:	4b94      	ldr	r3, [pc, #592]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 0320 	and.w	r3, r3, #32
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d009      	beq.n	800c5a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c58c:	4b91      	ldr	r3, [pc, #580]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	08db      	lsrs	r3, r3, #3
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	4a90      	ldr	r2, [pc, #576]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c598:	fa22 f303 	lsr.w	r3, r2, r3
 800c59c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c59e:	e111      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c5a0:	4b8d      	ldr	r3, [pc, #564]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c5a2:	61bb      	str	r3, [r7, #24]
      break;
 800c5a4:	e10e      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c5a6:	4b8d      	ldr	r3, [pc, #564]	; (800c7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c5a8:	61bb      	str	r3, [r7, #24]
      break;
 800c5aa:	e10b      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c5ac:	4b8c      	ldr	r3, [pc, #560]	; (800c7e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c5ae:	61bb      	str	r3, [r7, #24]
      break;
 800c5b0:	e108      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5b2:	4b88      	ldr	r3, [pc, #544]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c5bc:	4b85      	ldr	r3, [pc, #532]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c0:	091b      	lsrs	r3, r3, #4
 800c5c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c5c8:	4b82      	ldr	r3, [pc, #520]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c5d2:	4b80      	ldr	r3, [pc, #512]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	08db      	lsrs	r3, r3, #3
 800c5d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	fb02 f303 	mul.w	r3, r2, r3
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 80e1 	beq.w	800c7b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	f000 8083 	beq.w	800c704 <HAL_RCC_GetSysClockFreq+0x204>
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b02      	cmp	r3, #2
 800c602:	f200 80a1 	bhi.w	800c748 <HAL_RCC_GetSysClockFreq+0x248>
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_RCC_GetSysClockFreq+0x114>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d056      	beq.n	800c6c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c612:	e099      	b.n	800c748 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c614:	4b6f      	ldr	r3, [pc, #444]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0320 	and.w	r3, r3, #32
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d02d      	beq.n	800c67c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c620:	4b6c      	ldr	r3, [pc, #432]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	08db      	lsrs	r3, r3, #3
 800c626:	f003 0303 	and.w	r3, r3, #3
 800c62a:	4a6b      	ldr	r2, [pc, #428]	; (800c7d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c62c:	fa22 f303 	lsr.w	r3, r2, r3
 800c630:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	ee07 3a90 	vmov	s15, r3
 800c638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	ee07 3a90 	vmov	s15, r3
 800c642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c64a:	4b62      	ldr	r3, [pc, #392]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c65a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c65e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c66a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c676:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c67a:	e087      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	ee07 3a90 	vmov	s15, r3
 800c682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c686:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c7e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68e:	4b51      	ldr	r3, [pc, #324]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c696:	ee07 3a90 	vmov	s15, r3
 800c69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c6be:	e065      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	ee07 3a90 	vmov	s15, r3
 800c6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800c6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d2:	4b40      	ldr	r3, [pc, #256]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c702:	e043      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c7f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c716:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c726:	ed97 6a02 	vldr	s12, [r7, #8]
 800c72a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c746:	e021      	b.n	800c78c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c7ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800c756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75a:	4b1e      	ldr	r3, [pc, #120]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c76e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c7e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c78a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c78c:	4b11      	ldr	r3, [pc, #68]	; (800c7d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	0a5b      	lsrs	r3, r3, #9
 800c792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c796:	3301      	adds	r3, #1
 800c798:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	ee07 3a90 	vmov	s15, r3
 800c7a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7b0:	ee17 3a90 	vmov	r3, s15
 800c7b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c7b6:	e005      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
      break;
 800c7bc:	e002      	b.n	800c7c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c7c0:	61bb      	str	r3, [r7, #24]
      break;
 800c7c2:	bf00      	nop
  }

  return sysclockfreq;
 800c7c4:	69bb      	ldr	r3, [r7, #24]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3724      	adds	r7, #36	; 0x24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	03d09000 	.word	0x03d09000
 800c7dc:	003d0900 	.word	0x003d0900
 800c7e0:	007a1200 	.word	0x007a1200
 800c7e4:	46000000 	.word	0x46000000
 800c7e8:	4c742400 	.word	0x4c742400
 800c7ec:	4a742400 	.word	0x4a742400
 800c7f0:	4af42400 	.word	0x4af42400

0800c7f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c7fa:	f7ff fe81 	bl	800c500 <HAL_RCC_GetSysClockFreq>
 800c7fe:	4602      	mov	r2, r0
 800c800:	4b10      	ldr	r3, [pc, #64]	; (800c844 <HAL_RCC_GetHCLKFreq+0x50>)
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	0a1b      	lsrs	r3, r3, #8
 800c806:	f003 030f 	and.w	r3, r3, #15
 800c80a:	490f      	ldr	r1, [pc, #60]	; (800c848 <HAL_RCC_GetHCLKFreq+0x54>)
 800c80c:	5ccb      	ldrb	r3, [r1, r3]
 800c80e:	f003 031f 	and.w	r3, r3, #31
 800c812:	fa22 f303 	lsr.w	r3, r2, r3
 800c816:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <HAL_RCC_GetHCLKFreq+0x50>)
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	4a09      	ldr	r2, [pc, #36]	; (800c848 <HAL_RCC_GetHCLKFreq+0x54>)
 800c822:	5cd3      	ldrb	r3, [r2, r3]
 800c824:	f003 031f 	and.w	r3, r3, #31
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	fa22 f303 	lsr.w	r3, r2, r3
 800c82e:	4a07      	ldr	r2, [pc, #28]	; (800c84c <HAL_RCC_GetHCLKFreq+0x58>)
 800c830:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c832:	4a07      	ldr	r2, [pc, #28]	; (800c850 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c838:	4b04      	ldr	r3, [pc, #16]	; (800c84c <HAL_RCC_GetHCLKFreq+0x58>)
 800c83a:	681b      	ldr	r3, [r3, #0]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	58024400 	.word	0x58024400
 800c848:	0801c6a8 	.word	0x0801c6a8
 800c84c:	24000004 	.word	0x24000004
 800c850:	24000000 	.word	0x24000000

0800c854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c858:	f7ff ffcc 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800c85c:	4602      	mov	r2, r0
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	091b      	lsrs	r3, r3, #4
 800c864:	f003 0307 	and.w	r3, r3, #7
 800c868:	4904      	ldr	r1, [pc, #16]	; (800c87c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c86a:	5ccb      	ldrb	r3, [r1, r3]
 800c86c:	f003 031f 	and.w	r3, r3, #31
 800c870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c874:	4618      	mov	r0, r3
 800c876:	bd80      	pop	{r7, pc}
 800c878:	58024400 	.word	0x58024400
 800c87c:	0801c6a8 	.word	0x0801c6a8

0800c880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c884:	f7ff ffb6 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800c888:	4602      	mov	r2, r0
 800c88a:	4b06      	ldr	r3, [pc, #24]	; (800c8a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	f003 0307 	and.w	r3, r3, #7
 800c894:	4904      	ldr	r1, [pc, #16]	; (800c8a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c896:	5ccb      	ldrb	r3, [r1, r3]
 800c898:	f003 031f 	and.w	r3, r3, #31
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	58024400 	.word	0x58024400
 800c8a8:	0801c6a8 	.word	0x0801c6a8

0800c8ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c8ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8b0:	b0ca      	sub	sp, #296	; 0x128
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c8d0:	2500      	movs	r5, #0
 800c8d2:	ea54 0305 	orrs.w	r3, r4, r5
 800c8d6:	d049      	beq.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8e2:	d02f      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c8e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c8e8:	d828      	bhi.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c8ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8ee:	d01a      	beq.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c8f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8f4:	d822      	bhi.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c8fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8fe:	d007      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c900:	e01c      	b.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c902:	4bb8      	ldr	r3, [pc, #736]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c906:	4ab7      	ldr	r2, [pc, #732]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c90c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c90e:	e01a      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c914:	3308      	adds	r3, #8
 800c916:	2102      	movs	r1, #2
 800c918:	4618      	mov	r0, r3
 800c91a:	f002 fb61 	bl	800efe0 <RCCEx_PLL2_Config>
 800c91e:	4603      	mov	r3, r0
 800c920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c924:	e00f      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c92a:	3328      	adds	r3, #40	; 0x28
 800c92c:	2102      	movs	r1, #2
 800c92e:	4618      	mov	r0, r3
 800c930:	f002 fc08 	bl	800f144 <RCCEx_PLL3_Config>
 800c934:	4603      	mov	r3, r0
 800c936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c93a:	e004      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c942:	e000      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c944:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10a      	bne.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c94e:	4ba5      	ldr	r3, [pc, #660]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c952:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c95c:	4aa1      	ldr	r2, [pc, #644]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c95e:	430b      	orrs	r3, r1
 800c960:	6513      	str	r3, [r2, #80]	; 0x50
 800c962:	e003      	b.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c968:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c978:	f04f 0900 	mov.w	r9, #0
 800c97c:	ea58 0309 	orrs.w	r3, r8, r9
 800c980:	d047      	beq.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c988:	2b04      	cmp	r3, #4
 800c98a:	d82a      	bhi.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c98c:	a201      	add	r2, pc, #4	; (adr r2, 800c994 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c992:	bf00      	nop
 800c994:	0800c9a9 	.word	0x0800c9a9
 800c998:	0800c9b7 	.word	0x0800c9b7
 800c99c:	0800c9cd 	.word	0x0800c9cd
 800c9a0:	0800c9eb 	.word	0x0800c9eb
 800c9a4:	0800c9eb 	.word	0x0800c9eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9a8:	4b8e      	ldr	r3, [pc, #568]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ac:	4a8d      	ldr	r2, [pc, #564]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9b4:	e01a      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	2100      	movs	r1, #0
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f002 fb0e 	bl	800efe0 <RCCEx_PLL2_Config>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9ca:	e00f      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d0:	3328      	adds	r3, #40	; 0x28
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f002 fbb5 	bl	800f144 <RCCEx_PLL3_Config>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c9e0:	e004      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c9e8:	e000      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10a      	bne.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9f4:	4b7b      	ldr	r3, [pc, #492]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f8:	f023 0107 	bic.w	r1, r3, #7
 800c9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca02:	4a78      	ldr	r2, [pc, #480]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca04:	430b      	orrs	r3, r1
 800ca06:	6513      	str	r3, [r2, #80]	; 0x50
 800ca08:	e003      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ca12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ca1e:	f04f 0b00 	mov.w	fp, #0
 800ca22:	ea5a 030b 	orrs.w	r3, sl, fp
 800ca26:	d04c      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ca28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca32:	d030      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ca34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca38:	d829      	bhi.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ca3c:	d02d      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ca3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ca40:	d825      	bhi.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca42:	2b80      	cmp	r3, #128	; 0x80
 800ca44:	d018      	beq.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ca46:	2b80      	cmp	r3, #128	; 0x80
 800ca48:	d821      	bhi.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d002      	beq.n	800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d007      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ca52:	e01c      	b.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca54:	4b63      	ldr	r3, [pc, #396]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca58:	4a62      	ldr	r2, [pc, #392]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca60:	e01c      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca66:	3308      	adds	r3, #8
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f002 fab8 	bl	800efe0 <RCCEx_PLL2_Config>
 800ca70:	4603      	mov	r3, r0
 800ca72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca76:	e011      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca7c:	3328      	adds	r3, #40	; 0x28
 800ca7e:	2100      	movs	r1, #0
 800ca80:	4618      	mov	r0, r3
 800ca82:	f002 fb5f 	bl	800f144 <RCCEx_PLL3_Config>
 800ca86:	4603      	mov	r3, r0
 800ca88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ca8c:	e006      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ca94:	e002      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ca96:	bf00      	nop
 800ca98:	e000      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ca9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800caa4:	4b4f      	ldr	r3, [pc, #316]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800caa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800caac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cab2:	4a4c      	ldr	r2, [pc, #304]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cab4:	430b      	orrs	r3, r1
 800cab6:	6513      	str	r3, [r2, #80]	; 0x50
 800cab8:	e003      	b.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cabe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800cace:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800cad2:	2300      	movs	r3, #0
 800cad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cad8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800cadc:	460b      	mov	r3, r1
 800cade:	4313      	orrs	r3, r2
 800cae0:	d053      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cae6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800caea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caee:	d035      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800caf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800caf4:	d82e      	bhi.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800caf6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cafa:	d031      	beq.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cafc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb00:	d828      	bhi.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cb02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb06:	d01a      	beq.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cb08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb0c:	d822      	bhi.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cb12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb16:	d007      	beq.n	800cb28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cb18:	e01c      	b.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb1a:	4b32      	ldr	r3, [pc, #200]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	4a31      	ldr	r2, [pc, #196]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb26:	e01c      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	2100      	movs	r1, #0
 800cb30:	4618      	mov	r0, r3
 800cb32:	f002 fa55 	bl	800efe0 <RCCEx_PLL2_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cb3c:	e011      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb42:	3328      	adds	r3, #40	; 0x28
 800cb44:	2100      	movs	r1, #0
 800cb46:	4618      	mov	r0, r3
 800cb48:	f002 fafc 	bl	800f144 <RCCEx_PLL3_Config>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cb52:	e006      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cb5a:	e002      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cb5c:	bf00      	nop
 800cb5e:	e000      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cb60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cb6a:	4b1e      	ldr	r3, [pc, #120]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800cb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cb7a:	4a1a      	ldr	r2, [pc, #104]	; (800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	6593      	str	r3, [r2, #88]	; 0x58
 800cb80:	e003      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cb96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cba0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cba4:	460b      	mov	r3, r1
 800cba6:	4313      	orrs	r3, r2
 800cba8:	d056      	beq.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cbb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbb6:	d038      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cbb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cbbc:	d831      	bhi.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cbc2:	d034      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cbc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cbc8:	d82b      	bhi.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbce:	d01d      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cbd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbd4:	d825      	bhi.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d006      	beq.n	800cbe8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cbda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbde:	d00a      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cbe0:	e01f      	b.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cbe2:	bf00      	nop
 800cbe4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbe8:	4ba2      	ldr	r3, [pc, #648]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	4aa1      	ldr	r2, [pc, #644]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cbee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cbf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbf4:	e01c      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f002 f9ee 	bl	800efe0 <RCCEx_PLL2_Config>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cc0a:	e011      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc10:	3328      	adds	r3, #40	; 0x28
 800cc12:	2100      	movs	r1, #0
 800cc14:	4618      	mov	r0, r3
 800cc16:	f002 fa95 	bl	800f144 <RCCEx_PLL3_Config>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc20:	e006      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc28:	e002      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cc2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10b      	bne.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cc38:	4b8e      	ldr	r3, [pc, #568]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cc48:	4a8a      	ldr	r2, [pc, #552]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	6593      	str	r3, [r2, #88]	; 0x58
 800cc4e:	e003      	b.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cc64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cc6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cc72:	460b      	mov	r3, r1
 800cc74:	4313      	orrs	r3, r2
 800cc76:	d03a      	beq.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cc78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc7e:	2b30      	cmp	r3, #48	; 0x30
 800cc80:	d01f      	beq.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cc82:	2b30      	cmp	r3, #48	; 0x30
 800cc84:	d819      	bhi.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cc86:	2b20      	cmp	r3, #32
 800cc88:	d00c      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cc8a:	2b20      	cmp	r3, #32
 800cc8c:	d815      	bhi.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d019      	beq.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cc92:	2b10      	cmp	r3, #16
 800cc94:	d111      	bne.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc96:	4b77      	ldr	r3, [pc, #476]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9a:	4a76      	ldr	r2, [pc, #472]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cc9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cca2:	e011      	b.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cca8:	3308      	adds	r3, #8
 800ccaa:	2102      	movs	r1, #2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f002 f997 	bl	800efe0 <RCCEx_PLL2_Config>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ccb8:	e006      	b.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccc0:	e002      	b.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ccc2:	bf00      	nop
 800ccc4:	e000      	b.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ccc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ccd0:	4b68      	ldr	r3, [pc, #416]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ccd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccde:	4a65      	ldr	r2, [pc, #404]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cce0:	430b      	orrs	r3, r1
 800cce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cce4:	e003      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ccee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ccfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cd04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	d051      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd18:	d035      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cd1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd1e:	d82e      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd24:	d031      	beq.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cd26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd2a:	d828      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd30:	d01a      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800cd32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd36:	d822      	bhi.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d003      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cd3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd40:	d007      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800cd42:	e01c      	b.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd44:	4b4b      	ldr	r3, [pc, #300]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	4a4a      	ldr	r2, [pc, #296]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd50:	e01c      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd56:	3308      	adds	r3, #8
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f002 f940 	bl	800efe0 <RCCEx_PLL2_Config>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd66:	e011      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd6c:	3328      	adds	r3, #40	; 0x28
 800cd6e:	2100      	movs	r1, #0
 800cd70:	4618      	mov	r0, r3
 800cd72:	f002 f9e7 	bl	800f144 <RCCEx_PLL3_Config>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cd7c:	e006      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd84:	e002      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cd86:	bf00      	nop
 800cd88:	e000      	b.n	800cd8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800cd8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cd94:	4b37      	ldr	r3, [pc, #220]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cda2:	4a34      	ldr	r2, [pc, #208]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cda4:	430b      	orrs	r3, r1
 800cda6:	6513      	str	r3, [r2, #80]	; 0x50
 800cda8:	e003      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800cdbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cdc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	d056      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cddc:	d033      	beq.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800cdde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cde2:	d82c      	bhi.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cde4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cde8:	d02f      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800cdea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cdee:	d826      	bhi.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cdf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cdf4:	d02b      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cdf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cdfa:	d820      	bhi.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cdfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce00:	d012      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ce02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce06:	d81a      	bhi.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d022      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ce0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce10:	d115      	bne.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ce12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce16:	3308      	adds	r3, #8
 800ce18:	2101      	movs	r1, #1
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f002 f8e0 	bl	800efe0 <RCCEx_PLL2_Config>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ce26:	e015      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce2c:	3328      	adds	r3, #40	; 0x28
 800ce2e:	2101      	movs	r1, #1
 800ce30:	4618      	mov	r0, r3
 800ce32:	f002 f987 	bl	800f144 <RCCEx_PLL3_Config>
 800ce36:	4603      	mov	r3, r0
 800ce38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ce3c:	e00a      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce44:	e006      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce46:	bf00      	nop
 800ce48:	e004      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce4a:	bf00      	nop
 800ce4c:	e002      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce4e:	bf00      	nop
 800ce50:	e000      	b.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ce52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10d      	bne.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ce5c:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ce64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce6a:	4a02      	ldr	r2, [pc, #8]	; (800ce74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	6513      	str	r3, [r2, #80]	; 0x50
 800ce70:	e006      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ce72:	bf00      	nop
 800ce74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ce80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ce8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce90:	2300      	movs	r3, #0
 800ce92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	d055      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cea4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ceac:	d033      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ceae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ceb2:	d82c      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ceb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb8:	d02f      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ceba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cebe:	d826      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cec4:	d02b      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ceca:	d820      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ced0:	d012      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ced2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ced6:	d81a      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d022      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cedc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cee0:	d115      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cee6:	3308      	adds	r3, #8
 800cee8:	2101      	movs	r1, #1
 800ceea:	4618      	mov	r0, r3
 800ceec:	f002 f878 	bl	800efe0 <RCCEx_PLL2_Config>
 800cef0:	4603      	mov	r3, r0
 800cef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cef6:	e015      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cefc:	3328      	adds	r3, #40	; 0x28
 800cefe:	2101      	movs	r1, #1
 800cf00:	4618      	mov	r0, r3
 800cf02:	f002 f91f 	bl	800f144 <RCCEx_PLL3_Config>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cf0c:	e00a      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf14:	e006      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cf16:	bf00      	nop
 800cf18:	e004      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cf1a:	bf00      	nop
 800cf1c:	e002      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cf22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10b      	bne.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cf2c:	4ba3      	ldr	r3, [pc, #652]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf3c:	4a9f      	ldr	r2, [pc, #636]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	6593      	str	r3, [r2, #88]	; 0x58
 800cf42:	e003      	b.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cf4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cf58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cf62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cf66:	460b      	mov	r3, r1
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	d037      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cf6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf76:	d00e      	beq.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cf78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf7c:	d816      	bhi.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d018      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cf82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf86:	d111      	bne.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf88:	4b8c      	ldr	r3, [pc, #560]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8c:	4a8b      	ldr	r2, [pc, #556]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cf8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cf94:	e00f      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f002 f81e 	bl	800efe0 <RCCEx_PLL2_Config>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cfaa:	e004      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfac:	2301      	movs	r3, #1
 800cfae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfb2:	e000      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cfb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cfbe:	4b7f      	ldr	r3, [pc, #508]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfcc:	4a7b      	ldr	r2, [pc, #492]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cfce:	430b      	orrs	r3, r1
 800cfd0:	6513      	str	r3, [r2, #80]	; 0x50
 800cfd2:	e003      	b.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800cfe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfec:	2300      	movs	r3, #0
 800cfee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cff2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800cff6:	460b      	mov	r3, r1
 800cff8:	4313      	orrs	r3, r2
 800cffa:	d039      	beq.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d002:	2b03      	cmp	r3, #3
 800d004:	d81c      	bhi.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d006:	a201      	add	r2, pc, #4	; (adr r2, 800d00c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00c:	0800d049 	.word	0x0800d049
 800d010:	0800d01d 	.word	0x0800d01d
 800d014:	0800d02b 	.word	0x0800d02b
 800d018:	0800d049 	.word	0x0800d049
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d01c:	4b67      	ldr	r3, [pc, #412]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d020:	4a66      	ldr	r2, [pc, #408]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d028:	e00f      	b.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d02e:	3308      	adds	r3, #8
 800d030:	2102      	movs	r1, #2
 800d032:	4618      	mov	r0, r3
 800d034:	f001 ffd4 	bl	800efe0 <RCCEx_PLL2_Config>
 800d038:	4603      	mov	r3, r0
 800d03a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d03e:	e004      	b.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d046:	e000      	b.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d04a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10a      	bne.n	800d068 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d052:	4b5a      	ldr	r3, [pc, #360]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d056:	f023 0103 	bic.w	r1, r3, #3
 800d05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d060:	4a56      	ldr	r2, [pc, #344]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d062:	430b      	orrs	r3, r1
 800d064:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d066:	e003      	b.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d06c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d07c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d080:	2300      	movs	r3, #0
 800d082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d086:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d08a:	460b      	mov	r3, r1
 800d08c:	4313      	orrs	r3, r2
 800d08e:	f000 809f 	beq.w	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d092:	4b4b      	ldr	r3, [pc, #300]	; (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a4a      	ldr	r2, [pc, #296]	; (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d09c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d09e:	f7f7 feab 	bl	8004df8 <HAL_GetTick>
 800d0a2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0a6:	e00b      	b.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0a8:	f7f7 fea6 	bl	8004df8 <HAL_GetTick>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	2b64      	cmp	r3, #100	; 0x64
 800d0b6:	d903      	bls.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d0be:	e005      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0c0:	4b3f      	ldr	r3, [pc, #252]	; (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d0ed      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d179      	bne.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d0d4:	4b39      	ldr	r3, [pc, #228]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d0e0:	4053      	eors	r3, r2
 800d0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d015      	beq.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d0ea:	4b34      	ldr	r3, [pc, #208]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d0f6:	4b31      	ldr	r3, [pc, #196]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0fa:	4a30      	ldr	r2, [pc, #192]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d100:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d102:	4b2e      	ldr	r3, [pc, #184]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d106:	4a2d      	ldr	r2, [pc, #180]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d10c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d10e:	4a2b      	ldr	r2, [pc, #172]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d114:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d11a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d122:	d118      	bne.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d124:	f7f7 fe68 	bl	8004df8 <HAL_GetTick>
 800d128:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d12c:	e00d      	b.n	800d14a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d12e:	f7f7 fe63 	bl	8004df8 <HAL_GetTick>
 800d132:	4602      	mov	r2, r0
 800d134:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d138:	1ad2      	subs	r2, r2, r3
 800d13a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d13e:	429a      	cmp	r2, r3
 800d140:	d903      	bls.n	800d14a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d148:	e005      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d14a:	4b1c      	ldr	r3, [pc, #112]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14e:	f003 0302 	and.w	r3, r3, #2
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0eb      	beq.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d129      	bne.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d16a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d16e:	d10e      	bne.n	800d18e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d170:	4b12      	ldr	r3, [pc, #72]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d17c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d180:	091a      	lsrs	r2, r3, #4
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d184:	4013      	ands	r3, r2
 800d186:	4a0d      	ldr	r2, [pc, #52]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d188:	430b      	orrs	r3, r1
 800d18a:	6113      	str	r3, [r2, #16]
 800d18c:	e005      	b.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d18e:	4b0b      	ldr	r3, [pc, #44]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	4a0a      	ldr	r2, [pc, #40]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d194:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d198:	6113      	str	r3, [r2, #16]
 800d19a:	4b08      	ldr	r3, [pc, #32]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d19c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1aa:	4a04      	ldr	r2, [pc, #16]	; (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1ac:	430b      	orrs	r3, r1
 800d1ae:	6713      	str	r3, [r2, #112]	; 0x70
 800d1b0:	e00e      	b.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d1ba:	e009      	b.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d1bc:	58024400 	.word	0x58024400
 800d1c0:	58024800 	.word	0x58024800
 800d1c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	f002 0301 	and.w	r3, r2, #1
 800d1dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d1e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	f000 8089 	beq.w	800d304 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f8:	2b28      	cmp	r3, #40	; 0x28
 800d1fa:	d86b      	bhi.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d1fc:	a201      	add	r2, pc, #4	; (adr r2, 800d204 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d202:	bf00      	nop
 800d204:	0800d2dd 	.word	0x0800d2dd
 800d208:	0800d2d5 	.word	0x0800d2d5
 800d20c:	0800d2d5 	.word	0x0800d2d5
 800d210:	0800d2d5 	.word	0x0800d2d5
 800d214:	0800d2d5 	.word	0x0800d2d5
 800d218:	0800d2d5 	.word	0x0800d2d5
 800d21c:	0800d2d5 	.word	0x0800d2d5
 800d220:	0800d2d5 	.word	0x0800d2d5
 800d224:	0800d2a9 	.word	0x0800d2a9
 800d228:	0800d2d5 	.word	0x0800d2d5
 800d22c:	0800d2d5 	.word	0x0800d2d5
 800d230:	0800d2d5 	.word	0x0800d2d5
 800d234:	0800d2d5 	.word	0x0800d2d5
 800d238:	0800d2d5 	.word	0x0800d2d5
 800d23c:	0800d2d5 	.word	0x0800d2d5
 800d240:	0800d2d5 	.word	0x0800d2d5
 800d244:	0800d2bf 	.word	0x0800d2bf
 800d248:	0800d2d5 	.word	0x0800d2d5
 800d24c:	0800d2d5 	.word	0x0800d2d5
 800d250:	0800d2d5 	.word	0x0800d2d5
 800d254:	0800d2d5 	.word	0x0800d2d5
 800d258:	0800d2d5 	.word	0x0800d2d5
 800d25c:	0800d2d5 	.word	0x0800d2d5
 800d260:	0800d2d5 	.word	0x0800d2d5
 800d264:	0800d2dd 	.word	0x0800d2dd
 800d268:	0800d2d5 	.word	0x0800d2d5
 800d26c:	0800d2d5 	.word	0x0800d2d5
 800d270:	0800d2d5 	.word	0x0800d2d5
 800d274:	0800d2d5 	.word	0x0800d2d5
 800d278:	0800d2d5 	.word	0x0800d2d5
 800d27c:	0800d2d5 	.word	0x0800d2d5
 800d280:	0800d2d5 	.word	0x0800d2d5
 800d284:	0800d2dd 	.word	0x0800d2dd
 800d288:	0800d2d5 	.word	0x0800d2d5
 800d28c:	0800d2d5 	.word	0x0800d2d5
 800d290:	0800d2d5 	.word	0x0800d2d5
 800d294:	0800d2d5 	.word	0x0800d2d5
 800d298:	0800d2d5 	.word	0x0800d2d5
 800d29c:	0800d2d5 	.word	0x0800d2d5
 800d2a0:	0800d2d5 	.word	0x0800d2d5
 800d2a4:	0800d2dd 	.word	0x0800d2dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	2101      	movs	r1, #1
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f001 fe95 	bl	800efe0 <RCCEx_PLL2_Config>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d2bc:	e00f      	b.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d2be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2c2:	3328      	adds	r3, #40	; 0x28
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 ff3c 	bl	800f144 <RCCEx_PLL3_Config>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d2d2:	e004      	b.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d2da:	e000      	b.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d2e6:	4bbf      	ldr	r3, [pc, #764]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f4:	4abb      	ldr	r2, [pc, #748]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d2f6:	430b      	orrs	r3, r1
 800d2f8:	6553      	str	r3, [r2, #84]	; 0x54
 800d2fa:	e003      	b.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d300:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	f002 0302 	and.w	r3, r2, #2
 800d310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d314:	2300      	movs	r3, #0
 800d316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d31a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d31e:	460b      	mov	r3, r1
 800d320:	4313      	orrs	r3, r2
 800d322:	d041      	beq.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d32a:	2b05      	cmp	r3, #5
 800d32c:	d824      	bhi.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d32e:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d334:	0800d381 	.word	0x0800d381
 800d338:	0800d34d 	.word	0x0800d34d
 800d33c:	0800d363 	.word	0x0800d363
 800d340:	0800d381 	.word	0x0800d381
 800d344:	0800d381 	.word	0x0800d381
 800d348:	0800d381 	.word	0x0800d381
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d350:	3308      	adds	r3, #8
 800d352:	2101      	movs	r1, #1
 800d354:	4618      	mov	r0, r3
 800d356:	f001 fe43 	bl	800efe0 <RCCEx_PLL2_Config>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d360:	e00f      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d366:	3328      	adds	r3, #40	; 0x28
 800d368:	2101      	movs	r1, #1
 800d36a:	4618      	mov	r0, r3
 800d36c:	f001 feea 	bl	800f144 <RCCEx_PLL3_Config>
 800d370:	4603      	mov	r3, r0
 800d372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d376:	e004      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d37e:	e000      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10a      	bne.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d38a:	4b96      	ldr	r3, [pc, #600]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d38e:	f023 0107 	bic.w	r1, r3, #7
 800d392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d398:	4a92      	ldr	r2, [pc, #584]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d39a:	430b      	orrs	r3, r1
 800d39c:	6553      	str	r3, [r2, #84]	; 0x54
 800d39e:	e003      	b.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f002 0304 	and.w	r3, r2, #4
 800d3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d3be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	d044      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3d0:	2b05      	cmp	r3, #5
 800d3d2:	d825      	bhi.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d3d4:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3da:	bf00      	nop
 800d3dc:	0800d429 	.word	0x0800d429
 800d3e0:	0800d3f5 	.word	0x0800d3f5
 800d3e4:	0800d40b 	.word	0x0800d40b
 800d3e8:	0800d429 	.word	0x0800d429
 800d3ec:	0800d429 	.word	0x0800d429
 800d3f0:	0800d429 	.word	0x0800d429
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f001 fdef 	bl	800efe0 <RCCEx_PLL2_Config>
 800d402:	4603      	mov	r3, r0
 800d404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d408:	e00f      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d40e:	3328      	adds	r3, #40	; 0x28
 800d410:	2101      	movs	r1, #1
 800d412:	4618      	mov	r0, r3
 800d414:	f001 fe96 	bl	800f144 <RCCEx_PLL3_Config>
 800d418:	4603      	mov	r3, r0
 800d41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d41e:	e004      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d426:	e000      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d432:	4b6c      	ldr	r3, [pc, #432]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d436:	f023 0107 	bic.w	r1, r3, #7
 800d43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d442:	4a68      	ldr	r2, [pc, #416]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d444:	430b      	orrs	r3, r1
 800d446:	6593      	str	r3, [r2, #88]	; 0x58
 800d448:	e003      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d44a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d44e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f002 0320 	and.w	r3, r2, #32
 800d45e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d462:	2300      	movs	r3, #0
 800d464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d46c:	460b      	mov	r3, r1
 800d46e:	4313      	orrs	r3, r2
 800d470:	d055      	beq.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d47a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d47e:	d033      	beq.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d484:	d82c      	bhi.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d48a:	d02f      	beq.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d490:	d826      	bhi.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d496:	d02b      	beq.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d498:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d49c:	d820      	bhi.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d49e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4a2:	d012      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4a8:	d81a      	bhi.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d022      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d4ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4b2:	d115      	bne.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f001 fd8f 	bl	800efe0 <RCCEx_PLL2_Config>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d4c8:	e015      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4ce:	3328      	adds	r3, #40	; 0x28
 800d4d0:	2102      	movs	r1, #2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f001 fe36 	bl	800f144 <RCCEx_PLL3_Config>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d4de:	e00a      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d4e6:	e006      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4e8:	bf00      	nop
 800d4ea:	e004      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4ec:	bf00      	nop
 800d4ee:	e002      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4f0:	bf00      	nop
 800d4f2:	e000      	b.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10b      	bne.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d4fe:	4b39      	ldr	r3, [pc, #228]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d502:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d50e:	4a35      	ldr	r2, [pc, #212]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d510:	430b      	orrs	r3, r1
 800d512:	6553      	str	r3, [r2, #84]	; 0x54
 800d514:	e003      	b.n	800d51e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d51a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d52a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d52e:	2300      	movs	r3, #0
 800d530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d534:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d538:	460b      	mov	r3, r1
 800d53a:	4313      	orrs	r3, r2
 800d53c:	d058      	beq.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d546:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d54a:	d033      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d54c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d550:	d82c      	bhi.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d556:	d02f      	beq.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d55c:	d826      	bhi.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d55e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d562:	d02b      	beq.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d564:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d568:	d820      	bhi.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d56e:	d012      	beq.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d574:	d81a      	bhi.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d576:	2b00      	cmp	r3, #0
 800d578:	d022      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d57a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d57e:	d115      	bne.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d584:	3308      	adds	r3, #8
 800d586:	2100      	movs	r1, #0
 800d588:	4618      	mov	r0, r3
 800d58a:	f001 fd29 	bl	800efe0 <RCCEx_PLL2_Config>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d594:	e015      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d59a:	3328      	adds	r3, #40	; 0x28
 800d59c:	2102      	movs	r1, #2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 fdd0 	bl	800f144 <RCCEx_PLL3_Config>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d5aa:	e00a      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d5b2:	e006      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d5b4:	bf00      	nop
 800d5b6:	e004      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d5b8:	bf00      	nop
 800d5ba:	e002      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d5bc:	bf00      	nop
 800d5be:	e000      	b.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d5c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10e      	bne.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d5ca:	4b06      	ldr	r3, [pc, #24]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5da:	4a02      	ldr	r2, [pc, #8]	; (800d5e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5dc:	430b      	orrs	r3, r1
 800d5de:	6593      	str	r3, [r2, #88]	; 0x58
 800d5e0:	e006      	b.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d5e2:	bf00      	nop
 800d5e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d5ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d5fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d600:	2300      	movs	r3, #0
 800d602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d606:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d60a:	460b      	mov	r3, r1
 800d60c:	4313      	orrs	r3, r2
 800d60e:	d055      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d618:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d61c:	d033      	beq.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d61e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d622:	d82c      	bhi.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d628:	d02f      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d62e:	d826      	bhi.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d630:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d634:	d02b      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d636:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d63a:	d820      	bhi.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d63c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d640:	d012      	beq.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d646:	d81a      	bhi.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d022      	beq.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d64c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d650:	d115      	bne.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d656:	3308      	adds	r3, #8
 800d658:	2100      	movs	r1, #0
 800d65a:	4618      	mov	r0, r3
 800d65c:	f001 fcc0 	bl	800efe0 <RCCEx_PLL2_Config>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d666:	e015      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d66c:	3328      	adds	r3, #40	; 0x28
 800d66e:	2102      	movs	r1, #2
 800d670:	4618      	mov	r0, r3
 800d672:	f001 fd67 	bl	800f144 <RCCEx_PLL3_Config>
 800d676:	4603      	mov	r3, r0
 800d678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d67c:	e00a      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d67e:	2301      	movs	r3, #1
 800d680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d684:	e006      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d686:	bf00      	nop
 800d688:	e004      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d68a:	bf00      	nop
 800d68c:	e002      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d68e:	bf00      	nop
 800d690:	e000      	b.n	800d694 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d692:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d69c:	4ba1      	ldr	r3, [pc, #644]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d6ac:	4a9d      	ldr	r2, [pc, #628]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d6ae:	430b      	orrs	r3, r1
 800d6b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d6b2:	e003      	b.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f002 0308 	and.w	r3, r2, #8
 800d6c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d6d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	d01e      	beq.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6e8:	d10c      	bne.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ee:	3328      	adds	r3, #40	; 0x28
 800d6f0:	2102      	movs	r1, #2
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f001 fd26 	bl	800f144 <RCCEx_PLL3_Config>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d704:	4b87      	ldr	r3, [pc, #540]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d714:	4a83      	ldr	r2, [pc, #524]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d716:	430b      	orrs	r3, r1
 800d718:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	f002 0310 	and.w	r3, r2, #16
 800d726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d72a:	2300      	movs	r3, #0
 800d72c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d730:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d734:	460b      	mov	r3, r1
 800d736:	4313      	orrs	r3, r2
 800d738:	d01e      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d73e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d746:	d10c      	bne.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d74c:	3328      	adds	r3, #40	; 0x28
 800d74e:	2102      	movs	r1, #2
 800d750:	4618      	mov	r0, r3
 800d752:	f001 fcf7 	bl	800f144 <RCCEx_PLL3_Config>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d75c:	2301      	movs	r3, #1
 800d75e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d762:	4b70      	ldr	r3, [pc, #448]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d76e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d772:	4a6c      	ldr	r2, [pc, #432]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d774:	430b      	orrs	r3, r1
 800d776:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d788:	2300      	movs	r3, #0
 800d78a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d78e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d792:	460b      	mov	r3, r1
 800d794:	4313      	orrs	r3, r2
 800d796:	d03e      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d79c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d7a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7a4:	d022      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d7a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7aa:	d81b      	bhi.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d003      	beq.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7b4:	d00b      	beq.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d7b6:	e015      	b.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7bc:	3308      	adds	r3, #8
 800d7be:	2100      	movs	r1, #0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f001 fc0d 	bl	800efe0 <RCCEx_PLL2_Config>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d7cc:	e00f      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7d2:	3328      	adds	r3, #40	; 0x28
 800d7d4:	2102      	movs	r1, #2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 fcb4 	bl	800f144 <RCCEx_PLL3_Config>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d7e2:	e004      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d7ea:	e000      	b.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10b      	bne.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d7f6:	4b4b      	ldr	r3, [pc, #300]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d806:	4a47      	ldr	r2, [pc, #284]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d808:	430b      	orrs	r3, r1
 800d80a:	6593      	str	r3, [r2, #88]	; 0x58
 800d80c:	e003      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d80e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d822:	67bb      	str	r3, [r7, #120]	; 0x78
 800d824:	2300      	movs	r3, #0
 800d826:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d828:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d82c:	460b      	mov	r3, r1
 800d82e:	4313      	orrs	r3, r2
 800d830:	d03b      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d83a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d83e:	d01f      	beq.n	800d880 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d844:	d818      	bhi.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d84a:	d003      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d84c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d850:	d007      	beq.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d852:	e011      	b.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d854:	4b33      	ldr	r3, [pc, #204]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	4a32      	ldr	r2, [pc, #200]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d85a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d85e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d860:	e00f      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d866:	3328      	adds	r3, #40	; 0x28
 800d868:	2101      	movs	r1, #1
 800d86a:	4618      	mov	r0, r3
 800d86c:	f001 fc6a 	bl	800f144 <RCCEx_PLL3_Config>
 800d870:	4603      	mov	r3, r0
 800d872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d876:	e004      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d87e:	e000      	b.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10b      	bne.n	800d8a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d88a:	4b26      	ldr	r3, [pc, #152]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d88e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d89a:	4a22      	ldr	r2, [pc, #136]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d89c:	430b      	orrs	r3, r1
 800d89e:	6553      	str	r3, [r2, #84]	; 0x54
 800d8a0:	e003      	b.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d8b6:	673b      	str	r3, [r7, #112]	; 0x70
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	677b      	str	r3, [r7, #116]	; 0x74
 800d8bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	d034      	beq.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d003      	beq.n	800d8d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d8d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d4:	d007      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d8d6:	e011      	b.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8d8:	4b12      	ldr	r3, [pc, #72]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	4a11      	ldr	r2, [pc, #68]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d8e4:	e00e      	b.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	2102      	movs	r1, #2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f001 fb76 	bl	800efe0 <RCCEx_PLL2_Config>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d8fa:	e003      	b.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d902:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10d      	bne.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d90c:	4b05      	ldr	r3, [pc, #20]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d91a:	4a02      	ldr	r2, [pc, #8]	; (800d924 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d91c:	430b      	orrs	r3, r1
 800d91e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d920:	e006      	b.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d922:	bf00      	nop
 800d924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d93c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d93e:	2300      	movs	r3, #0
 800d940:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d942:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d946:	460b      	mov	r3, r1
 800d948:	4313      	orrs	r3, r2
 800d94a:	d00c      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d950:	3328      	adds	r3, #40	; 0x28
 800d952:	2102      	movs	r1, #2
 800d954:	4618      	mov	r0, r3
 800d956:	f001 fbf5 	bl	800f144 <RCCEx_PLL3_Config>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d972:	663b      	str	r3, [r7, #96]	; 0x60
 800d974:	2300      	movs	r3, #0
 800d976:	667b      	str	r3, [r7, #100]	; 0x64
 800d978:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d97c:	460b      	mov	r3, r1
 800d97e:	4313      	orrs	r3, r2
 800d980:	d038      	beq.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d98e:	d018      	beq.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d994:	d811      	bhi.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d99a:	d014      	beq.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d99c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9a0:	d80b      	bhi.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d011      	beq.n	800d9ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d9a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9aa:	d106      	bne.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9ac:	4bc3      	ldr	r3, [pc, #780]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	4ac2      	ldr	r2, [pc, #776]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d9b8:	e008      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9c0:	e004      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9c2:	bf00      	nop
 800d9c4:	e002      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9c6:	bf00      	nop
 800d9c8:	e000      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10b      	bne.n	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d9d4:	4bb9      	ldr	r3, [pc, #740]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9e4:	4ab5      	ldr	r2, [pc, #724]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d9e6:	430b      	orrs	r3, r1
 800d9e8:	6553      	str	r3, [r2, #84]	; 0x54
 800d9ea:	e003      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800da00:	65bb      	str	r3, [r7, #88]	; 0x58
 800da02:	2300      	movs	r3, #0
 800da04:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800da0a:	460b      	mov	r3, r1
 800da0c:	4313      	orrs	r3, r2
 800da0e:	d009      	beq.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800da10:	4baa      	ldr	r3, [pc, #680]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1e:	4aa7      	ldr	r2, [pc, #668]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da20:	430b      	orrs	r3, r1
 800da22:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800da24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800da30:	653b      	str	r3, [r7, #80]	; 0x50
 800da32:	2300      	movs	r3, #0
 800da34:	657b      	str	r3, [r7, #84]	; 0x54
 800da36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800da3a:	460b      	mov	r3, r1
 800da3c:	4313      	orrs	r3, r2
 800da3e:	d00a      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800da40:	4b9e      	ldr	r3, [pc, #632]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800da48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800da50:	4a9a      	ldr	r2, [pc, #616]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da52:	430b      	orrs	r3, r1
 800da54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800da56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800da62:	64bb      	str	r3, [r7, #72]	; 0x48
 800da64:	2300      	movs	r3, #0
 800da66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800da6c:	460b      	mov	r3, r1
 800da6e:	4313      	orrs	r3, r2
 800da70:	d009      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800da72:	4b92      	ldr	r3, [pc, #584]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da76:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800da7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	4a8e      	ldr	r2, [pc, #568]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da82:	430b      	orrs	r3, r1
 800da84:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800da86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800da92:	643b      	str	r3, [r7, #64]	; 0x40
 800da94:	2300      	movs	r3, #0
 800da96:	647b      	str	r3, [r7, #68]	; 0x44
 800da98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800da9c:	460b      	mov	r3, r1
 800da9e:	4313      	orrs	r3, r2
 800daa0:	d00e      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800daa2:	4b86      	ldr	r3, [pc, #536]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	4a85      	ldr	r2, [pc, #532]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800daac:	6113      	str	r3, [r2, #16]
 800daae:	4b83      	ldr	r3, [pc, #524]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dab0:	6919      	ldr	r1, [r3, #16]
 800dab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dab6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800daba:	4a80      	ldr	r2, [pc, #512]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dabc:	430b      	orrs	r3, r1
 800dabe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800dacc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dace:	2300      	movs	r3, #0
 800dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dad2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dad6:	460b      	mov	r3, r1
 800dad8:	4313      	orrs	r3, r2
 800dada:	d009      	beq.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dadc:	4b77      	ldr	r3, [pc, #476]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dae0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daea:	4a74      	ldr	r2, [pc, #464]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daec:	430b      	orrs	r3, r1
 800daee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800daf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dafc:	633b      	str	r3, [r7, #48]	; 0x30
 800dafe:	2300      	movs	r3, #0
 800db00:	637b      	str	r3, [r7, #52]	; 0x34
 800db02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800db06:	460b      	mov	r3, r1
 800db08:	4313      	orrs	r3, r2
 800db0a:	d00a      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800db0c:	4b6b      	ldr	r3, [pc, #428]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db10:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800db14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db1c:	4a67      	ldr	r2, [pc, #412]	; (800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db1e:	430b      	orrs	r3, r1
 800db20:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800db22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	2100      	movs	r1, #0
 800db2c:	62b9      	str	r1, [r7, #40]	; 0x28
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800db38:	460b      	mov	r3, r1
 800db3a:	4313      	orrs	r3, r2
 800db3c:	d011      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db42:	3308      	adds	r3, #8
 800db44:	2100      	movs	r1, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f001 fa4a 	bl	800efe0 <RCCEx_PLL2_Config>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800db52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db56:	2b00      	cmp	r3, #0
 800db58:	d003      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800db62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	2100      	movs	r1, #0
 800db6c:	6239      	str	r1, [r7, #32]
 800db6e:	f003 0302 	and.w	r3, r3, #2
 800db72:	627b      	str	r3, [r7, #36]	; 0x24
 800db74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800db78:	460b      	mov	r3, r1
 800db7a:	4313      	orrs	r3, r2
 800db7c:	d011      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db82:	3308      	adds	r3, #8
 800db84:	2101      	movs	r1, #1
 800db86:	4618      	mov	r0, r3
 800db88:	f001 fa2a 	bl	800efe0 <RCCEx_PLL2_Config>
 800db8c:	4603      	mov	r3, r0
 800db8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800db92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	2100      	movs	r1, #0
 800dbac:	61b9      	str	r1, [r7, #24]
 800dbae:	f003 0304 	and.w	r3, r3, #4
 800dbb2:	61fb      	str	r3, [r7, #28]
 800dbb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	d011      	beq.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f001 fa0a 	bl	800efe0 <RCCEx_PLL2_Config>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dbd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbea:	2100      	movs	r1, #0
 800dbec:	6139      	str	r1, [r7, #16]
 800dbee:	f003 0308 	and.w	r3, r3, #8
 800dbf2:	617b      	str	r3, [r7, #20]
 800dbf4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	d011      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc02:	3328      	adds	r3, #40	; 0x28
 800dc04:	2100      	movs	r1, #0
 800dc06:	4618      	mov	r0, r3
 800dc08:	f001 fa9c 	bl	800f144 <RCCEx_PLL3_Config>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800dc12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	f003 0310 	and.w	r3, r3, #16
 800dc32:	60fb      	str	r3, [r7, #12]
 800dc34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	d011      	beq.n	800dc62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc42:	3328      	adds	r3, #40	; 0x28
 800dc44:	2101      	movs	r1, #1
 800dc46:	4618      	mov	r0, r3
 800dc48:	f001 fa7c 	bl	800f144 <RCCEx_PLL3_Config>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	6039      	str	r1, [r7, #0]
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	607b      	str	r3, [r7, #4]
 800dc74:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	d011      	beq.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc82:	3328      	adds	r3, #40	; 0x28
 800dc84:	2102      	movs	r1, #2
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 fa5c 	bl	800f144 <RCCEx_PLL3_Config>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dc92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d003      	beq.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800dca2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d101      	bne.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e000      	b.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcbc:	58024400 	.word	0x58024400

0800dcc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b090      	sub	sp, #64	; 0x40
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800dcca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800dcd2:	430b      	orrs	r3, r1
 800dcd4:	f040 8094 	bne.w	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800dcd8:	4b9e      	ldr	r3, [pc, #632]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcdc:	f003 0307 	and.w	r3, r3, #7
 800dce0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	2b04      	cmp	r3, #4
 800dce6:	f200 8087 	bhi.w	800ddf8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800dcea:	a201      	add	r2, pc, #4	; (adr r2, 800dcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800dcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf0:	0800dd05 	.word	0x0800dd05
 800dcf4:	0800dd2d 	.word	0x0800dd2d
 800dcf8:	0800dd55 	.word	0x0800dd55
 800dcfc:	0800ddf1 	.word	0x0800ddf1
 800dd00:	0800dd7d 	.word	0x0800dd7d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd04:	4b93      	ldr	r3, [pc, #588]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd10:	d108      	bne.n	800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd16:	4618      	mov	r0, r3
 800dd18:	f001 f810 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd20:	f000 bd45 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd28:	f000 bd41 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd2c:	4b89      	ldr	r3, [pc, #548]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd38:	d108      	bne.n	800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd3a:	f107 0318 	add.w	r3, r7, #24
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 fd54 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd48:	f000 bd31 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd50:	f000 bd2d 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd54:	4b7f      	ldr	r3, [pc, #508]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd60:	d108      	bne.n	800dd74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd62:	f107 030c 	add.w	r3, r7, #12
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 fe94 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd70:	f000 bd1d 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd78:	f000 bd19 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd7c:	4b75      	ldr	r3, [pc, #468]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd84:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd86:	4b73      	ldr	r3, [pc, #460]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0304 	and.w	r3, r3, #4
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d10c      	bne.n	800ddac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800dd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d109      	bne.n	800ddac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd98:	4b6e      	ldr	r3, [pc, #440]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	08db      	lsrs	r3, r3, #3
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	4a6d      	ldr	r2, [pc, #436]	; (800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800dda4:	fa22 f303 	lsr.w	r3, r2, r3
 800dda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddaa:	e01f      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ddac:	4b69      	ldr	r3, [pc, #420]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddb8:	d106      	bne.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ddc0:	d102      	bne.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ddc2:	4b66      	ldr	r3, [pc, #408]	; (800df5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ddc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddc6:	e011      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ddc8:	4b62      	ldr	r3, [pc, #392]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ddd4:	d106      	bne.n	800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ddd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dddc:	d102      	bne.n	800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ddde:	4b60      	ldr	r3, [pc, #384]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800dde0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dde2:	e003      	b.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dde8:	f000 bce1 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ddec:	f000 bcdf 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ddf0:	4b5c      	ldr	r3, [pc, #368]	; (800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ddf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddf4:	f000 bcdb 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddfc:	f000 bcd7 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800de00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de04:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800de08:	430b      	orrs	r3, r1
 800de0a:	f040 80ad 	bne.w	800df68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800de0e:	4b51      	ldr	r3, [pc, #324]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800de16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800de18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de1e:	d056      	beq.n	800dece <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800de20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de26:	f200 8090 	bhi.w	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	2bc0      	cmp	r3, #192	; 0xc0
 800de2e:	f000 8088 	beq.w	800df42 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	2bc0      	cmp	r3, #192	; 0xc0
 800de36:	f200 8088 	bhi.w	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3c:	2b80      	cmp	r3, #128	; 0x80
 800de3e:	d032      	beq.n	800dea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	2b80      	cmp	r3, #128	; 0x80
 800de44:	f200 8081 	bhi.w	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d003      	beq.n	800de56 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	2b40      	cmp	r3, #64	; 0x40
 800de52:	d014      	beq.n	800de7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800de54:	e079      	b.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de56:	4b3f      	ldr	r3, [pc, #252]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de62:	d108      	bne.n	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 ff67 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de72:	f000 bc9c 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7a:	f000 bc98 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de7e:	4b35      	ldr	r3, [pc, #212]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de8a:	d108      	bne.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de8c:	f107 0318 	add.w	r3, r7, #24
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fcab 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de9a:	f000 bc88 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de9e:	2300      	movs	r3, #0
 800dea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dea2:	f000 bc84 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dea6:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800deae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deb2:	d108      	bne.n	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deb4:	f107 030c 	add.w	r3, r7, #12
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 fdeb 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dec2:	f000 bc74 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deca:	f000 bc70 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dece:	4b21      	ldr	r3, [pc, #132]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ded0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ded2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ded6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ded8:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d10c      	bne.n	800defe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800dee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d109      	bne.n	800defe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800deea:	4b1a      	ldr	r3, [pc, #104]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	08db      	lsrs	r3, r3, #3
 800def0:	f003 0303 	and.w	r3, r3, #3
 800def4:	4a18      	ldr	r2, [pc, #96]	; (800df58 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800def6:	fa22 f303 	lsr.w	r3, r2, r3
 800defa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800defc:	e01f      	b.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800defe:	4b15      	ldr	r3, [pc, #84]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df0a:	d106      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800df0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df12:	d102      	bne.n	800df1a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df14:	4b11      	ldr	r3, [pc, #68]	; (800df5c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800df16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df18:	e011      	b.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df1a:	4b0e      	ldr	r3, [pc, #56]	; (800df54 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df26:	d106      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800df28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df2e:	d102      	bne.n	800df36 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800df30:	4b0b      	ldr	r3, [pc, #44]	; (800df60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800df32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df34:	e003      	b.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800df3a:	f000 bc38 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df3e:	f000 bc36 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df46:	f000 bc32 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800df4a:	2300      	movs	r3, #0
 800df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4e:	f000 bc2e 	b.w	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800df52:	bf00      	nop
 800df54:	58024400 	.word	0x58024400
 800df58:	03d09000 	.word	0x03d09000
 800df5c:	003d0900 	.word	0x003d0900
 800df60:	007a1200 	.word	0x007a1200
 800df64:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800df68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df6c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800df70:	430b      	orrs	r3, r1
 800df72:	f040 809c 	bne.w	800e0ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800df76:	4b9e      	ldr	r3, [pc, #632]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800df78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800df7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df86:	d054      	beq.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df8e:	f200 808b 	bhi.w	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800df98:	f000 8083 	beq.w	800e0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dfa2:	f200 8081 	bhi.w	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfac:	d02f      	beq.n	800e00e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfb4:	d878      	bhi.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfc2:	d012      	beq.n	800dfea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800dfc4:	e070      	b.n	800e0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dfc6:	4b8a      	ldr	r3, [pc, #552]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dfce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dfd2:	d107      	bne.n	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dfd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 feaf 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfe2:	e3e4      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfe8:	e3e1      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dfea:	4b81      	ldr	r3, [pc, #516]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dff6:	d107      	bne.n	800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dff8:	f107 0318 	add.w	r3, r7, #24
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 fbf5 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e006:	e3d2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e008:	2300      	movs	r3, #0
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e00c:	e3cf      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e00e:	4b78      	ldr	r3, [pc, #480]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e01a:	d107      	bne.n	800e02c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e01c:	f107 030c 	add.w	r3, r7, #12
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fd37 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e02a:	e3c0      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e030:	e3bd      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e032:	4b6f      	ldr	r3, [pc, #444]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e03a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e03c:	4b6c      	ldr	r3, [pc, #432]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b04      	cmp	r3, #4
 800e046:	d10c      	bne.n	800e062 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d109      	bne.n	800e062 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e04e:	4b68      	ldr	r3, [pc, #416]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	08db      	lsrs	r3, r3, #3
 800e054:	f003 0303 	and.w	r3, r3, #3
 800e058:	4a66      	ldr	r2, [pc, #408]	; (800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e05a:	fa22 f303 	lsr.w	r3, r2, r3
 800e05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e060:	e01e      	b.n	800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e062:	4b63      	ldr	r3, [pc, #396]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e06e:	d106      	bne.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e076:	d102      	bne.n	800e07e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e078:	4b5f      	ldr	r3, [pc, #380]	; (800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e07c:	e010      	b.n	800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e07e:	4b5c      	ldr	r3, [pc, #368]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e08a:	d106      	bne.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e092:	d102      	bne.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e094:	4b59      	ldr	r3, [pc, #356]	; (800e1fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e098:	e002      	b.n	800e0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e09e:	e386      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e0a0:	e385      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e0a2:	4b57      	ldr	r3, [pc, #348]	; (800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0a6:	e382      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ac:	e37f      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0b2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e0b6:	430b      	orrs	r3, r1
 800e0b8:	f040 80a7 	bne.w	800e20a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e0bc:	4b4c      	ldr	r3, [pc, #304]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e0c4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0cc:	d055      	beq.n	800e17a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0d4:	f200 8096 	bhi.w	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e0de:	f000 8084 	beq.w	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e0e8:	f200 808c 	bhi.w	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0f2:	d030      	beq.n	800e156 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0fa:	f200 8083 	bhi.w	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e100:	2b00      	cmp	r3, #0
 800e102:	d004      	beq.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e10a:	d012      	beq.n	800e132 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e10c:	e07a      	b.n	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e10e:	4b38      	ldr	r3, [pc, #224]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e11a:	d107      	bne.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e11c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e120:	4618      	mov	r0, r3
 800e122:	f000 fe0b 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e12a:	e340      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e130:	e33d      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e132:	4b2f      	ldr	r3, [pc, #188]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e13a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e13e:	d107      	bne.n	800e150 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e140:	f107 0318 	add.w	r3, r7, #24
 800e144:	4618      	mov	r0, r3
 800e146:	f000 fb51 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e14e:	e32e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e150:	2300      	movs	r3, #0
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e154:	e32b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e156:	4b26      	ldr	r3, [pc, #152]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e15e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e162:	d107      	bne.n	800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e164:	f107 030c 	add.w	r3, r7, #12
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 fc93 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e172:	e31c      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e178:	e319      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e17a:	4b1d      	ldr	r3, [pc, #116]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e17e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e182:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e184:	4b1a      	ldr	r3, [pc, #104]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 0304 	and.w	r3, r3, #4
 800e18c:	2b04      	cmp	r3, #4
 800e18e:	d10c      	bne.n	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e196:	4b16      	ldr	r3, [pc, #88]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	08db      	lsrs	r3, r3, #3
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	4a14      	ldr	r2, [pc, #80]	; (800e1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1a8:	e01e      	b.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e1aa:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1b6:	d106      	bne.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1be:	d102      	bne.n	800e1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e1c0:	4b0d      	ldr	r3, [pc, #52]	; (800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1c4:	e010      	b.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e1c6:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1d2:	d106      	bne.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1da:	d102      	bne.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e1dc:	4b07      	ldr	r3, [pc, #28]	; (800e1fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1e0:	e002      	b.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e1e6:	e2e2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e1e8:	e2e1      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e1ea:	4b05      	ldr	r3, [pc, #20]	; (800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ee:	e2de      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e1f0:	58024400 	.word	0x58024400
 800e1f4:	03d09000 	.word	0x03d09000
 800e1f8:	003d0900 	.word	0x003d0900
 800e1fc:	007a1200 	.word	0x007a1200
 800e200:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e208:	e2d1      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e20e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e212:	430b      	orrs	r3, r1
 800e214:	f040 809c 	bne.w	800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e218:	4b93      	ldr	r3, [pc, #588]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e21c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e220:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e228:	d054      	beq.n	800e2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e230:	f200 808b 	bhi.w	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e23a:	f000 8083 	beq.w	800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e244:	f200 8081 	bhi.w	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e24e:	d02f      	beq.n	800e2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e256:	d878      	bhi.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d004      	beq.n	800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e264:	d012      	beq.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e266:	e070      	b.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e268:	4b7f      	ldr	r3, [pc, #508]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e274:	d107      	bne.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fd5e 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e284:	e293      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e28a:	e290      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e28c:	4b76      	ldr	r3, [pc, #472]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e298:	d107      	bne.n	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e29a:	f107 0318 	add.w	r3, r7, #24
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 faa4 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2a8:	e281      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ae:	e27e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e2b0:	4b6d      	ldr	r3, [pc, #436]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2bc:	d107      	bne.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2be:	f107 030c 	add.w	r3, r7, #12
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 fbe6 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2cc:	e26f      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2d2:	e26c      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e2d4:	4b64      	ldr	r3, [pc, #400]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e2dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e2de:	4b62      	ldr	r3, [pc, #392]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0304 	and.w	r3, r3, #4
 800e2e6:	2b04      	cmp	r3, #4
 800e2e8:	d10c      	bne.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e2f0:	4b5d      	ldr	r3, [pc, #372]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	08db      	lsrs	r3, r3, #3
 800e2f6:	f003 0303 	and.w	r3, r3, #3
 800e2fa:	4a5c      	ldr	r2, [pc, #368]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e2fc:	fa22 f303 	lsr.w	r3, r2, r3
 800e300:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e302:	e01e      	b.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e304:	4b58      	ldr	r3, [pc, #352]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e310:	d106      	bne.n	800e320 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e318:	d102      	bne.n	800e320 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e31a:	4b55      	ldr	r3, [pc, #340]	; (800e470 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e31c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e31e:	e010      	b.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e320:	4b51      	ldr	r3, [pc, #324]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e32c:	d106      	bne.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e334:	d102      	bne.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e336:	4b4f      	ldr	r3, [pc, #316]	; (800e474 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e33a:	e002      	b.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e33c:	2300      	movs	r3, #0
 800e33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e340:	e235      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e342:	e234      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e344:	4b4c      	ldr	r3, [pc, #304]	; (800e478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e348:	e231      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e34e:	e22e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e354:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e358:	430b      	orrs	r3, r1
 800e35a:	f040 808f 	bne.w	800e47c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e35e:	4b42      	ldr	r3, [pc, #264]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e362:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e366:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e36e:	d06b      	beq.n	800e448 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e376:	d874      	bhi.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e37e:	d056      	beq.n	800e42e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e386:	d86c      	bhi.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e38e:	d03b      	beq.n	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e396:	d864      	bhi.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e39e:	d021      	beq.n	800e3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3a6:	d85c      	bhi.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d004      	beq.n	800e3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3b4:	d004      	beq.n	800e3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e3b6:	e054      	b.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e3b8:	f7fe fa4c 	bl	800c854 <HAL_RCC_GetPCLK1Freq>
 800e3bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3be:	e1f6      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e3c0:	4b29      	ldr	r3, [pc, #164]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3cc:	d107      	bne.n	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3ce:	f107 0318 	add.w	r3, r7, #24
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 fa0a 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3dc:	e1e7      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3e2:	e1e4      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e3e4:	4b20      	ldr	r3, [pc, #128]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3f0:	d107      	bne.n	800e402 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3f2:	f107 030c 	add.w	r3, r7, #12
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 fb4c 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e400:	e1d5      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e402:	2300      	movs	r3, #0
 800e404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e406:	e1d2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e408:	4b17      	ldr	r3, [pc, #92]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f003 0304 	and.w	r3, r3, #4
 800e410:	2b04      	cmp	r3, #4
 800e412:	d109      	bne.n	800e428 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e414:	4b14      	ldr	r3, [pc, #80]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	08db      	lsrs	r3, r3, #3
 800e41a:	f003 0303 	and.w	r3, r3, #3
 800e41e:	4a13      	ldr	r2, [pc, #76]	; (800e46c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e420:	fa22 f303 	lsr.w	r3, r2, r3
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e426:	e1c2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e42c:	e1bf      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e42e:	4b0e      	ldr	r3, [pc, #56]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e43a:	d102      	bne.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e43c:	4b0c      	ldr	r3, [pc, #48]	; (800e470 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e440:	e1b5      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e446:	e1b2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e448:	4b07      	ldr	r3, [pc, #28]	; (800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e454:	d102      	bne.n	800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e456:	4b07      	ldr	r3, [pc, #28]	; (800e474 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e45a:	e1a8      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e460:	e1a5      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e466:	e1a2      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e468:	58024400 	.word	0x58024400
 800e46c:	03d09000 	.word	0x03d09000
 800e470:	003d0900 	.word	0x003d0900
 800e474:	007a1200 	.word	0x007a1200
 800e478:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e480:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e484:	430b      	orrs	r3, r1
 800e486:	d173      	bne.n	800e570 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e488:	4b9c      	ldr	r3, [pc, #624]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e490:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e498:	d02f      	beq.n	800e4fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e4a0:	d863      	bhi.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4ae:	d012      	beq.n	800e4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e4b0:	e05b      	b.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4b2:	4b92      	ldr	r3, [pc, #584]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4c0:	f107 0318 	add.w	r3, r7, #24
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 f991 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4ce:	e16e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d4:	e16b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4d6:	4b89      	ldr	r3, [pc, #548]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4e2:	d107      	bne.n	800e4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4e4:	f107 030c 	add.w	r3, r7, #12
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 fad3 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4f2:	e15c      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4f8:	e159      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4fa:	4b80      	ldr	r3, [pc, #512]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e502:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e504:	4b7d      	ldr	r3, [pc, #500]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f003 0304 	and.w	r3, r3, #4
 800e50c:	2b04      	cmp	r3, #4
 800e50e:	d10c      	bne.n	800e52a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e512:	2b00      	cmp	r3, #0
 800e514:	d109      	bne.n	800e52a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e516:	4b79      	ldr	r3, [pc, #484]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	08db      	lsrs	r3, r3, #3
 800e51c:	f003 0303 	and.w	r3, r3, #3
 800e520:	4a77      	ldr	r2, [pc, #476]	; (800e700 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e522:	fa22 f303 	lsr.w	r3, r2, r3
 800e526:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e528:	e01e      	b.n	800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e52a:	4b74      	ldr	r3, [pc, #464]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e536:	d106      	bne.n	800e546 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e53e:	d102      	bne.n	800e546 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e540:	4b70      	ldr	r3, [pc, #448]	; (800e704 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e542:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e544:	e010      	b.n	800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e546:	4b6d      	ldr	r3, [pc, #436]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e54e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e552:	d106      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e55a:	d102      	bne.n	800e562 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e55c:	4b6a      	ldr	r3, [pc, #424]	; (800e708 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e55e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e560:	e002      	b.n	800e568 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e566:	e122      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e568:	e121      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e56e:	e11e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e574:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e578:	430b      	orrs	r3, r1
 800e57a:	d133      	bne.n	800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e57c:	4b5f      	ldr	r3, [pc, #380]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e584:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d004      	beq.n	800e596 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e592:	d012      	beq.n	800e5ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e594:	e023      	b.n	800e5de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e596:	4b59      	ldr	r3, [pc, #356]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e59e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5a2:	d107      	bne.n	800e5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 fbc7 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5b2:	e0fc      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5b8:	e0f9      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5ba:	4b50      	ldr	r3, [pc, #320]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5c6:	d107      	bne.n	800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5c8:	f107 0318 	add.w	r3, r7, #24
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 f90d 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e5d2:	6a3b      	ldr	r3, [r7, #32]
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5d6:	e0ea      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5dc:	e0e7      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5e2:	e0e4      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e5e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5e8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e5ec:	430b      	orrs	r3, r1
 800e5ee:	f040 808d 	bne.w	800e70c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e5f2:	4b42      	ldr	r3, [pc, #264]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e5fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e602:	d06b      	beq.n	800e6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e60a:	d874      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e612:	d056      	beq.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e61a:	d86c      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e622:	d03b      	beq.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e626:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e62a:	d864      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e632:	d021      	beq.n	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e63a:	d85c      	bhi.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e648:	d004      	beq.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e64a:	e054      	b.n	800e6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e64c:	f000 f8b8 	bl	800e7c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e650:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e652:	e0ac      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e654:	4b29      	ldr	r3, [pc, #164]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e65c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e660:	d107      	bne.n	800e672 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e662:	f107 0318 	add.w	r3, r7, #24
 800e666:	4618      	mov	r0, r3
 800e668:	f000 f8c0 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e670:	e09d      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e676:	e09a      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e678:	4b20      	ldr	r3, [pc, #128]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e684:	d107      	bne.n	800e696 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e686:	f107 030c 	add.w	r3, r7, #12
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 fa02 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e694:	e08b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e69a:	e088      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e69c:	4b17      	ldr	r3, [pc, #92]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d109      	bne.n	800e6bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e6a8:	4b14      	ldr	r3, [pc, #80]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	08db      	lsrs	r3, r3, #3
 800e6ae:	f003 0303 	and.w	r3, r3, #3
 800e6b2:	4a13      	ldr	r2, [pc, #76]	; (800e700 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800e6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6ba:	e078      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6c0:	e075      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e6c2:	4b0e      	ldr	r3, [pc, #56]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ce:	d102      	bne.n	800e6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800e6d0:	4b0c      	ldr	r3, [pc, #48]	; (800e704 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6d4:	e06b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6da:	e068      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e6dc:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e6e8:	d102      	bne.n	800e6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800e6ea:	4b07      	ldr	r3, [pc, #28]	; (800e708 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e6ee:	e05e      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f4:	e05b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6fa:	e058      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e6fc:	58024400 	.word	0x58024400
 800e700:	03d09000 	.word	0x03d09000
 800e704:	003d0900 	.word	0x003d0900
 800e708:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e70c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e710:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e714:	430b      	orrs	r3, r1
 800e716:	d148      	bne.n	800e7aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e718:	4b27      	ldr	r3, [pc, #156]	; (800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e71c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e720:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e728:	d02a      	beq.n	800e780 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e730:	d838      	bhi.n	800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e73e:	d00d      	beq.n	800e75c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e740:	e030      	b.n	800e7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e742:	4b1d      	ldr	r3, [pc, #116]	; (800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e74a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e74e:	d102      	bne.n	800e756 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e750:	4b1a      	ldr	r3, [pc, #104]	; (800e7bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e752:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e754:	e02b      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75a:	e028      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e75c:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e768:	d107      	bne.n	800e77a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 fae4 	bl	800ed3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e778:	e019      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e77e:	e016      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e780:	4b0d      	ldr	r3, [pc, #52]	; (800e7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e78c:	d107      	bne.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e78e:	f107 0318 	add.w	r3, r7, #24
 800e792:	4618      	mov	r0, r3
 800e794:	f000 f82a 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e79c:	e007      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a2:	e004      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a8:	e001      	b.n	800e7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3740      	adds	r7, #64	; 0x40
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	58024400 	.word	0x58024400
 800e7bc:	007a1200 	.word	0x007a1200

0800e7c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e7c4:	f7fe f816 	bl	800c7f4 <HAL_RCC_GetHCLKFreq>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	4b06      	ldr	r3, [pc, #24]	; (800e7e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	091b      	lsrs	r3, r3, #4
 800e7d0:	f003 0307 	and.w	r3, r3, #7
 800e7d4:	4904      	ldr	r1, [pc, #16]	; (800e7e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e7d6:	5ccb      	ldrb	r3, [r1, r3]
 800e7d8:	f003 031f 	and.w	r3, r3, #31
 800e7dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	58024400 	.word	0x58024400
 800e7e8:	0801c6a8 	.word	0x0801c6a8

0800e7ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b089      	sub	sp, #36	; 0x24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7f4:	4ba1      	ldr	r3, [pc, #644]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f8:	f003 0303 	and.w	r3, r3, #3
 800e7fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e7fe:	4b9f      	ldr	r3, [pc, #636]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e802:	0b1b      	lsrs	r3, r3, #12
 800e804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e808:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e80a:	4b9c      	ldr	r3, [pc, #624]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	091b      	lsrs	r3, r3, #4
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e816:	4b99      	ldr	r3, [pc, #612]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e81a:	08db      	lsrs	r3, r3, #3
 800e81c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	fb02 f303 	mul.w	r3, r2, r3
 800e826:	ee07 3a90 	vmov	s15, r3
 800e82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e82e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8111 	beq.w	800ea5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	f000 8083 	beq.w	800e948 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	2b02      	cmp	r3, #2
 800e846:	f200 80a1 	bhi.w	800e98c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d003      	beq.n	800e858 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d056      	beq.n	800e904 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e856:	e099      	b.n	800e98c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e858:	4b88      	ldr	r3, [pc, #544]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f003 0320 	and.w	r3, r3, #32
 800e860:	2b00      	cmp	r3, #0
 800e862:	d02d      	beq.n	800e8c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e864:	4b85      	ldr	r3, [pc, #532]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	08db      	lsrs	r3, r3, #3
 800e86a:	f003 0303 	and.w	r3, r3, #3
 800e86e:	4a84      	ldr	r2, [pc, #528]	; (800ea80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e870:	fa22 f303 	lsr.w	r3, r2, r3
 800e874:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	ee07 3a90 	vmov	s15, r3
 800e87c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	ee07 3a90 	vmov	s15, r3
 800e886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e88e:	4b7b      	ldr	r3, [pc, #492]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e896:	ee07 3a90 	vmov	s15, r3
 800e89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e8be:	e087      	b.n	800e9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	ee07 3a90 	vmov	s15, r3
 800e8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ea88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8d2:	4b6a      	ldr	r3, [pc, #424]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e902:	e065      	b.n	800e9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	ee07 3a90 	vmov	s15, r3
 800e90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e90e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ea8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e916:	4b59      	ldr	r3, [pc, #356]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91e:	ee07 3a90 	vmov	s15, r3
 800e922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e926:	ed97 6a03 	vldr	s12, [r7, #12]
 800e92a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e946:	e043      	b.n	800e9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ea90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e95a:	4b48      	ldr	r3, [pc, #288]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e962:	ee07 3a90 	vmov	s15, r3
 800e966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e96a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e96e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e97a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e98a:	e021      	b.n	800e9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ea8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e99e:	4b37      	ldr	r3, [pc, #220]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ea84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e9d0:	4b2a      	ldr	r3, [pc, #168]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d4:	0a5b      	lsrs	r3, r3, #9
 800e9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9da:	ee07 3a90 	vmov	s15, r3
 800e9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9f6:	ee17 2a90 	vmov	r2, s15
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e9fe:	4b1f      	ldr	r3, [pc, #124]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea02:	0c1b      	lsrs	r3, r3, #16
 800ea04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea08:	ee07 3a90 	vmov	s15, r3
 800ea0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea24:	ee17 2a90 	vmov	r2, s15
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ea2c:	4b13      	ldr	r3, [pc, #76]	; (800ea7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea30:	0e1b      	lsrs	r3, r3, #24
 800ea32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea36:	ee07 3a90 	vmov	s15, r3
 800ea3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea52:	ee17 2a90 	vmov	r2, s15
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ea5a:	e008      	b.n	800ea6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	609a      	str	r2, [r3, #8]
}
 800ea6e:	bf00      	nop
 800ea70:	3724      	adds	r7, #36	; 0x24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	58024400 	.word	0x58024400
 800ea80:	03d09000 	.word	0x03d09000
 800ea84:	46000000 	.word	0x46000000
 800ea88:	4c742400 	.word	0x4c742400
 800ea8c:	4a742400 	.word	0x4a742400
 800ea90:	4af42400 	.word	0x4af42400

0800ea94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b089      	sub	sp, #36	; 0x24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ea9c:	4ba1      	ldr	r3, [pc, #644]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa0:	f003 0303 	and.w	r3, r3, #3
 800eaa4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800eaa6:	4b9f      	ldr	r3, [pc, #636]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaaa:	0d1b      	lsrs	r3, r3, #20
 800eaac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eab0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800eab2:	4b9c      	ldr	r3, [pc, #624]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab6:	0a1b      	lsrs	r3, r3, #8
 800eab8:	f003 0301 	and.w	r3, r3, #1
 800eabc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800eabe:	4b99      	ldr	r3, [pc, #612]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eac2:	08db      	lsrs	r3, r3, #3
 800eac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eac8:	693a      	ldr	r2, [r7, #16]
 800eaca:	fb02 f303 	mul.w	r3, r2, r3
 800eace:	ee07 3a90 	vmov	s15, r3
 800ead2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ead6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 8111 	beq.w	800ed04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	f000 8083 	beq.w	800ebf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	f200 80a1 	bhi.w	800ec34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d003      	beq.n	800eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d056      	beq.n	800ebac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800eafe:	e099      	b.n	800ec34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb00:	4b88      	ldr	r3, [pc, #544]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 0320 	and.w	r3, r3, #32
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d02d      	beq.n	800eb68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb0c:	4b85      	ldr	r3, [pc, #532]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	08db      	lsrs	r3, r3, #3
 800eb12:	f003 0303 	and.w	r3, r3, #3
 800eb16:	4a84      	ldr	r2, [pc, #528]	; (800ed28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800eb18:	fa22 f303 	lsr.w	r3, r2, r3
 800eb1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	ee07 3a90 	vmov	s15, r3
 800eb24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	ee07 3a90 	vmov	s15, r3
 800eb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb36:	4b7b      	ldr	r3, [pc, #492]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3e:	ee07 3a90 	vmov	s15, r3
 800eb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb46:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eb66:	e087      	b.n	800ec78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	ee07 3a90 	vmov	s15, r3
 800eb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ed30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800eb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb7a:	4b6a      	ldr	r3, [pc, #424]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb82:	ee07 3a90 	vmov	s15, r3
 800eb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebaa:	e065      	b.n	800ec78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	ee07 3a90 	vmov	s15, r3
 800ebb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ed34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ebba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebbe:	4b59      	ldr	r3, [pc, #356]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebc6:	ee07 3a90 	vmov	s15, r3
 800ebca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebce:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebd2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ebd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebee:	e043      	b.n	800ec78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	ee07 3a90 	vmov	s15, r3
 800ebf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ed38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ebfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec02:	4b48      	ldr	r3, [pc, #288]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec0a:	ee07 3a90 	vmov	s15, r3
 800ec0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec16:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec32:	e021      	b.n	800ec78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	ee07 3a90 	vmov	s15, r3
 800ec3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ed34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ec42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec46:	4b37      	ldr	r3, [pc, #220]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec4e:	ee07 3a90 	vmov	s15, r3
 800ec52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ec78:	4b2a      	ldr	r3, [pc, #168]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec7c:	0a5b      	lsrs	r3, r3, #9
 800ec7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec82:	ee07 3a90 	vmov	s15, r3
 800ec86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec92:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec9e:	ee17 2a90 	vmov	r2, s15
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800eca6:	4b1f      	ldr	r3, [pc, #124]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecaa:	0c1b      	lsrs	r3, r3, #16
 800ecac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ecc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eccc:	ee17 2a90 	vmov	r2, s15
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ecd4:	4b13      	ldr	r3, [pc, #76]	; (800ed24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ecd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd8:	0e1b      	lsrs	r3, r3, #24
 800ecda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecde:	ee07 3a90 	vmov	s15, r3
 800ece2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ece6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ecee:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecfa:	ee17 2a90 	vmov	r2, s15
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ed02:	e008      	b.n	800ed16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	609a      	str	r2, [r3, #8]
}
 800ed16:	bf00      	nop
 800ed18:	3724      	adds	r7, #36	; 0x24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	58024400 	.word	0x58024400
 800ed28:	03d09000 	.word	0x03d09000
 800ed2c:	46000000 	.word	0x46000000
 800ed30:	4c742400 	.word	0x4c742400
 800ed34:	4a742400 	.word	0x4a742400
 800ed38:	4af42400 	.word	0x4af42400

0800ed3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b089      	sub	sp, #36	; 0x24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ed44:	4ba0      	ldr	r3, [pc, #640]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed48:	f003 0303 	and.w	r3, r3, #3
 800ed4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ed4e:	4b9e      	ldr	r3, [pc, #632]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed52:	091b      	lsrs	r3, r3, #4
 800ed54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ed5a:	4b9b      	ldr	r3, [pc, #620]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ed64:	4b98      	ldr	r3, [pc, #608]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ed66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed68:	08db      	lsrs	r3, r3, #3
 800ed6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	fb02 f303 	mul.w	r3, r2, r3
 800ed74:	ee07 3a90 	vmov	s15, r3
 800ed78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f000 8111 	beq.w	800efaa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	f000 8083 	beq.w	800ee96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	f200 80a1 	bhi.w	800eeda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d056      	beq.n	800ee52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800eda4:	e099      	b.n	800eeda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eda6:	4b88      	ldr	r3, [pc, #544]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d02d      	beq.n	800ee0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edb2:	4b85      	ldr	r3, [pc, #532]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	08db      	lsrs	r3, r3, #3
 800edb8:	f003 0303 	and.w	r3, r3, #3
 800edbc:	4a83      	ldr	r2, [pc, #524]	; (800efcc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800edbe:	fa22 f303 	lsr.w	r3, r2, r3
 800edc2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	ee07 3a90 	vmov	s15, r3
 800edca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	ee07 3a90 	vmov	s15, r3
 800edd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eddc:	4b7a      	ldr	r3, [pc, #488]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800edde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede4:	ee07 3a90 	vmov	s15, r3
 800ede8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edec:	ed97 6a03 	vldr	s12, [r7, #12]
 800edf0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800efd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800edf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee08:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ee0c:	e087      	b.n	800ef1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	ee07 3a90 	vmov	s15, r3
 800ee14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800efd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ee1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee20:	4b69      	ldr	r3, [pc, #420]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee28:	ee07 3a90 	vmov	s15, r3
 800ee2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee34:	eddf 5a66 	vldr	s11, [pc, #408]	; 800efd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ee38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee50:	e065      	b.n	800ef1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	ee07 3a90 	vmov	s15, r3
 800ee58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800efd8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ee60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee64:	4b58      	ldr	r3, [pc, #352]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee6c:	ee07 3a90 	vmov	s15, r3
 800ee70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee74:	ed97 6a03 	vldr	s12, [r7, #12]
 800ee78:	eddf 5a55 	vldr	s11, [pc, #340]	; 800efd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ee7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee94:	e043      	b.n	800ef1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	ee07 3a90 	vmov	s15, r3
 800ee9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800efdc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800eea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eea8:	4b47      	ldr	r3, [pc, #284]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eeb0:	ee07 3a90 	vmov	s15, r3
 800eeb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800eebc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800efd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eed8:	e021      	b.n	800ef1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	ee07 3a90 	vmov	s15, r3
 800eee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eee4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800efd4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeec:	4b36      	ldr	r3, [pc, #216]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eeee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eef4:	ee07 3a90 	vmov	s15, r3
 800eef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eefc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef00:	eddf 5a33 	vldr	s11, [pc, #204]	; 800efd0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ef1e:	4b2a      	ldr	r3, [pc, #168]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef22:	0a5b      	lsrs	r3, r3, #9
 800ef24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef28:	ee07 3a90 	vmov	s15, r3
 800ef2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef44:	ee17 2a90 	vmov	r2, s15
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ef4c:	4b1e      	ldr	r3, [pc, #120]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef50:	0c1b      	lsrs	r3, r3, #16
 800ef52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef56:	ee07 3a90 	vmov	s15, r3
 800ef5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ef72:	ee17 2a90 	vmov	r2, s15
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ef7a:	4b13      	ldr	r3, [pc, #76]	; (800efc8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef7e:	0e1b      	lsrs	r3, r3, #24
 800ef80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef84:	ee07 3a90 	vmov	s15, r3
 800ef88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ef94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ef98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efa0:	ee17 2a90 	vmov	r2, s15
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800efa8:	e008      	b.n	800efbc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	609a      	str	r2, [r3, #8]
}
 800efbc:	bf00      	nop
 800efbe:	3724      	adds	r7, #36	; 0x24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	58024400 	.word	0x58024400
 800efcc:	03d09000 	.word	0x03d09000
 800efd0:	46000000 	.word	0x46000000
 800efd4:	4c742400 	.word	0x4c742400
 800efd8:	4a742400 	.word	0x4a742400
 800efdc:	4af42400 	.word	0x4af42400

0800efe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800efee:	4b53      	ldr	r3, [pc, #332]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800eff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	2b03      	cmp	r3, #3
 800eff8:	d101      	bne.n	800effe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	e099      	b.n	800f132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800effe:	4b4f      	ldr	r3, [pc, #316]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a4e      	ldr	r2, [pc, #312]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f004:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f00a:	f7f5 fef5 	bl	8004df8 <HAL_GetTick>
 800f00e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f010:	e008      	b.n	800f024 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f012:	f7f5 fef1 	bl	8004df8 <HAL_GetTick>
 800f016:	4602      	mov	r2, r0
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	d901      	bls.n	800f024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f020:	2303      	movs	r3, #3
 800f022:	e086      	b.n	800f132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f024:	4b45      	ldr	r3, [pc, #276]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1f0      	bne.n	800f012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f030:	4b42      	ldr	r3, [pc, #264]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f034:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	031b      	lsls	r3, r3, #12
 800f03e:	493f      	ldr	r1, [pc, #252]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f040:	4313      	orrs	r3, r2
 800f042:	628b      	str	r3, [r1, #40]	; 0x28
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	3b01      	subs	r3, #1
 800f04a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	3b01      	subs	r3, #1
 800f054:	025b      	lsls	r3, r3, #9
 800f056:	b29b      	uxth	r3, r3
 800f058:	431a      	orrs	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	3b01      	subs	r3, #1
 800f060:	041b      	lsls	r3, r3, #16
 800f062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f066:	431a      	orrs	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	061b      	lsls	r3, r3, #24
 800f070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f074:	4931      	ldr	r1, [pc, #196]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f076:	4313      	orrs	r3, r2
 800f078:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f07a:	4b30      	ldr	r3, [pc, #192]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	492d      	ldr	r1, [pc, #180]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f088:	4313      	orrs	r3, r2
 800f08a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f08c:	4b2b      	ldr	r3, [pc, #172]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f090:	f023 0220 	bic.w	r2, r3, #32
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	699b      	ldr	r3, [r3, #24]
 800f098:	4928      	ldr	r1, [pc, #160]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f09a:	4313      	orrs	r3, r2
 800f09c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f09e:	4b27      	ldr	r3, [pc, #156]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a2:	4a26      	ldr	r2, [pc, #152]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0a4:	f023 0310 	bic.w	r3, r3, #16
 800f0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f0aa:	4b24      	ldr	r3, [pc, #144]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0ae:	4b24      	ldr	r3, [pc, #144]	; (800f140 <RCCEx_PLL2_Config+0x160>)
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	69d2      	ldr	r2, [r2, #28]
 800f0b6:	00d2      	lsls	r2, r2, #3
 800f0b8:	4920      	ldr	r1, [pc, #128]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f0be:	4b1f      	ldr	r3, [pc, #124]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c2:	4a1e      	ldr	r2, [pc, #120]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0c4:	f043 0310 	orr.w	r3, r3, #16
 800f0c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d106      	bne.n	800f0de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f0d0:	4b1a      	ldr	r3, [pc, #104]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d4:	4a19      	ldr	r2, [pc, #100]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f0dc:	e00f      	b.n	800f0fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d106      	bne.n	800f0f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f0e4:	4b15      	ldr	r3, [pc, #84]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e8:	4a14      	ldr	r2, [pc, #80]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f0f0:	e005      	b.n	800f0fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f0f2:	4b12      	ldr	r3, [pc, #72]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f6:	4a11      	ldr	r2, [pc, #68]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f0f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f0fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f0fe:	4b0f      	ldr	r3, [pc, #60]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a0e      	ldr	r2, [pc, #56]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f10a:	f7f5 fe75 	bl	8004df8 <HAL_GetTick>
 800f10e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f110:	e008      	b.n	800f124 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f112:	f7f5 fe71 	bl	8004df8 <HAL_GetTick>
 800f116:	4602      	mov	r2, r0
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d901      	bls.n	800f124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f120:	2303      	movs	r3, #3
 800f122:	e006      	b.n	800f132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f124:	4b05      	ldr	r3, [pc, #20]	; (800f13c <RCCEx_PLL2_Config+0x15c>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0f0      	beq.n	800f112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f130:	7bfb      	ldrb	r3, [r7, #15]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	58024400 	.word	0x58024400
 800f140:	ffff0007 	.word	0xffff0007

0800f144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f152:	4b53      	ldr	r3, [pc, #332]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f156:	f003 0303 	and.w	r3, r3, #3
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d101      	bne.n	800f162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	e099      	b.n	800f296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f162:	4b4f      	ldr	r3, [pc, #316]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a4e      	ldr	r2, [pc, #312]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f16c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f16e:	f7f5 fe43 	bl	8004df8 <HAL_GetTick>
 800f172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f174:	e008      	b.n	800f188 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f176:	f7f5 fe3f 	bl	8004df8 <HAL_GetTick>
 800f17a:	4602      	mov	r2, r0
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	2b02      	cmp	r3, #2
 800f182:	d901      	bls.n	800f188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f184:	2303      	movs	r3, #3
 800f186:	e086      	b.n	800f296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f188:	4b45      	ldr	r3, [pc, #276]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1f0      	bne.n	800f176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f194:	4b42      	ldr	r3, [pc, #264]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f198:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	051b      	lsls	r3, r3, #20
 800f1a2:	493f      	ldr	r1, [pc, #252]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	628b      	str	r3, [r1, #40]	; 0x28
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	025b      	lsls	r3, r3, #9
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	431a      	orrs	r2, r3
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	041b      	lsls	r3, r3, #16
 800f1c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	061b      	lsls	r3, r3, #24
 800f1d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f1d8:	4931      	ldr	r1, [pc, #196]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f1de:	4b30      	ldr	r3, [pc, #192]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	492d      	ldr	r1, [pc, #180]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f1f0:	4b2b      	ldr	r3, [pc, #172]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	4928      	ldr	r1, [pc, #160]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f1fe:	4313      	orrs	r3, r2
 800f200:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f202:	4b27      	ldr	r3, [pc, #156]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f206:	4a26      	ldr	r2, [pc, #152]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f20e:	4b24      	ldr	r3, [pc, #144]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f212:	4b24      	ldr	r3, [pc, #144]	; (800f2a4 <RCCEx_PLL3_Config+0x160>)
 800f214:	4013      	ands	r3, r2
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	69d2      	ldr	r2, [r2, #28]
 800f21a:	00d2      	lsls	r2, r2, #3
 800f21c:	4920      	ldr	r1, [pc, #128]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f21e:	4313      	orrs	r3, r2
 800f220:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f222:	4b1f      	ldr	r3, [pc, #124]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f226:	4a1e      	ldr	r2, [pc, #120]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f22c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d106      	bne.n	800f242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f234:	4b1a      	ldr	r3, [pc, #104]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f238:	4a19      	ldr	r2, [pc, #100]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f23a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f23e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f240:	e00f      	b.n	800f262 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d106      	bne.n	800f256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f248:	4b15      	ldr	r3, [pc, #84]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f24c:	4a14      	ldr	r2, [pc, #80]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f24e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f252:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f254:	e005      	b.n	800f262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f256:	4b12      	ldr	r3, [pc, #72]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25a:	4a11      	ldr	r2, [pc, #68]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f25c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f260:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f262:	4b0f      	ldr	r3, [pc, #60]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a0e      	ldr	r2, [pc, #56]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f26e:	f7f5 fdc3 	bl	8004df8 <HAL_GetTick>
 800f272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f274:	e008      	b.n	800f288 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f276:	f7f5 fdbf 	bl	8004df8 <HAL_GetTick>
 800f27a:	4602      	mov	r2, r0
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	2b02      	cmp	r3, #2
 800f282:	d901      	bls.n	800f288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f284:	2303      	movs	r3, #3
 800f286:	e006      	b.n	800f296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f288:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <RCCEx_PLL3_Config+0x15c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d0f0      	beq.n	800f276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f294:	7bfb      	ldrb	r3, [r7, #15]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	58024400 	.word	0x58024400
 800f2a4:	ffff0007 	.word	0xffff0007

0800f2a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e049      	b.n	800f34e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d106      	bne.n	800f2d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7f2 fb00 	bl	80018d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2202      	movs	r2, #2
 800f2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3304      	adds	r3, #4
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	f000 fafe 	bl	800f8e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2201      	movs	r2, #1
 800f310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f34c:	2300      	movs	r3, #0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f366:	b2db      	uxtb	r3, r3
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d001      	beq.n	800f370 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f36c:	2301      	movs	r3, #1
 800f36e:	e04c      	b.n	800f40a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2202      	movs	r2, #2
 800f374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a26      	ldr	r2, [pc, #152]	; (800f418 <HAL_TIM_Base_Start+0xc0>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d022      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f38a:	d01d      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a22      	ldr	r2, [pc, #136]	; (800f41c <HAL_TIM_Base_Start+0xc4>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d018      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a21      	ldr	r2, [pc, #132]	; (800f420 <HAL_TIM_Base_Start+0xc8>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d013      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a1f      	ldr	r2, [pc, #124]	; (800f424 <HAL_TIM_Base_Start+0xcc>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d00e      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a1e      	ldr	r2, [pc, #120]	; (800f428 <HAL_TIM_Base_Start+0xd0>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d009      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a1c      	ldr	r2, [pc, #112]	; (800f42c <HAL_TIM_Base_Start+0xd4>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d004      	beq.n	800f3c8 <HAL_TIM_Base_Start+0x70>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a1b      	ldr	r2, [pc, #108]	; (800f430 <HAL_TIM_Base_Start+0xd8>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d115      	bne.n	800f3f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	689a      	ldr	r2, [r3, #8]
 800f3ce:	4b19      	ldr	r3, [pc, #100]	; (800f434 <HAL_TIM_Base_Start+0xdc>)
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2b06      	cmp	r3, #6
 800f3d8:	d015      	beq.n	800f406 <HAL_TIM_Base_Start+0xae>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e0:	d011      	beq.n	800f406 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f042 0201 	orr.w	r2, r2, #1
 800f3f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3f2:	e008      	b.n	800f406 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f042 0201 	orr.w	r2, r2, #1
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	e000      	b.n	800f408 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	40010000 	.word	0x40010000
 800f41c:	40000400 	.word	0x40000400
 800f420:	40000800 	.word	0x40000800
 800f424:	40000c00 	.word	0x40000c00
 800f428:	40010400 	.word	0x40010400
 800f42c:	40001800 	.word	0x40001800
 800f430:	40014000 	.word	0x40014000
 800f434:	00010007 	.word	0x00010007

0800f438 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6a1a      	ldr	r2, [r3, #32]
 800f446:	f241 1311 	movw	r3, #4369	; 0x1111
 800f44a:	4013      	ands	r3, r2
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d10f      	bne.n	800f470 <HAL_TIM_Base_Stop+0x38>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6a1a      	ldr	r2, [r3, #32]
 800f456:	f240 4344 	movw	r3, #1092	; 0x444
 800f45a:	4013      	ands	r3, r2
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d107      	bne.n	800f470 <HAL_TIM_Base_Stop+0x38>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 0201 	bic.w	r2, r2, #1
 800f46e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	370c      	adds	r7, #12
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f486:	b580      	push	{r7, lr}
 800f488:	b084      	sub	sp, #16
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	f003 0302 	and.w	r3, r3, #2
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d020      	beq.n	800f4ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01b      	beq.n	800f4ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f06f 0202 	mvn.w	r2, #2
 800f4ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	f003 0303 	and.w	r3, r3, #3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f9eb 	bl	800f8ac <HAL_TIM_IC_CaptureCallback>
 800f4d6:	e005      	b.n	800f4e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f9dd 	bl	800f898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 f9ee 	bl	800f8c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f003 0304 	and.w	r3, r3, #4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d020      	beq.n	800f536 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d01b      	beq.n	800f536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f06f 0204 	mvn.w	r2, #4
 800f506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2202      	movs	r2, #2
 800f50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d003      	beq.n	800f524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f9c5 	bl	800f8ac <HAL_TIM_IC_CaptureCallback>
 800f522:	e005      	b.n	800f530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f9b7 	bl	800f898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 f9c8 	bl	800f8c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	f003 0308 	and.w	r3, r3, #8
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d020      	beq.n	800f582 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f003 0308 	and.w	r3, r3, #8
 800f546:	2b00      	cmp	r3, #0
 800f548:	d01b      	beq.n	800f582 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f06f 0208 	mvn.w	r2, #8
 800f552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2204      	movs	r2, #4
 800f558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	69db      	ldr	r3, [r3, #28]
 800f560:	f003 0303 	and.w	r3, r3, #3
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f99f 	bl	800f8ac <HAL_TIM_IC_CaptureCallback>
 800f56e:	e005      	b.n	800f57c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f991 	bl	800f898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f9a2 	bl	800f8c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	f003 0310 	and.w	r3, r3, #16
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d020      	beq.n	800f5ce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f003 0310 	and.w	r3, r3, #16
 800f592:	2b00      	cmp	r3, #0
 800f594:	d01b      	beq.n	800f5ce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f06f 0210 	mvn.w	r2, #16
 800f59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	69db      	ldr	r3, [r3, #28]
 800f5ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d003      	beq.n	800f5bc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f979 	bl	800f8ac <HAL_TIM_IC_CaptureCallback>
 800f5ba:	e005      	b.n	800f5c8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f96b 	bl	800f898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 f97c 	bl	800f8c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00c      	beq.n	800f5f2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d007      	beq.n	800f5f2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f06f 0201 	mvn.w	r2, #1
 800f5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f949 	bl	800f884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d104      	bne.n	800f606 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00c      	beq.n	800f620 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d007      	beq.n	800f620 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fb40 	bl	800fca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00c      	beq.n	800f644 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f630:	2b00      	cmp	r3, #0
 800f632:	d007      	beq.n	800f644 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fb38 	bl	800fcb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00c      	beq.n	800f668 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f654:	2b00      	cmp	r3, #0
 800f656:	d007      	beq.n	800f668 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 f936 	bl	800f8d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	f003 0320 	and.w	r3, r3, #32
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00c      	beq.n	800f68c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f003 0320 	and.w	r3, r3, #32
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f06f 0220 	mvn.w	r2, #32
 800f684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 fb00 	bl	800fc8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f68c:	bf00      	nop
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d101      	bne.n	800f6b0 <HAL_TIM_ConfigClockSource+0x1c>
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	e0dc      	b.n	800f86a <HAL_TIM_ConfigClockSource+0x1d6>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2202      	movs	r2, #2
 800f6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	4b6a      	ldr	r3, [pc, #424]	; (800f874 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f6cc:	4013      	ands	r3, r2
 800f6ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a64      	ldr	r2, [pc, #400]	; (800f878 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	f000 80a9 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f6ec:	4a62      	ldr	r2, [pc, #392]	; (800f878 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	f200 80ae 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f6f4:	4a61      	ldr	r2, [pc, #388]	; (800f87c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	f000 80a1 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f6fc:	4a5f      	ldr	r2, [pc, #380]	; (800f87c <HAL_TIM_ConfigClockSource+0x1e8>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	f200 80a6 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f704:	4a5e      	ldr	r2, [pc, #376]	; (800f880 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f706:	4293      	cmp	r3, r2
 800f708:	f000 8099 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f70c:	4a5c      	ldr	r2, [pc, #368]	; (800f880 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	f200 809e 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f714:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f718:	f000 8091 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f71c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f720:	f200 8096 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f728:	f000 8089 	beq.w	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f72c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f730:	f200 808e 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f738:	d03e      	beq.n	800f7b8 <HAL_TIM_ConfigClockSource+0x124>
 800f73a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f73e:	f200 8087 	bhi.w	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f746:	f000 8086 	beq.w	800f856 <HAL_TIM_ConfigClockSource+0x1c2>
 800f74a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f74e:	d87f      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f750:	2b70      	cmp	r3, #112	; 0x70
 800f752:	d01a      	beq.n	800f78a <HAL_TIM_ConfigClockSource+0xf6>
 800f754:	2b70      	cmp	r3, #112	; 0x70
 800f756:	d87b      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f758:	2b60      	cmp	r3, #96	; 0x60
 800f75a:	d050      	beq.n	800f7fe <HAL_TIM_ConfigClockSource+0x16a>
 800f75c:	2b60      	cmp	r3, #96	; 0x60
 800f75e:	d877      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f760:	2b50      	cmp	r3, #80	; 0x50
 800f762:	d03c      	beq.n	800f7de <HAL_TIM_ConfigClockSource+0x14a>
 800f764:	2b50      	cmp	r3, #80	; 0x50
 800f766:	d873      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f768:	2b40      	cmp	r3, #64	; 0x40
 800f76a:	d058      	beq.n	800f81e <HAL_TIM_ConfigClockSource+0x18a>
 800f76c:	2b40      	cmp	r3, #64	; 0x40
 800f76e:	d86f      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f770:	2b30      	cmp	r3, #48	; 0x30
 800f772:	d064      	beq.n	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f774:	2b30      	cmp	r3, #48	; 0x30
 800f776:	d86b      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f778:	2b20      	cmp	r3, #32
 800f77a:	d060      	beq.n	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f77c:	2b20      	cmp	r3, #32
 800f77e:	d867      	bhi.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
 800f780:	2b00      	cmp	r3, #0
 800f782:	d05c      	beq.n	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f784:	2b10      	cmp	r3, #16
 800f786:	d05a      	beq.n	800f83e <HAL_TIM_ConfigClockSource+0x1aa>
 800f788:	e062      	b.n	800f850 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f79a:	f000 f9c9 	bl	800fb30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f7ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	609a      	str	r2, [r3, #8]
      break;
 800f7b6:	e04f      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f7c8:	f000 f9b2 	bl	800fb30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	689a      	ldr	r2, [r3, #8]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f7da:	609a      	str	r2, [r3, #8]
      break;
 800f7dc:	e03c      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	f000 f922 	bl	800fa34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2150      	movs	r1, #80	; 0x50
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 f97c 	bl	800faf4 <TIM_ITRx_SetConfig>
      break;
 800f7fc:	e02c      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f80a:	461a      	mov	r2, r3
 800f80c:	f000 f941 	bl	800fa92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2160      	movs	r1, #96	; 0x60
 800f816:	4618      	mov	r0, r3
 800f818:	f000 f96c 	bl	800faf4 <TIM_ITRx_SetConfig>
      break;
 800f81c:	e01c      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f82a:	461a      	mov	r2, r3
 800f82c:	f000 f902 	bl	800fa34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2140      	movs	r1, #64	; 0x40
 800f836:	4618      	mov	r0, r3
 800f838:	f000 f95c 	bl	800faf4 <TIM_ITRx_SetConfig>
      break;
 800f83c:	e00c      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4619      	mov	r1, r3
 800f848:	4610      	mov	r0, r2
 800f84a:	f000 f953 	bl	800faf4 <TIM_ITRx_SetConfig>
      break;
 800f84e:	e003      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	73fb      	strb	r3, [r7, #15]
      break;
 800f854:	e000      	b.n	800f858 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f868:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	ffceff88 	.word	0xffceff88
 800f878:	00100040 	.word	0x00100040
 800f87c:	00100030 	.word	0x00100030
 800f880:	00100020 	.word	0x00100020

0800f884 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4a46      	ldr	r2, [pc, #280]	; (800fa14 <TIM_Base_SetConfig+0x12c>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d013      	beq.n	800f928 <TIM_Base_SetConfig+0x40>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f906:	d00f      	beq.n	800f928 <TIM_Base_SetConfig+0x40>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a43      	ldr	r2, [pc, #268]	; (800fa18 <TIM_Base_SetConfig+0x130>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d00b      	beq.n	800f928 <TIM_Base_SetConfig+0x40>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a42      	ldr	r2, [pc, #264]	; (800fa1c <TIM_Base_SetConfig+0x134>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d007      	beq.n	800f928 <TIM_Base_SetConfig+0x40>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a41      	ldr	r2, [pc, #260]	; (800fa20 <TIM_Base_SetConfig+0x138>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d003      	beq.n	800f928 <TIM_Base_SetConfig+0x40>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a40      	ldr	r2, [pc, #256]	; (800fa24 <TIM_Base_SetConfig+0x13c>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d108      	bne.n	800f93a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f92e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	4313      	orrs	r3, r2
 800f938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4a35      	ldr	r2, [pc, #212]	; (800fa14 <TIM_Base_SetConfig+0x12c>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d01f      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f948:	d01b      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4a32      	ldr	r2, [pc, #200]	; (800fa18 <TIM_Base_SetConfig+0x130>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d017      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4a31      	ldr	r2, [pc, #196]	; (800fa1c <TIM_Base_SetConfig+0x134>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d013      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4a30      	ldr	r2, [pc, #192]	; (800fa20 <TIM_Base_SetConfig+0x138>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d00f      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	4a2f      	ldr	r2, [pc, #188]	; (800fa24 <TIM_Base_SetConfig+0x13c>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d00b      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4a2e      	ldr	r2, [pc, #184]	; (800fa28 <TIM_Base_SetConfig+0x140>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d007      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4a2d      	ldr	r2, [pc, #180]	; (800fa2c <TIM_Base_SetConfig+0x144>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d003      	beq.n	800f982 <TIM_Base_SetConfig+0x9a>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4a2c      	ldr	r2, [pc, #176]	; (800fa30 <TIM_Base_SetConfig+0x148>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d108      	bne.n	800f994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	4313      	orrs	r3, r2
 800f992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	695b      	ldr	r3, [r3, #20]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	689a      	ldr	r2, [r3, #8]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4a16      	ldr	r2, [pc, #88]	; (800fa14 <TIM_Base_SetConfig+0x12c>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d00f      	beq.n	800f9e0 <TIM_Base_SetConfig+0xf8>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a18      	ldr	r2, [pc, #96]	; (800fa24 <TIM_Base_SetConfig+0x13c>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d00b      	beq.n	800f9e0 <TIM_Base_SetConfig+0xf8>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a17      	ldr	r2, [pc, #92]	; (800fa28 <TIM_Base_SetConfig+0x140>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d007      	beq.n	800f9e0 <TIM_Base_SetConfig+0xf8>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a16      	ldr	r2, [pc, #88]	; (800fa2c <TIM_Base_SetConfig+0x144>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d003      	beq.n	800f9e0 <TIM_Base_SetConfig+0xf8>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a15      	ldr	r2, [pc, #84]	; (800fa30 <TIM_Base_SetConfig+0x148>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d103      	bne.n	800f9e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	691a      	ldr	r2, [r3, #16]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b01      	cmp	r3, #1
 800f9f8:	d105      	bne.n	800fa06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	f023 0201 	bic.w	r2, r3, #1
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	611a      	str	r2, [r3, #16]
  }
}
 800fa06:	bf00      	nop
 800fa08:	3714      	adds	r7, #20
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	40010000 	.word	0x40010000
 800fa18:	40000400 	.word	0x40000400
 800fa1c:	40000800 	.word	0x40000800
 800fa20:	40000c00 	.word	0x40000c00
 800fa24:	40010400 	.word	0x40010400
 800fa28:	40014000 	.word	0x40014000
 800fa2c:	40014400 	.word	0x40014400
 800fa30:	40014800 	.word	0x40014800

0800fa34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b087      	sub	sp, #28
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	f023 0201 	bic.w	r2, r3, #1
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	699b      	ldr	r3, [r3, #24]
 800fa56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	011b      	lsls	r3, r3, #4
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f023 030a 	bic.w	r3, r3, #10
 800fa70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	693a      	ldr	r2, [r7, #16]
 800fa7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	621a      	str	r2, [r3, #32]
}
 800fa86:	bf00      	nop
 800fa88:	371c      	adds	r7, #28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b087      	sub	sp, #28
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	60f8      	str	r0, [r7, #12]
 800fa9a:	60b9      	str	r1, [r7, #8]
 800fa9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6a1b      	ldr	r3, [r3, #32]
 800faa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	f023 0210 	bic.w	r2, r3, #16
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fabc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	031b      	lsls	r3, r3, #12
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	4313      	orrs	r3, r2
 800fac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800face:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	011b      	lsls	r3, r3, #4
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	4313      	orrs	r3, r2
 800fad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	693a      	ldr	r2, [r7, #16]
 800fade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	621a      	str	r2, [r3, #32]
}
 800fae6:	bf00      	nop
 800fae8:	371c      	adds	r7, #28
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
	...

0800faf4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b085      	sub	sp, #20
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <TIM_ITRx_SetConfig+0x38>)
 800fb08:	4013      	ands	r3, r2
 800fb0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb0c:	683a      	ldr	r2, [r7, #0]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	f043 0307 	orr.w	r3, r3, #7
 800fb16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	609a      	str	r2, [r3, #8]
}
 800fb1e:	bf00      	nop
 800fb20:	3714      	adds	r7, #20
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	ffcfff8f 	.word	0xffcfff8f

0800fb30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b087      	sub	sp, #28
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
 800fb3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	689b      	ldr	r3, [r3, #8]
 800fb42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	021a      	lsls	r2, r3, #8
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	431a      	orrs	r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	697a      	ldr	r2, [r7, #20]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	609a      	str	r2, [r3, #8]
}
 800fb64:	bf00      	nop
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d101      	bne.n	800fb88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb84:	2302      	movs	r3, #2
 800fb86:	e06d      	b.n	800fc64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2202      	movs	r2, #2
 800fb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a30      	ldr	r2, [pc, #192]	; (800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d004      	beq.n	800fbbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a2f      	ldr	r2, [pc, #188]	; (800fc74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d108      	bne.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a20      	ldr	r2, [pc, #128]	; (800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d022      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbfa:	d01d      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a1d      	ldr	r2, [pc, #116]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d018      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a1c      	ldr	r2, [pc, #112]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d013      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a1a      	ldr	r2, [pc, #104]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d00e      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a15      	ldr	r2, [pc, #84]	; (800fc74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d009      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a16      	ldr	r2, [pc, #88]	; (800fc84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d004      	beq.n	800fc38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a15      	ldr	r2, [pc, #84]	; (800fc88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d10c      	bne.n	800fc52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2201      	movs	r2, #1
 800fc56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	40010000 	.word	0x40010000
 800fc74:	40010400 	.word	0x40010400
 800fc78:	40000400 	.word	0x40000400
 800fc7c:	40000800 	.word	0x40000800
 800fc80:	40000c00 	.word	0x40000c00
 800fc84:	40001800 	.word	0x40001800
 800fc88:	40014000 	.word	0x40014000

0800fc8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fca8:	bf00      	nop
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d101      	bne.n	800fcda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e042      	b.n	800fd60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d106      	bne.n	800fcf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7f1 fe2f 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2224      	movs	r2, #36	; 0x24
 800fcf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f022 0201 	bic.w	r2, r2, #1
 800fd08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f001 fa3a 	bl	801118c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fccf 	bl	80106bc <UART_SetConfig>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d101      	bne.n	800fd28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fd24:	2301      	movs	r3, #1
 800fd26:	e01b      	b.n	800fd60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	685a      	ldr	r2, [r3, #4]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	689a      	ldr	r2, [r3, #8]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f042 0201 	orr.w	r2, r2, #1
 800fd56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 fab9 	bl	80112d0 <UART_CheckIdleState>
 800fd5e:	4603      	mov	r3, r0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b08a      	sub	sp, #40	; 0x28
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	603b      	str	r3, [r7, #0]
 800fd74:	4613      	mov	r3, r2
 800fd76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd7e:	2b20      	cmp	r3, #32
 800fd80:	d17b      	bne.n	800fe7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <HAL_UART_Transmit+0x26>
 800fd88:	88fb      	ldrh	r3, [r7, #6]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d101      	bne.n	800fd92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e074      	b.n	800fe7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2221      	movs	r2, #33	; 0x21
 800fd9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fda2:	f7f5 f829 	bl	8004df8 <HAL_GetTick>
 800fda6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	88fa      	ldrh	r2, [r7, #6]
 800fdac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	689b      	ldr	r3, [r3, #8]
 800fdbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdc0:	d108      	bne.n	800fdd4 <HAL_UART_Transmit+0x6c>
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d104      	bne.n	800fdd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	61bb      	str	r3, [r7, #24]
 800fdd2:	e003      	b.n	800fddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fddc:	e030      	b.n	800fe40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2200      	movs	r2, #0
 800fde6:	2180      	movs	r1, #128	; 0x80
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f001 fb1b 	bl	8011424 <UART_WaitOnFlagUntilTimeout>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2220      	movs	r2, #32
 800fdf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e03d      	b.n	800fe7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10b      	bne.n	800fe1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	3302      	adds	r3, #2
 800fe1a:	61bb      	str	r3, [r7, #24]
 800fe1c:	e007      	b.n	800fe2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	781a      	ldrb	r2, [r3, #0]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	3b01      	subs	r3, #1
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1c8      	bne.n	800fdde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	9300      	str	r3, [sp, #0]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2200      	movs	r2, #0
 800fe54:	2140      	movs	r1, #64	; 0x40
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f001 fae4 	bl	8011424 <UART_WaitOnFlagUntilTimeout>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d005      	beq.n	800fe6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2220      	movs	r2, #32
 800fe66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	e006      	b.n	800fe7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2220      	movs	r2, #32
 800fe72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	e000      	b.n	800fe7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fe7a:	2302      	movs	r3, #2
  }
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3720      	adds	r7, #32
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08a      	sub	sp, #40	; 0x28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe98:	2b20      	cmp	r3, #32
 800fe9a:	d137      	bne.n	800ff0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d002      	beq.n	800fea8 <HAL_UART_Receive_IT+0x24>
 800fea2:	88fb      	ldrh	r3, [r7, #6]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fea8:	2301      	movs	r3, #1
 800feaa:	e030      	b.n	800ff0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a18      	ldr	r2, [pc, #96]	; (800ff18 <HAL_UART_Receive_IT+0x94>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d01f      	beq.n	800fefc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d018      	beq.n	800fefc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	613b      	str	r3, [r7, #16]
   return(result);
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fede:	627b      	str	r3, [r7, #36]	; 0x24
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee8:	623b      	str	r3, [r7, #32]
 800feea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feec:	69f9      	ldr	r1, [r7, #28]
 800feee:	6a3a      	ldr	r2, [r7, #32]
 800fef0:	e841 2300 	strex	r3, r2, [r1]
 800fef4:	61bb      	str	r3, [r7, #24]
   return(result);
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e6      	bne.n	800feca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fefc:	88fb      	ldrh	r3, [r7, #6]
 800fefe:	461a      	mov	r2, r3
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f001 fafc 	bl	8011500 <UART_Start_Receive_IT>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	e000      	b.n	800ff0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ff0c:	2302      	movs	r3, #2
  }
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3728      	adds	r7, #40	; 0x28
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	58000c00 	.word	0x58000c00

0800ff1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b0ba      	sub	sp, #232	; 0xe8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	69db      	ldr	r3, [r3, #28]
 800ff2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ff46:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ff50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d11b      	bne.n	800ff90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff5c:	f003 0320 	and.w	r3, r3, #32
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d015      	beq.n	800ff90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff68:	f003 0320 	and.w	r3, r3, #32
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d105      	bne.n	800ff7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d009      	beq.n	800ff90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f000 8377 	beq.w	8010674 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	4798      	blx	r3
      }
      return;
 800ff8e:	e371      	b.n	8010674 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ff90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 8123 	beq.w	80101e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ff9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ff9e:	4b8d      	ldr	r3, [pc, #564]	; (80101d4 <HAL_UART_IRQHandler+0x2b8>)
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ffaa:	4b8b      	ldr	r3, [pc, #556]	; (80101d8 <HAL_UART_IRQHandler+0x2bc>)
 800ffac:	4013      	ands	r3, r2
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	f000 8116 	beq.w	80101e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d011      	beq.n	800ffe4 <HAL_UART_IRQHandler+0xc8>
 800ffc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00b      	beq.n	800ffe4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffda:	f043 0201 	orr.w	r2, r3, #1
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ffe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffe8:	f003 0302 	and.w	r3, r3, #2
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d011      	beq.n	8010014 <HAL_UART_IRQHandler+0xf8>
 800fff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00b      	beq.n	8010014 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2202      	movs	r2, #2
 8010002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801000a:	f043 0204 	orr.w	r2, r3, #4
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010018:	f003 0304 	and.w	r3, r3, #4
 801001c:	2b00      	cmp	r3, #0
 801001e:	d011      	beq.n	8010044 <HAL_UART_IRQHandler+0x128>
 8010020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010024:	f003 0301 	and.w	r3, r3, #1
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00b      	beq.n	8010044 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2204      	movs	r2, #4
 8010032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801003a:	f043 0202 	orr.w	r2, r3, #2
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010048:	f003 0308 	and.w	r3, r3, #8
 801004c:	2b00      	cmp	r3, #0
 801004e:	d017      	beq.n	8010080 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010054:	f003 0320 	and.w	r3, r3, #32
 8010058:	2b00      	cmp	r3, #0
 801005a:	d105      	bne.n	8010068 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801005c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010060:	4b5c      	ldr	r3, [pc, #368]	; (80101d4 <HAL_UART_IRQHandler+0x2b8>)
 8010062:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00b      	beq.n	8010080 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2208      	movs	r2, #8
 801006e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010076:	f043 0208 	orr.w	r2, r3, #8
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010088:	2b00      	cmp	r3, #0
 801008a:	d012      	beq.n	80100b2 <HAL_UART_IRQHandler+0x196>
 801008c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010090:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00c      	beq.n	80100b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100a8:	f043 0220 	orr.w	r2, r3, #32
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f000 82dd 	beq.w	8010678 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100c2:	f003 0320 	and.w	r3, r3, #32
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d013      	beq.n	80100f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100ce:	f003 0320 	and.w	r3, r3, #32
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d105      	bne.n	80100e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d007      	beq.n	80100f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d003      	beq.n	80100f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010106:	2b40      	cmp	r3, #64	; 0x40
 8010108:	d005      	beq.n	8010116 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801010a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801010e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010112:	2b00      	cmp	r3, #0
 8010114:	d054      	beq.n	80101c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f001 fb14 	bl	8011744 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010126:	2b40      	cmp	r3, #64	; 0x40
 8010128:	d146      	bne.n	80101b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	3308      	adds	r3, #8
 8010130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010138:	e853 3f00 	ldrex	r3, [r3]
 801013c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3308      	adds	r3, #8
 8010152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801015a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010166:	e841 2300 	strex	r3, r2, [r1]
 801016a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801016e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1d9      	bne.n	801012a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801017c:	2b00      	cmp	r3, #0
 801017e:	d017      	beq.n	80101b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010186:	4a15      	ldr	r2, [pc, #84]	; (80101dc <HAL_UART_IRQHandler+0x2c0>)
 8010188:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010190:	4618      	mov	r0, r3
 8010192:	f7f6 fe9b 	bl	8006ecc <HAL_DMA_Abort_IT>
 8010196:	4603      	mov	r3, r0
 8010198:	2b00      	cmp	r3, #0
 801019a:	d019      	beq.n	80101d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80101aa:	4610      	mov	r0, r2
 80101ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ae:	e00f      	b.n	80101d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fa6d 	bl	8010690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101b6:	e00b      	b.n	80101d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fa69 	bl	8010690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101be:	e007      	b.n	80101d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fa65 	bl	8010690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80101ce:	e253      	b.n	8010678 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d0:	bf00      	nop
    return;
 80101d2:	e251      	b.n	8010678 <HAL_UART_IRQHandler+0x75c>
 80101d4:	10000001 	.word	0x10000001
 80101d8:	04000120 	.word	0x04000120
 80101dc:	08011811 	.word	0x08011811

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	f040 81e7 	bne.w	80105b8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80101ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101ee:	f003 0310 	and.w	r3, r3, #16
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 81e0 	beq.w	80105b8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80101f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101fc:	f003 0310 	and.w	r3, r3, #16
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 81d9 	beq.w	80105b8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2210      	movs	r2, #16
 801020c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010218:	2b40      	cmp	r3, #64	; 0x40
 801021a:	f040 8151 	bne.w	80104c0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a96      	ldr	r2, [pc, #600]	; (8010480 <HAL_UART_IRQHandler+0x564>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d068      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a93      	ldr	r2, [pc, #588]	; (8010484 <HAL_UART_IRQHandler+0x568>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d061      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	4a91      	ldr	r2, [pc, #580]	; (8010488 <HAL_UART_IRQHandler+0x56c>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d05a      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a8e      	ldr	r2, [pc, #568]	; (801048c <HAL_UART_IRQHandler+0x570>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d053      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a8c      	ldr	r2, [pc, #560]	; (8010490 <HAL_UART_IRQHandler+0x574>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d04c      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a89      	ldr	r2, [pc, #548]	; (8010494 <HAL_UART_IRQHandler+0x578>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d045      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a87      	ldr	r2, [pc, #540]	; (8010498 <HAL_UART_IRQHandler+0x57c>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d03e      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a84      	ldr	r2, [pc, #528]	; (801049c <HAL_UART_IRQHandler+0x580>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d037      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a82      	ldr	r2, [pc, #520]	; (80104a0 <HAL_UART_IRQHandler+0x584>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d030      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a7f      	ldr	r2, [pc, #508]	; (80104a4 <HAL_UART_IRQHandler+0x588>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d029      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	4a7d      	ldr	r2, [pc, #500]	; (80104a8 <HAL_UART_IRQHandler+0x58c>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d022      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4a7a      	ldr	r2, [pc, #488]	; (80104ac <HAL_UART_IRQHandler+0x590>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d01b      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a78      	ldr	r2, [pc, #480]	; (80104b0 <HAL_UART_IRQHandler+0x594>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d014      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a75      	ldr	r2, [pc, #468]	; (80104b4 <HAL_UART_IRQHandler+0x598>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d00d      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a73      	ldr	r2, [pc, #460]	; (80104b8 <HAL_UART_IRQHandler+0x59c>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d006      	beq.n	80102fe <HAL_UART_IRQHandler+0x3e2>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4a70      	ldr	r2, [pc, #448]	; (80104bc <HAL_UART_IRQHandler+0x5a0>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d106      	bne.n	801030c <HAL_UART_IRQHandler+0x3f0>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	b29b      	uxth	r3, r3
 801030a:	e005      	b.n	8010318 <HAL_UART_IRQHandler+0x3fc>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	b29b      	uxth	r3, r3
 8010318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801031c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010320:	2b00      	cmp	r3, #0
 8010322:	f000 81ab 	beq.w	801067c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801032c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010330:	429a      	cmp	r2, r3
 8010332:	f080 81a3 	bcs.w	801067c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801033c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010346:	69db      	ldr	r3, [r3, #28]
 8010348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801034c:	f000 8087 	beq.w	801045e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010358:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801035c:	e853 3f00 	ldrex	r3, [r3]
 8010360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010364:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801036c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	461a      	mov	r2, r3
 8010376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801037a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801037e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010382:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010386:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801038a:	e841 2300 	strex	r3, r2, [r1]
 801038e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1da      	bne.n	8010350 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	3308      	adds	r3, #8
 80103a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103a4:	e853 3f00 	ldrex	r3, [r3]
 80103a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80103aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103ac:	f023 0301 	bic.w	r3, r3, #1
 80103b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3308      	adds	r3, #8
 80103ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80103be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80103c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80103c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80103ca:	e841 2300 	strex	r3, r2, [r1]
 80103ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80103d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d1e1      	bne.n	801039a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3308      	adds	r3, #8
 80103dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103e0:	e853 3f00 	ldrex	r3, [r3]
 80103e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80103e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3308      	adds	r3, #8
 80103f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80103fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80103fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010400:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010402:	e841 2300 	strex	r3, r2, [r1]
 8010406:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1e3      	bne.n	80103d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2220      	movs	r2, #32
 8010412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010424:	e853 3f00 	ldrex	r3, [r3]
 8010428:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801042a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801042c:	f023 0310 	bic.w	r3, r3, #16
 8010430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	461a      	mov	r2, r3
 801043a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801043e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010440:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010446:	e841 2300 	strex	r3, r2, [r1]
 801044a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801044c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1e4      	bne.n	801041c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010458:	4618      	mov	r0, r3
 801045a:	f7f6 fa19 	bl	8006890 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2202      	movs	r2, #2
 8010462:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010470:	b29b      	uxth	r3, r3
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	b29b      	uxth	r3, r3
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f913 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801047e:	e0fd      	b.n	801067c <HAL_UART_IRQHandler+0x760>
 8010480:	40020010 	.word	0x40020010
 8010484:	40020028 	.word	0x40020028
 8010488:	40020040 	.word	0x40020040
 801048c:	40020058 	.word	0x40020058
 8010490:	40020070 	.word	0x40020070
 8010494:	40020088 	.word	0x40020088
 8010498:	400200a0 	.word	0x400200a0
 801049c:	400200b8 	.word	0x400200b8
 80104a0:	40020410 	.word	0x40020410
 80104a4:	40020428 	.word	0x40020428
 80104a8:	40020440 	.word	0x40020440
 80104ac:	40020458 	.word	0x40020458
 80104b0:	40020470 	.word	0x40020470
 80104b4:	40020488 	.word	0x40020488
 80104b8:	400204a0 	.word	0x400204a0
 80104bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	1ad3      	subs	r3, r2, r3
 80104d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104da:	b29b      	uxth	r3, r3
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 80cf 	beq.w	8010680 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80104e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 80ca 	beq.w	8010680 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	e853 3f00 	ldrex	r3, [r3]
 80104f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80104fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801050e:	647b      	str	r3, [r7, #68]	; 0x44
 8010510:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010516:	e841 2300 	strex	r3, r2, [r1]
 801051a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801051c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e4      	bne.n	80104ec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	3308      	adds	r3, #8
 8010528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052c:	e853 3f00 	ldrex	r3, [r3]
 8010530:	623b      	str	r3, [r7, #32]
   return(result);
 8010532:	6a3a      	ldr	r2, [r7, #32]
 8010534:	4b55      	ldr	r3, [pc, #340]	; (801068c <HAL_UART_IRQHandler+0x770>)
 8010536:	4013      	ands	r3, r2
 8010538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	3308      	adds	r3, #8
 8010542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010546:	633a      	str	r2, [r7, #48]	; 0x30
 8010548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801054c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801054e:	e841 2300 	strex	r3, r2, [r1]
 8010552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e3      	bne.n	8010522 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2220      	movs	r2, #32
 801055e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	e853 3f00 	ldrex	r3, [r3]
 801057a:	60fb      	str	r3, [r7, #12]
   return(result);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f023 0310 	bic.w	r3, r3, #16
 8010582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	461a      	mov	r2, r3
 801058c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010590:	61fb      	str	r3, [r7, #28]
 8010592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	69b9      	ldr	r1, [r7, #24]
 8010596:	69fa      	ldr	r2, [r7, #28]
 8010598:	e841 2300 	strex	r3, r2, [r1]
 801059c:	617b      	str	r3, [r7, #20]
   return(result);
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e4      	bne.n	801056e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2202      	movs	r2, #2
 80105a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105ae:	4619      	mov	r1, r3
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f000 f877 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80105b6:	e063      	b.n	8010680 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80105b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00e      	beq.n	80105e2 <HAL_UART_IRQHandler+0x6c6>
 80105c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d008      	beq.n	80105e2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80105d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f001 fe76 	bl	80122cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105e0:	e051      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80105e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d014      	beq.n	8010618 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80105f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d105      	bne.n	8010606 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80105fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010602:	2b00      	cmp	r3, #0
 8010604:	d008      	beq.n	8010618 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801060a:	2b00      	cmp	r3, #0
 801060c:	d03a      	beq.n	8010684 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	4798      	blx	r3
    }
    return;
 8010616:	e035      	b.n	8010684 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801061c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010620:	2b00      	cmp	r3, #0
 8010622:	d009      	beq.n	8010638 <HAL_UART_IRQHandler+0x71c>
 8010624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801062c:	2b00      	cmp	r3, #0
 801062e:	d003      	beq.n	8010638 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f001 f903 	bl	801183c <UART_EndTransmit_IT>
    return;
 8010636:	e026      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801063c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d009      	beq.n	8010658 <HAL_UART_IRQHandler+0x73c>
 8010644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d003      	beq.n	8010658 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f001 fe4f 	bl	80122f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010656:	e016      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801065c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d010      	beq.n	8010686 <HAL_UART_IRQHandler+0x76a>
 8010664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010668:	2b00      	cmp	r3, #0
 801066a:	da0c      	bge.n	8010686 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f001 fe37 	bl	80122e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010672:	e008      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
      return;
 8010674:	bf00      	nop
 8010676:	e006      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
    return;
 8010678:	bf00      	nop
 801067a:	e004      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
      return;
 801067c:	bf00      	nop
 801067e:	e002      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
      return;
 8010680:	bf00      	nop
 8010682:	e000      	b.n	8010686 <HAL_UART_IRQHandler+0x76a>
    return;
 8010684:	bf00      	nop
  }
}
 8010686:	37e8      	adds	r7, #232	; 0xe8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}
 801068c:	effffffe 	.word	0xeffffffe

08010690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	460b      	mov	r3, r1
 80106ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106c0:	b092      	sub	sp, #72	; 0x48
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80106c6:	2300      	movs	r3, #0
 80106c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	689a      	ldr	r2, [r3, #8]
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	431a      	orrs	r2, r3
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	431a      	orrs	r2, r3
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	69db      	ldr	r3, [r3, #28]
 80106e0:	4313      	orrs	r3, r2
 80106e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	4bbe      	ldr	r3, [pc, #760]	; (80109e4 <UART_SetConfig+0x328>)
 80106ec:	4013      	ands	r3, r2
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	6812      	ldr	r2, [r2, #0]
 80106f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106f4:	430b      	orrs	r3, r1
 80106f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	68da      	ldr	r2, [r3, #12]
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	430a      	orrs	r2, r1
 801070c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4ab3      	ldr	r2, [pc, #716]	; (80109e8 <UART_SetConfig+0x32c>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d004      	beq.n	8010728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	6a1b      	ldr	r3, [r3, #32]
 8010722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010724:	4313      	orrs	r3, r2
 8010726:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	4baf      	ldr	r3, [pc, #700]	; (80109ec <UART_SetConfig+0x330>)
 8010730:	4013      	ands	r3, r2
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	6812      	ldr	r2, [r2, #0]
 8010736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010738:	430b      	orrs	r3, r1
 801073a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010742:	f023 010f 	bic.w	r1, r3, #15
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	430a      	orrs	r2, r1
 8010750:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4aa6      	ldr	r2, [pc, #664]	; (80109f0 <UART_SetConfig+0x334>)
 8010758:	4293      	cmp	r3, r2
 801075a:	d177      	bne.n	801084c <UART_SetConfig+0x190>
 801075c:	4ba5      	ldr	r3, [pc, #660]	; (80109f4 <UART_SetConfig+0x338>)
 801075e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010760:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010764:	2b28      	cmp	r3, #40	; 0x28
 8010766:	d86d      	bhi.n	8010844 <UART_SetConfig+0x188>
 8010768:	a201      	add	r2, pc, #4	; (adr r2, 8010770 <UART_SetConfig+0xb4>)
 801076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076e:	bf00      	nop
 8010770:	08010815 	.word	0x08010815
 8010774:	08010845 	.word	0x08010845
 8010778:	08010845 	.word	0x08010845
 801077c:	08010845 	.word	0x08010845
 8010780:	08010845 	.word	0x08010845
 8010784:	08010845 	.word	0x08010845
 8010788:	08010845 	.word	0x08010845
 801078c:	08010845 	.word	0x08010845
 8010790:	0801081d 	.word	0x0801081d
 8010794:	08010845 	.word	0x08010845
 8010798:	08010845 	.word	0x08010845
 801079c:	08010845 	.word	0x08010845
 80107a0:	08010845 	.word	0x08010845
 80107a4:	08010845 	.word	0x08010845
 80107a8:	08010845 	.word	0x08010845
 80107ac:	08010845 	.word	0x08010845
 80107b0:	08010825 	.word	0x08010825
 80107b4:	08010845 	.word	0x08010845
 80107b8:	08010845 	.word	0x08010845
 80107bc:	08010845 	.word	0x08010845
 80107c0:	08010845 	.word	0x08010845
 80107c4:	08010845 	.word	0x08010845
 80107c8:	08010845 	.word	0x08010845
 80107cc:	08010845 	.word	0x08010845
 80107d0:	0801082d 	.word	0x0801082d
 80107d4:	08010845 	.word	0x08010845
 80107d8:	08010845 	.word	0x08010845
 80107dc:	08010845 	.word	0x08010845
 80107e0:	08010845 	.word	0x08010845
 80107e4:	08010845 	.word	0x08010845
 80107e8:	08010845 	.word	0x08010845
 80107ec:	08010845 	.word	0x08010845
 80107f0:	08010835 	.word	0x08010835
 80107f4:	08010845 	.word	0x08010845
 80107f8:	08010845 	.word	0x08010845
 80107fc:	08010845 	.word	0x08010845
 8010800:	08010845 	.word	0x08010845
 8010804:	08010845 	.word	0x08010845
 8010808:	08010845 	.word	0x08010845
 801080c:	08010845 	.word	0x08010845
 8010810:	0801083d 	.word	0x0801083d
 8010814:	2301      	movs	r3, #1
 8010816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081a:	e222      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801081c:	2304      	movs	r3, #4
 801081e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010822:	e21e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010824:	2308      	movs	r3, #8
 8010826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801082a:	e21a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801082c:	2310      	movs	r3, #16
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010832:	e216      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010834:	2320      	movs	r3, #32
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083a:	e212      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801083c:	2340      	movs	r3, #64	; 0x40
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010842:	e20e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010844:	2380      	movs	r3, #128	; 0x80
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084a:	e20a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a69      	ldr	r2, [pc, #420]	; (80109f8 <UART_SetConfig+0x33c>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d130      	bne.n	80108b8 <UART_SetConfig+0x1fc>
 8010856:	4b67      	ldr	r3, [pc, #412]	; (80109f4 <UART_SetConfig+0x338>)
 8010858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801085a:	f003 0307 	and.w	r3, r3, #7
 801085e:	2b05      	cmp	r3, #5
 8010860:	d826      	bhi.n	80108b0 <UART_SetConfig+0x1f4>
 8010862:	a201      	add	r2, pc, #4	; (adr r2, 8010868 <UART_SetConfig+0x1ac>)
 8010864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010868:	08010881 	.word	0x08010881
 801086c:	08010889 	.word	0x08010889
 8010870:	08010891 	.word	0x08010891
 8010874:	08010899 	.word	0x08010899
 8010878:	080108a1 	.word	0x080108a1
 801087c:	080108a9 	.word	0x080108a9
 8010880:	2300      	movs	r3, #0
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e1ec      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010888:	2304      	movs	r3, #4
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e1e8      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010890:	2308      	movs	r3, #8
 8010892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010896:	e1e4      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010898:	2310      	movs	r3, #16
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089e:	e1e0      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108a0:	2320      	movs	r3, #32
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a6:	e1dc      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108a8:	2340      	movs	r3, #64	; 0x40
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ae:	e1d8      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108b0:	2380      	movs	r3, #128	; 0x80
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b6:	e1d4      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a4f      	ldr	r2, [pc, #316]	; (80109fc <UART_SetConfig+0x340>)
 80108be:	4293      	cmp	r3, r2
 80108c0:	d130      	bne.n	8010924 <UART_SetConfig+0x268>
 80108c2:	4b4c      	ldr	r3, [pc, #304]	; (80109f4 <UART_SetConfig+0x338>)
 80108c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108c6:	f003 0307 	and.w	r3, r3, #7
 80108ca:	2b05      	cmp	r3, #5
 80108cc:	d826      	bhi.n	801091c <UART_SetConfig+0x260>
 80108ce:	a201      	add	r2, pc, #4	; (adr r2, 80108d4 <UART_SetConfig+0x218>)
 80108d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d4:	080108ed 	.word	0x080108ed
 80108d8:	080108f5 	.word	0x080108f5
 80108dc:	080108fd 	.word	0x080108fd
 80108e0:	08010905 	.word	0x08010905
 80108e4:	0801090d 	.word	0x0801090d
 80108e8:	08010915 	.word	0x08010915
 80108ec:	2300      	movs	r3, #0
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e1b6      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108f4:	2304      	movs	r3, #4
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fa:	e1b2      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80108fc:	2308      	movs	r3, #8
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010902:	e1ae      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010904:	2310      	movs	r3, #16
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801090a:	e1aa      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801090c:	2320      	movs	r3, #32
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e1a6      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010914:	2340      	movs	r3, #64	; 0x40
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e1a2      	b.n	8010c62 <UART_SetConfig+0x5a6>
 801091c:	2380      	movs	r3, #128	; 0x80
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e19e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a35      	ldr	r2, [pc, #212]	; (8010a00 <UART_SetConfig+0x344>)
 801092a:	4293      	cmp	r3, r2
 801092c:	d130      	bne.n	8010990 <UART_SetConfig+0x2d4>
 801092e:	4b31      	ldr	r3, [pc, #196]	; (80109f4 <UART_SetConfig+0x338>)
 8010930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010932:	f003 0307 	and.w	r3, r3, #7
 8010936:	2b05      	cmp	r3, #5
 8010938:	d826      	bhi.n	8010988 <UART_SetConfig+0x2cc>
 801093a:	a201      	add	r2, pc, #4	; (adr r2, 8010940 <UART_SetConfig+0x284>)
 801093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010940:	08010959 	.word	0x08010959
 8010944:	08010961 	.word	0x08010961
 8010948:	08010969 	.word	0x08010969
 801094c:	08010971 	.word	0x08010971
 8010950:	08010979 	.word	0x08010979
 8010954:	08010981 	.word	0x08010981
 8010958:	2300      	movs	r3, #0
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e180      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010960:	2304      	movs	r3, #4
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e17c      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010968:	2308      	movs	r3, #8
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e178      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010970:	2310      	movs	r3, #16
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010976:	e174      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010978:	2320      	movs	r3, #32
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e170      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010980:	2340      	movs	r3, #64	; 0x40
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e16c      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010988:	2380      	movs	r3, #128	; 0x80
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801098e:	e168      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a1b      	ldr	r2, [pc, #108]	; (8010a04 <UART_SetConfig+0x348>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d142      	bne.n	8010a20 <UART_SetConfig+0x364>
 801099a:	4b16      	ldr	r3, [pc, #88]	; (80109f4 <UART_SetConfig+0x338>)
 801099c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801099e:	f003 0307 	and.w	r3, r3, #7
 80109a2:	2b05      	cmp	r3, #5
 80109a4:	d838      	bhi.n	8010a18 <UART_SetConfig+0x35c>
 80109a6:	a201      	add	r2, pc, #4	; (adr r2, 80109ac <UART_SetConfig+0x2f0>)
 80109a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ac:	080109c5 	.word	0x080109c5
 80109b0:	080109cd 	.word	0x080109cd
 80109b4:	080109d5 	.word	0x080109d5
 80109b8:	080109dd 	.word	0x080109dd
 80109bc:	08010a09 	.word	0x08010a09
 80109c0:	08010a11 	.word	0x08010a11
 80109c4:	2300      	movs	r3, #0
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e14a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80109cc:	2304      	movs	r3, #4
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e146      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80109d4:	2308      	movs	r3, #8
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e142      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80109dc:	2310      	movs	r3, #16
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e2:	e13e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 80109e4:	cfff69f3 	.word	0xcfff69f3
 80109e8:	58000c00 	.word	0x58000c00
 80109ec:	11fff4ff 	.word	0x11fff4ff
 80109f0:	40011000 	.word	0x40011000
 80109f4:	58024400 	.word	0x58024400
 80109f8:	40004400 	.word	0x40004400
 80109fc:	40004800 	.word	0x40004800
 8010a00:	40004c00 	.word	0x40004c00
 8010a04:	40005000 	.word	0x40005000
 8010a08:	2320      	movs	r3, #32
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e128      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010a10:	2340      	movs	r3, #64	; 0x40
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e124      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010a18:	2380      	movs	r3, #128	; 0x80
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e120      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4acb      	ldr	r2, [pc, #812]	; (8010d54 <UART_SetConfig+0x698>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d176      	bne.n	8010b18 <UART_SetConfig+0x45c>
 8010a2a:	4bcb      	ldr	r3, [pc, #812]	; (8010d58 <UART_SetConfig+0x69c>)
 8010a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a32:	2b28      	cmp	r3, #40	; 0x28
 8010a34:	d86c      	bhi.n	8010b10 <UART_SetConfig+0x454>
 8010a36:	a201      	add	r2, pc, #4	; (adr r2, 8010a3c <UART_SetConfig+0x380>)
 8010a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3c:	08010ae1 	.word	0x08010ae1
 8010a40:	08010b11 	.word	0x08010b11
 8010a44:	08010b11 	.word	0x08010b11
 8010a48:	08010b11 	.word	0x08010b11
 8010a4c:	08010b11 	.word	0x08010b11
 8010a50:	08010b11 	.word	0x08010b11
 8010a54:	08010b11 	.word	0x08010b11
 8010a58:	08010b11 	.word	0x08010b11
 8010a5c:	08010ae9 	.word	0x08010ae9
 8010a60:	08010b11 	.word	0x08010b11
 8010a64:	08010b11 	.word	0x08010b11
 8010a68:	08010b11 	.word	0x08010b11
 8010a6c:	08010b11 	.word	0x08010b11
 8010a70:	08010b11 	.word	0x08010b11
 8010a74:	08010b11 	.word	0x08010b11
 8010a78:	08010b11 	.word	0x08010b11
 8010a7c:	08010af1 	.word	0x08010af1
 8010a80:	08010b11 	.word	0x08010b11
 8010a84:	08010b11 	.word	0x08010b11
 8010a88:	08010b11 	.word	0x08010b11
 8010a8c:	08010b11 	.word	0x08010b11
 8010a90:	08010b11 	.word	0x08010b11
 8010a94:	08010b11 	.word	0x08010b11
 8010a98:	08010b11 	.word	0x08010b11
 8010a9c:	08010af9 	.word	0x08010af9
 8010aa0:	08010b11 	.word	0x08010b11
 8010aa4:	08010b11 	.word	0x08010b11
 8010aa8:	08010b11 	.word	0x08010b11
 8010aac:	08010b11 	.word	0x08010b11
 8010ab0:	08010b11 	.word	0x08010b11
 8010ab4:	08010b11 	.word	0x08010b11
 8010ab8:	08010b11 	.word	0x08010b11
 8010abc:	08010b01 	.word	0x08010b01
 8010ac0:	08010b11 	.word	0x08010b11
 8010ac4:	08010b11 	.word	0x08010b11
 8010ac8:	08010b11 	.word	0x08010b11
 8010acc:	08010b11 	.word	0x08010b11
 8010ad0:	08010b11 	.word	0x08010b11
 8010ad4:	08010b11 	.word	0x08010b11
 8010ad8:	08010b11 	.word	0x08010b11
 8010adc:	08010b09 	.word	0x08010b09
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae6:	e0bc      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010ae8:	2304      	movs	r3, #4
 8010aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aee:	e0b8      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010af0:	2308      	movs	r3, #8
 8010af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af6:	e0b4      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010af8:	2310      	movs	r3, #16
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afe:	e0b0      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b00:	2320      	movs	r3, #32
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b06:	e0ac      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b08:	2340      	movs	r3, #64	; 0x40
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0e:	e0a8      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b10:	2380      	movs	r3, #128	; 0x80
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b16:	e0a4      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a8f      	ldr	r2, [pc, #572]	; (8010d5c <UART_SetConfig+0x6a0>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d130      	bne.n	8010b84 <UART_SetConfig+0x4c8>
 8010b22:	4b8d      	ldr	r3, [pc, #564]	; (8010d58 <UART_SetConfig+0x69c>)
 8010b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b26:	f003 0307 	and.w	r3, r3, #7
 8010b2a:	2b05      	cmp	r3, #5
 8010b2c:	d826      	bhi.n	8010b7c <UART_SetConfig+0x4c0>
 8010b2e:	a201      	add	r2, pc, #4	; (adr r2, 8010b34 <UART_SetConfig+0x478>)
 8010b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b34:	08010b4d 	.word	0x08010b4d
 8010b38:	08010b55 	.word	0x08010b55
 8010b3c:	08010b5d 	.word	0x08010b5d
 8010b40:	08010b65 	.word	0x08010b65
 8010b44:	08010b6d 	.word	0x08010b6d
 8010b48:	08010b75 	.word	0x08010b75
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e086      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b54:	2304      	movs	r3, #4
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e082      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b5c:	2308      	movs	r3, #8
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e07e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b64:	2310      	movs	r3, #16
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e07a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b6c:	2320      	movs	r3, #32
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e076      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b74:	2340      	movs	r3, #64	; 0x40
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e072      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b7c:	2380      	movs	r3, #128	; 0x80
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e06e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a75      	ldr	r2, [pc, #468]	; (8010d60 <UART_SetConfig+0x6a4>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d130      	bne.n	8010bf0 <UART_SetConfig+0x534>
 8010b8e:	4b72      	ldr	r3, [pc, #456]	; (8010d58 <UART_SetConfig+0x69c>)
 8010b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b92:	f003 0307 	and.w	r3, r3, #7
 8010b96:	2b05      	cmp	r3, #5
 8010b98:	d826      	bhi.n	8010be8 <UART_SetConfig+0x52c>
 8010b9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ba0 <UART_SetConfig+0x4e4>)
 8010b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba0:	08010bb9 	.word	0x08010bb9
 8010ba4:	08010bc1 	.word	0x08010bc1
 8010ba8:	08010bc9 	.word	0x08010bc9
 8010bac:	08010bd1 	.word	0x08010bd1
 8010bb0:	08010bd9 	.word	0x08010bd9
 8010bb4:	08010be1 	.word	0x08010be1
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e050      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010bc0:	2304      	movs	r3, #4
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e04c      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010bc8:	2308      	movs	r3, #8
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e048      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010bd0:	2310      	movs	r3, #16
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e044      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010bd8:	2320      	movs	r3, #32
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e040      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010be0:	2340      	movs	r3, #64	; 0x40
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e03c      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010be8:	2380      	movs	r3, #128	; 0x80
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e038      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a5b      	ldr	r2, [pc, #364]	; (8010d64 <UART_SetConfig+0x6a8>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d130      	bne.n	8010c5c <UART_SetConfig+0x5a0>
 8010bfa:	4b57      	ldr	r3, [pc, #348]	; (8010d58 <UART_SetConfig+0x69c>)
 8010bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bfe:	f003 0307 	and.w	r3, r3, #7
 8010c02:	2b05      	cmp	r3, #5
 8010c04:	d826      	bhi.n	8010c54 <UART_SetConfig+0x598>
 8010c06:	a201      	add	r2, pc, #4	; (adr r2, 8010c0c <UART_SetConfig+0x550>)
 8010c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c0c:	08010c25 	.word	0x08010c25
 8010c10:	08010c2d 	.word	0x08010c2d
 8010c14:	08010c35 	.word	0x08010c35
 8010c18:	08010c3d 	.word	0x08010c3d
 8010c1c:	08010c45 	.word	0x08010c45
 8010c20:	08010c4d 	.word	0x08010c4d
 8010c24:	2302      	movs	r3, #2
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e01a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c2c:	2304      	movs	r3, #4
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e016      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c34:	2308      	movs	r3, #8
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e012      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c3c:	2310      	movs	r3, #16
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c42:	e00e      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c44:	2320      	movs	r3, #32
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e00a      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e006      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c54:	2380      	movs	r3, #128	; 0x80
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e002      	b.n	8010c62 <UART_SetConfig+0x5a6>
 8010c5c:	2380      	movs	r3, #128	; 0x80
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a3f      	ldr	r2, [pc, #252]	; (8010d64 <UART_SetConfig+0x6a8>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	f040 80f8 	bne.w	8010e5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c72:	2b20      	cmp	r3, #32
 8010c74:	dc46      	bgt.n	8010d04 <UART_SetConfig+0x648>
 8010c76:	2b02      	cmp	r3, #2
 8010c78:	f2c0 8082 	blt.w	8010d80 <UART_SetConfig+0x6c4>
 8010c7c:	3b02      	subs	r3, #2
 8010c7e:	2b1e      	cmp	r3, #30
 8010c80:	d87e      	bhi.n	8010d80 <UART_SetConfig+0x6c4>
 8010c82:	a201      	add	r2, pc, #4	; (adr r2, 8010c88 <UART_SetConfig+0x5cc>)
 8010c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c88:	08010d0b 	.word	0x08010d0b
 8010c8c:	08010d81 	.word	0x08010d81
 8010c90:	08010d13 	.word	0x08010d13
 8010c94:	08010d81 	.word	0x08010d81
 8010c98:	08010d81 	.word	0x08010d81
 8010c9c:	08010d81 	.word	0x08010d81
 8010ca0:	08010d23 	.word	0x08010d23
 8010ca4:	08010d81 	.word	0x08010d81
 8010ca8:	08010d81 	.word	0x08010d81
 8010cac:	08010d81 	.word	0x08010d81
 8010cb0:	08010d81 	.word	0x08010d81
 8010cb4:	08010d81 	.word	0x08010d81
 8010cb8:	08010d81 	.word	0x08010d81
 8010cbc:	08010d81 	.word	0x08010d81
 8010cc0:	08010d33 	.word	0x08010d33
 8010cc4:	08010d81 	.word	0x08010d81
 8010cc8:	08010d81 	.word	0x08010d81
 8010ccc:	08010d81 	.word	0x08010d81
 8010cd0:	08010d81 	.word	0x08010d81
 8010cd4:	08010d81 	.word	0x08010d81
 8010cd8:	08010d81 	.word	0x08010d81
 8010cdc:	08010d81 	.word	0x08010d81
 8010ce0:	08010d81 	.word	0x08010d81
 8010ce4:	08010d81 	.word	0x08010d81
 8010ce8:	08010d81 	.word	0x08010d81
 8010cec:	08010d81 	.word	0x08010d81
 8010cf0:	08010d81 	.word	0x08010d81
 8010cf4:	08010d81 	.word	0x08010d81
 8010cf8:	08010d81 	.word	0x08010d81
 8010cfc:	08010d81 	.word	0x08010d81
 8010d00:	08010d73 	.word	0x08010d73
 8010d04:	2b40      	cmp	r3, #64	; 0x40
 8010d06:	d037      	beq.n	8010d78 <UART_SetConfig+0x6bc>
 8010d08:	e03a      	b.n	8010d80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d0a:	f7fd fd59 	bl	800e7c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d10:	e03c      	b.n	8010d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fd fd68 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d20:	e034      	b.n	8010d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d22:	f107 0318 	add.w	r3, r7, #24
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fd feb4 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d30:	e02c      	b.n	8010d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d32:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <UART_SetConfig+0x69c>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f003 0320 	and.w	r3, r3, #32
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d016      	beq.n	8010d6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d3e:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <UART_SetConfig+0x69c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	08db      	lsrs	r3, r3, #3
 8010d44:	f003 0303 	and.w	r3, r3, #3
 8010d48:	4a07      	ldr	r2, [pc, #28]	; (8010d68 <UART_SetConfig+0x6ac>)
 8010d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8010d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d50:	e01c      	b.n	8010d8c <UART_SetConfig+0x6d0>
 8010d52:	bf00      	nop
 8010d54:	40011400 	.word	0x40011400
 8010d58:	58024400 	.word	0x58024400
 8010d5c:	40007800 	.word	0x40007800
 8010d60:	40007c00 	.word	0x40007c00
 8010d64:	58000c00 	.word	0x58000c00
 8010d68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010d6c:	4b9d      	ldr	r3, [pc, #628]	; (8010fe4 <UART_SetConfig+0x928>)
 8010d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d70:	e00c      	b.n	8010d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d72:	4b9d      	ldr	r3, [pc, #628]	; (8010fe8 <UART_SetConfig+0x92c>)
 8010d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d76:	e009      	b.n	8010d8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d7e:	e005      	b.n	8010d8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010d80:	2300      	movs	r3, #0
 8010d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010d84:	2301      	movs	r3, #1
 8010d86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010d8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f000 81de 	beq.w	8011150 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d98:	4a94      	ldr	r2, [pc, #592]	; (8010fec <UART_SetConfig+0x930>)
 8010d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010da6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	685a      	ldr	r2, [r3, #4]
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d305      	bcc.n	8010dc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d903      	bls.n	8010dcc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010dca:	e1c1      	b.n	8011150 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dce:	2200      	movs	r2, #0
 8010dd0:	60bb      	str	r3, [r7, #8]
 8010dd2:	60fa      	str	r2, [r7, #12]
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dd8:	4a84      	ldr	r2, [pc, #528]	; (8010fec <UART_SetConfig+0x930>)
 8010dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	2200      	movs	r2, #0
 8010de2:	603b      	str	r3, [r7, #0]
 8010de4:	607a      	str	r2, [r7, #4]
 8010de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010dee:	f7ef fc9b 	bl	8000728 <__aeabi_uldivmod>
 8010df2:	4602      	mov	r2, r0
 8010df4:	460b      	mov	r3, r1
 8010df6:	4610      	mov	r0, r2
 8010df8:	4619      	mov	r1, r3
 8010dfa:	f04f 0200 	mov.w	r2, #0
 8010dfe:	f04f 0300 	mov.w	r3, #0
 8010e02:	020b      	lsls	r3, r1, #8
 8010e04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e08:	0202      	lsls	r2, r0, #8
 8010e0a:	6979      	ldr	r1, [r7, #20]
 8010e0c:	6849      	ldr	r1, [r1, #4]
 8010e0e:	0849      	lsrs	r1, r1, #1
 8010e10:	2000      	movs	r0, #0
 8010e12:	460c      	mov	r4, r1
 8010e14:	4605      	mov	r5, r0
 8010e16:	eb12 0804 	adds.w	r8, r2, r4
 8010e1a:	eb43 0905 	adc.w	r9, r3, r5
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	469a      	mov	sl, r3
 8010e26:	4693      	mov	fp, r2
 8010e28:	4652      	mov	r2, sl
 8010e2a:	465b      	mov	r3, fp
 8010e2c:	4640      	mov	r0, r8
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f7ef fc7a 	bl	8000728 <__aeabi_uldivmod>
 8010e34:	4602      	mov	r2, r0
 8010e36:	460b      	mov	r3, r1
 8010e38:	4613      	mov	r3, r2
 8010e3a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010e42:	d308      	bcc.n	8010e56 <UART_SetConfig+0x79a>
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e4a:	d204      	bcs.n	8010e56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e52:	60da      	str	r2, [r3, #12]
 8010e54:	e17c      	b.n	8011150 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e5c:	e178      	b.n	8011150 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	69db      	ldr	r3, [r3, #28]
 8010e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e66:	f040 80c5 	bne.w	8010ff4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010e6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e6e:	2b20      	cmp	r3, #32
 8010e70:	dc48      	bgt.n	8010f04 <UART_SetConfig+0x848>
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	db7b      	blt.n	8010f6e <UART_SetConfig+0x8b2>
 8010e76:	2b20      	cmp	r3, #32
 8010e78:	d879      	bhi.n	8010f6e <UART_SetConfig+0x8b2>
 8010e7a:	a201      	add	r2, pc, #4	; (adr r2, 8010e80 <UART_SetConfig+0x7c4>)
 8010e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e80:	08010f0b 	.word	0x08010f0b
 8010e84:	08010f13 	.word	0x08010f13
 8010e88:	08010f6f 	.word	0x08010f6f
 8010e8c:	08010f6f 	.word	0x08010f6f
 8010e90:	08010f1b 	.word	0x08010f1b
 8010e94:	08010f6f 	.word	0x08010f6f
 8010e98:	08010f6f 	.word	0x08010f6f
 8010e9c:	08010f6f 	.word	0x08010f6f
 8010ea0:	08010f2b 	.word	0x08010f2b
 8010ea4:	08010f6f 	.word	0x08010f6f
 8010ea8:	08010f6f 	.word	0x08010f6f
 8010eac:	08010f6f 	.word	0x08010f6f
 8010eb0:	08010f6f 	.word	0x08010f6f
 8010eb4:	08010f6f 	.word	0x08010f6f
 8010eb8:	08010f6f 	.word	0x08010f6f
 8010ebc:	08010f6f 	.word	0x08010f6f
 8010ec0:	08010f3b 	.word	0x08010f3b
 8010ec4:	08010f6f 	.word	0x08010f6f
 8010ec8:	08010f6f 	.word	0x08010f6f
 8010ecc:	08010f6f 	.word	0x08010f6f
 8010ed0:	08010f6f 	.word	0x08010f6f
 8010ed4:	08010f6f 	.word	0x08010f6f
 8010ed8:	08010f6f 	.word	0x08010f6f
 8010edc:	08010f6f 	.word	0x08010f6f
 8010ee0:	08010f6f 	.word	0x08010f6f
 8010ee4:	08010f6f 	.word	0x08010f6f
 8010ee8:	08010f6f 	.word	0x08010f6f
 8010eec:	08010f6f 	.word	0x08010f6f
 8010ef0:	08010f6f 	.word	0x08010f6f
 8010ef4:	08010f6f 	.word	0x08010f6f
 8010ef8:	08010f6f 	.word	0x08010f6f
 8010efc:	08010f6f 	.word	0x08010f6f
 8010f00:	08010f61 	.word	0x08010f61
 8010f04:	2b40      	cmp	r3, #64	; 0x40
 8010f06:	d02e      	beq.n	8010f66 <UART_SetConfig+0x8aa>
 8010f08:	e031      	b.n	8010f6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f0a:	f7fb fca3 	bl	800c854 <HAL_RCC_GetPCLK1Freq>
 8010f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f10:	e033      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f12:	f7fb fcb5 	bl	800c880 <HAL_RCC_GetPCLK2Freq>
 8010f16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f18:	e02f      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fd fc64 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f28:	e027      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f2a:	f107 0318 	add.w	r3, r7, #24
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fd fdb0 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f38:	e01f      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f3a:	4b2d      	ldr	r3, [pc, #180]	; (8010ff0 <UART_SetConfig+0x934>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f003 0320 	and.w	r3, r3, #32
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d009      	beq.n	8010f5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f46:	4b2a      	ldr	r3, [pc, #168]	; (8010ff0 <UART_SetConfig+0x934>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	08db      	lsrs	r3, r3, #3
 8010f4c:	f003 0303 	and.w	r3, r3, #3
 8010f50:	4a24      	ldr	r2, [pc, #144]	; (8010fe4 <UART_SetConfig+0x928>)
 8010f52:	fa22 f303 	lsr.w	r3, r2, r3
 8010f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f58:	e00f      	b.n	8010f7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010f5a:	4b22      	ldr	r3, [pc, #136]	; (8010fe4 <UART_SetConfig+0x928>)
 8010f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f5e:	e00c      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f60:	4b21      	ldr	r3, [pc, #132]	; (8010fe8 <UART_SetConfig+0x92c>)
 8010f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f64:	e009      	b.n	8010f7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f6c:	e005      	b.n	8010f7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f72:	2301      	movs	r3, #1
 8010f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 80e7 	beq.w	8011150 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f86:	4a19      	ldr	r2, [pc, #100]	; (8010fec <UART_SetConfig+0x930>)
 8010f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f94:	005a      	lsls	r2, r3, #1
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	085b      	lsrs	r3, r3, #1
 8010f9c:	441a      	add	r2, r3
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010faa:	2b0f      	cmp	r3, #15
 8010fac:	d916      	bls.n	8010fdc <UART_SetConfig+0x920>
 8010fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fb4:	d212      	bcs.n	8010fdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	f023 030f 	bic.w	r3, r3, #15
 8010fbe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc2:	085b      	lsrs	r3, r3, #1
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	f003 0307 	and.w	r3, r3, #7
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010fd8:	60da      	str	r2, [r3, #12]
 8010fda:	e0b9      	b.n	8011150 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010fe2:	e0b5      	b.n	8011150 <UART_SetConfig+0xa94>
 8010fe4:	03d09000 	.word	0x03d09000
 8010fe8:	003d0900 	.word	0x003d0900
 8010fec:	0801c6c0 	.word	0x0801c6c0
 8010ff0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ff8:	2b20      	cmp	r3, #32
 8010ffa:	dc49      	bgt.n	8011090 <UART_SetConfig+0x9d4>
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	db7c      	blt.n	80110fa <UART_SetConfig+0xa3e>
 8011000:	2b20      	cmp	r3, #32
 8011002:	d87a      	bhi.n	80110fa <UART_SetConfig+0xa3e>
 8011004:	a201      	add	r2, pc, #4	; (adr r2, 801100c <UART_SetConfig+0x950>)
 8011006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801100a:	bf00      	nop
 801100c:	08011097 	.word	0x08011097
 8011010:	0801109f 	.word	0x0801109f
 8011014:	080110fb 	.word	0x080110fb
 8011018:	080110fb 	.word	0x080110fb
 801101c:	080110a7 	.word	0x080110a7
 8011020:	080110fb 	.word	0x080110fb
 8011024:	080110fb 	.word	0x080110fb
 8011028:	080110fb 	.word	0x080110fb
 801102c:	080110b7 	.word	0x080110b7
 8011030:	080110fb 	.word	0x080110fb
 8011034:	080110fb 	.word	0x080110fb
 8011038:	080110fb 	.word	0x080110fb
 801103c:	080110fb 	.word	0x080110fb
 8011040:	080110fb 	.word	0x080110fb
 8011044:	080110fb 	.word	0x080110fb
 8011048:	080110fb 	.word	0x080110fb
 801104c:	080110c7 	.word	0x080110c7
 8011050:	080110fb 	.word	0x080110fb
 8011054:	080110fb 	.word	0x080110fb
 8011058:	080110fb 	.word	0x080110fb
 801105c:	080110fb 	.word	0x080110fb
 8011060:	080110fb 	.word	0x080110fb
 8011064:	080110fb 	.word	0x080110fb
 8011068:	080110fb 	.word	0x080110fb
 801106c:	080110fb 	.word	0x080110fb
 8011070:	080110fb 	.word	0x080110fb
 8011074:	080110fb 	.word	0x080110fb
 8011078:	080110fb 	.word	0x080110fb
 801107c:	080110fb 	.word	0x080110fb
 8011080:	080110fb 	.word	0x080110fb
 8011084:	080110fb 	.word	0x080110fb
 8011088:	080110fb 	.word	0x080110fb
 801108c:	080110ed 	.word	0x080110ed
 8011090:	2b40      	cmp	r3, #64	; 0x40
 8011092:	d02e      	beq.n	80110f2 <UART_SetConfig+0xa36>
 8011094:	e031      	b.n	80110fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011096:	f7fb fbdd 	bl	800c854 <HAL_RCC_GetPCLK1Freq>
 801109a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801109c:	e033      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801109e:	f7fb fbef 	bl	800c880 <HAL_RCC_GetPCLK2Freq>
 80110a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110a4:	e02f      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fd fb9e 	bl	800e7ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110b4:	e027      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110b6:	f107 0318 	add.w	r3, r7, #24
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fd fcea 	bl	800ea94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110c4:	e01f      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110c6:	4b2d      	ldr	r3, [pc, #180]	; (801117c <UART_SetConfig+0xac0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f003 0320 	and.w	r3, r3, #32
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d009      	beq.n	80110e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110d2:	4b2a      	ldr	r3, [pc, #168]	; (801117c <UART_SetConfig+0xac0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	08db      	lsrs	r3, r3, #3
 80110d8:	f003 0303 	and.w	r3, r3, #3
 80110dc:	4a28      	ldr	r2, [pc, #160]	; (8011180 <UART_SetConfig+0xac4>)
 80110de:	fa22 f303 	lsr.w	r3, r2, r3
 80110e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110e4:	e00f      	b.n	8011106 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80110e6:	4b26      	ldr	r3, [pc, #152]	; (8011180 <UART_SetConfig+0xac4>)
 80110e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110ea:	e00c      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110ec:	4b25      	ldr	r3, [pc, #148]	; (8011184 <UART_SetConfig+0xac8>)
 80110ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f0:	e009      	b.n	8011106 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f8:	e005      	b.n	8011106 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80110fe:	2301      	movs	r3, #1
 8011100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011104:	bf00      	nop
    }

    if (pclk != 0U)
 8011106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011108:	2b00      	cmp	r3, #0
 801110a:	d021      	beq.n	8011150 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011110:	4a1d      	ldr	r2, [pc, #116]	; (8011188 <UART_SetConfig+0xacc>)
 8011112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011116:	461a      	mov	r2, r3
 8011118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801111a:	fbb3 f2f2 	udiv	r2, r3, r2
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	085b      	lsrs	r3, r3, #1
 8011124:	441a      	add	r2, r3
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	fbb2 f3f3 	udiv	r3, r2, r3
 801112e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011132:	2b0f      	cmp	r3, #15
 8011134:	d909      	bls.n	801114a <UART_SetConfig+0xa8e>
 8011136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801113c:	d205      	bcs.n	801114a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011140:	b29a      	uxth	r2, r3
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	60da      	str	r2, [r3, #12]
 8011148:	e002      	b.n	8011150 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801114a:	2301      	movs	r3, #1
 801114c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2201      	movs	r2, #1
 8011154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2201      	movs	r2, #1
 801115c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	2200      	movs	r2, #0
 8011164:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	2200      	movs	r2, #0
 801116a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801116c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011170:	4618      	mov	r0, r3
 8011172:	3748      	adds	r7, #72	; 0x48
 8011174:	46bd      	mov	sp, r7
 8011176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801117a:	bf00      	nop
 801117c:	58024400 	.word	0x58024400
 8011180:	03d09000 	.word	0x03d09000
 8011184:	003d0900 	.word	0x003d0900
 8011188:	0801c6c0 	.word	0x0801c6c0

0801118c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801118c:	b480      	push	{r7}
 801118e:	b083      	sub	sp, #12
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011198:	f003 0308 	and.w	r3, r3, #8
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00a      	beq.n	80111b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	430a      	orrs	r2, r1
 80111b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d00a      	beq.n	80111d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	430a      	orrs	r2, r1
 80111d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111dc:	f003 0302 	and.w	r3, r3, #2
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00a      	beq.n	80111fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	430a      	orrs	r2, r1
 80111f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111fe:	f003 0304 	and.w	r3, r3, #4
 8011202:	2b00      	cmp	r3, #0
 8011204:	d00a      	beq.n	801121c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	430a      	orrs	r2, r1
 801121a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011220:	f003 0310 	and.w	r3, r3, #16
 8011224:	2b00      	cmp	r3, #0
 8011226:	d00a      	beq.n	801123e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	689b      	ldr	r3, [r3, #8]
 801122e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	430a      	orrs	r2, r1
 801123c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011242:	f003 0320 	and.w	r3, r3, #32
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00a      	beq.n	8011260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	430a      	orrs	r2, r1
 801125e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011268:	2b00      	cmp	r3, #0
 801126a:	d01a      	beq.n	80112a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	430a      	orrs	r2, r1
 8011280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801128a:	d10a      	bne.n	80112a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00a      	beq.n	80112c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	605a      	str	r2, [r3, #4]
  }
}
 80112c4:	bf00      	nop
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b098      	sub	sp, #96	; 0x60
 80112d4:	af02      	add	r7, sp, #8
 80112d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80112e0:	f7f3 fd8a 	bl	8004df8 <HAL_GetTick>
 80112e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f003 0308 	and.w	r3, r3, #8
 80112f0:	2b08      	cmp	r3, #8
 80112f2:	d12f      	bne.n	8011354 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112f8:	9300      	str	r3, [sp, #0]
 80112fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112fc:	2200      	movs	r2, #0
 80112fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 f88e 	bl	8011424 <UART_WaitOnFlagUntilTimeout>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d022      	beq.n	8011354 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	e853 3f00 	ldrex	r3, [r3]
 801131a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801131c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801131e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011322:	653b      	str	r3, [r7, #80]	; 0x50
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	461a      	mov	r2, r3
 801132a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801132c:	647b      	str	r3, [r7, #68]	; 0x44
 801132e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011330:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011334:	e841 2300 	strex	r3, r2, [r1]
 8011338:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801133a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1e6      	bne.n	801130e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2220      	movs	r2, #32
 8011344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011350:	2303      	movs	r3, #3
 8011352:	e063      	b.n	801141c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f003 0304 	and.w	r3, r3, #4
 801135e:	2b04      	cmp	r3, #4
 8011360:	d149      	bne.n	80113f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011362:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801136a:	2200      	movs	r2, #0
 801136c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 f857 	bl	8011424 <UART_WaitOnFlagUntilTimeout>
 8011376:	4603      	mov	r3, r0
 8011378:	2b00      	cmp	r3, #0
 801137a:	d03c      	beq.n	80113f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011384:	e853 3f00 	ldrex	r3, [r3]
 8011388:	623b      	str	r3, [r7, #32]
   return(result);
 801138a:	6a3b      	ldr	r3, [r7, #32]
 801138c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	461a      	mov	r2, r3
 8011398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801139a:	633b      	str	r3, [r7, #48]	; 0x30
 801139c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801139e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113a2:	e841 2300 	strex	r3, r2, [r1]
 80113a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1e6      	bne.n	801137c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3308      	adds	r3, #8
 80113b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	e853 3f00 	ldrex	r3, [r3]
 80113bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	f023 0301 	bic.w	r3, r3, #1
 80113c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	3308      	adds	r3, #8
 80113cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113ce:	61fa      	str	r2, [r7, #28]
 80113d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d2:	69b9      	ldr	r1, [r7, #24]
 80113d4:	69fa      	ldr	r2, [r7, #28]
 80113d6:	e841 2300 	strex	r3, r2, [r1]
 80113da:	617b      	str	r3, [r7, #20]
   return(result);
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1e5      	bne.n	80113ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2220      	movs	r2, #32
 80113e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2200      	movs	r2, #0
 80113ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113f2:	2303      	movs	r3, #3
 80113f4:	e012      	b.n	801141c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2220      	movs	r2, #32
 80113fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2220      	movs	r2, #32
 8011402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2200      	movs	r2, #0
 801140a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2200      	movs	r2, #0
 8011416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801141a:	2300      	movs	r3, #0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3758      	adds	r7, #88	; 0x58
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b084      	sub	sp, #16
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	603b      	str	r3, [r7, #0]
 8011430:	4613      	mov	r3, r2
 8011432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011434:	e04f      	b.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801143c:	d04b      	beq.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801143e:	f7f3 fcdb 	bl	8004df8 <HAL_GetTick>
 8011442:	4602      	mov	r2, r0
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	1ad3      	subs	r3, r2, r3
 8011448:	69ba      	ldr	r2, [r7, #24]
 801144a:	429a      	cmp	r2, r3
 801144c:	d302      	bcc.n	8011454 <UART_WaitOnFlagUntilTimeout+0x30>
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011454:	2303      	movs	r3, #3
 8011456:	e04e      	b.n	80114f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0304 	and.w	r3, r3, #4
 8011462:	2b00      	cmp	r3, #0
 8011464:	d037      	beq.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	2b80      	cmp	r3, #128	; 0x80
 801146a:	d034      	beq.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	2b40      	cmp	r3, #64	; 0x40
 8011470:	d031      	beq.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	69db      	ldr	r3, [r3, #28]
 8011478:	f003 0308 	and.w	r3, r3, #8
 801147c:	2b08      	cmp	r3, #8
 801147e:	d110      	bne.n	80114a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	2208      	movs	r2, #8
 8011486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f000 f95b 	bl	8011744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2208      	movs	r2, #8
 8011492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2200      	movs	r2, #0
 801149a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801149e:	2301      	movs	r3, #1
 80114a0:	e029      	b.n	80114f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	69db      	ldr	r3, [r3, #28]
 80114a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114b0:	d111      	bne.n	80114d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f000 f941 	bl	8011744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2220      	movs	r2, #32
 80114c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80114d2:	2303      	movs	r3, #3
 80114d4:	e00f      	b.n	80114f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	69da      	ldr	r2, [r3, #28]
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	4013      	ands	r3, r2
 80114e0:	68ba      	ldr	r2, [r7, #8]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	bf0c      	ite	eq
 80114e6:	2301      	moveq	r3, #1
 80114e8:	2300      	movne	r3, #0
 80114ea:	b2db      	uxtb	r3, r3
 80114ec:	461a      	mov	r2, r3
 80114ee:	79fb      	ldrb	r3, [r7, #7]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d0a0      	beq.n	8011436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011500:	b480      	push	{r7}
 8011502:	b0a3      	sub	sp, #140	; 0x8c
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	4613      	mov	r3, r2
 801150c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	68ba      	ldr	r2, [r7, #8]
 8011512:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	88fa      	ldrh	r2, [r7, #6]
 8011518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	88fa      	ldrh	r2, [r7, #6]
 8011520:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	2200      	movs	r2, #0
 8011528:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	689b      	ldr	r3, [r3, #8]
 801152e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011532:	d10e      	bne.n	8011552 <UART_Start_Receive_IT+0x52>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	691b      	ldr	r3, [r3, #16]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d105      	bne.n	8011548 <UART_Start_Receive_IT+0x48>
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011546:	e02d      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	22ff      	movs	r2, #255	; 0xff
 801154c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011550:	e028      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10d      	bne.n	8011576 <UART_Start_Receive_IT+0x76>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	691b      	ldr	r3, [r3, #16]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d104      	bne.n	801156c <UART_Start_Receive_IT+0x6c>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	22ff      	movs	r2, #255	; 0xff
 8011566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801156a:	e01b      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	227f      	movs	r2, #127	; 0x7f
 8011570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011574:	e016      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801157e:	d10d      	bne.n	801159c <UART_Start_Receive_IT+0x9c>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d104      	bne.n	8011592 <UART_Start_Receive_IT+0x92>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	227f      	movs	r2, #127	; 0x7f
 801158c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011590:	e008      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	223f      	movs	r2, #63	; 0x3f
 8011596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801159a:	e003      	b.n	80115a4 <UART_Start_Receive_IT+0xa4>
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2200      	movs	r2, #0
 80115a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2200      	movs	r2, #0
 80115a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2222      	movs	r2, #34	; 0x22
 80115b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	3308      	adds	r3, #8
 80115ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115be:	e853 3f00 	ldrex	r3, [r3]
 80115c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80115c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115c6:	f043 0301 	orr.w	r3, r3, #1
 80115ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	3308      	adds	r3, #8
 80115d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80115d8:	673a      	str	r2, [r7, #112]	; 0x70
 80115da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80115de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80115e0:	e841 2300 	strex	r3, r2, [r1]
 80115e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80115e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1e3      	bne.n	80115b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80115f4:	d14f      	bne.n	8011696 <UART_Start_Receive_IT+0x196>
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80115fc:	88fa      	ldrh	r2, [r7, #6]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d349      	bcc.n	8011696 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801160a:	d107      	bne.n	801161c <UART_Start_Receive_IT+0x11c>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	691b      	ldr	r3, [r3, #16]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d103      	bne.n	801161c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	4a47      	ldr	r2, [pc, #284]	; (8011734 <UART_Start_Receive_IT+0x234>)
 8011618:	675a      	str	r2, [r3, #116]	; 0x74
 801161a:	e002      	b.n	8011622 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	4a46      	ldr	r2, [pc, #280]	; (8011738 <UART_Start_Receive_IT+0x238>)
 8011620:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d01a      	beq.n	8011660 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011632:	e853 3f00 	ldrex	r3, [r3]
 8011636:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801163e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	461a      	mov	r2, r3
 8011648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801164c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801164e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011654:	e841 2300 	strex	r3, r2, [r1]
 8011658:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801165a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1e4      	bne.n	801162a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	3308      	adds	r3, #8
 8011666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166a:	e853 3f00 	ldrex	r3, [r3]
 801166e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	3308      	adds	r3, #8
 801167e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011680:	64ba      	str	r2, [r7, #72]	; 0x48
 8011682:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011688:	e841 2300 	strex	r3, r2, [r1]
 801168c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801168e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1e5      	bne.n	8011660 <UART_Start_Receive_IT+0x160>
 8011694:	e046      	b.n	8011724 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801169e:	d107      	bne.n	80116b0 <UART_Start_Receive_IT+0x1b0>
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d103      	bne.n	80116b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	4a24      	ldr	r2, [pc, #144]	; (801173c <UART_Start_Receive_IT+0x23c>)
 80116ac:	675a      	str	r2, [r3, #116]	; 0x74
 80116ae:	e002      	b.n	80116b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	4a23      	ldr	r2, [pc, #140]	; (8011740 <UART_Start_Receive_IT+0x240>)
 80116b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d019      	beq.n	80116f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	e853 3f00 	ldrex	r3, [r3]
 80116ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80116cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80116d2:	677b      	str	r3, [r7, #116]	; 0x74
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	461a      	mov	r2, r3
 80116da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116dc:	637b      	str	r3, [r7, #52]	; 0x34
 80116de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116e4:	e841 2300 	strex	r3, r2, [r1]
 80116e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d1e6      	bne.n	80116be <UART_Start_Receive_IT+0x1be>
 80116f0:	e018      	b.n	8011724 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	e853 3f00 	ldrex	r3, [r3]
 80116fe:	613b      	str	r3, [r7, #16]
   return(result);
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	f043 0320 	orr.w	r3, r3, #32
 8011706:	67bb      	str	r3, [r7, #120]	; 0x78
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	461a      	mov	r2, r3
 801170e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011710:	623b      	str	r3, [r7, #32]
 8011712:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011714:	69f9      	ldr	r1, [r7, #28]
 8011716:	6a3a      	ldr	r2, [r7, #32]
 8011718:	e841 2300 	strex	r3, r2, [r1]
 801171c:	61bb      	str	r3, [r7, #24]
   return(result);
 801171e:	69bb      	ldr	r3, [r7, #24]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1e6      	bne.n	80116f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	378c      	adds	r7, #140	; 0x8c
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	08011f65 	.word	0x08011f65
 8011738:	08011c05 	.word	0x08011c05
 801173c:	08011a4d 	.word	0x08011a4d
 8011740:	08011895 	.word	0x08011895

08011744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011744:	b480      	push	{r7}
 8011746:	b095      	sub	sp, #84	; 0x54
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011754:	e853 3f00 	ldrex	r3, [r3]
 8011758:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	461a      	mov	r2, r3
 8011768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801176a:	643b      	str	r3, [r7, #64]	; 0x40
 801176c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801176e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011772:	e841 2300 	strex	r3, r2, [r1]
 8011776:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1e6      	bne.n	801174c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	3308      	adds	r3, #8
 8011784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	e853 3f00 	ldrex	r3, [r3]
 801178c:	61fb      	str	r3, [r7, #28]
   return(result);
 801178e:	69fa      	ldr	r2, [r7, #28]
 8011790:	4b1e      	ldr	r3, [pc, #120]	; (801180c <UART_EndRxTransfer+0xc8>)
 8011792:	4013      	ands	r3, r2
 8011794:	64bb      	str	r3, [r7, #72]	; 0x48
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3308      	adds	r3, #8
 801179c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801179e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80117a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117a6:	e841 2300 	strex	r3, r2, [r1]
 80117aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1e5      	bne.n	801177e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d118      	bne.n	80117ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	e853 3f00 	ldrex	r3, [r3]
 80117c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f023 0310 	bic.w	r3, r3, #16
 80117ce:	647b      	str	r3, [r7, #68]	; 0x44
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	461a      	mov	r2, r3
 80117d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117d8:	61bb      	str	r3, [r7, #24]
 80117da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117dc:	6979      	ldr	r1, [r7, #20]
 80117de:	69ba      	ldr	r2, [r7, #24]
 80117e0:	e841 2300 	strex	r3, r2, [r1]
 80117e4:	613b      	str	r3, [r7, #16]
   return(result);
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d1e6      	bne.n	80117ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2220      	movs	r2, #32
 80117f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2200      	movs	r2, #0
 80117fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011800:	bf00      	nop
 8011802:	3754      	adds	r7, #84	; 0x54
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	effffffe 	.word	0xeffffffe

08011810 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801181c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2200      	movs	r2, #0
 801182a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7fe ff2e 	bl	8010690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	e853 3f00 	ldrex	r3, [r3]
 8011850:	60bb      	str	r3, [r7, #8]
   return(result);
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011858:	61fb      	str	r3, [r7, #28]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	461a      	mov	r2, r3
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	61bb      	str	r3, [r7, #24]
 8011864:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011866:	6979      	ldr	r1, [r7, #20]
 8011868:	69ba      	ldr	r2, [r7, #24]
 801186a:	e841 2300 	strex	r3, r2, [r1]
 801186e:	613b      	str	r3, [r7, #16]
   return(result);
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1e6      	bne.n	8011844 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2220      	movs	r2, #32
 801187a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7f2 fb5b 	bl	8003f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801188a:	bf00      	nop
 801188c:	3720      	adds	r7, #32
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
	...

08011894 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b09c      	sub	sp, #112	; 0x70
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118ac:	2b22      	cmp	r3, #34	; 0x22
 80118ae:	f040 80be 	bne.w	8011a2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80118bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80118c0:	b2d9      	uxtb	r1, r3
 80118c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80118c6:	b2da      	uxtb	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118cc:	400a      	ands	r2, r1
 80118ce:	b2d2      	uxtb	r2, r2
 80118d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	3b01      	subs	r3, #1
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f040 80a1 	bne.w	8011a3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011904:	e853 3f00 	ldrex	r3, [r3]
 8011908:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801190a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801190c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011910:	66bb      	str	r3, [r7, #104]	; 0x68
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801191a:	65bb      	str	r3, [r7, #88]	; 0x58
 801191c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011922:	e841 2300 	strex	r3, r2, [r1]
 8011926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1e6      	bne.n	80118fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3308      	adds	r3, #8
 8011934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	e853 3f00 	ldrex	r3, [r3]
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011940:	f023 0301 	bic.w	r3, r3, #1
 8011944:	667b      	str	r3, [r7, #100]	; 0x64
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	3308      	adds	r3, #8
 801194c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801194e:	647a      	str	r2, [r7, #68]	; 0x44
 8011950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011956:	e841 2300 	strex	r3, r2, [r1]
 801195a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1e5      	bne.n	801192e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2220      	movs	r2, #32
 8011966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2200      	movs	r2, #0
 8011974:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	4a33      	ldr	r2, [pc, #204]	; (8011a48 <UART_RxISR_8BIT+0x1b4>)
 801197c:	4293      	cmp	r3, r2
 801197e:	d01f      	beq.n	80119c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801198a:	2b00      	cmp	r3, #0
 801198c:	d018      	beq.n	80119c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011996:	e853 3f00 	ldrex	r3, [r3]
 801199a:	623b      	str	r3, [r7, #32]
   return(result);
 801199c:	6a3b      	ldr	r3, [r7, #32]
 801199e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80119a2:	663b      	str	r3, [r7, #96]	; 0x60
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	461a      	mov	r2, r3
 80119aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119ac:	633b      	str	r3, [r7, #48]	; 0x30
 80119ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119b4:	e841 2300 	strex	r3, r2, [r1]
 80119b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80119ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d1e6      	bne.n	801198e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d12e      	bne.n	8011a26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2200      	movs	r2, #0
 80119cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	e853 3f00 	ldrex	r3, [r3]
 80119da:	60fb      	str	r3, [r7, #12]
   return(result);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f023 0310 	bic.w	r3, r3, #16
 80119e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	461a      	mov	r2, r3
 80119ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119ec:	61fb      	str	r3, [r7, #28]
 80119ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f0:	69b9      	ldr	r1, [r7, #24]
 80119f2:	69fa      	ldr	r2, [r7, #28]
 80119f4:	e841 2300 	strex	r3, r2, [r1]
 80119f8:	617b      	str	r3, [r7, #20]
   return(result);
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1e6      	bne.n	80119ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	69db      	ldr	r3, [r3, #28]
 8011a06:	f003 0310 	and.w	r3, r3, #16
 8011a0a:	2b10      	cmp	r3, #16
 8011a0c:	d103      	bne.n	8011a16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2210      	movs	r2, #16
 8011a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7fe fe40 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a24:	e00b      	b.n	8011a3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7f2 fa94 	bl	8003f54 <HAL_UART_RxCpltCallback>
}
 8011a2c:	e007      	b.n	8011a3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	699a      	ldr	r2, [r3, #24]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f042 0208 	orr.w	r2, r2, #8
 8011a3c:	619a      	str	r2, [r3, #24]
}
 8011a3e:	bf00      	nop
 8011a40:	3770      	adds	r7, #112	; 0x70
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	58000c00 	.word	0x58000c00

08011a4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b09c      	sub	sp, #112	; 0x70
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a64:	2b22      	cmp	r3, #34	; 0x22
 8011a66:	f040 80be 	bne.w	8011be6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011a7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011a7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011a82:	4013      	ands	r3, r2
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a8e:	1c9a      	adds	r2, r3, #2
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f040 80a1 	bne.w	8011bf6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011abc:	e853 3f00 	ldrex	r3, [r3]
 8011ac0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8011ad4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ada:	e841 2300 	strex	r3, r2, [r1]
 8011ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1e6      	bne.n	8011ab4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	3308      	adds	r3, #8
 8011aec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af0:	e853 3f00 	ldrex	r3, [r3]
 8011af4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	f023 0301 	bic.w	r3, r3, #1
 8011afc:	663b      	str	r3, [r7, #96]	; 0x60
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	3308      	adds	r3, #8
 8011b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b06:	643a      	str	r2, [r7, #64]	; 0x40
 8011b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b0e:	e841 2300 	strex	r3, r2, [r1]
 8011b12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1e5      	bne.n	8011ae6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2220      	movs	r2, #32
 8011b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2200      	movs	r2, #0
 8011b26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4a33      	ldr	r2, [pc, #204]	; (8011c00 <UART_RxISR_16BIT+0x1b4>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d01f      	beq.n	8011b78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d018      	beq.n	8011b78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4c:	6a3b      	ldr	r3, [r7, #32]
 8011b4e:	e853 3f00 	ldrex	r3, [r3]
 8011b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	461a      	mov	r2, r3
 8011b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b6c:	e841 2300 	strex	r3, r2, [r1]
 8011b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1e6      	bne.n	8011b46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d12e      	bne.n	8011bde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	e853 3f00 	ldrex	r3, [r3]
 8011b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	f023 0310 	bic.w	r3, r3, #16
 8011b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ba4:	61bb      	str	r3, [r7, #24]
 8011ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ba8:	6979      	ldr	r1, [r7, #20]
 8011baa:	69ba      	ldr	r2, [r7, #24]
 8011bac:	e841 2300 	strex	r3, r2, [r1]
 8011bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1e6      	bne.n	8011b86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	69db      	ldr	r3, [r3, #28]
 8011bbe:	f003 0310 	and.w	r3, r3, #16
 8011bc2:	2b10      	cmp	r3, #16
 8011bc4:	d103      	bne.n	8011bce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2210      	movs	r2, #16
 8011bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7fe fd64 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011bdc:	e00b      	b.n	8011bf6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7f2 f9b8 	bl	8003f54 <HAL_UART_RxCpltCallback>
}
 8011be4:	e007      	b.n	8011bf6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	699a      	ldr	r2, [r3, #24]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f042 0208 	orr.w	r2, r2, #8
 8011bf4:	619a      	str	r2, [r3, #24]
}
 8011bf6:	bf00      	nop
 8011bf8:	3770      	adds	r7, #112	; 0x70
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	58000c00 	.word	0x58000c00

08011c04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b0ac      	sub	sp, #176	; 0xb0
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c3a:	2b22      	cmp	r3, #34	; 0x22
 8011c3c:	f040 8180 	bne.w	8011f40 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011c4a:	e123      	b.n	8011e94 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011c56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011c5a:	b2d9      	uxtb	r1, r3
 8011c5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c66:	400a      	ands	r2, r1
 8011c68:	b2d2      	uxtb	r2, r2
 8011c6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c70:	1c5a      	adds	r2, r3, #1
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	69db      	ldr	r3, [r3, #28]
 8011c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c96:	f003 0307 	and.w	r3, r3, #7
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d053      	beq.n	8011d46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ca2:	f003 0301 	and.w	r3, r3, #1
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <UART_RxISR_8BIT_FIFOEN+0xca>
 8011caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00b      	beq.n	8011cce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2201      	movs	r2, #1
 8011cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cc4:	f043 0201 	orr.w	r2, r3, #1
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011cd2:	f003 0302 	and.w	r3, r3, #2
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d011      	beq.n	8011cfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00b      	beq.n	8011cfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2202      	movs	r2, #2
 8011cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cf4:	f043 0204 	orr.w	r2, r3, #4
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d02:	f003 0304 	and.w	r3, r3, #4
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d011      	beq.n	8011d2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d00b      	beq.n	8011d2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2204      	movs	r2, #4
 8011d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d24:	f043 0202 	orr.w	r2, r3, #2
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d006      	beq.n	8011d46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7fe fca9 	bl	8010690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f040 80a0 	bne.w	8011e94 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d5c:	e853 3f00 	ldrex	r3, [r3]
 8011d60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011d78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011d7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d7e:	e841 2300 	strex	r3, r2, [r1]
 8011d82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1e4      	bne.n	8011d54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	3308      	adds	r3, #8
 8011d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d94:	e853 3f00 	ldrex	r3, [r3]
 8011d98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d9c:	4b6e      	ldr	r3, [pc, #440]	; (8011f58 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011d9e:	4013      	ands	r3, r2
 8011da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	3308      	adds	r3, #8
 8011daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011dae:	66ba      	str	r2, [r7, #104]	; 0x68
 8011db0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011db4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011db6:	e841 2300 	strex	r3, r2, [r1]
 8011dba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1e3      	bne.n	8011d8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2220      	movs	r2, #32
 8011dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	4a60      	ldr	r2, [pc, #384]	; (8011f5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d021      	beq.n	8011e24 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	685b      	ldr	r3, [r3, #4]
 8011de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d01a      	beq.n	8011e24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011df6:	e853 3f00 	ldrex	r3, [r3]
 8011dfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011e10:	657b      	str	r3, [r7, #84]	; 0x54
 8011e12:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011e16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e18:	e841 2300 	strex	r3, r2, [r1]
 8011e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1e4      	bne.n	8011dee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d130      	bne.n	8011e8e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e3a:	e853 3f00 	ldrex	r3, [r3]
 8011e3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e42:	f023 0310 	bic.w	r3, r3, #16
 8011e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	461a      	mov	r2, r3
 8011e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e54:	643b      	str	r3, [r7, #64]	; 0x40
 8011e56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e5c:	e841 2300 	strex	r3, r2, [r1]
 8011e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1e4      	bne.n	8011e32 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	69db      	ldr	r3, [r3, #28]
 8011e6e:	f003 0310 	and.w	r3, r3, #16
 8011e72:	2b10      	cmp	r3, #16
 8011e74:	d103      	bne.n	8011e7e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2210      	movs	r2, #16
 8011e7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e84:	4619      	mov	r1, r3
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f7fe fc0c 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
 8011e8c:	e002      	b.n	8011e94 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7f2 f860 	bl	8003f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d006      	beq.n	8011eaa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ea0:	f003 0320 	and.w	r3, r3, #32
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f47f aed1 	bne.w	8011c4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011eb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011eb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d049      	beq.n	8011f50 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ec2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d242      	bcs.n	8011f50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ed2:	6a3b      	ldr	r3, [r7, #32]
 8011ed4:	e853 3f00 	ldrex	r3, [r3]
 8011ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	3308      	adds	r3, #8
 8011eea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ef6:	e841 2300 	strex	r3, r2, [r1]
 8011efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d1e3      	bne.n	8011eca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4a16      	ldr	r2, [pc, #88]	; (8011f60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011f06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	e853 3f00 	ldrex	r3, [r3]
 8011f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	f043 0320 	orr.w	r3, r3, #32
 8011f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	461a      	mov	r2, r3
 8011f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f2a:	61bb      	str	r3, [r7, #24]
 8011f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2e:	6979      	ldr	r1, [r7, #20]
 8011f30:	69ba      	ldr	r2, [r7, #24]
 8011f32:	e841 2300 	strex	r3, r2, [r1]
 8011f36:	613b      	str	r3, [r7, #16]
   return(result);
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e4      	bne.n	8011f08 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f3e:	e007      	b.n	8011f50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	699a      	ldr	r2, [r3, #24]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f042 0208 	orr.w	r2, r2, #8
 8011f4e:	619a      	str	r2, [r3, #24]
}
 8011f50:	bf00      	nop
 8011f52:	37b0      	adds	r7, #176	; 0xb0
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}
 8011f58:	effffffe 	.word	0xeffffffe
 8011f5c:	58000c00 	.word	0x58000c00
 8011f60:	08011895 	.word	0x08011895

08011f64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b0ae      	sub	sp, #184	; 0xb8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f72:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	69db      	ldr	r3, [r3, #28]
 8011f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f9a:	2b22      	cmp	r3, #34	; 0x22
 8011f9c:	f040 8184 	bne.w	80122a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fa6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011faa:	e127      	b.n	80121fc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011fbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011fc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011fc6:	4013      	ands	r3, r2
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011fce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fd4:	1c9a      	adds	r2, r3, #2
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	3b01      	subs	r3, #1
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	69db      	ldr	r3, [r3, #28]
 8011ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ffa:	f003 0307 	and.w	r3, r3, #7
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d053      	beq.n	80120aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	d011      	beq.n	8012032 <UART_RxISR_16BIT_FIFOEN+0xce>
 801200e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012016:	2b00      	cmp	r3, #0
 8012018:	d00b      	beq.n	8012032 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2201      	movs	r2, #1
 8012020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012028:	f043 0201 	orr.w	r2, r3, #1
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012036:	f003 0302 	and.w	r3, r3, #2
 801203a:	2b00      	cmp	r3, #0
 801203c:	d011      	beq.n	8012062 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801203e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012042:	f003 0301 	and.w	r3, r3, #1
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00b      	beq.n	8012062 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2202      	movs	r2, #2
 8012050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012058:	f043 0204 	orr.w	r2, r3, #4
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012066:	f003 0304 	and.w	r3, r3, #4
 801206a:	2b00      	cmp	r3, #0
 801206c:	d011      	beq.n	8012092 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012072:	f003 0301 	and.w	r3, r3, #1
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00b      	beq.n	8012092 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2204      	movs	r2, #4
 8012080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012088:	f043 0202 	orr.w	r2, r3, #2
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012098:	2b00      	cmp	r3, #0
 801209a:	d006      	beq.n	80120aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7fe faf7 	bl	8010690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f040 80a2 	bne.w	80121fc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120c0:	e853 3f00 	ldrex	r3, [r3]
 80120c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80120c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80120c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	461a      	mov	r2, r3
 80120d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80120de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80120e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80120e6:	e841 2300 	strex	r3, r2, [r1]
 80120ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80120ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e2      	bne.n	80120b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3308      	adds	r3, #8
 80120f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012104:	4b6e      	ldr	r3, [pc, #440]	; (80122c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012106:	4013      	ands	r3, r2
 8012108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	3308      	adds	r3, #8
 8012112:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012116:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012118:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801211c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801211e:	e841 2300 	strex	r3, r2, [r1]
 8012122:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1e3      	bne.n	80120f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2220      	movs	r2, #32
 801212e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4a60      	ldr	r2, [pc, #384]	; (80122c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012144:	4293      	cmp	r3, r2
 8012146:	d021      	beq.n	801218c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012152:	2b00      	cmp	r3, #0
 8012154:	d01a      	beq.n	801218c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801215e:	e853 3f00 	ldrex	r3, [r3]
 8012162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801216a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	461a      	mov	r2, r3
 8012174:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012178:	65bb      	str	r3, [r7, #88]	; 0x58
 801217a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801217e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012180:	e841 2300 	strex	r3, r2, [r1]
 8012184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1e4      	bne.n	8012156 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012190:	2b01      	cmp	r3, #1
 8012192:	d130      	bne.n	80121f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a2:	e853 3f00 	ldrex	r3, [r3]
 80121a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80121a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121aa:	f023 0310 	bic.w	r3, r3, #16
 80121ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80121bc:	647b      	str	r3, [r7, #68]	; 0x44
 80121be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80121c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121c4:	e841 2300 	strex	r3, r2, [r1]
 80121c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80121ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1e4      	bne.n	801219a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	69db      	ldr	r3, [r3, #28]
 80121d6:	f003 0310 	and.w	r3, r3, #16
 80121da:	2b10      	cmp	r3, #16
 80121dc:	d103      	bne.n	80121e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2210      	movs	r2, #16
 80121e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80121ec:	4619      	mov	r1, r3
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7fe fa58 	bl	80106a4 <HAL_UARTEx_RxEventCallback>
 80121f4:	e002      	b.n	80121fc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f7f1 feac 	bl	8003f54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012200:	2b00      	cmp	r3, #0
 8012202:	d006      	beq.n	8012212 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012208:	f003 0320 	and.w	r3, r3, #32
 801220c:	2b00      	cmp	r3, #0
 801220e:	f47f aecd 	bne.w	8011fac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012218:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801221c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012220:	2b00      	cmp	r3, #0
 8012222:	d049      	beq.n	80122b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801222a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801222e:	429a      	cmp	r2, r3
 8012230:	d242      	bcs.n	80122b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	3308      	adds	r3, #8
 8012238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223c:	e853 3f00 	ldrex	r3, [r3]
 8012240:	623b      	str	r3, [r7, #32]
   return(result);
 8012242:	6a3b      	ldr	r3, [r7, #32]
 8012244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3308      	adds	r3, #8
 8012252:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012256:	633a      	str	r2, [r7, #48]	; 0x30
 8012258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801225a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801225c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225e:	e841 2300 	strex	r3, r2, [r1]
 8012262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1e3      	bne.n	8012232 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a16      	ldr	r2, [pc, #88]	; (80122c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801226e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	e853 3f00 	ldrex	r3, [r3]
 801227c:	60fb      	str	r3, [r7, #12]
   return(result);
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	f043 0320 	orr.w	r3, r3, #32
 8012284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	461a      	mov	r2, r3
 801228e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012292:	61fb      	str	r3, [r7, #28]
 8012294:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012296:	69b9      	ldr	r1, [r7, #24]
 8012298:	69fa      	ldr	r2, [r7, #28]
 801229a:	e841 2300 	strex	r3, r2, [r1]
 801229e:	617b      	str	r3, [r7, #20]
   return(result);
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d1e4      	bne.n	8012270 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80122a6:	e007      	b.n	80122b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	699a      	ldr	r2, [r3, #24]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f042 0208 	orr.w	r2, r2, #8
 80122b6:	619a      	str	r2, [r3, #24]
}
 80122b8:	bf00      	nop
 80122ba:	37b8      	adds	r7, #184	; 0xb8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	effffffe 	.word	0xeffffffe
 80122c4:	58000c00 	.word	0x58000c00
 80122c8:	08011a4d 	.word	0x08011a4d

080122cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80122d4:	bf00      	nop
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80122e8:	bf00      	nop
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80122fc:	bf00      	nop
 80122fe:	370c      	adds	r7, #12
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012316:	2b01      	cmp	r3, #1
 8012318:	d101      	bne.n	801231e <HAL_UARTEx_DisableFifoMode+0x16>
 801231a:	2302      	movs	r3, #2
 801231c:	e027      	b.n	801236e <HAL_UARTEx_DisableFifoMode+0x66>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2201      	movs	r2, #1
 8012322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2224      	movs	r2, #36	; 0x24
 801232a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f022 0201 	bic.w	r2, r2, #1
 8012344:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801234c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2220      	movs	r2, #32
 8012360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2200      	movs	r2, #0
 8012368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801236c:	2300      	movs	r3, #0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b084      	sub	sp, #16
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801238a:	2b01      	cmp	r3, #1
 801238c:	d101      	bne.n	8012392 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801238e:	2302      	movs	r3, #2
 8012390:	e02d      	b.n	80123ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2201      	movs	r2, #1
 8012396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2224      	movs	r2, #36	; 0x24
 801239e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f022 0201 	bic.w	r2, r2, #1
 80123b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	430a      	orrs	r2, r1
 80123cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f850 	bl	8012474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2220      	movs	r2, #32
 80123e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123f6:	b580      	push	{r7, lr}
 80123f8:	b084      	sub	sp, #16
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
 80123fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012406:	2b01      	cmp	r3, #1
 8012408:	d101      	bne.n	801240e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801240a:	2302      	movs	r3, #2
 801240c:	e02d      	b.n	801246a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2201      	movs	r2, #1
 8012412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2224      	movs	r2, #36	; 0x24
 801241a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f022 0201 	bic.w	r2, r2, #1
 8012434:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	683a      	ldr	r2, [r7, #0]
 8012446:	430a      	orrs	r2, r1
 8012448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 f812 	bl	8012474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	68fa      	ldr	r2, [r7, #12]
 8012456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2220      	movs	r2, #32
 801245c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2200      	movs	r2, #0
 8012464:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012468:	2300      	movs	r3, #0
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
	...

08012474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012474:	b480      	push	{r7}
 8012476:	b085      	sub	sp, #20
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012480:	2b00      	cmp	r3, #0
 8012482:	d108      	bne.n	8012496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2201      	movs	r2, #1
 8012488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2201      	movs	r2, #1
 8012490:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012494:	e031      	b.n	80124fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012496:	2310      	movs	r3, #16
 8012498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801249a:	2310      	movs	r3, #16
 801249c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	0e5b      	lsrs	r3, r3, #25
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	f003 0307 	and.w	r3, r3, #7
 80124ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	0f5b      	lsrs	r3, r3, #29
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	f003 0307 	and.w	r3, r3, #7
 80124bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124be:	7bbb      	ldrb	r3, [r7, #14]
 80124c0:	7b3a      	ldrb	r2, [r7, #12]
 80124c2:	4911      	ldr	r1, [pc, #68]	; (8012508 <UARTEx_SetNbDataToProcess+0x94>)
 80124c4:	5c8a      	ldrb	r2, [r1, r2]
 80124c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124ca:	7b3a      	ldrb	r2, [r7, #12]
 80124cc:	490f      	ldr	r1, [pc, #60]	; (801250c <UARTEx_SetNbDataToProcess+0x98>)
 80124ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80124d4:	b29a      	uxth	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124dc:	7bfb      	ldrb	r3, [r7, #15]
 80124de:	7b7a      	ldrb	r2, [r7, #13]
 80124e0:	4909      	ldr	r1, [pc, #36]	; (8012508 <UARTEx_SetNbDataToProcess+0x94>)
 80124e2:	5c8a      	ldrb	r2, [r1, r2]
 80124e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80124e8:	7b7a      	ldrb	r2, [r7, #13]
 80124ea:	4908      	ldr	r1, [pc, #32]	; (801250c <UARTEx_SetNbDataToProcess+0x98>)
 80124ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80124fa:	bf00      	nop
 80124fc:	3714      	adds	r7, #20
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop
 8012508:	0801c6d8 	.word	0x0801c6d8
 801250c:	0801c6e0 	.word	0x0801c6e0

08012510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012510:	b084      	sub	sp, #16
 8012512:	b580      	push	{r7, lr}
 8012514:	b084      	sub	sp, #16
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
 801251a:	f107 001c 	add.w	r0, r7, #28
 801251e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012522:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012526:	2b01      	cmp	r3, #1
 8012528:	d121      	bne.n	801256e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68da      	ldr	r2, [r3, #12]
 801253a:	4b2c      	ldr	r3, [pc, #176]	; (80125ec <USB_CoreInit+0xdc>)
 801253c:	4013      	ands	r3, r2
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801254e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012552:	2b01      	cmp	r3, #1
 8012554:	d105      	bne.n	8012562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	68db      	ldr	r3, [r3, #12]
 801255a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f001 faf6 	bl	8013b54 <USB_CoreReset>
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]
 801256c:	e01b      	b.n	80125a6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 faea 	bl	8013b54 <USB_CoreReset>
 8012580:	4603      	mov	r3, r0
 8012582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012584:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012588:	2b00      	cmp	r3, #0
 801258a:	d106      	bne.n	801259a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	639a      	str	r2, [r3, #56]	; 0x38
 8012598:	e005      	b.n	80125a6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801259e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80125a6:	7fbb      	ldrb	r3, [r7, #30]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d116      	bne.n	80125da <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80125ba:	4b0d      	ldr	r3, [pc, #52]	; (80125f0 <USB_CoreInit+0xe0>)
 80125bc:	4313      	orrs	r3, r2
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	689b      	ldr	r3, [r3, #8]
 80125c6:	f043 0206 	orr.w	r2, r3, #6
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	f043 0220 	orr.w	r2, r3, #32
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80125da:	7bfb      	ldrb	r3, [r7, #15]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3710      	adds	r7, #16
 80125e0:	46bd      	mov	sp, r7
 80125e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125e6:	b004      	add	sp, #16
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	ffbdffbf 	.word	0xffbdffbf
 80125f0:	03ee0000 	.word	0x03ee0000

080125f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	4613      	mov	r3, r2
 8012600:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012602:	79fb      	ldrb	r3, [r7, #7]
 8012604:	2b02      	cmp	r3, #2
 8012606:	d165      	bne.n	80126d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	4a41      	ldr	r2, [pc, #260]	; (8012710 <USB_SetTurnaroundTime+0x11c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d906      	bls.n	801261e <USB_SetTurnaroundTime+0x2a>
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	4a40      	ldr	r2, [pc, #256]	; (8012714 <USB_SetTurnaroundTime+0x120>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d202      	bcs.n	801261e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012618:	230f      	movs	r3, #15
 801261a:	617b      	str	r3, [r7, #20]
 801261c:	e062      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	4a3c      	ldr	r2, [pc, #240]	; (8012714 <USB_SetTurnaroundTime+0x120>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d306      	bcc.n	8012634 <USB_SetTurnaroundTime+0x40>
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	4a3b      	ldr	r2, [pc, #236]	; (8012718 <USB_SetTurnaroundTime+0x124>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d202      	bcs.n	8012634 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801262e:	230e      	movs	r3, #14
 8012630:	617b      	str	r3, [r7, #20]
 8012632:	e057      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	4a38      	ldr	r2, [pc, #224]	; (8012718 <USB_SetTurnaroundTime+0x124>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d306      	bcc.n	801264a <USB_SetTurnaroundTime+0x56>
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	4a37      	ldr	r2, [pc, #220]	; (801271c <USB_SetTurnaroundTime+0x128>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d202      	bcs.n	801264a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012644:	230d      	movs	r3, #13
 8012646:	617b      	str	r3, [r7, #20]
 8012648:	e04c      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	4a33      	ldr	r2, [pc, #204]	; (801271c <USB_SetTurnaroundTime+0x128>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d306      	bcc.n	8012660 <USB_SetTurnaroundTime+0x6c>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	4a32      	ldr	r2, [pc, #200]	; (8012720 <USB_SetTurnaroundTime+0x12c>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d802      	bhi.n	8012660 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801265a:	230c      	movs	r3, #12
 801265c:	617b      	str	r3, [r7, #20]
 801265e:	e041      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	4a2f      	ldr	r2, [pc, #188]	; (8012720 <USB_SetTurnaroundTime+0x12c>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d906      	bls.n	8012676 <USB_SetTurnaroundTime+0x82>
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	4a2e      	ldr	r2, [pc, #184]	; (8012724 <USB_SetTurnaroundTime+0x130>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d802      	bhi.n	8012676 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012670:	230b      	movs	r3, #11
 8012672:	617b      	str	r3, [r7, #20]
 8012674:	e036      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	4a2a      	ldr	r2, [pc, #168]	; (8012724 <USB_SetTurnaroundTime+0x130>)
 801267a:	4293      	cmp	r3, r2
 801267c:	d906      	bls.n	801268c <USB_SetTurnaroundTime+0x98>
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	4a29      	ldr	r2, [pc, #164]	; (8012728 <USB_SetTurnaroundTime+0x134>)
 8012682:	4293      	cmp	r3, r2
 8012684:	d802      	bhi.n	801268c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012686:	230a      	movs	r3, #10
 8012688:	617b      	str	r3, [r7, #20]
 801268a:	e02b      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	4a26      	ldr	r2, [pc, #152]	; (8012728 <USB_SetTurnaroundTime+0x134>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d906      	bls.n	80126a2 <USB_SetTurnaroundTime+0xae>
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	4a25      	ldr	r2, [pc, #148]	; (801272c <USB_SetTurnaroundTime+0x138>)
 8012698:	4293      	cmp	r3, r2
 801269a:	d202      	bcs.n	80126a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801269c:	2309      	movs	r3, #9
 801269e:	617b      	str	r3, [r7, #20]
 80126a0:	e020      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	4a21      	ldr	r2, [pc, #132]	; (801272c <USB_SetTurnaroundTime+0x138>)
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d306      	bcc.n	80126b8 <USB_SetTurnaroundTime+0xc4>
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	4a20      	ldr	r2, [pc, #128]	; (8012730 <USB_SetTurnaroundTime+0x13c>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d802      	bhi.n	80126b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80126b2:	2308      	movs	r3, #8
 80126b4:	617b      	str	r3, [r7, #20]
 80126b6:	e015      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	4a1d      	ldr	r2, [pc, #116]	; (8012730 <USB_SetTurnaroundTime+0x13c>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d906      	bls.n	80126ce <USB_SetTurnaroundTime+0xda>
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	4a1c      	ldr	r2, [pc, #112]	; (8012734 <USB_SetTurnaroundTime+0x140>)
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d202      	bcs.n	80126ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80126c8:	2307      	movs	r3, #7
 80126ca:	617b      	str	r3, [r7, #20]
 80126cc:	e00a      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80126ce:	2306      	movs	r3, #6
 80126d0:	617b      	str	r3, [r7, #20]
 80126d2:	e007      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80126d4:	79fb      	ldrb	r3, [r7, #7]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d102      	bne.n	80126e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80126da:	2309      	movs	r3, #9
 80126dc:	617b      	str	r3, [r7, #20]
 80126de:	e001      	b.n	80126e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80126e0:	2309      	movs	r3, #9
 80126e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	68da      	ldr	r2, [r3, #12]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	029b      	lsls	r3, r3, #10
 80126f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80126fc:	431a      	orrs	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012702:	2300      	movs	r3, #0
}
 8012704:	4618      	mov	r0, r3
 8012706:	371c      	adds	r7, #28
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr
 8012710:	00d8acbf 	.word	0x00d8acbf
 8012714:	00e4e1c0 	.word	0x00e4e1c0
 8012718:	00f42400 	.word	0x00f42400
 801271c:	01067380 	.word	0x01067380
 8012720:	011a499f 	.word	0x011a499f
 8012724:	01312cff 	.word	0x01312cff
 8012728:	014ca43f 	.word	0x014ca43f
 801272c:	016e3600 	.word	0x016e3600
 8012730:	01a6ab1f 	.word	0x01a6ab1f
 8012734:	01e84800 	.word	0x01e84800

08012738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	689b      	ldr	r3, [r3, #8]
 8012744:	f043 0201 	orr.w	r2, r3, #1
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801274c:	2300      	movs	r3, #0
}
 801274e:	4618      	mov	r0, r3
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr

0801275a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801275a:	b480      	push	{r7}
 801275c:	b083      	sub	sp, #12
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	f023 0201 	bic.w	r2, r3, #1
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801276e:	2300      	movs	r3, #0
}
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b084      	sub	sp, #16
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012788:	2300      	movs	r3, #0
 801278a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012798:	78fb      	ldrb	r3, [r7, #3]
 801279a:	2b01      	cmp	r3, #1
 801279c:	d115      	bne.n	80127ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80127aa:	200a      	movs	r0, #10
 80127ac:	f7f2 fb30 	bl	8004e10 <HAL_Delay>
      ms += 10U;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	330a      	adds	r3, #10
 80127b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f001 f93b 	bl	8013a32 <USB_GetMode>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d01e      	beq.n	8012800 <USB_SetCurrentMode+0x84>
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2bc7      	cmp	r3, #199	; 0xc7
 80127c6:	d9f0      	bls.n	80127aa <USB_SetCurrentMode+0x2e>
 80127c8:	e01a      	b.n	8012800 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80127ca:	78fb      	ldrb	r3, [r7, #3]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d115      	bne.n	80127fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80127dc:	200a      	movs	r0, #10
 80127de:	f7f2 fb17 	bl	8004e10 <HAL_Delay>
      ms += 10U;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	330a      	adds	r3, #10
 80127e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f001 f922 	bl	8013a32 <USB_GetMode>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d005      	beq.n	8012800 <USB_SetCurrentMode+0x84>
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2bc7      	cmp	r3, #199	; 0xc7
 80127f8:	d9f0      	bls.n	80127dc <USB_SetCurrentMode+0x60>
 80127fa:	e001      	b.n	8012800 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80127fc:	2301      	movs	r3, #1
 80127fe:	e005      	b.n	801280c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2bc8      	cmp	r3, #200	; 0xc8
 8012804:	d101      	bne.n	801280a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012806:	2301      	movs	r3, #1
 8012808:	e000      	b.n	801280c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801280a:	2300      	movs	r3, #0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012814:	b084      	sub	sp, #16
 8012816:	b580      	push	{r7, lr}
 8012818:	b086      	sub	sp, #24
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
 801281e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012826:	2300      	movs	r3, #0
 8012828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801282e:	2300      	movs	r3, #0
 8012830:	613b      	str	r3, [r7, #16]
 8012832:	e009      	b.n	8012848 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	3340      	adds	r3, #64	; 0x40
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	4413      	add	r3, r2
 801283e:	2200      	movs	r2, #0
 8012840:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	3301      	adds	r3, #1
 8012846:	613b      	str	r3, [r7, #16]
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	2b0e      	cmp	r3, #14
 801284c:	d9f2      	bls.n	8012834 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801284e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012852:	2b00      	cmp	r3, #0
 8012854:	d11c      	bne.n	8012890 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	68fa      	ldr	r2, [r7, #12]
 8012860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012864:	f043 0302 	orr.w	r3, r3, #2
 8012868:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801286e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	601a      	str	r2, [r3, #0]
 801288e:	e005      	b.n	801289c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012894:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128a2:	461a      	mov	r2, r3
 80128a4:	2300      	movs	r3, #0
 80128a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d10d      	bne.n	80128cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80128b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d104      	bne.n	80128c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80128b8:	2100      	movs	r1, #0
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 f968 	bl	8012b90 <USB_SetDevSpeed>
 80128c0:	e008      	b.n	80128d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80128c2:	2101      	movs	r1, #1
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f963 	bl	8012b90 <USB_SetDevSpeed>
 80128ca:	e003      	b.n	80128d4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80128cc:	2103      	movs	r1, #3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f95e 	bl	8012b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80128d4:	2110      	movs	r1, #16
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 f8fa 	bl	8012ad0 <USB_FlushTxFifo>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d001      	beq.n	80128e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80128e2:	2301      	movs	r3, #1
 80128e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f924 	bl	8012b34 <USB_FlushRxFifo>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80128f2:	2301      	movs	r3, #1
 80128f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128fc:	461a      	mov	r2, r3
 80128fe:	2300      	movs	r3, #0
 8012900:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012908:	461a      	mov	r2, r3
 801290a:	2300      	movs	r3, #0
 801290c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012914:	461a      	mov	r2, r3
 8012916:	2300      	movs	r3, #0
 8012918:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801291a:	2300      	movs	r3, #0
 801291c:	613b      	str	r3, [r7, #16]
 801291e:	e043      	b.n	80129a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	015a      	lsls	r2, r3, #5
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	4413      	add	r3, r2
 8012928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012936:	d118      	bne.n	801296a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10a      	bne.n	8012954 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	015a      	lsls	r2, r3, #5
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	4413      	add	r3, r2
 8012946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801294a:	461a      	mov	r2, r3
 801294c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012950:	6013      	str	r3, [r2, #0]
 8012952:	e013      	b.n	801297c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	015a      	lsls	r2, r3, #5
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	4413      	add	r3, r2
 801295c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012960:	461a      	mov	r2, r3
 8012962:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012966:	6013      	str	r3, [r2, #0]
 8012968:	e008      	b.n	801297c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	015a      	lsls	r2, r3, #5
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	4413      	add	r3, r2
 8012972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012976:	461a      	mov	r2, r3
 8012978:	2300      	movs	r3, #0
 801297a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	015a      	lsls	r2, r3, #5
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	4413      	add	r3, r2
 8012984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012988:	461a      	mov	r2, r3
 801298a:	2300      	movs	r3, #0
 801298c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	015a      	lsls	r2, r3, #5
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	4413      	add	r3, r2
 8012996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801299a:	461a      	mov	r2, r3
 801299c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80129a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	3301      	adds	r3, #1
 80129a6:	613b      	str	r3, [r7, #16]
 80129a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129ac:	461a      	mov	r2, r3
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d3b5      	bcc.n	8012920 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129b4:	2300      	movs	r3, #0
 80129b6:	613b      	str	r3, [r7, #16]
 80129b8:	e043      	b.n	8012a42 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	015a      	lsls	r2, r3, #5
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	4413      	add	r3, r2
 80129c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80129cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80129d0:	d118      	bne.n	8012a04 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d10a      	bne.n	80129ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	015a      	lsls	r2, r3, #5
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129e4:	461a      	mov	r2, r3
 80129e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	e013      	b.n	8012a16 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	015a      	lsls	r2, r3, #5
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	4413      	add	r3, r2
 80129f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129fa:	461a      	mov	r2, r3
 80129fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	e008      	b.n	8012a16 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	015a      	lsls	r2, r3, #5
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a10:	461a      	mov	r2, r3
 8012a12:	2300      	movs	r3, #0
 8012a14:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	015a      	lsls	r2, r3, #5
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a22:	461a      	mov	r2, r3
 8012a24:	2300      	movs	r3, #0
 8012a26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	015a      	lsls	r2, r3, #5
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	4413      	add	r3, r2
 8012a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a34:	461a      	mov	r2, r3
 8012a36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012a3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	613b      	str	r3, [r7, #16]
 8012a42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012a46:	461a      	mov	r2, r3
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d3b5      	bcc.n	80129ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a54:	691b      	ldr	r3, [r3, #16]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a60:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2200      	movs	r2, #0
 8012a66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012a6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012a70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d105      	bne.n	8012a84 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	699b      	ldr	r3, [r3, #24]
 8012a7c:	f043 0210 	orr.w	r2, r3, #16
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	699a      	ldr	r2, [r3, #24]
 8012a88:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <USB_DevInit+0x2b4>)
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012a90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d005      	beq.n	8012aa4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	699b      	ldr	r3, [r3, #24]
 8012a9c:	f043 0208 	orr.w	r2, r3, #8
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012aa4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d105      	bne.n	8012ab8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	699a      	ldr	r2, [r3, #24]
 8012ab0:	4b06      	ldr	r3, [pc, #24]	; (8012acc <USB_DevInit+0x2b8>)
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ac4:	b004      	add	sp, #16
 8012ac6:	4770      	bx	lr
 8012ac8:	803c3800 	.word	0x803c3800
 8012acc:	40000004 	.word	0x40000004

08012ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b085      	sub	sp, #20
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ada:	2300      	movs	r3, #0
 8012adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012aea:	d901      	bls.n	8012af0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012aec:	2303      	movs	r3, #3
 8012aee:	e01b      	b.n	8012b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	691b      	ldr	r3, [r3, #16]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	daf2      	bge.n	8012ade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012af8:	2300      	movs	r3, #0
 8012afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	019b      	lsls	r3, r3, #6
 8012b00:	f043 0220 	orr.w	r2, r3, #32
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012b14:	d901      	bls.n	8012b1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012b16:	2303      	movs	r3, #3
 8012b18:	e006      	b.n	8012b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	691b      	ldr	r3, [r3, #16]
 8012b1e:	f003 0320 	and.w	r3, r3, #32
 8012b22:	2b20      	cmp	r3, #32
 8012b24:	d0f0      	beq.n	8012b08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3714      	adds	r7, #20
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012b34:	b480      	push	{r7}
 8012b36:	b085      	sub	sp, #20
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	3301      	adds	r3, #1
 8012b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012b4c:	d901      	bls.n	8012b52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012b4e:	2303      	movs	r3, #3
 8012b50:	e018      	b.n	8012b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	691b      	ldr	r3, [r3, #16]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	daf2      	bge.n	8012b40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2210      	movs	r2, #16
 8012b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	3301      	adds	r3, #1
 8012b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012b70:	d901      	bls.n	8012b76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012b72:	2303      	movs	r3, #3
 8012b74:	e006      	b.n	8012b84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	691b      	ldr	r3, [r3, #16]
 8012b7a:	f003 0310 	and.w	r3, r3, #16
 8012b7e:	2b10      	cmp	r3, #16
 8012b80:	d0f0      	beq.n	8012b64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3714      	adds	r7, #20
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr

08012b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b085      	sub	sp, #20
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	460b      	mov	r3, r1
 8012b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	78fb      	ldrb	r3, [r7, #3]
 8012baa:	68f9      	ldr	r1, [r7, #12]
 8012bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bb0:	4313      	orrs	r3, r2
 8012bb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012bb4:	2300      	movs	r3, #0
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3714      	adds	r7, #20
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr

08012bc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8012bc2:	b480      	push	{r7}
 8012bc4:	b087      	sub	sp, #28
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bd4:	689b      	ldr	r3, [r3, #8]
 8012bd6:	f003 0306 	and.w	r3, r3, #6
 8012bda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d102      	bne.n	8012be8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012be2:	2300      	movs	r3, #0
 8012be4:	75fb      	strb	r3, [r7, #23]
 8012be6:	e00a      	b.n	8012bfe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b02      	cmp	r3, #2
 8012bec:	d002      	beq.n	8012bf4 <USB_GetDevSpeed+0x32>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2b06      	cmp	r3, #6
 8012bf2:	d102      	bne.n	8012bfa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012bf4:	2302      	movs	r3, #2
 8012bf6:	75fb      	strb	r3, [r7, #23]
 8012bf8:	e001      	b.n	8012bfe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012bfa:	230f      	movs	r3, #15
 8012bfc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	371c      	adds	r7, #28
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	785b      	ldrb	r3, [r3, #1]
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d139      	bne.n	8012c9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c2e:	69da      	ldr	r2, [r3, #28]
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 030f 	and.w	r3, r3, #15
 8012c38:	2101      	movs	r1, #1
 8012c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	68f9      	ldr	r1, [r7, #12]
 8012c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c46:	4313      	orrs	r3, r2
 8012c48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	015a      	lsls	r2, r3, #5
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	4413      	add	r3, r2
 8012c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d153      	bne.n	8012d08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	015a      	lsls	r2, r3, #5
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	4413      	add	r3, r2
 8012c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	689b      	ldr	r3, [r3, #8]
 8012c72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	791b      	ldrb	r3, [r3, #4]
 8012c7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	059b      	lsls	r3, r3, #22
 8012c82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c84:	431a      	orrs	r2, r3
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	0159      	lsls	r1, r3, #5
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	440b      	add	r3, r1
 8012c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c92:	4619      	mov	r1, r3
 8012c94:	4b20      	ldr	r3, [pc, #128]	; (8012d18 <USB_ActivateEndpoint+0x10c>)
 8012c96:	4313      	orrs	r3, r2
 8012c98:	600b      	str	r3, [r1, #0]
 8012c9a:	e035      	b.n	8012d08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca2:	69da      	ldr	r2, [r3, #28]
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	f003 030f 	and.w	r3, r3, #15
 8012cac:	2101      	movs	r1, #1
 8012cae:	fa01 f303 	lsl.w	r3, r1, r3
 8012cb2:	041b      	lsls	r3, r3, #16
 8012cb4:	68f9      	ldr	r1, [r7, #12]
 8012cb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cba:	4313      	orrs	r3, r2
 8012cbc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	015a      	lsls	r2, r3, #5
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d119      	bne.n	8012d08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012cd4:	68bb      	ldr	r3, [r7, #8]
 8012cd6:	015a      	lsls	r2, r3, #5
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	4413      	add	r3, r2
 8012cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	689b      	ldr	r3, [r3, #8]
 8012ce6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	791b      	ldrb	r3, [r3, #4]
 8012cee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012cf0:	430b      	orrs	r3, r1
 8012cf2:	431a      	orrs	r2, r3
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	0159      	lsls	r1, r3, #5
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	440b      	add	r3, r1
 8012cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d00:	4619      	mov	r1, r3
 8012d02:	4b05      	ldr	r3, [pc, #20]	; (8012d18 <USB_ActivateEndpoint+0x10c>)
 8012d04:	4313      	orrs	r3, r2
 8012d06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	10008000 	.word	0x10008000

08012d1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	785b      	ldrb	r3, [r3, #1]
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d161      	bne.n	8012dfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	015a      	lsls	r2, r3, #5
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	4413      	add	r3, r2
 8012d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d4e:	d11f      	bne.n	8012d90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	015a      	lsls	r2, r3, #5
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	4413      	add	r3, r2
 8012d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	68ba      	ldr	r2, [r7, #8]
 8012d60:	0151      	lsls	r1, r2, #5
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	440a      	add	r2, r1
 8012d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	015a      	lsls	r2, r3, #5
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	4413      	add	r3, r2
 8012d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	68ba      	ldr	r2, [r7, #8]
 8012d80:	0151      	lsls	r1, r2, #5
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	440a      	add	r2, r1
 8012d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	f003 030f 	and.w	r3, r3, #15
 8012da0:	2101      	movs	r1, #1
 8012da2:	fa01 f303 	lsl.w	r3, r1, r3
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	43db      	mvns	r3, r3
 8012daa:	68f9      	ldr	r1, [r7, #12]
 8012dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012db0:	4013      	ands	r3, r2
 8012db2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dba:	69da      	ldr	r2, [r3, #28]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	781b      	ldrb	r3, [r3, #0]
 8012dc0:	f003 030f 	and.w	r3, r3, #15
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	43db      	mvns	r3, r3
 8012dce:	68f9      	ldr	r1, [r7, #12]
 8012dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012dd4:	4013      	ands	r3, r2
 8012dd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	015a      	lsls	r2, r3, #5
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	4413      	add	r3, r2
 8012de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	0159      	lsls	r1, r3, #5
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	440b      	add	r3, r1
 8012dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012df2:	4619      	mov	r1, r3
 8012df4:	4b35      	ldr	r3, [pc, #212]	; (8012ecc <USB_DeactivateEndpoint+0x1b0>)
 8012df6:	4013      	ands	r3, r2
 8012df8:	600b      	str	r3, [r1, #0]
 8012dfa:	e060      	b.n	8012ebe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	015a      	lsls	r2, r3, #5
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	4413      	add	r3, r2
 8012e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e12:	d11f      	bne.n	8012e54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	0151      	lsls	r1, r2, #5
 8012e26:	68fa      	ldr	r2, [r7, #12]
 8012e28:	440a      	add	r2, r1
 8012e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012e32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	015a      	lsls	r2, r3, #5
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	0151      	lsls	r1, r2, #5
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	440a      	add	r2, r1
 8012e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	f003 030f 	and.w	r3, r3, #15
 8012e64:	2101      	movs	r1, #1
 8012e66:	fa01 f303 	lsl.w	r3, r1, r3
 8012e6a:	041b      	lsls	r3, r3, #16
 8012e6c:	43db      	mvns	r3, r3
 8012e6e:	68f9      	ldr	r1, [r7, #12]
 8012e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e74:	4013      	ands	r3, r2
 8012e76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e7e:	69da      	ldr	r2, [r3, #28]
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	f003 030f 	and.w	r3, r3, #15
 8012e88:	2101      	movs	r1, #1
 8012e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e8e:	041b      	lsls	r3, r3, #16
 8012e90:	43db      	mvns	r3, r3
 8012e92:	68f9      	ldr	r1, [r7, #12]
 8012e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e98:	4013      	ands	r3, r2
 8012e9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	015a      	lsls	r2, r3, #5
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	0159      	lsls	r1, r3, #5
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	440b      	add	r3, r1
 8012eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	4b05      	ldr	r3, [pc, #20]	; (8012ed0 <USB_DeactivateEndpoint+0x1b4>)
 8012eba:	4013      	ands	r3, r2
 8012ebc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012ebe:	2300      	movs	r3, #0
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3714      	adds	r7, #20
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr
 8012ecc:	ec337800 	.word	0xec337800
 8012ed0:	eff37800 	.word	0xeff37800

08012ed4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b08a      	sub	sp, #40	; 0x28
 8012ed8:	af02      	add	r7, sp, #8
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	4613      	mov	r3, r2
 8012ee0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	785b      	ldrb	r3, [r3, #1]
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	f040 8181 	bne.w	80131f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	691b      	ldr	r3, [r3, #16]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d132      	bne.n	8012f64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	015a      	lsls	r2, r3, #5
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	4413      	add	r3, r2
 8012f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f0a:	691a      	ldr	r2, [r3, #16]
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	0159      	lsls	r1, r3, #5
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	440b      	add	r3, r1
 8012f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f18:	4619      	mov	r1, r3
 8012f1a:	4ba5      	ldr	r3, [pc, #660]	; (80131b0 <USB_EPStartXfer+0x2dc>)
 8012f1c:	4013      	ands	r3, r2
 8012f1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	015a      	lsls	r2, r3, #5
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	4413      	add	r3, r2
 8012f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	69ba      	ldr	r2, [r7, #24]
 8012f30:	0151      	lsls	r1, r2, #5
 8012f32:	69fa      	ldr	r2, [r7, #28]
 8012f34:	440a      	add	r2, r1
 8012f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	015a      	lsls	r2, r3, #5
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	4413      	add	r3, r2
 8012f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f4c:	691a      	ldr	r2, [r3, #16]
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	0159      	lsls	r1, r3, #5
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	440b      	add	r3, r1
 8012f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	4b95      	ldr	r3, [pc, #596]	; (80131b4 <USB_EPStartXfer+0x2e0>)
 8012f5e:	4013      	ands	r3, r2
 8012f60:	610b      	str	r3, [r1, #16]
 8012f62:	e092      	b.n	801308a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f64:	69bb      	ldr	r3, [r7, #24]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f70:	691a      	ldr	r2, [r3, #16]
 8012f72:	69bb      	ldr	r3, [r7, #24]
 8012f74:	0159      	lsls	r1, r3, #5
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	440b      	add	r3, r1
 8012f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f7e:	4619      	mov	r1, r3
 8012f80:	4b8c      	ldr	r3, [pc, #560]	; (80131b4 <USB_EPStartXfer+0x2e0>)
 8012f82:	4013      	ands	r3, r2
 8012f84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f86:	69bb      	ldr	r3, [r7, #24]
 8012f88:	015a      	lsls	r2, r3, #5
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f92:	691a      	ldr	r2, [r3, #16]
 8012f94:	69bb      	ldr	r3, [r7, #24]
 8012f96:	0159      	lsls	r1, r3, #5
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	440b      	add	r3, r1
 8012f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	4b83      	ldr	r3, [pc, #524]	; (80131b0 <USB_EPStartXfer+0x2dc>)
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d11a      	bne.n	8012fe4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	691a      	ldr	r2, [r3, #16]
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d903      	bls.n	8012fc2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	689a      	ldr	r2, [r3, #8]
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	015a      	lsls	r2, r3, #5
 8012fc6:	69fb      	ldr	r3, [r7, #28]
 8012fc8:	4413      	add	r3, r2
 8012fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fce:	691b      	ldr	r3, [r3, #16]
 8012fd0:	69ba      	ldr	r2, [r7, #24]
 8012fd2:	0151      	lsls	r1, r2, #5
 8012fd4:	69fa      	ldr	r2, [r7, #28]
 8012fd6:	440a      	add	r2, r1
 8012fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012fe0:	6113      	str	r3, [r2, #16]
 8012fe2:	e01b      	b.n	801301c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	015a      	lsls	r2, r3, #5
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	4413      	add	r3, r2
 8012fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ff0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	6919      	ldr	r1, [r3, #16]
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	440b      	add	r3, r1
 8012ffc:	1e59      	subs	r1, r3, #1
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	689b      	ldr	r3, [r3, #8]
 8013002:	fbb1 f3f3 	udiv	r3, r1, r3
 8013006:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013008:	4b6b      	ldr	r3, [pc, #428]	; (80131b8 <USB_EPStartXfer+0x2e4>)
 801300a:	400b      	ands	r3, r1
 801300c:	69b9      	ldr	r1, [r7, #24]
 801300e:	0148      	lsls	r0, r1, #5
 8013010:	69f9      	ldr	r1, [r7, #28]
 8013012:	4401      	add	r1, r0
 8013014:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013018:	4313      	orrs	r3, r2
 801301a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	015a      	lsls	r2, r3, #5
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	4413      	add	r3, r2
 8013024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013028:	691a      	ldr	r2, [r3, #16]
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013032:	69b9      	ldr	r1, [r7, #24]
 8013034:	0148      	lsls	r0, r1, #5
 8013036:	69f9      	ldr	r1, [r7, #28]
 8013038:	4401      	add	r1, r0
 801303a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801303e:	4313      	orrs	r3, r2
 8013040:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	791b      	ldrb	r3, [r3, #4]
 8013046:	2b01      	cmp	r3, #1
 8013048:	d11f      	bne.n	801308a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	015a      	lsls	r2, r3, #5
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	4413      	add	r3, r2
 8013052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013056:	691b      	ldr	r3, [r3, #16]
 8013058:	69ba      	ldr	r2, [r7, #24]
 801305a:	0151      	lsls	r1, r2, #5
 801305c:	69fa      	ldr	r2, [r7, #28]
 801305e:	440a      	add	r2, r1
 8013060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013064:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013068:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801306a:	69bb      	ldr	r3, [r7, #24]
 801306c:	015a      	lsls	r2, r3, #5
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	4413      	add	r3, r2
 8013072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	69ba      	ldr	r2, [r7, #24]
 801307a:	0151      	lsls	r1, r2, #5
 801307c:	69fa      	ldr	r2, [r7, #28]
 801307e:	440a      	add	r2, r1
 8013080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013088:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801308a:	79fb      	ldrb	r3, [r7, #7]
 801308c:	2b01      	cmp	r3, #1
 801308e:	d14b      	bne.n	8013128 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	69db      	ldr	r3, [r3, #28]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d009      	beq.n	80130ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	015a      	lsls	r2, r3, #5
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	4413      	add	r3, r2
 80130a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a4:	461a      	mov	r2, r3
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	69db      	ldr	r3, [r3, #28]
 80130aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	791b      	ldrb	r3, [r3, #4]
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d128      	bne.n	8013106 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ba:	689b      	ldr	r3, [r3, #8]
 80130bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d110      	bne.n	80130e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80130c4:	69bb      	ldr	r3, [r7, #24]
 80130c6:	015a      	lsls	r2, r3, #5
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	4413      	add	r3, r2
 80130cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	69ba      	ldr	r2, [r7, #24]
 80130d4:	0151      	lsls	r1, r2, #5
 80130d6:	69fa      	ldr	r2, [r7, #28]
 80130d8:	440a      	add	r2, r1
 80130da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80130e2:	6013      	str	r3, [r2, #0]
 80130e4:	e00f      	b.n	8013106 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	015a      	lsls	r2, r3, #5
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	4413      	add	r3, r2
 80130ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	69ba      	ldr	r2, [r7, #24]
 80130f6:	0151      	lsls	r1, r2, #5
 80130f8:	69fa      	ldr	r2, [r7, #28]
 80130fa:	440a      	add	r2, r1
 80130fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013104:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	015a      	lsls	r2, r3, #5
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	4413      	add	r3, r2
 801310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	69ba      	ldr	r2, [r7, #24]
 8013116:	0151      	lsls	r1, r2, #5
 8013118:	69fa      	ldr	r2, [r7, #28]
 801311a:	440a      	add	r2, r1
 801311c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013124:	6013      	str	r3, [r2, #0]
 8013126:	e16a      	b.n	80133fe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	015a      	lsls	r2, r3, #5
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	4413      	add	r3, r2
 8013130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	69ba      	ldr	r2, [r7, #24]
 8013138:	0151      	lsls	r1, r2, #5
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	440a      	add	r2, r1
 801313e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013146:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	791b      	ldrb	r3, [r3, #4]
 801314c:	2b01      	cmp	r3, #1
 801314e:	d015      	beq.n	801317c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	691b      	ldr	r3, [r3, #16]
 8013154:	2b00      	cmp	r3, #0
 8013156:	f000 8152 	beq.w	80133fe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	f003 030f 	and.w	r3, r3, #15
 801316a:	2101      	movs	r1, #1
 801316c:	fa01 f303 	lsl.w	r3, r1, r3
 8013170:	69f9      	ldr	r1, [r7, #28]
 8013172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013176:	4313      	orrs	r3, r2
 8013178:	634b      	str	r3, [r1, #52]	; 0x34
 801317a:	e140      	b.n	80133fe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013188:	2b00      	cmp	r3, #0
 801318a:	d117      	bne.n	80131bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	015a      	lsls	r2, r3, #5
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	4413      	add	r3, r2
 8013194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	69ba      	ldr	r2, [r7, #24]
 801319c:	0151      	lsls	r1, r2, #5
 801319e:	69fa      	ldr	r2, [r7, #28]
 80131a0:	440a      	add	r2, r1
 80131a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	e016      	b.n	80131dc <USB_EPStartXfer+0x308>
 80131ae:	bf00      	nop
 80131b0:	e007ffff 	.word	0xe007ffff
 80131b4:	fff80000 	.word	0xfff80000
 80131b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	015a      	lsls	r2, r3, #5
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	4413      	add	r3, r2
 80131c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	69ba      	ldr	r2, [r7, #24]
 80131cc:	0151      	lsls	r1, r2, #5
 80131ce:	69fa      	ldr	r2, [r7, #28]
 80131d0:	440a      	add	r2, r1
 80131d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	68d9      	ldr	r1, [r3, #12]
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	781a      	ldrb	r2, [r3, #0]
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	691b      	ldr	r3, [r3, #16]
 80131e8:	b298      	uxth	r0, r3
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	9300      	str	r3, [sp, #0]
 80131ee:	4603      	mov	r3, r0
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f000 f9b9 	bl	8013568 <USB_WritePacket>
 80131f6:	e102      	b.n	80133fe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80131f8:	69bb      	ldr	r3, [r7, #24]
 80131fa:	015a      	lsls	r2, r3, #5
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	4413      	add	r3, r2
 8013200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013204:	691a      	ldr	r2, [r3, #16]
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	0159      	lsls	r1, r3, #5
 801320a:	69fb      	ldr	r3, [r7, #28]
 801320c:	440b      	add	r3, r1
 801320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013212:	4619      	mov	r1, r3
 8013214:	4b7c      	ldr	r3, [pc, #496]	; (8013408 <USB_EPStartXfer+0x534>)
 8013216:	4013      	ands	r3, r2
 8013218:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	015a      	lsls	r2, r3, #5
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	4413      	add	r3, r2
 8013222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013226:	691a      	ldr	r2, [r3, #16]
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	0159      	lsls	r1, r3, #5
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	440b      	add	r3, r1
 8013230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013234:	4619      	mov	r1, r3
 8013236:	4b75      	ldr	r3, [pc, #468]	; (801340c <USB_EPStartXfer+0x538>)
 8013238:	4013      	ands	r3, r2
 801323a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801323c:	69bb      	ldr	r3, [r7, #24]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d12f      	bne.n	80132a2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	691b      	ldr	r3, [r3, #16]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d003      	beq.n	8013252 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	689a      	ldr	r2, [r3, #8]
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	689a      	ldr	r2, [r3, #8]
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	015a      	lsls	r2, r3, #5
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	4413      	add	r3, r2
 8013262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013266:	691a      	ldr	r2, [r3, #16]
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	6a1b      	ldr	r3, [r3, #32]
 801326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013270:	69b9      	ldr	r1, [r7, #24]
 8013272:	0148      	lsls	r0, r1, #5
 8013274:	69f9      	ldr	r1, [r7, #28]
 8013276:	4401      	add	r1, r0
 8013278:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801327c:	4313      	orrs	r3, r2
 801327e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	015a      	lsls	r2, r3, #5
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	4413      	add	r3, r2
 8013288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801328c:	691b      	ldr	r3, [r3, #16]
 801328e:	69ba      	ldr	r2, [r7, #24]
 8013290:	0151      	lsls	r1, r2, #5
 8013292:	69fa      	ldr	r2, [r7, #28]
 8013294:	440a      	add	r2, r1
 8013296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801329a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801329e:	6113      	str	r3, [r2, #16]
 80132a0:	e05f      	b.n	8013362 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	691b      	ldr	r3, [r3, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d123      	bne.n	80132f2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	015a      	lsls	r2, r3, #5
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	4413      	add	r3, r2
 80132b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b6:	691a      	ldr	r2, [r3, #16]
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132c0:	69b9      	ldr	r1, [r7, #24]
 80132c2:	0148      	lsls	r0, r1, #5
 80132c4:	69f9      	ldr	r1, [r7, #28]
 80132c6:	4401      	add	r1, r0
 80132c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80132cc:	4313      	orrs	r3, r2
 80132ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	015a      	lsls	r2, r3, #5
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	4413      	add	r3, r2
 80132d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	69ba      	ldr	r2, [r7, #24]
 80132e0:	0151      	lsls	r1, r2, #5
 80132e2:	69fa      	ldr	r2, [r7, #28]
 80132e4:	440a      	add	r2, r1
 80132e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132ee:	6113      	str	r3, [r2, #16]
 80132f0:	e037      	b.n	8013362 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	691a      	ldr	r2, [r3, #16]
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	4413      	add	r3, r2
 80132fc:	1e5a      	subs	r2, r3, #1
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	fbb2 f3f3 	udiv	r3, r2, r3
 8013306:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	689b      	ldr	r3, [r3, #8]
 801330c:	8afa      	ldrh	r2, [r7, #22]
 801330e:	fb03 f202 	mul.w	r2, r3, r2
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	015a      	lsls	r2, r3, #5
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	4413      	add	r3, r2
 801331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013322:	691a      	ldr	r2, [r3, #16]
 8013324:	8afb      	ldrh	r3, [r7, #22]
 8013326:	04d9      	lsls	r1, r3, #19
 8013328:	4b39      	ldr	r3, [pc, #228]	; (8013410 <USB_EPStartXfer+0x53c>)
 801332a:	400b      	ands	r3, r1
 801332c:	69b9      	ldr	r1, [r7, #24]
 801332e:	0148      	lsls	r0, r1, #5
 8013330:	69f9      	ldr	r1, [r7, #28]
 8013332:	4401      	add	r1, r0
 8013334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013338:	4313      	orrs	r3, r2
 801333a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	015a      	lsls	r2, r3, #5
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	4413      	add	r3, r2
 8013344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013348:	691a      	ldr	r2, [r3, #16]
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	6a1b      	ldr	r3, [r3, #32]
 801334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013352:	69b9      	ldr	r1, [r7, #24]
 8013354:	0148      	lsls	r0, r1, #5
 8013356:	69f9      	ldr	r1, [r7, #28]
 8013358:	4401      	add	r1, r0
 801335a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801335e:	4313      	orrs	r3, r2
 8013360:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013362:	79fb      	ldrb	r3, [r7, #7]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d10d      	bne.n	8013384 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d009      	beq.n	8013384 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	68d9      	ldr	r1, [r3, #12]
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	69fb      	ldr	r3, [r7, #28]
 801337a:	4413      	add	r3, r2
 801337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013380:	460a      	mov	r2, r1
 8013382:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	791b      	ldrb	r3, [r3, #4]
 8013388:	2b01      	cmp	r3, #1
 801338a:	d128      	bne.n	80133de <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013392:	689b      	ldr	r3, [r3, #8]
 8013394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013398:	2b00      	cmp	r3, #0
 801339a:	d110      	bne.n	80133be <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	015a      	lsls	r2, r3, #5
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	4413      	add	r3, r2
 80133a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	69ba      	ldr	r2, [r7, #24]
 80133ac:	0151      	lsls	r1, r2, #5
 80133ae:	69fa      	ldr	r2, [r7, #28]
 80133b0:	440a      	add	r2, r1
 80133b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133ba:	6013      	str	r3, [r2, #0]
 80133bc:	e00f      	b.n	80133de <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	015a      	lsls	r2, r3, #5
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	4413      	add	r3, r2
 80133c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	0151      	lsls	r1, r2, #5
 80133d0:	69fa      	ldr	r2, [r7, #28]
 80133d2:	440a      	add	r2, r1
 80133d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	015a      	lsls	r2, r3, #5
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	4413      	add	r3, r2
 80133e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	69ba      	ldr	r2, [r7, #24]
 80133ee:	0151      	lsls	r1, r2, #5
 80133f0:	69fa      	ldr	r2, [r7, #28]
 80133f2:	440a      	add	r2, r1
 80133f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80133fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80133fe:	2300      	movs	r3, #0
}
 8013400:	4618      	mov	r0, r3
 8013402:	3720      	adds	r7, #32
 8013404:	46bd      	mov	sp, r7
 8013406:	bd80      	pop	{r7, pc}
 8013408:	fff80000 	.word	0xfff80000
 801340c:	e007ffff 	.word	0xe007ffff
 8013410:	1ff80000 	.word	0x1ff80000

08013414 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013414:	b480      	push	{r7}
 8013416:	b087      	sub	sp, #28
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801341e:	2300      	movs	r3, #0
 8013420:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013422:	2300      	movs	r3, #0
 8013424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	785b      	ldrb	r3, [r3, #1]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d14a      	bne.n	80134c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	015a      	lsls	r2, r3, #5
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	4413      	add	r3, r2
 801343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801344a:	f040 8086 	bne.w	801355a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	015a      	lsls	r2, r3, #5
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	4413      	add	r3, r2
 8013458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	683a      	ldr	r2, [r7, #0]
 8013460:	7812      	ldrb	r2, [r2, #0]
 8013462:	0151      	lsls	r1, r2, #5
 8013464:	693a      	ldr	r2, [r7, #16]
 8013466:	440a      	add	r2, r1
 8013468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801346c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013470:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	015a      	lsls	r2, r3, #5
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	4413      	add	r3, r2
 801347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	683a      	ldr	r2, [r7, #0]
 8013484:	7812      	ldrb	r2, [r2, #0]
 8013486:	0151      	lsls	r1, r2, #5
 8013488:	693a      	ldr	r2, [r7, #16]
 801348a:	440a      	add	r2, r1
 801348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	3301      	adds	r3, #1
 801349a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f242 7210 	movw	r2, #10000	; 0x2710
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d902      	bls.n	80134ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80134a6:	2301      	movs	r3, #1
 80134a8:	75fb      	strb	r3, [r7, #23]
          break;
 80134aa:	e056      	b.n	801355a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	015a      	lsls	r2, r3, #5
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	4413      	add	r3, r2
 80134b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134c4:	d0e7      	beq.n	8013496 <USB_EPStopXfer+0x82>
 80134c6:	e048      	b.n	801355a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	015a      	lsls	r2, r3, #5
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	4413      	add	r3, r2
 80134d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134e0:	d13b      	bne.n	801355a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	015a      	lsls	r2, r3, #5
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	4413      	add	r3, r2
 80134ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	7812      	ldrb	r2, [r2, #0]
 80134f6:	0151      	lsls	r1, r2, #5
 80134f8:	693a      	ldr	r2, [r7, #16]
 80134fa:	440a      	add	r2, r1
 80134fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013504:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	015a      	lsls	r2, r3, #5
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	4413      	add	r3, r2
 8013510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	683a      	ldr	r2, [r7, #0]
 8013518:	7812      	ldrb	r2, [r2, #0]
 801351a:	0151      	lsls	r1, r2, #5
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	440a      	add	r2, r1
 8013520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	3301      	adds	r3, #1
 801352e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f242 7210 	movw	r2, #10000	; 0x2710
 8013536:	4293      	cmp	r3, r2
 8013538:	d902      	bls.n	8013540 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801353a:	2301      	movs	r3, #1
 801353c:	75fb      	strb	r3, [r7, #23]
          break;
 801353e:	e00c      	b.n	801355a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	015a      	lsls	r2, r3, #5
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	4413      	add	r3, r2
 801354a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013558:	d0e7      	beq.n	801352a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801355a:	7dfb      	ldrb	r3, [r7, #23]
}
 801355c:	4618      	mov	r0, r3
 801355e:	371c      	adds	r7, #28
 8013560:	46bd      	mov	sp, r7
 8013562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013566:	4770      	bx	lr

08013568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013568:	b480      	push	{r7}
 801356a:	b089      	sub	sp, #36	; 0x24
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	4611      	mov	r1, r2
 8013574:	461a      	mov	r2, r3
 8013576:	460b      	mov	r3, r1
 8013578:	71fb      	strb	r3, [r7, #7]
 801357a:	4613      	mov	r3, r2
 801357c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013586:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801358a:	2b00      	cmp	r3, #0
 801358c:	d123      	bne.n	80135d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801358e:	88bb      	ldrh	r3, [r7, #4]
 8013590:	3303      	adds	r3, #3
 8013592:	089b      	lsrs	r3, r3, #2
 8013594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013596:	2300      	movs	r3, #0
 8013598:	61bb      	str	r3, [r7, #24]
 801359a:	e018      	b.n	80135ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801359c:	79fb      	ldrb	r3, [r7, #7]
 801359e:	031a      	lsls	r2, r3, #12
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135a8:	461a      	mov	r2, r3
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	3301      	adds	r3, #1
 80135b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135b6:	69fb      	ldr	r3, [r7, #28]
 80135b8:	3301      	adds	r3, #1
 80135ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	3301      	adds	r3, #1
 80135c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	3301      	adds	r3, #1
 80135c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	3301      	adds	r3, #1
 80135cc:	61bb      	str	r3, [r7, #24]
 80135ce:	69ba      	ldr	r2, [r7, #24]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d3e2      	bcc.n	801359c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80135d6:	2300      	movs	r3, #0
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3724      	adds	r7, #36	; 0x24
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b08b      	sub	sp, #44	; 0x2c
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	4613      	mov	r3, r2
 80135f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80135fa:	88fb      	ldrh	r3, [r7, #6]
 80135fc:	089b      	lsrs	r3, r3, #2
 80135fe:	b29b      	uxth	r3, r3
 8013600:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013602:	88fb      	ldrh	r3, [r7, #6]
 8013604:	f003 0303 	and.w	r3, r3, #3
 8013608:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801360a:	2300      	movs	r3, #0
 801360c:	623b      	str	r3, [r7, #32]
 801360e:	e014      	b.n	801363a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013610:	69bb      	ldr	r3, [r7, #24]
 8013612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	601a      	str	r2, [r3, #0]
    pDest++;
 801361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361e:	3301      	adds	r3, #1
 8013620:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013624:	3301      	adds	r3, #1
 8013626:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362a:	3301      	adds	r3, #1
 801362c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013630:	3301      	adds	r3, #1
 8013632:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	3301      	adds	r3, #1
 8013638:	623b      	str	r3, [r7, #32]
 801363a:	6a3a      	ldr	r2, [r7, #32]
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	429a      	cmp	r2, r3
 8013640:	d3e6      	bcc.n	8013610 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013642:	8bfb      	ldrh	r3, [r7, #30]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d01e      	beq.n	8013686 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013648:	2300      	movs	r3, #0
 801364a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013652:	461a      	mov	r2, r3
 8013654:	f107 0310 	add.w	r3, r7, #16
 8013658:	6812      	ldr	r2, [r2, #0]
 801365a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801365c:	693a      	ldr	r2, [r7, #16]
 801365e:	6a3b      	ldr	r3, [r7, #32]
 8013660:	b2db      	uxtb	r3, r3
 8013662:	00db      	lsls	r3, r3, #3
 8013664:	fa22 f303 	lsr.w	r3, r2, r3
 8013668:	b2da      	uxtb	r2, r3
 801366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801366c:	701a      	strb	r2, [r3, #0]
      i++;
 801366e:	6a3b      	ldr	r3, [r7, #32]
 8013670:	3301      	adds	r3, #1
 8013672:	623b      	str	r3, [r7, #32]
      pDest++;
 8013674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013676:	3301      	adds	r3, #1
 8013678:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801367a:	8bfb      	ldrh	r3, [r7, #30]
 801367c:	3b01      	subs	r3, #1
 801367e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013680:	8bfb      	ldrh	r3, [r7, #30]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1ea      	bne.n	801365c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013688:	4618      	mov	r0, r3
 801368a:	372c      	adds	r7, #44	; 0x2c
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013694:	b480      	push	{r7}
 8013696:	b085      	sub	sp, #20
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	785b      	ldrb	r3, [r3, #1]
 80136ac:	2b01      	cmp	r3, #1
 80136ae:	d12c      	bne.n	801370a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	015a      	lsls	r2, r3, #5
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	4413      	add	r3, r2
 80136b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	db12      	blt.n	80136e8 <USB_EPSetStall+0x54>
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d00f      	beq.n	80136e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	015a      	lsls	r2, r3, #5
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	4413      	add	r3, r2
 80136d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	68ba      	ldr	r2, [r7, #8]
 80136d8:	0151      	lsls	r1, r2, #5
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	440a      	add	r2, r1
 80136de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80136e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	015a      	lsls	r2, r3, #5
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	4413      	add	r3, r2
 80136f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68ba      	ldr	r2, [r7, #8]
 80136f8:	0151      	lsls	r1, r2, #5
 80136fa:	68fa      	ldr	r2, [r7, #12]
 80136fc:	440a      	add	r2, r1
 80136fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	e02b      	b.n	8013762 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	015a      	lsls	r2, r3, #5
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	4413      	add	r3, r2
 8013712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	2b00      	cmp	r3, #0
 801371a:	db12      	blt.n	8013742 <USB_EPSetStall+0xae>
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d00f      	beq.n	8013742 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	015a      	lsls	r2, r3, #5
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	4413      	add	r3, r2
 801372a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	0151      	lsls	r1, r2, #5
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	440a      	add	r2, r1
 8013738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013740:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	015a      	lsls	r2, r3, #5
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	4413      	add	r3, r2
 801374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	0151      	lsls	r1, r2, #5
 8013754:	68fa      	ldr	r2, [r7, #12]
 8013756:	440a      	add	r2, r1
 8013758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801375c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013760:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013762:	2300      	movs	r3, #0
}
 8013764:	4618      	mov	r0, r3
 8013766:	3714      	adds	r7, #20
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013770:	b480      	push	{r7}
 8013772:	b085      	sub	sp, #20
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	785b      	ldrb	r3, [r3, #1]
 8013788:	2b01      	cmp	r3, #1
 801378a:	d128      	bne.n	80137de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	015a      	lsls	r2, r3, #5
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	4413      	add	r3, r2
 8013794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	0151      	lsls	r1, r2, #5
 801379e:	68fa      	ldr	r2, [r7, #12]
 80137a0:	440a      	add	r2, r1
 80137a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80137aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	791b      	ldrb	r3, [r3, #4]
 80137b0:	2b03      	cmp	r3, #3
 80137b2:	d003      	beq.n	80137bc <USB_EPClearStall+0x4c>
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	791b      	ldrb	r3, [r3, #4]
 80137b8:	2b02      	cmp	r3, #2
 80137ba:	d138      	bne.n	801382e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	015a      	lsls	r2, r3, #5
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	4413      	add	r3, r2
 80137c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	68ba      	ldr	r2, [r7, #8]
 80137cc:	0151      	lsls	r1, r2, #5
 80137ce:	68fa      	ldr	r2, [r7, #12]
 80137d0:	440a      	add	r2, r1
 80137d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137da:	6013      	str	r3, [r2, #0]
 80137dc:	e027      	b.n	801382e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	015a      	lsls	r2, r3, #5
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	4413      	add	r3, r2
 80137e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	68ba      	ldr	r2, [r7, #8]
 80137ee:	0151      	lsls	r1, r2, #5
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	440a      	add	r2, r1
 80137f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80137fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	791b      	ldrb	r3, [r3, #4]
 8013802:	2b03      	cmp	r3, #3
 8013804:	d003      	beq.n	801380e <USB_EPClearStall+0x9e>
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	791b      	ldrb	r3, [r3, #4]
 801380a:	2b02      	cmp	r3, #2
 801380c:	d10f      	bne.n	801382e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	015a      	lsls	r2, r3, #5
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	4413      	add	r3, r2
 8013816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	68ba      	ldr	r2, [r7, #8]
 801381e:	0151      	lsls	r1, r2, #5
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	440a      	add	r2, r1
 8013824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801382c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801382e:	2300      	movs	r3, #0
}
 8013830:	4618      	mov	r0, r3
 8013832:	3714      	adds	r7, #20
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801383c:	b480      	push	{r7}
 801383e:	b085      	sub	sp, #20
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	460b      	mov	r3, r1
 8013846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801385a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801385e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013866:	681a      	ldr	r2, [r3, #0]
 8013868:	78fb      	ldrb	r3, [r7, #3]
 801386a:	011b      	lsls	r3, r3, #4
 801386c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013870:	68f9      	ldr	r1, [r7, #12]
 8013872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013876:	4313      	orrs	r3, r2
 8013878:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801387a:	2300      	movs	r3, #0
}
 801387c:	4618      	mov	r0, r3
 801387e:	3714      	adds	r7, #20
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr

08013888 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013888:	b480      	push	{r7}
 801388a:	b085      	sub	sp, #20
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138a2:	f023 0303 	bic.w	r3, r3, #3
 80138a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138b6:	f023 0302 	bic.w	r3, r3, #2
 80138ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138bc:	2300      	movs	r3, #0
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3714      	adds	r7, #20
 80138c2:	46bd      	mov	sp, r7
 80138c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c8:	4770      	bx	lr

080138ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80138ca:	b480      	push	{r7}
 80138cc:	b085      	sub	sp, #20
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	68fa      	ldr	r2, [r7, #12]
 80138e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138e4:	f023 0303 	bic.w	r3, r3, #3
 80138e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138f8:	f043 0302 	orr.w	r3, r3, #2
 80138fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	3714      	adds	r7, #20
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	695b      	ldr	r3, [r3, #20]
 8013918:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	699b      	ldr	r3, [r3, #24]
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	4013      	ands	r3, r2
 8013922:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013924:	68fb      	ldr	r3, [r7, #12]
}
 8013926:	4618      	mov	r0, r3
 8013928:	3714      	adds	r7, #20
 801392a:	46bd      	mov	sp, r7
 801392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013930:	4770      	bx	lr

08013932 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8013932:	b480      	push	{r7}
 8013934:	b085      	sub	sp, #20
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801394e:	69db      	ldr	r3, [r3, #28]
 8013950:	68ba      	ldr	r2, [r7, #8]
 8013952:	4013      	ands	r3, r2
 8013954:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	0c1b      	lsrs	r3, r3, #16
}
 801395a:	4618      	mov	r0, r3
 801395c:	3714      	adds	r7, #20
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr

08013966 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8013966:	b480      	push	{r7}
 8013968:	b085      	sub	sp, #20
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013978:	699b      	ldr	r3, [r3, #24]
 801397a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013982:	69db      	ldr	r3, [r3, #28]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	4013      	ands	r3, r2
 8013988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	b29b      	uxth	r3, r3
}
 801398e:	4618      	mov	r0, r3
 8013990:	3714      	adds	r7, #20
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801399a:	b480      	push	{r7}
 801399c:	b085      	sub	sp, #20
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
 80139a2:	460b      	mov	r3, r1
 80139a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80139aa:	78fb      	ldrb	r3, [r7, #3]
 80139ac:	015a      	lsls	r2, r3, #5
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	4413      	add	r3, r2
 80139b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139c0:	695b      	ldr	r3, [r3, #20]
 80139c2:	68ba      	ldr	r2, [r7, #8]
 80139c4:	4013      	ands	r3, r2
 80139c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139c8:	68bb      	ldr	r3, [r7, #8]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3714      	adds	r7, #20
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr

080139d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139d6:	b480      	push	{r7}
 80139d8:	b087      	sub	sp, #28
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
 80139de:	460b      	mov	r3, r1
 80139e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80139fa:	78fb      	ldrb	r3, [r7, #3]
 80139fc:	f003 030f 	and.w	r3, r3, #15
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	fa22 f303 	lsr.w	r3, r2, r3
 8013a06:	01db      	lsls	r3, r3, #7
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	693a      	ldr	r2, [r7, #16]
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013a10:	78fb      	ldrb	r3, [r7, #3]
 8013a12:	015a      	lsls	r2, r3, #5
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	4413      	add	r3, r2
 8013a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a1c:	689b      	ldr	r3, [r3, #8]
 8013a1e:	693a      	ldr	r2, [r7, #16]
 8013a20:	4013      	ands	r3, r2
 8013a22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013a24:	68bb      	ldr	r3, [r7, #8]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	371c      	adds	r7, #28
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr

08013a32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8013a32:	b480      	push	{r7}
 8013a34:	b083      	sub	sp, #12
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	695b      	ldr	r3, [r3, #20]
 8013a3e:	f003 0301 	and.w	r3, r3, #1
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	370c      	adds	r7, #12
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr
	...

08013a50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	4b09      	ldr	r3, [pc, #36]	; (8013a94 <USB_ActivateSetup+0x44>)
 8013a6e:	4013      	ands	r3, r2
 8013a70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3714      	adds	r7, #20
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr
 8013a94:	fffff800 	.word	0xfffff800

08013a98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013a98:	b480      	push	{r7}
 8013a9a:	b087      	sub	sp, #28
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	607a      	str	r2, [r7, #4]
 8013aa4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	333c      	adds	r3, #60	; 0x3c
 8013aae:	3304      	adds	r3, #4
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	4a26      	ldr	r2, [pc, #152]	; (8013b50 <USB_EP0_OutStart+0xb8>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d90a      	bls.n	8013ad2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013acc:	d101      	bne.n	8013ad2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e037      	b.n	8013b42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad8:	461a      	mov	r2, r3
 8013ada:	2300      	movs	r3, #0
 8013adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ae4:	691b      	ldr	r3, [r3, #16]
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af8:	691b      	ldr	r3, [r3, #16]
 8013afa:	697a      	ldr	r2, [r7, #20]
 8013afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b00:	f043 0318 	orr.w	r3, r3, #24
 8013b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b0c:	691b      	ldr	r3, [r3, #16]
 8013b0e:	697a      	ldr	r2, [r7, #20]
 8013b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013b18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013b1a:	7afb      	ldrb	r3, [r7, #11]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d10f      	bne.n	8013b40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b26:	461a      	mov	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	697a      	ldr	r2, [r7, #20]
 8013b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b40:	2300      	movs	r3, #0
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	371c      	adds	r7, #28
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr
 8013b4e:	bf00      	nop
 8013b50:	4f54300a 	.word	0x4f54300a

08013b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b085      	sub	sp, #20
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	3301      	adds	r3, #1
 8013b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8013b6c:	d901      	bls.n	8013b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013b6e:	2303      	movs	r3, #3
 8013b70:	e01b      	b.n	8013baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	691b      	ldr	r3, [r3, #16]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	daf2      	bge.n	8013b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	691b      	ldr	r3, [r3, #16]
 8013b82:	f043 0201 	orr.w	r2, r3, #1
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8013b96:	d901      	bls.n	8013b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013b98:	2303      	movs	r3, #3
 8013b9a:	e006      	b.n	8013baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	691b      	ldr	r3, [r3, #16]
 8013ba0:	f003 0301 	and.w	r3, r3, #1
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	d0f0      	beq.n	8013b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3714      	adds	r7, #20
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr
	...

08013bb8 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8013bc4:	f643 4050 	movw	r0, #15440	; 0x3c50
 8013bc8:	f002 fbb0 	bl	801632c <USBD_static_malloc>
 8013bcc:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d109      	bne.n	8013be8 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	32b0      	adds	r2, #176	; 0xb0
 8013bde:	2100      	movs	r1, #0
 8013be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013be4:	2302      	movs	r3, #2
 8013be6:	e08d      	b.n	8013d04 <USBD_AUDIO_Init+0x14c>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	32b0      	adds	r2, #176	; 0xb0
 8013bf2:	68f9      	ldr	r1, [r7, #12]
 8013bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	32b0      	adds	r2, #176	; 0xb0
 8013c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	7c1b      	ldrb	r3, [r3, #16]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d10e      	bne.n	8013c32 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8013c14:	4b3d      	ldr	r3, [pc, #244]	; (8013d0c <USBD_AUDIO_Init+0x154>)
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	f003 020f 	and.w	r2, r3, #15
 8013c1c:	6879      	ldr	r1, [r7, #4]
 8013c1e:	4613      	mov	r3, r2
 8013c20:	009b      	lsls	r3, r3, #2
 8013c22:	4413      	add	r3, r2
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	440b      	add	r3, r1
 8013c28:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	801a      	strh	r2, [r3, #0]
 8013c30:	e00d      	b.n	8013c4e <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8013c32:	4b36      	ldr	r3, [pc, #216]	; (8013d0c <USBD_AUDIO_Init+0x154>)
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	f003 020f 	and.w	r2, r3, #15
 8013c3a:	6879      	ldr	r1, [r7, #4]
 8013c3c:	4613      	mov	r3, r2
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	4413      	add	r3, r2
 8013c42:	009b      	lsls	r3, r3, #2
 8013c44:	440b      	add	r3, r1
 8013c46:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8013c4e:	4b2f      	ldr	r3, [pc, #188]	; (8013d0c <USBD_AUDIO_Init+0x154>)
 8013c50:	7819      	ldrb	r1, [r3, #0]
 8013c52:	23c0      	movs	r3, #192	; 0xc0
 8013c54:	2201      	movs	r2, #1
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f002 fa45 	bl	80160e6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8013c5c:	4b2b      	ldr	r3, [pc, #172]	; (8013d0c <USBD_AUDIO_Init+0x154>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	f003 020f 	and.w	r2, r3, #15
 8013c64:	6879      	ldr	r1, [r7, #4]
 8013c66:	4613      	mov	r3, r2
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4413      	add	r3, r2
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	440b      	add	r3, r1
 8013c70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013c74:	2201      	movs	r2, #1
 8013c76:	801a      	strh	r2, [r3, #0]

  pdev->ep_in[AUDIO_IN_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	875a      	strh	r2, [r3, #58]	; 0x3a
  pdev->ep_in[AUDIO_IN_EP & 0xFU].maxpacket = 3;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2203      	movs	r2, #3
 8013c82:	635a      	str	r2, [r3, #52]	; 0x34
  (void)USBD_LL_OpenEP(pdev, AUDIO_IN_EP, USBD_EP_TYPE_ISOC, 3U);
 8013c84:	2303      	movs	r3, #3
 8013c86:	2201      	movs	r2, #1
 8013c88:	2181      	movs	r1, #129	; 0x81
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f002 fa2b 	bl	80160e6 <USBD_LL_OpenEP>
  pdev->ep_in[AUDIO_IN_EP & 0xFU].is_used = 1U;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	871a      	strh	r2, [r3, #56]	; 0x38

  haudio->alt_setting = 0U;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013ca2:	2203      	movs	r2, #3
 8013ca4:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013cae:	2200      	movs	r2, #0
 8013cb0:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	33b0      	adds	r3, #176	; 0xb0
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	4413      	add	r3, r2
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	2146      	movs	r1, #70	; 0x46
 8013ce2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8013ce6:	4798      	blx	r3
 8013ce8:	4603      	mov	r3, r0
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d001      	beq.n	8013cf2 <USBD_AUDIO_Init+0x13a>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8013cee:	2303      	movs	r3, #3
 8013cf0:	e008      	b.n	8013d04 <USBD_AUDIO_Init+0x14c>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8013cf2:	4b06      	ldr	r3, [pc, #24]	; (8013d0c <USBD_AUDIO_Init+0x154>)
 8013cf4:	7819      	ldrb	r1, [r3, #0]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	1d1a      	adds	r2, r3, #4
 8013cfa:	23c0      	movs	r3, #192	; 0xc0
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f002 fae1 	bl	80162c4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8013d02:	2300      	movs	r3, #0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	2400018e 	.word	0x2400018e

08013d10 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8013d1c:	4b28      	ldr	r3, [pc, #160]	; (8013dc0 <USBD_AUDIO_DeInit+0xb0>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	4619      	mov	r1, r3
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f002 fa05 	bl	8016132 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8013d28:	4b25      	ldr	r3, [pc, #148]	; (8013dc0 <USBD_AUDIO_DeInit+0xb0>)
 8013d2a:	781b      	ldrb	r3, [r3, #0]
 8013d2c:	f003 020f 	and.w	r2, r3, #15
 8013d30:	6879      	ldr	r1, [r7, #4]
 8013d32:	4613      	mov	r3, r2
 8013d34:	009b      	lsls	r3, r3, #2
 8013d36:	4413      	add	r3, r2
 8013d38:	009b      	lsls	r3, r3, #2
 8013d3a:	440b      	add	r3, r1
 8013d3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013d40:	2200      	movs	r2, #0
 8013d42:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8013d44:	4b1e      	ldr	r3, [pc, #120]	; (8013dc0 <USBD_AUDIO_DeInit+0xb0>)
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	f003 020f 	and.w	r2, r3, #15
 8013d4c:	6879      	ldr	r1, [r7, #4]
 8013d4e:	4613      	mov	r3, r2
 8013d50:	009b      	lsls	r3, r3, #2
 8013d52:	4413      	add	r3, r2
 8013d54:	009b      	lsls	r3, r3, #2
 8013d56:	440b      	add	r3, r1
 8013d58:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	32b0      	adds	r2, #176	; 0xb0
 8013d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d020      	beq.n	8013db4 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	33b0      	adds	r3, #176	; 0xb0
 8013d7c:	009b      	lsls	r3, r3, #2
 8013d7e:	4413      	add	r3, r2
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	2000      	movs	r0, #0
 8013d86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	32b0      	adds	r2, #176	; 0xb0
 8013d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f002 fad6 	bl	8016348 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	32b0      	adds	r2, #176	; 0xb0
 8013da6:	2100      	movs	r1, #0
 8013da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2200      	movs	r2, #0
 8013db0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013db4:	2300      	movs	r3, #0
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	2400018e 	.word	0x2400018e

08013dc4 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	32b0      	adds	r2, #176	; 0xb0
 8013de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013de4:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d101      	bne.n	8013df0 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013dec:	2303      	movs	r3, #3
 8013dee:	e0c1      	b.n	8013f74 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d01a      	beq.n	8013e32 <USBD_AUDIO_Setup+0x6e>
 8013dfc:	2b20      	cmp	r3, #32
 8013dfe:	f040 80b1 	bne.w	8013f64 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	785b      	ldrb	r3, [r3, #1]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d006      	beq.n	8013e18 <USBD_AUDIO_Setup+0x54>
 8013e0a:	2b81      	cmp	r3, #129	; 0x81
 8013e0c:	d109      	bne.n	8013e22 <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8013e0e:	6839      	ldr	r1, [r7, #0]
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 f9f5 	bl	8014200 <AUDIO_REQ_GetCurrent>
          break;
 8013e16:	e00b      	b.n	8013e30 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8013e18:	6839      	ldr	r1, [r7, #0]
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f000 fa1c 	bl	8014258 <AUDIO_REQ_SetCurrent>
          break;
 8013e20:	e006      	b.n	8013e30 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8013e22:	6839      	ldr	r1, [r7, #0]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f001 fcb0 	bl	801578a <USBD_CtlError>
          ret = USBD_FAIL;
 8013e2a:	2303      	movs	r3, #3
 8013e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8013e2e:	bf00      	nop
      }
      break;
 8013e30:	e09f      	b.n	8013f72 <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	785b      	ldrb	r3, [r3, #1]
 8013e36:	2b0b      	cmp	r3, #11
 8013e38:	f200 8089 	bhi.w	8013f4e <USBD_AUDIO_Setup+0x18a>
 8013e3c:	a201      	add	r2, pc, #4	; (adr r2, 8013e44 <USBD_AUDIO_Setup+0x80>)
 8013e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e42:	bf00      	nop
 8013e44:	08013e75 	.word	0x08013e75
 8013e48:	08013f5d 	.word	0x08013f5d
 8013e4c:	08013f4f 	.word	0x08013f4f
 8013e50:	08013f4f 	.word	0x08013f4f
 8013e54:	08013f4f 	.word	0x08013f4f
 8013e58:	08013f4f 	.word	0x08013f4f
 8013e5c:	08013e9f 	.word	0x08013e9f
 8013e60:	08013f4f 	.word	0x08013f4f
 8013e64:	08013f4f 	.word	0x08013f4f
 8013e68:	08013f4f 	.word	0x08013f4f
 8013e6c:	08013ee7 	.word	0x08013ee7
 8013e70:	08013f0f 	.word	0x08013f0f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b03      	cmp	r3, #3
 8013e7e:	d107      	bne.n	8013e90 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013e80:	f107 0308 	add.w	r3, r7, #8
 8013e84:	2202      	movs	r2, #2
 8013e86:	4619      	mov	r1, r3
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f001 fcfb 	bl	8015884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013e8e:	e068      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013e90:	6839      	ldr	r1, [r7, #0]
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f001 fc79 	bl	801578a <USBD_CtlError>
            ret = USBD_FAIL;
 8013e98:	2303      	movs	r3, #3
 8013e9a:	75fb      	strb	r3, [r7, #23]
          break;
 8013e9c:	e061      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	885b      	ldrh	r3, [r3, #2]
 8013ea2:	0a1b      	lsrs	r3, r3, #8
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	2b21      	cmp	r3, #33	; 0x21
 8013ea8:	d15a      	bne.n	8013f60 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f000 fa3f 	bl	8014334 <USBD_AUDIO_GetAudioHeaderDesc>
 8013eb6:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00c      	beq.n	8013ed8 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	88db      	ldrh	r3, [r3, #6]
 8013ec2:	2b09      	cmp	r3, #9
 8013ec4:	bf28      	it	cs
 8013ec6:	2309      	movcs	r3, #9
 8013ec8:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8013eca:	897b      	ldrh	r3, [r7, #10]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	68f9      	ldr	r1, [r7, #12]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f001 fcd7 	bl	8015884 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8013ed6:	e043      	b.n	8013f60 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f001 fc55 	bl	801578a <USBD_CtlError>
              ret = USBD_FAIL;
 8013ee0:	2303      	movs	r3, #3
 8013ee2:	75fb      	strb	r3, [r7, #23]
          break;
 8013ee4:	e03c      	b.n	8013f60 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	2b03      	cmp	r3, #3
 8013ef0:	d106      	bne.n	8013f00 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	2201      	movs	r2, #1
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f001 fcc3 	bl	8015884 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013efe:	e030      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f001 fc41 	bl	801578a <USBD_CtlError>
            ret = USBD_FAIL;
 8013f08:	2303      	movs	r3, #3
 8013f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8013f0c:	e029      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	d112      	bne.n	8013f40 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	885b      	ldrh	r3, [r3, #2]
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d806      	bhi.n	8013f32 <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	885b      	ldrh	r3, [r3, #2]
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013f30:	e017      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8013f32:	6839      	ldr	r1, [r7, #0]
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f001 fc28 	bl	801578a <USBD_CtlError>
              ret = USBD_FAIL;
 8013f3a:	2303      	movs	r3, #3
 8013f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8013f3e:	e010      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013f40:	6839      	ldr	r1, [r7, #0]
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f001 fc21 	bl	801578a <USBD_CtlError>
            ret = USBD_FAIL;
 8013f48:	2303      	movs	r3, #3
 8013f4a:	75fb      	strb	r3, [r7, #23]
          break;
 8013f4c:	e009      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013f4e:	6839      	ldr	r1, [r7, #0]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f001 fc1a 	bl	801578a <USBD_CtlError>
          ret = USBD_FAIL;
 8013f56:	2303      	movs	r3, #3
 8013f58:	75fb      	strb	r3, [r7, #23]
          break;
 8013f5a:	e002      	b.n	8013f62 <USBD_AUDIO_Setup+0x19e>
          break;
 8013f5c:	bf00      	nop
 8013f5e:	e008      	b.n	8013f72 <USBD_AUDIO_Setup+0x1ae>
          break;
 8013f60:	bf00      	nop
      }
      break;
 8013f62:	e006      	b.n	8013f72 <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8013f64:	6839      	ldr	r1, [r7, #0]
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f001 fc0f 	bl	801578a <USBD_CtlError>
      ret = USBD_FAIL;
 8013f6c:	2303      	movs	r3, #3
 8013f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8013f70:	bf00      	nop
  }

  return (uint8_t)ret;
 8013f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3718      	adds	r7, #24
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2276      	movs	r2, #118	; 0x76
 8013f88:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8013f8a:	4b03      	ldr	r3, [pc, #12]	; (8013f98 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr
 8013f98:	2400010c 	.word	0x2400010c

08013f9c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b083      	sub	sp, #12
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	370c      	adds	r7, #12
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr

08013fb6 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b084      	sub	sp, #16
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	32b0      	adds	r2, #176	; 0xb0
 8013fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fcc:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d101      	bne.n	8013fd8 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013fd4:	2303      	movs	r3, #3
 8013fd6:	e02a      	b.n	801402e <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013fde:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d122      	bne.n	801402c <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013fec:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8013ff0:	2b02      	cmp	r3, #2
 8013ff2:	d11b      	bne.n	801402c <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	33b0      	adds	r3, #176	; 0xb0
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	4413      	add	r3, r2
 8014002:	685b      	ldr	r3, [r3, #4]
 8014004:	691b      	ldr	r3, [r3, #16]
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801400c:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 8014010:	4610      	mov	r0, r2
 8014012:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801401a:	2200      	movs	r2, #0
 801401c:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014026:	2200      	movs	r2, #0
 8014028:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8014036:	b480      	push	{r7}
 8014038:	b083      	sub	sp, #12
 801403a:	af00      	add	r7, sp, #0
 801403c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	4618      	mov	r0, r3
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr

0801404c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 801404c:	b480      	push	{r7}
 801404e:	b083      	sub	sp, #12
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	370c      	adds	r7, #12
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr

08014062 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014062:	b480      	push	{r7}
 8014064:	b083      	sub	sp, #12
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
 801406a:	460b      	mov	r3, r1
 801406c:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 801406e:	2300      	movs	r3, #0
}
 8014070:	4618      	mov	r0, r3
 8014072:	370c      	adds	r7, #12
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	460b      	mov	r3, r1
 8014086:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	32b0      	adds	r2, #176	; 0xb0
 8014092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d101      	bne.n	801409e <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801409a:	2303      	movs	r3, #3
 801409c:	e016      	b.n	80140cc <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	32b0      	adds	r2, #176	; 0xb0
 80140a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ac:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80140b4:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80140b8:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	4413      	add	r3, r2
 80140be:	1d1a      	adds	r2, r3, #4
 80140c0:	78f9      	ldrb	r1, [r7, #3]
 80140c2:	23c0      	movs	r3, #192	; 0xc0
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f002 f8fd 	bl	80162c4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80140ca:	2300      	movs	r3, #0
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	460b      	mov	r3, r1
 80140de:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	32b0      	adds	r2, #176	; 0xb0
 80140ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ee:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d101      	bne.n	80140fa <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80140f6:	2303      	movs	r3, #3
 80140f8:	e07c      	b.n	80141f4 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 80140fa:	4b40      	ldr	r3, [pc, #256]	; (80141fc <USBD_AUDIO_DataOut+0x128>)
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	78fa      	ldrb	r2, [r7, #3]
 8014100:	429a      	cmp	r2, r3
 8014102:	d176      	bne.n	80141f2 <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	4619      	mov	r1, r3
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f002 f8fc 	bl	8016306 <USBD_LL_GetRxDataSize>
 801410e:	4603      	mov	r3, r0
 8014110:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	33b0      	adds	r3, #176	; 0xb0
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	4413      	add	r3, r2
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	695b      	ldr	r3, [r3, #20]
 8014124:	68fa      	ldr	r2, [r7, #12]
 8014126:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801412a:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 801412e:	4611      	mov	r1, r2
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	440a      	add	r2, r1
 8014134:	1d10      	adds	r0, r2, #4
 8014136:	8979      	ldrh	r1, [r7, #10]
 8014138:	2201      	movs	r2, #1
 801413a:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014142:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8014146:	897b      	ldrh	r3, [r7, #10]
 8014148:	4413      	add	r3, r2
 801414a:	b29a      	uxth	r2, r3
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014152:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801415c:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8014160:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8014164:	d321      	bcc.n	80141aa <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801416c:	2200      	movs	r2, #0
 801416e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014178:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 801417c:	2b03      	cmp	r3, #3
 801417e:	d114      	bne.n	80141aa <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	33b0      	adds	r3, #176	; 0xb0
 801418a:	009b      	lsls	r3, r3, #2
 801418c:	4413      	add	r3, r2
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	68fa      	ldr	r2, [r7, #12]
 8014194:	1d10      	adds	r0, r2, #4
 8014196:	2201      	movs	r2, #1
 8014198:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 801419c:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141a4:	2200      	movs	r2, #0
 80141a6:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141b0:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d10d      	bne.n	80141d4 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141be:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80141c2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80141c6:	d105      	bne.n	80141d4 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80141d4:	4b09      	ldr	r3, [pc, #36]	; (80141fc <USBD_AUDIO_DataOut+0x128>)
 80141d6:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80141de:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 80141e2:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	4413      	add	r3, r2
 80141e8:	1d1a      	adds	r2, r3, #4
 80141ea:	23c0      	movs	r3, #192	; 0xc0
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f002 f869 	bl	80162c4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 80141f2:	2300      	movs	r3, #0
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	2400018e 	.word	0x2400018e

08014200 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	32b0      	adds	r2, #176	; 0xb0
 8014214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014218:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d017      	beq.n	8014250 <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8014226:	4413      	add	r3, r2
 8014228:	2240      	movs	r2, #64	; 0x40
 801422a:	2100      	movs	r1, #0
 801422c:	4618      	mov	r0, r3
 801422e:	f003 fdc6 	bl	8017dbe <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8014232:	68fa      	ldr	r2, [r7, #12]
 8014234:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8014238:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 801423a:	683a      	ldr	r2, [r7, #0]
 801423c:	88d2      	ldrh	r2, [r2, #6]
 801423e:	2a40      	cmp	r2, #64	; 0x40
 8014240:	bf28      	it	cs
 8014242:	2240      	movcs	r2, #64	; 0x40
 8014244:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8014246:	4619      	mov	r1, r3
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f001 fb1b 	bl	8015884 <USBD_CtlSendData>
 801424e:	e000      	b.n	8014252 <AUDIO_REQ_GetCurrent+0x52>
    return;
 8014250:	bf00      	nop
}
 8014252:	3710      	adds	r7, #16
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	32b0      	adds	r2, #176	; 0xb0
 801426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014270:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d02f      	beq.n	80142d8 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	88db      	ldrh	r3, [r3, #6]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d02c      	beq.n	80142da <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8014286:	2201      	movs	r2, #1
 8014288:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 801428c:	683b      	ldr	r3, [r7, #0]
 801428e:	88db      	ldrh	r3, [r3, #6]
 8014290:	2b3f      	cmp	r3, #63	; 0x3f
 8014292:	d803      	bhi.n	801429c <AUDIO_REQ_SetCurrent+0x44>
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	88db      	ldrh	r3, [r3, #6]
 8014298:	b2da      	uxtb	r2, r3
 801429a:	e000      	b.n	801429e <AUDIO_REQ_SetCurrent+0x46>
 801429c:	2240      	movs	r2, #64	; 0x40
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80142a4:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	889b      	ldrh	r3, [r3, #4]
 80142ac:	0a1b      	lsrs	r3, r3, #8
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	b2da      	uxtb	r2, r3
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80142b8:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 80142bc:	68fa      	ldr	r2, [r7, #12]
 80142be:	f643 430b 	movw	r3, #15371	; 0x3c0b
 80142c2:	4413      	add	r3, r2
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 80142ca:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 80142ce:	4619      	mov	r1, r3
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f001 fb03 	bl	80158dc <USBD_CtlPrepareRx>
 80142d6:	e000      	b.n	80142da <AUDIO_REQ_SetCurrent+0x82>
    return;
 80142d8:	bf00      	nop
  }
}
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	220a      	movs	r2, #10
 80142ec:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80142ee:	4b03      	ldr	r3, [pc, #12]	; (80142fc <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	370c      	adds	r7, #12
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr
 80142fc:	24000184 	.word	0x24000184

08014300 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014310:	2303      	movs	r3, #3
 8014312:	e009      	b.n	8014328 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	33b0      	adds	r3, #176	; 0xb0
 801431e:	009b      	lsls	r3, r3, #2
 8014320:	4413      	add	r3, r2
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b086      	sub	sp, #24
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8014344:	2300      	movs	r3, #0
 8014346:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	885b      	ldrh	r3, [r3, #2]
 801434c:	b29a      	uxth	r2, r3
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	b29b      	uxth	r3, r3
 8014354:	429a      	cmp	r2, r3
 8014356:	d91c      	bls.n	8014392 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	b29b      	uxth	r3, r3
 801435e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014360:	e011      	b.n	8014386 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014362:	f107 030a 	add.w	r3, r7, #10
 8014366:	4619      	mov	r1, r3
 8014368:	6978      	ldr	r0, [r7, #20]
 801436a:	f000 fbe6 	bl	8014b3a <USBD_GetNextDesc>
 801436e:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	785b      	ldrb	r3, [r3, #1]
 8014374:	2b24      	cmp	r3, #36	; 0x24
 8014376:	d106      	bne.n	8014386 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 801437c:	2b01      	cmp	r3, #1
 801437e:	d102      	bne.n	8014386 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	613b      	str	r3, [r7, #16]
        break;
 8014384:	e005      	b.n	8014392 <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	885b      	ldrh	r3, [r3, #2]
 801438a:	b29a      	uxth	r2, r3
 801438c:	897b      	ldrh	r3, [r7, #10]
 801438e:	429a      	cmp	r2, r3
 8014390:	d8e7      	bhi.n	8014362 <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8014392:	693b      	ldr	r3, [r7, #16]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	4613      	mov	r3, r2
 80143a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d101      	bne.n	80143b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80143b0:	2303      	movs	r3, #3
 80143b2:	e01f      	b.n	80143f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2200      	movs	r2, #0
 80143b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2200      	movs	r2, #0
 80143c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2200      	movs	r2, #0
 80143c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d003      	beq.n	80143da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2201      	movs	r2, #1
 80143de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	79fa      	ldrb	r2, [r7, #7]
 80143e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f001 fe11 	bl	8016010 <USBD_LL_Init>
 80143ee:	4603      	mov	r3, r0
 80143f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3718      	adds	r7, #24
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd80      	pop	{r7, pc}

080143fc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014406:	2300      	movs	r3, #0
 8014408:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d101      	bne.n	8014414 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014410:	2303      	movs	r3, #3
 8014412:	e025      	b.n	8014460 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	32ae      	adds	r2, #174	; 0xae
 8014426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801442c:	2b00      	cmp	r3, #0
 801442e:	d00f      	beq.n	8014450 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	32ae      	adds	r2, #174	; 0xae
 801443a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014440:	f107 020e 	add.w	r2, r7, #14
 8014444:	4610      	mov	r0, r2
 8014446:	4798      	blx	r3
 8014448:	4602      	mov	r2, r0
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801445e:	2300      	movs	r3, #0
}
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f001 fe1d 	bl	80160b0 <USBD_LL_Start>
 8014476:	4603      	mov	r3, r0
}
 8014478:	4618      	mov	r0, r3
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}

08014480 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014480:	b480      	push	{r7}
 8014482:	b083      	sub	sp, #12
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014488:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801448a:	4618      	mov	r0, r3
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr

08014496 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014496:	b580      	push	{r7, lr}
 8014498:	b084      	sub	sp, #16
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
 801449e:	460b      	mov	r3, r1
 80144a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80144a2:	2300      	movs	r3, #0
 80144a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d009      	beq.n	80144c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	78fa      	ldrb	r2, [r7, #3]
 80144ba:	4611      	mov	r1, r2
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	4798      	blx	r3
 80144c0:	4603      	mov	r3, r0
 80144c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80144c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3710      	adds	r7, #16
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b084      	sub	sp, #16
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	460b      	mov	r3, r1
 80144d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80144da:	2300      	movs	r3, #0
 80144dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	78fa      	ldrb	r2, [r7, #3]
 80144e8:	4611      	mov	r1, r2
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	4798      	blx	r3
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d001      	beq.n	80144f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80144f4:	2303      	movs	r3, #3
 80144f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80144f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b084      	sub	sp, #16
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
 801450a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014512:	6839      	ldr	r1, [r7, #0]
 8014514:	4618      	mov	r0, r3
 8014516:	f001 f8fe 	bl	8015716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2201      	movs	r2, #1
 801451e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014528:	461a      	mov	r2, r3
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014536:	f003 031f 	and.w	r3, r3, #31
 801453a:	2b02      	cmp	r3, #2
 801453c:	d01a      	beq.n	8014574 <USBD_LL_SetupStage+0x72>
 801453e:	2b02      	cmp	r3, #2
 8014540:	d822      	bhi.n	8014588 <USBD_LL_SetupStage+0x86>
 8014542:	2b00      	cmp	r3, #0
 8014544:	d002      	beq.n	801454c <USBD_LL_SetupStage+0x4a>
 8014546:	2b01      	cmp	r3, #1
 8014548:	d00a      	beq.n	8014560 <USBD_LL_SetupStage+0x5e>
 801454a:	e01d      	b.n	8014588 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014552:	4619      	mov	r1, r3
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 fb2b 	bl	8014bb0 <USBD_StdDevReq>
 801455a:	4603      	mov	r3, r0
 801455c:	73fb      	strb	r3, [r7, #15]
      break;
 801455e:	e020      	b.n	80145a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f000 fb93 	bl	8014c94 <USBD_StdItfReq>
 801456e:	4603      	mov	r3, r0
 8014570:	73fb      	strb	r3, [r7, #15]
      break;
 8014572:	e016      	b.n	80145a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f000 fbf5 	bl	8014d6c <USBD_StdEPReq>
 8014582:	4603      	mov	r3, r0
 8014584:	73fb      	strb	r3, [r7, #15]
      break;
 8014586:	e00c      	b.n	80145a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801458e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014592:	b2db      	uxtb	r3, r3
 8014594:	4619      	mov	r1, r3
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f001 fdea 	bl	8016170 <USBD_LL_StallEP>
 801459c:	4603      	mov	r3, r0
 801459e:	73fb      	strb	r3, [r7, #15]
      break;
 80145a0:	bf00      	nop
  }

  return ret;
 80145a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	460b      	mov	r3, r1
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80145ba:	2300      	movs	r3, #0
 80145bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80145be:	7afb      	ldrb	r3, [r7, #11]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d16e      	bne.n	80146a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80145ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145d2:	2b03      	cmp	r3, #3
 80145d4:	f040 8098 	bne.w	8014708 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	689a      	ldr	r2, [r3, #8]
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d913      	bls.n	801460c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	689a      	ldr	r2, [r3, #8]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	1ad2      	subs	r2, r2, r3
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	68da      	ldr	r2, [r3, #12]
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	4293      	cmp	r3, r2
 80145fc:	bf28      	it	cs
 80145fe:	4613      	movcs	r3, r2
 8014600:	461a      	mov	r2, r3
 8014602:	6879      	ldr	r1, [r7, #4]
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f001 f986 	bl	8015916 <USBD_CtlContinueRx>
 801460a:	e07d      	b.n	8014708 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014612:	f003 031f 	and.w	r3, r3, #31
 8014616:	2b02      	cmp	r3, #2
 8014618:	d014      	beq.n	8014644 <USBD_LL_DataOutStage+0x98>
 801461a:	2b02      	cmp	r3, #2
 801461c:	d81d      	bhi.n	801465a <USBD_LL_DataOutStage+0xae>
 801461e:	2b00      	cmp	r3, #0
 8014620:	d002      	beq.n	8014628 <USBD_LL_DataOutStage+0x7c>
 8014622:	2b01      	cmp	r3, #1
 8014624:	d003      	beq.n	801462e <USBD_LL_DataOutStage+0x82>
 8014626:	e018      	b.n	801465a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014628:	2300      	movs	r3, #0
 801462a:	75bb      	strb	r3, [r7, #22]
            break;
 801462c:	e018      	b.n	8014660 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014634:	b2db      	uxtb	r3, r3
 8014636:	4619      	mov	r1, r3
 8014638:	68f8      	ldr	r0, [r7, #12]
 801463a:	f000 fa64 	bl	8014b06 <USBD_CoreFindIF>
 801463e:	4603      	mov	r3, r0
 8014640:	75bb      	strb	r3, [r7, #22]
            break;
 8014642:	e00d      	b.n	8014660 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801464a:	b2db      	uxtb	r3, r3
 801464c:	4619      	mov	r1, r3
 801464e:	68f8      	ldr	r0, [r7, #12]
 8014650:	f000 fa66 	bl	8014b20 <USBD_CoreFindEP>
 8014654:	4603      	mov	r3, r0
 8014656:	75bb      	strb	r3, [r7, #22]
            break;
 8014658:	e002      	b.n	8014660 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801465a:	2300      	movs	r3, #0
 801465c:	75bb      	strb	r3, [r7, #22]
            break;
 801465e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014660:	7dbb      	ldrb	r3, [r7, #22]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d119      	bne.n	801469a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801466c:	b2db      	uxtb	r3, r3
 801466e:	2b03      	cmp	r3, #3
 8014670:	d113      	bne.n	801469a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014672:	7dba      	ldrb	r2, [r7, #22]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	32ae      	adds	r2, #174	; 0xae
 8014678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801467c:	691b      	ldr	r3, [r3, #16]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00b      	beq.n	801469a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014682:	7dba      	ldrb	r2, [r7, #22]
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801468a:	7dba      	ldrb	r2, [r7, #22]
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	32ae      	adds	r2, #174	; 0xae
 8014690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014694:	691b      	ldr	r3, [r3, #16]
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	f001 f94c 	bl	8015938 <USBD_CtlSendStatus>
 80146a0:	e032      	b.n	8014708 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80146a2:	7afb      	ldrb	r3, [r7, #11]
 80146a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146a8:	b2db      	uxtb	r3, r3
 80146aa:	4619      	mov	r1, r3
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f000 fa37 	bl	8014b20 <USBD_CoreFindEP>
 80146b2:	4603      	mov	r3, r0
 80146b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80146b6:	7dbb      	ldrb	r3, [r7, #22]
 80146b8:	2bff      	cmp	r3, #255	; 0xff
 80146ba:	d025      	beq.n	8014708 <USBD_LL_DataOutStage+0x15c>
 80146bc:	7dbb      	ldrb	r3, [r7, #22]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d122      	bne.n	8014708 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	2b03      	cmp	r3, #3
 80146cc:	d117      	bne.n	80146fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80146ce:	7dba      	ldrb	r2, [r7, #22]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	32ae      	adds	r2, #174	; 0xae
 80146d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d8:	699b      	ldr	r3, [r3, #24]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d00f      	beq.n	80146fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80146de:	7dba      	ldrb	r2, [r7, #22]
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80146e6:	7dba      	ldrb	r2, [r7, #22]
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	32ae      	adds	r2, #174	; 0xae
 80146ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146f0:	699b      	ldr	r3, [r3, #24]
 80146f2:	7afa      	ldrb	r2, [r7, #11]
 80146f4:	4611      	mov	r1, r2
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	4798      	blx	r3
 80146fa:	4603      	mov	r3, r0
 80146fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80146fe:	7dfb      	ldrb	r3, [r7, #23]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014704:	7dfb      	ldrb	r3, [r7, #23]
 8014706:	e000      	b.n	801470a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014708:	2300      	movs	r3, #0
}
 801470a:	4618      	mov	r0, r3
 801470c:	3718      	adds	r7, #24
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}

08014712 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014712:	b580      	push	{r7, lr}
 8014714:	b086      	sub	sp, #24
 8014716:	af00      	add	r7, sp, #0
 8014718:	60f8      	str	r0, [r7, #12]
 801471a:	460b      	mov	r3, r1
 801471c:	607a      	str	r2, [r7, #4]
 801471e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014720:	7afb      	ldrb	r3, [r7, #11]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d16f      	bne.n	8014806 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3314      	adds	r3, #20
 801472a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014732:	2b02      	cmp	r3, #2
 8014734:	d15a      	bne.n	80147ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	689a      	ldr	r2, [r3, #8]
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	429a      	cmp	r2, r3
 8014740:	d914      	bls.n	801476c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	689a      	ldr	r2, [r3, #8]
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	1ad2      	subs	r2, r2, r3
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	689b      	ldr	r3, [r3, #8]
 8014754:	461a      	mov	r2, r3
 8014756:	6879      	ldr	r1, [r7, #4]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f001 f8ae 	bl	80158ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801475e:	2300      	movs	r3, #0
 8014760:	2200      	movs	r2, #0
 8014762:	2100      	movs	r1, #0
 8014764:	68f8      	ldr	r0, [r7, #12]
 8014766:	f001 fdad 	bl	80162c4 <USBD_LL_PrepareReceive>
 801476a:	e03f      	b.n	80147ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	68da      	ldr	r2, [r3, #12]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	689b      	ldr	r3, [r3, #8]
 8014774:	429a      	cmp	r2, r3
 8014776:	d11c      	bne.n	80147b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	685a      	ldr	r2, [r3, #4]
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014780:	429a      	cmp	r2, r3
 8014782:	d316      	bcc.n	80147b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	685a      	ldr	r2, [r3, #4]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801478e:	429a      	cmp	r2, r3
 8014790:	d20f      	bcs.n	80147b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014792:	2200      	movs	r2, #0
 8014794:	2100      	movs	r1, #0
 8014796:	68f8      	ldr	r0, [r7, #12]
 8014798:	f001 f88f 	bl	80158ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2200      	movs	r2, #0
 80147a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80147a4:	2300      	movs	r3, #0
 80147a6:	2200      	movs	r2, #0
 80147a8:	2100      	movs	r1, #0
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f001 fd8a 	bl	80162c4 <USBD_LL_PrepareReceive>
 80147b0:	e01c      	b.n	80147ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	2b03      	cmp	r3, #3
 80147bc:	d10f      	bne.n	80147de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d009      	beq.n	80147de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2200      	movs	r2, #0
 80147ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	68f8      	ldr	r0, [r7, #12]
 80147dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80147de:	2180      	movs	r1, #128	; 0x80
 80147e0:	68f8      	ldr	r0, [r7, #12]
 80147e2:	f001 fcc5 	bl	8016170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80147e6:	68f8      	ldr	r0, [r7, #12]
 80147e8:	f001 f8b9 	bl	801595e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d03a      	beq.n	801486c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80147f6:	68f8      	ldr	r0, [r7, #12]
 80147f8:	f7ff fe42 	bl	8014480 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014804:	e032      	b.n	801486c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014806:	7afb      	ldrb	r3, [r7, #11]
 8014808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801480c:	b2db      	uxtb	r3, r3
 801480e:	4619      	mov	r1, r3
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f000 f985 	bl	8014b20 <USBD_CoreFindEP>
 8014816:	4603      	mov	r3, r0
 8014818:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	2bff      	cmp	r3, #255	; 0xff
 801481e:	d025      	beq.n	801486c <USBD_LL_DataInStage+0x15a>
 8014820:	7dfb      	ldrb	r3, [r7, #23]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d122      	bne.n	801486c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801482c:	b2db      	uxtb	r3, r3
 801482e:	2b03      	cmp	r3, #3
 8014830:	d11c      	bne.n	801486c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014832:	7dfa      	ldrb	r2, [r7, #23]
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	32ae      	adds	r2, #174	; 0xae
 8014838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801483c:	695b      	ldr	r3, [r3, #20]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d014      	beq.n	801486c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014842:	7dfa      	ldrb	r2, [r7, #23]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801484a:	7dfa      	ldrb	r2, [r7, #23]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	32ae      	adds	r2, #174	; 0xae
 8014850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014854:	695b      	ldr	r3, [r3, #20]
 8014856:	7afa      	ldrb	r2, [r7, #11]
 8014858:	4611      	mov	r1, r2
 801485a:	68f8      	ldr	r0, [r7, #12]
 801485c:	4798      	blx	r3
 801485e:	4603      	mov	r3, r0
 8014860:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014862:	7dbb      	ldrb	r3, [r7, #22]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d001      	beq.n	801486c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014868:	7dbb      	ldrb	r3, [r7, #22]
 801486a:	e000      	b.n	801486e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801486c:	2300      	movs	r3, #0
}
 801486e:	4618      	mov	r0, r3
 8014870:	3718      	adds	r7, #24
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}

08014876 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014876:	b580      	push	{r7, lr}
 8014878:	b084      	sub	sp, #16
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801487e:	2300      	movs	r3, #0
 8014880:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	2201      	movs	r2, #1
 8014886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2200      	movs	r2, #0
 801488e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2200      	movs	r2, #0
 8014896:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2200      	movs	r2, #0
 801489c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2200      	movs	r2, #0
 80148a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d014      	beq.n	80148dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d00e      	beq.n	80148dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	6852      	ldr	r2, [r2, #4]
 80148ca:	b2d2      	uxtb	r2, r2
 80148cc:	4611      	mov	r1, r2
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	4798      	blx	r3
 80148d2:	4603      	mov	r3, r0
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d001      	beq.n	80148dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80148d8:	2303      	movs	r3, #3
 80148da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80148dc:	2340      	movs	r3, #64	; 0x40
 80148de:	2200      	movs	r2, #0
 80148e0:	2100      	movs	r1, #0
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f001 fbff 	bl	80160e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2201      	movs	r2, #1
 80148ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2240      	movs	r2, #64	; 0x40
 80148f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80148f8:	2340      	movs	r3, #64	; 0x40
 80148fa:	2200      	movs	r2, #0
 80148fc:	2180      	movs	r1, #128	; 0x80
 80148fe:	6878      	ldr	r0, [r7, #4]
 8014900:	f001 fbf1 	bl	80160e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2201      	movs	r2, #1
 8014908:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2240      	movs	r2, #64	; 0x40
 801490e:	621a      	str	r2, [r3, #32]

  return ret;
 8014910:	7bfb      	ldrb	r3, [r7, #15]
}
 8014912:	4618      	mov	r0, r3
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801491a:	b480      	push	{r7}
 801491c:	b083      	sub	sp, #12
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
 8014922:	460b      	mov	r3, r1
 8014924:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	78fa      	ldrb	r2, [r7, #3]
 801492a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801492c:	2300      	movs	r3, #0
}
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr

0801493a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801493a:	b480      	push	{r7}
 801493c:	b083      	sub	sp, #12
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014948:	b2db      	uxtb	r3, r3
 801494a:	2b04      	cmp	r3, #4
 801494c:	d006      	beq.n	801495c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014954:	b2da      	uxtb	r2, r3
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2204      	movs	r2, #4
 8014960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014964:	2300      	movs	r3, #0
}
 8014966:	4618      	mov	r0, r3
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014972:	b480      	push	{r7}
 8014974:	b083      	sub	sp, #12
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014980:	b2db      	uxtb	r3, r3
 8014982:	2b04      	cmp	r3, #4
 8014984:	d106      	bne.n	8014994 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801498c:	b2da      	uxtb	r2, r3
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	370c      	adds	r7, #12
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr

080149a2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80149a2:	b580      	push	{r7, lr}
 80149a4:	b082      	sub	sp, #8
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	2b03      	cmp	r3, #3
 80149b4:	d110      	bne.n	80149d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00b      	beq.n	80149d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149c6:	69db      	ldr	r3, [r3, #28]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d005      	beq.n	80149d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149d2:	69db      	ldr	r3, [r3, #28]
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80149d8:	2300      	movs	r3, #0
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3708      	adds	r7, #8
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}

080149e2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80149e2:	b580      	push	{r7, lr}
 80149e4:	b082      	sub	sp, #8
 80149e6:	af00      	add	r7, sp, #0
 80149e8:	6078      	str	r0, [r7, #4]
 80149ea:	460b      	mov	r3, r1
 80149ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	32ae      	adds	r2, #174	; 0xae
 80149f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d101      	bne.n	8014a04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014a00:	2303      	movs	r3, #3
 8014a02:	e01c      	b.n	8014a3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b03      	cmp	r3, #3
 8014a0e:	d115      	bne.n	8014a3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	32ae      	adds	r2, #174	; 0xae
 8014a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1e:	6a1b      	ldr	r3, [r3, #32]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00b      	beq.n	8014a3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	32ae      	adds	r2, #174	; 0xae
 8014a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a32:	6a1b      	ldr	r3, [r3, #32]
 8014a34:	78fa      	ldrb	r2, [r7, #3]
 8014a36:	4611      	mov	r1, r2
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014a3c:	2300      	movs	r3, #0
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3708      	adds	r7, #8
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b082      	sub	sp, #8
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	6078      	str	r0, [r7, #4]
 8014a4e:	460b      	mov	r3, r1
 8014a50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	32ae      	adds	r2, #174	; 0xae
 8014a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d101      	bne.n	8014a68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014a64:	2303      	movs	r3, #3
 8014a66:	e01c      	b.n	8014aa2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	2b03      	cmp	r3, #3
 8014a72:	d115      	bne.n	8014aa0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	32ae      	adds	r2, #174	; 0xae
 8014a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d00b      	beq.n	8014aa0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	32ae      	adds	r2, #174	; 0xae
 8014a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a98:	78fa      	ldrb	r2, [r7, #3]
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014aa0:	2300      	movs	r3, #0
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3708      	adds	r7, #8
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014aaa:	b480      	push	{r7}
 8014aac:	b083      	sub	sp, #12
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2201      	movs	r2, #1
 8014ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00e      	beq.n	8014afc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	6852      	ldr	r2, [r2, #4]
 8014aea:	b2d2      	uxtb	r2, r2
 8014aec:	4611      	mov	r1, r2
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	4798      	blx	r3
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d001      	beq.n	8014afc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014af8:	2303      	movs	r3, #3
 8014afa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}

08014b06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014b06:	b480      	push	{r7}
 8014b08:	b083      	sub	sp, #12
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	6078      	str	r0, [r7, #4]
 8014b0e:	460b      	mov	r3, r1
 8014b10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014b12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	370c      	adds	r7, #12
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr

08014b20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014b20:	b480      	push	{r7}
 8014b22:	b083      	sub	sp, #12
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	460b      	mov	r3, r1
 8014b2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014b2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	370c      	adds	r7, #12
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr

08014b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014b3a:	b480      	push	{r7}
 8014b3c:	b085      	sub	sp, #20
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	6078      	str	r0, [r7, #4]
 8014b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	881a      	ldrh	r2, [r3, #0]
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	b29b      	uxth	r3, r3
 8014b52:	4413      	add	r3, r2
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	781b      	ldrb	r3, [r3, #0]
 8014b5e:	461a      	mov	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4413      	add	r3, r2
 8014b64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014b66:	68fb      	ldr	r3, [r7, #12]
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3714      	adds	r7, #20
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b087      	sub	sp, #28
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	3301      	adds	r3, #1
 8014b8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014b92:	8a3b      	ldrh	r3, [r7, #16]
 8014b94:	021b      	lsls	r3, r3, #8
 8014b96:	b21a      	sxth	r2, r3
 8014b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	b21b      	sxth	r3, r3
 8014ba0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014ba2:	89fb      	ldrh	r3, [r7, #14]
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	371c      	adds	r7, #28
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr

08014bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bc6:	2b40      	cmp	r3, #64	; 0x40
 8014bc8:	d005      	beq.n	8014bd6 <USBD_StdDevReq+0x26>
 8014bca:	2b40      	cmp	r3, #64	; 0x40
 8014bcc:	d857      	bhi.n	8014c7e <USBD_StdDevReq+0xce>
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00f      	beq.n	8014bf2 <USBD_StdDevReq+0x42>
 8014bd2:	2b20      	cmp	r3, #32
 8014bd4:	d153      	bne.n	8014c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	32ae      	adds	r2, #174	; 0xae
 8014be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	4798      	blx	r3
 8014bec:	4603      	mov	r3, r0
 8014bee:	73fb      	strb	r3, [r7, #15]
      break;
 8014bf0:	e04a      	b.n	8014c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	785b      	ldrb	r3, [r3, #1]
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d83b      	bhi.n	8014c72 <USBD_StdDevReq+0xc2>
 8014bfa:	a201      	add	r2, pc, #4	; (adr r2, 8014c00 <USBD_StdDevReq+0x50>)
 8014bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c00:	08014c55 	.word	0x08014c55
 8014c04:	08014c69 	.word	0x08014c69
 8014c08:	08014c73 	.word	0x08014c73
 8014c0c:	08014c5f 	.word	0x08014c5f
 8014c10:	08014c73 	.word	0x08014c73
 8014c14:	08014c33 	.word	0x08014c33
 8014c18:	08014c29 	.word	0x08014c29
 8014c1c:	08014c73 	.word	0x08014c73
 8014c20:	08014c4b 	.word	0x08014c4b
 8014c24:	08014c3d 	.word	0x08014c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 fa3c 	bl	80150a8 <USBD_GetDescriptor>
          break;
 8014c30:	e024      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014c32:	6839      	ldr	r1, [r7, #0]
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f000 fbcb 	bl	80153d0 <USBD_SetAddress>
          break;
 8014c3a:	e01f      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014c3c:	6839      	ldr	r1, [r7, #0]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 fc0a 	bl	8015458 <USBD_SetConfig>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]
          break;
 8014c48:	e018      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014c4a:	6839      	ldr	r1, [r7, #0]
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f000 fcad 	bl	80155ac <USBD_GetConfig>
          break;
 8014c52:	e013      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014c54:	6839      	ldr	r1, [r7, #0]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f000 fcde 	bl	8015618 <USBD_GetStatus>
          break;
 8014c5c:	e00e      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 fd0d 	bl	8015680 <USBD_SetFeature>
          break;
 8014c66:	e009      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014c68:	6839      	ldr	r1, [r7, #0]
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 fd31 	bl	80156d2 <USBD_ClrFeature>
          break;
 8014c70:	e004      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014c72:	6839      	ldr	r1, [r7, #0]
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 fd88 	bl	801578a <USBD_CtlError>
          break;
 8014c7a:	bf00      	nop
      }
      break;
 8014c7c:	e004      	b.n	8014c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014c7e:	6839      	ldr	r1, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 fd82 	bl	801578a <USBD_CtlError>
      break;
 8014c86:	bf00      	nop
  }

  return ret;
 8014c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop

08014c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014caa:	2b40      	cmp	r3, #64	; 0x40
 8014cac:	d005      	beq.n	8014cba <USBD_StdItfReq+0x26>
 8014cae:	2b40      	cmp	r3, #64	; 0x40
 8014cb0:	d852      	bhi.n	8014d58 <USBD_StdItfReq+0xc4>
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <USBD_StdItfReq+0x26>
 8014cb6:	2b20      	cmp	r3, #32
 8014cb8:	d14e      	bne.n	8014d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	2b02      	cmp	r3, #2
 8014cc6:	d840      	bhi.n	8014d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	889b      	ldrh	r3, [r3, #4]
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d836      	bhi.n	8014d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	889b      	ldrh	r3, [r3, #4]
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	4619      	mov	r1, r3
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ff ff13 	bl	8014b06 <USBD_CoreFindIF>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ce4:	7bbb      	ldrb	r3, [r7, #14]
 8014ce6:	2bff      	cmp	r3, #255	; 0xff
 8014ce8:	d01d      	beq.n	8014d26 <USBD_StdItfReq+0x92>
 8014cea:	7bbb      	ldrb	r3, [r7, #14]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d11a      	bne.n	8014d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014cf0:	7bba      	ldrb	r2, [r7, #14]
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	32ae      	adds	r2, #174	; 0xae
 8014cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00f      	beq.n	8014d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014d00:	7bba      	ldrb	r2, [r7, #14]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014d08:	7bba      	ldrb	r2, [r7, #14]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	32ae      	adds	r2, #174	; 0xae
 8014d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	6839      	ldr	r1, [r7, #0]
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	4798      	blx	r3
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014d1e:	e004      	b.n	8014d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014d20:	2303      	movs	r3, #3
 8014d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014d24:	e001      	b.n	8014d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014d26:	2303      	movs	r3, #3
 8014d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	88db      	ldrh	r3, [r3, #6]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d110      	bne.n	8014d54 <USBD_StdItfReq+0xc0>
 8014d32:	7bfb      	ldrb	r3, [r7, #15]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10d      	bne.n	8014d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fdfd 	bl	8015938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014d3e:	e009      	b.n	8014d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014d40:	6839      	ldr	r1, [r7, #0]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 fd21 	bl	801578a <USBD_CtlError>
          break;
 8014d48:	e004      	b.n	8014d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014d4a:	6839      	ldr	r1, [r7, #0]
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f000 fd1c 	bl	801578a <USBD_CtlError>
          break;
 8014d52:	e000      	b.n	8014d56 <USBD_StdItfReq+0xc2>
          break;
 8014d54:	bf00      	nop
      }
      break;
 8014d56:	e004      	b.n	8014d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014d58:	6839      	ldr	r1, [r7, #0]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 fd15 	bl	801578a <USBD_CtlError>
      break;
 8014d60:	bf00      	nop
  }

  return ret;
 8014d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	889b      	ldrh	r3, [r3, #4]
 8014d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d88:	2b40      	cmp	r3, #64	; 0x40
 8014d8a:	d007      	beq.n	8014d9c <USBD_StdEPReq+0x30>
 8014d8c:	2b40      	cmp	r3, #64	; 0x40
 8014d8e:	f200 817f 	bhi.w	8015090 <USBD_StdEPReq+0x324>
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d02a      	beq.n	8014dec <USBD_StdEPReq+0x80>
 8014d96:	2b20      	cmp	r3, #32
 8014d98:	f040 817a 	bne.w	8015090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014d9c:	7bbb      	ldrb	r3, [r7, #14]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7ff febd 	bl	8014b20 <USBD_CoreFindEP>
 8014da6:	4603      	mov	r3, r0
 8014da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014daa:	7b7b      	ldrb	r3, [r7, #13]
 8014dac:	2bff      	cmp	r3, #255	; 0xff
 8014dae:	f000 8174 	beq.w	801509a <USBD_StdEPReq+0x32e>
 8014db2:	7b7b      	ldrb	r3, [r7, #13]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f040 8170 	bne.w	801509a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014dba:	7b7a      	ldrb	r2, [r7, #13]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014dc2:	7b7a      	ldrb	r2, [r7, #13]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	32ae      	adds	r2, #174	; 0xae
 8014dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 8163 	beq.w	801509a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014dd4:	7b7a      	ldrb	r2, [r7, #13]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	32ae      	adds	r2, #174	; 0xae
 8014dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dde:	689b      	ldr	r3, [r3, #8]
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	4798      	blx	r3
 8014de6:	4603      	mov	r3, r0
 8014de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014dea:	e156      	b.n	801509a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	785b      	ldrb	r3, [r3, #1]
 8014df0:	2b03      	cmp	r3, #3
 8014df2:	d008      	beq.n	8014e06 <USBD_StdEPReq+0x9a>
 8014df4:	2b03      	cmp	r3, #3
 8014df6:	f300 8145 	bgt.w	8015084 <USBD_StdEPReq+0x318>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f000 809b 	beq.w	8014f36 <USBD_StdEPReq+0x1ca>
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d03c      	beq.n	8014e7e <USBD_StdEPReq+0x112>
 8014e04:	e13e      	b.n	8015084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	d002      	beq.n	8014e18 <USBD_StdEPReq+0xac>
 8014e12:	2b03      	cmp	r3, #3
 8014e14:	d016      	beq.n	8014e44 <USBD_StdEPReq+0xd8>
 8014e16:	e02c      	b.n	8014e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014e18:	7bbb      	ldrb	r3, [r7, #14]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00d      	beq.n	8014e3a <USBD_StdEPReq+0xce>
 8014e1e:	7bbb      	ldrb	r3, [r7, #14]
 8014e20:	2b80      	cmp	r3, #128	; 0x80
 8014e22:	d00a      	beq.n	8014e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e24:	7bbb      	ldrb	r3, [r7, #14]
 8014e26:	4619      	mov	r1, r3
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f001 f9a1 	bl	8016170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e2e:	2180      	movs	r1, #128	; 0x80
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f001 f99d 	bl	8016170 <USBD_LL_StallEP>
 8014e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014e38:	e020      	b.n	8014e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014e3a:	6839      	ldr	r1, [r7, #0]
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 fca4 	bl	801578a <USBD_CtlError>
              break;
 8014e42:	e01b      	b.n	8014e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	885b      	ldrh	r3, [r3, #2]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10e      	bne.n	8014e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014e4c:	7bbb      	ldrb	r3, [r7, #14]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d00b      	beq.n	8014e6a <USBD_StdEPReq+0xfe>
 8014e52:	7bbb      	ldrb	r3, [r7, #14]
 8014e54:	2b80      	cmp	r3, #128	; 0x80
 8014e56:	d008      	beq.n	8014e6a <USBD_StdEPReq+0xfe>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	88db      	ldrh	r3, [r3, #6]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d104      	bne.n	8014e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e60:	7bbb      	ldrb	r3, [r7, #14]
 8014e62:	4619      	mov	r1, r3
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f001 f983 	bl	8016170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 fd64 	bl	8015938 <USBD_CtlSendStatus>

              break;
 8014e70:	e004      	b.n	8014e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 fc88 	bl	801578a <USBD_CtlError>
              break;
 8014e7a:	bf00      	nop
          }
          break;
 8014e7c:	e107      	b.n	801508e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b02      	cmp	r3, #2
 8014e88:	d002      	beq.n	8014e90 <USBD_StdEPReq+0x124>
 8014e8a:	2b03      	cmp	r3, #3
 8014e8c:	d016      	beq.n	8014ebc <USBD_StdEPReq+0x150>
 8014e8e:	e04b      	b.n	8014f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014e90:	7bbb      	ldrb	r3, [r7, #14]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d00d      	beq.n	8014eb2 <USBD_StdEPReq+0x146>
 8014e96:	7bbb      	ldrb	r3, [r7, #14]
 8014e98:	2b80      	cmp	r3, #128	; 0x80
 8014e9a:	d00a      	beq.n	8014eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e9c:	7bbb      	ldrb	r3, [r7, #14]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f001 f965 	bl	8016170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ea6:	2180      	movs	r1, #128	; 0x80
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f001 f961 	bl	8016170 <USBD_LL_StallEP>
 8014eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014eb0:	e040      	b.n	8014f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014eb2:	6839      	ldr	r1, [r7, #0]
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 fc68 	bl	801578a <USBD_CtlError>
              break;
 8014eba:	e03b      	b.n	8014f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	885b      	ldrh	r3, [r3, #2]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d136      	bne.n	8014f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014ec4:	7bbb      	ldrb	r3, [r7, #14]
 8014ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d004      	beq.n	8014ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014ece:	7bbb      	ldrb	r3, [r7, #14]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f001 f96b 	bl	80161ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 fd2d 	bl	8015938 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014ede:	7bbb      	ldrb	r3, [r7, #14]
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7ff fe1c 	bl	8014b20 <USBD_CoreFindEP>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014eec:	7b7b      	ldrb	r3, [r7, #13]
 8014eee:	2bff      	cmp	r3, #255	; 0xff
 8014ef0:	d01f      	beq.n	8014f32 <USBD_StdEPReq+0x1c6>
 8014ef2:	7b7b      	ldrb	r3, [r7, #13]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d11c      	bne.n	8014f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014ef8:	7b7a      	ldrb	r2, [r7, #13]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014f00:	7b7a      	ldrb	r2, [r7, #13]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	32ae      	adds	r2, #174	; 0xae
 8014f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0a:	689b      	ldr	r3, [r3, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d010      	beq.n	8014f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014f10:	7b7a      	ldrb	r2, [r7, #13]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	32ae      	adds	r2, #174	; 0xae
 8014f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f1a:	689b      	ldr	r3, [r3, #8]
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	4798      	blx	r3
 8014f22:	4603      	mov	r3, r0
 8014f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014f26:	e004      	b.n	8014f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014f28:	6839      	ldr	r1, [r7, #0]
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f000 fc2d 	bl	801578a <USBD_CtlError>
              break;
 8014f30:	e000      	b.n	8014f34 <USBD_StdEPReq+0x1c8>
              break;
 8014f32:	bf00      	nop
          }
          break;
 8014f34:	e0ab      	b.n	801508e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	2b02      	cmp	r3, #2
 8014f40:	d002      	beq.n	8014f48 <USBD_StdEPReq+0x1dc>
 8014f42:	2b03      	cmp	r3, #3
 8014f44:	d032      	beq.n	8014fac <USBD_StdEPReq+0x240>
 8014f46:	e097      	b.n	8015078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014f48:	7bbb      	ldrb	r3, [r7, #14]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d007      	beq.n	8014f5e <USBD_StdEPReq+0x1f2>
 8014f4e:	7bbb      	ldrb	r3, [r7, #14]
 8014f50:	2b80      	cmp	r3, #128	; 0x80
 8014f52:	d004      	beq.n	8014f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014f54:	6839      	ldr	r1, [r7, #0]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f000 fc17 	bl	801578a <USBD_CtlError>
                break;
 8014f5c:	e091      	b.n	8015082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	da0b      	bge.n	8014f7e <USBD_StdEPReq+0x212>
 8014f66:	7bbb      	ldrb	r3, [r7, #14]
 8014f68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	4413      	add	r3, r2
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	3310      	adds	r3, #16
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	4413      	add	r3, r2
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	e00b      	b.n	8014f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014f7e:	7bbb      	ldrb	r3, [r7, #14]
 8014f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f84:	4613      	mov	r3, r2
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	4413      	add	r3, r2
 8014f94:	3304      	adds	r3, #4
 8014f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2202      	movs	r2, #2
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f000 fc6d 	bl	8015884 <USBD_CtlSendData>
              break;
 8014faa:	e06a      	b.n	8015082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	da11      	bge.n	8014fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014fb4:	7bbb      	ldrb	r3, [r7, #14]
 8014fb6:	f003 020f 	and.w	r2, r3, #15
 8014fba:	6879      	ldr	r1, [r7, #4]
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4413      	add	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	440b      	add	r3, r1
 8014fc6:	3324      	adds	r3, #36	; 0x24
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d117      	bne.n	8014ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014fce:	6839      	ldr	r1, [r7, #0]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f000 fbda 	bl	801578a <USBD_CtlError>
                  break;
 8014fd6:	e054      	b.n	8015082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014fd8:	7bbb      	ldrb	r3, [r7, #14]
 8014fda:	f003 020f 	and.w	r2, r3, #15
 8014fde:	6879      	ldr	r1, [r7, #4]
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	4413      	add	r3, r2
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	440b      	add	r3, r1
 8014fea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014fee:	881b      	ldrh	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d104      	bne.n	8014ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014ff4:	6839      	ldr	r1, [r7, #0]
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f000 fbc7 	bl	801578a <USBD_CtlError>
                  break;
 8014ffc:	e041      	b.n	8015082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015002:	2b00      	cmp	r3, #0
 8015004:	da0b      	bge.n	801501e <USBD_StdEPReq+0x2b2>
 8015006:	7bbb      	ldrb	r3, [r7, #14]
 8015008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801500c:	4613      	mov	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	4413      	add	r3, r2
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	3310      	adds	r3, #16
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	4413      	add	r3, r2
 801501a:	3304      	adds	r3, #4
 801501c:	e00b      	b.n	8015036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801501e:	7bbb      	ldrb	r3, [r7, #14]
 8015020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015024:	4613      	mov	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	4413      	add	r3, r2
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	4413      	add	r3, r2
 8015034:	3304      	adds	r3, #4
 8015036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015038:	7bbb      	ldrb	r3, [r7, #14]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d002      	beq.n	8015044 <USBD_StdEPReq+0x2d8>
 801503e:	7bbb      	ldrb	r3, [r7, #14]
 8015040:	2b80      	cmp	r3, #128	; 0x80
 8015042:	d103      	bne.n	801504c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2200      	movs	r2, #0
 8015048:	601a      	str	r2, [r3, #0]
 801504a:	e00e      	b.n	801506a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801504c:	7bbb      	ldrb	r3, [r7, #14]
 801504e:	4619      	mov	r1, r3
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f001 f8cb 	bl	80161ec <USBD_LL_IsStallEP>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d003      	beq.n	8015064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	2201      	movs	r2, #1
 8015060:	601a      	str	r2, [r3, #0]
 8015062:	e002      	b.n	801506a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	2200      	movs	r2, #0
 8015068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	2202      	movs	r2, #2
 801506e:	4619      	mov	r1, r3
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 fc07 	bl	8015884 <USBD_CtlSendData>
              break;
 8015076:	e004      	b.n	8015082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015078:	6839      	ldr	r1, [r7, #0]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 fb85 	bl	801578a <USBD_CtlError>
              break;
 8015080:	bf00      	nop
          }
          break;
 8015082:	e004      	b.n	801508e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 fb7f 	bl	801578a <USBD_CtlError>
          break;
 801508c:	bf00      	nop
      }
      break;
 801508e:	e005      	b.n	801509c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f000 fb79 	bl	801578a <USBD_CtlError>
      break;
 8015098:	e000      	b.n	801509c <USBD_StdEPReq+0x330>
      break;
 801509a:	bf00      	nop
  }

  return ret;
 801509c:	7bfb      	ldrb	r3, [r7, #15]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
	...

080150a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80150b2:	2300      	movs	r3, #0
 80150b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80150ba:	2300      	movs	r3, #0
 80150bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	885b      	ldrh	r3, [r3, #2]
 80150c2:	0a1b      	lsrs	r3, r3, #8
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	3b01      	subs	r3, #1
 80150c8:	2b0e      	cmp	r3, #14
 80150ca:	f200 8152 	bhi.w	8015372 <USBD_GetDescriptor+0x2ca>
 80150ce:	a201      	add	r2, pc, #4	; (adr r2, 80150d4 <USBD_GetDescriptor+0x2c>)
 80150d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d4:	08015145 	.word	0x08015145
 80150d8:	0801515d 	.word	0x0801515d
 80150dc:	0801519d 	.word	0x0801519d
 80150e0:	08015373 	.word	0x08015373
 80150e4:	08015373 	.word	0x08015373
 80150e8:	08015313 	.word	0x08015313
 80150ec:	0801533f 	.word	0x0801533f
 80150f0:	08015373 	.word	0x08015373
 80150f4:	08015373 	.word	0x08015373
 80150f8:	08015373 	.word	0x08015373
 80150fc:	08015373 	.word	0x08015373
 8015100:	08015373 	.word	0x08015373
 8015104:	08015373 	.word	0x08015373
 8015108:	08015373 	.word	0x08015373
 801510c:	08015111 	.word	0x08015111
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015116:	69db      	ldr	r3, [r3, #28]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00b      	beq.n	8015134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015122:	69db      	ldr	r3, [r3, #28]
 8015124:	687a      	ldr	r2, [r7, #4]
 8015126:	7c12      	ldrb	r2, [r2, #16]
 8015128:	f107 0108 	add.w	r1, r7, #8
 801512c:	4610      	mov	r0, r2
 801512e:	4798      	blx	r3
 8015130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015132:	e126      	b.n	8015382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 fb27 	bl	801578a <USBD_CtlError>
        err++;
 801513c:	7afb      	ldrb	r3, [r7, #11]
 801513e:	3301      	adds	r3, #1
 8015140:	72fb      	strb	r3, [r7, #11]
      break;
 8015142:	e11e      	b.n	8015382 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	687a      	ldr	r2, [r7, #4]
 801514e:	7c12      	ldrb	r2, [r2, #16]
 8015150:	f107 0108 	add.w	r1, r7, #8
 8015154:	4610      	mov	r0, r2
 8015156:	4798      	blx	r3
 8015158:	60f8      	str	r0, [r7, #12]
      break;
 801515a:	e112      	b.n	8015382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	7c1b      	ldrb	r3, [r3, #16]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d10d      	bne.n	8015180 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801516c:	f107 0208 	add.w	r2, r7, #8
 8015170:	4610      	mov	r0, r2
 8015172:	4798      	blx	r3
 8015174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	3301      	adds	r3, #1
 801517a:	2202      	movs	r2, #2
 801517c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801517e:	e100      	b.n	8015382 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015188:	f107 0208 	add.w	r2, r7, #8
 801518c:	4610      	mov	r0, r2
 801518e:	4798      	blx	r3
 8015190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	3301      	adds	r3, #1
 8015196:	2202      	movs	r2, #2
 8015198:	701a      	strb	r2, [r3, #0]
      break;
 801519a:	e0f2      	b.n	8015382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	885b      	ldrh	r3, [r3, #2]
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b05      	cmp	r3, #5
 80151a4:	f200 80ac 	bhi.w	8015300 <USBD_GetDescriptor+0x258>
 80151a8:	a201      	add	r2, pc, #4	; (adr r2, 80151b0 <USBD_GetDescriptor+0x108>)
 80151aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ae:	bf00      	nop
 80151b0:	080151c9 	.word	0x080151c9
 80151b4:	080151fd 	.word	0x080151fd
 80151b8:	08015231 	.word	0x08015231
 80151bc:	08015265 	.word	0x08015265
 80151c0:	08015299 	.word	0x08015299
 80151c4:	080152cd 	.word	0x080152cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00b      	beq.n	80151ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	687a      	ldr	r2, [r7, #4]
 80151de:	7c12      	ldrb	r2, [r2, #16]
 80151e0:	f107 0108 	add.w	r1, r7, #8
 80151e4:	4610      	mov	r0, r2
 80151e6:	4798      	blx	r3
 80151e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151ea:	e091      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80151ec:	6839      	ldr	r1, [r7, #0]
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f000 facb 	bl	801578a <USBD_CtlError>
            err++;
 80151f4:	7afb      	ldrb	r3, [r7, #11]
 80151f6:	3301      	adds	r3, #1
 80151f8:	72fb      	strb	r3, [r7, #11]
          break;
 80151fa:	e089      	b.n	8015310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015202:	689b      	ldr	r3, [r3, #8]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d00b      	beq.n	8015220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801520e:	689b      	ldr	r3, [r3, #8]
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	7c12      	ldrb	r2, [r2, #16]
 8015214:	f107 0108 	add.w	r1, r7, #8
 8015218:	4610      	mov	r0, r2
 801521a:	4798      	blx	r3
 801521c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801521e:	e077      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015220:	6839      	ldr	r1, [r7, #0]
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f000 fab1 	bl	801578a <USBD_CtlError>
            err++;
 8015228:	7afb      	ldrb	r3, [r7, #11]
 801522a:	3301      	adds	r3, #1
 801522c:	72fb      	strb	r3, [r7, #11]
          break;
 801522e:	e06f      	b.n	8015310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015236:	68db      	ldr	r3, [r3, #12]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00b      	beq.n	8015254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	7c12      	ldrb	r2, [r2, #16]
 8015248:	f107 0108 	add.w	r1, r7, #8
 801524c:	4610      	mov	r0, r2
 801524e:	4798      	blx	r3
 8015250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015252:	e05d      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015254:	6839      	ldr	r1, [r7, #0]
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	f000 fa97 	bl	801578a <USBD_CtlError>
            err++;
 801525c:	7afb      	ldrb	r3, [r7, #11]
 801525e:	3301      	adds	r3, #1
 8015260:	72fb      	strb	r3, [r7, #11]
          break;
 8015262:	e055      	b.n	8015310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801526a:	691b      	ldr	r3, [r3, #16]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d00b      	beq.n	8015288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015276:	691b      	ldr	r3, [r3, #16]
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	7c12      	ldrb	r2, [r2, #16]
 801527c:	f107 0108 	add.w	r1, r7, #8
 8015280:	4610      	mov	r0, r2
 8015282:	4798      	blx	r3
 8015284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015286:	e043      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015288:	6839      	ldr	r1, [r7, #0]
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f000 fa7d 	bl	801578a <USBD_CtlError>
            err++;
 8015290:	7afb      	ldrb	r3, [r7, #11]
 8015292:	3301      	adds	r3, #1
 8015294:	72fb      	strb	r3, [r7, #11]
          break;
 8015296:	e03b      	b.n	8015310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801529e:	695b      	ldr	r3, [r3, #20]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d00b      	beq.n	80152bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80152aa:	695b      	ldr	r3, [r3, #20]
 80152ac:	687a      	ldr	r2, [r7, #4]
 80152ae:	7c12      	ldrb	r2, [r2, #16]
 80152b0:	f107 0108 	add.w	r1, r7, #8
 80152b4:	4610      	mov	r0, r2
 80152b6:	4798      	blx	r3
 80152b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80152ba:	e029      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80152bc:	6839      	ldr	r1, [r7, #0]
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f000 fa63 	bl	801578a <USBD_CtlError>
            err++;
 80152c4:	7afb      	ldrb	r3, [r7, #11]
 80152c6:	3301      	adds	r3, #1
 80152c8:	72fb      	strb	r3, [r7, #11]
          break;
 80152ca:	e021      	b.n	8015310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80152d2:	699b      	ldr	r3, [r3, #24]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d00b      	beq.n	80152f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80152de:	699b      	ldr	r3, [r3, #24]
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	7c12      	ldrb	r2, [r2, #16]
 80152e4:	f107 0108 	add.w	r1, r7, #8
 80152e8:	4610      	mov	r0, r2
 80152ea:	4798      	blx	r3
 80152ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80152ee:	e00f      	b.n	8015310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80152f0:	6839      	ldr	r1, [r7, #0]
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f000 fa49 	bl	801578a <USBD_CtlError>
            err++;
 80152f8:	7afb      	ldrb	r3, [r7, #11]
 80152fa:	3301      	adds	r3, #1
 80152fc:	72fb      	strb	r3, [r7, #11]
          break;
 80152fe:	e007      	b.n	8015310 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015300:	6839      	ldr	r1, [r7, #0]
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 fa41 	bl	801578a <USBD_CtlError>
          err++;
 8015308:	7afb      	ldrb	r3, [r7, #11]
 801530a:	3301      	adds	r3, #1
 801530c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801530e:	bf00      	nop
      }
      break;
 8015310:	e037      	b.n	8015382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	7c1b      	ldrb	r3, [r3, #16]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d109      	bne.n	801532e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015322:	f107 0208 	add.w	r2, r7, #8
 8015326:	4610      	mov	r0, r2
 8015328:	4798      	blx	r3
 801532a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801532c:	e029      	b.n	8015382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801532e:	6839      	ldr	r1, [r7, #0]
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f000 fa2a 	bl	801578a <USBD_CtlError>
        err++;
 8015336:	7afb      	ldrb	r3, [r7, #11]
 8015338:	3301      	adds	r3, #1
 801533a:	72fb      	strb	r3, [r7, #11]
      break;
 801533c:	e021      	b.n	8015382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	7c1b      	ldrb	r3, [r3, #16]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d10d      	bne.n	8015362 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801534e:	f107 0208 	add.w	r2, r7, #8
 8015352:	4610      	mov	r0, r2
 8015354:	4798      	blx	r3
 8015356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	3301      	adds	r3, #1
 801535c:	2207      	movs	r2, #7
 801535e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015360:	e00f      	b.n	8015382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015362:	6839      	ldr	r1, [r7, #0]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 fa10 	bl	801578a <USBD_CtlError>
        err++;
 801536a:	7afb      	ldrb	r3, [r7, #11]
 801536c:	3301      	adds	r3, #1
 801536e:	72fb      	strb	r3, [r7, #11]
      break;
 8015370:	e007      	b.n	8015382 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015372:	6839      	ldr	r1, [r7, #0]
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f000 fa08 	bl	801578a <USBD_CtlError>
      err++;
 801537a:	7afb      	ldrb	r3, [r7, #11]
 801537c:	3301      	adds	r3, #1
 801537e:	72fb      	strb	r3, [r7, #11]
      break;
 8015380:	bf00      	nop
  }

  if (err != 0U)
 8015382:	7afb      	ldrb	r3, [r7, #11]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d11e      	bne.n	80153c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	88db      	ldrh	r3, [r3, #6]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d016      	beq.n	80153be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015390:	893b      	ldrh	r3, [r7, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d00e      	beq.n	80153b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	88da      	ldrh	r2, [r3, #6]
 801539a:	893b      	ldrh	r3, [r7, #8]
 801539c:	4293      	cmp	r3, r2
 801539e:	bf28      	it	cs
 80153a0:	4613      	movcs	r3, r2
 80153a2:	b29b      	uxth	r3, r3
 80153a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80153a6:	893b      	ldrh	r3, [r7, #8]
 80153a8:	461a      	mov	r2, r3
 80153aa:	68f9      	ldr	r1, [r7, #12]
 80153ac:	6878      	ldr	r0, [r7, #4]
 80153ae:	f000 fa69 	bl	8015884 <USBD_CtlSendData>
 80153b2:	e009      	b.n	80153c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80153b4:	6839      	ldr	r1, [r7, #0]
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	f000 f9e7 	bl	801578a <USBD_CtlError>
 80153bc:	e004      	b.n	80153c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 faba 	bl	8015938 <USBD_CtlSendStatus>
 80153c4:	e000      	b.n	80153c8 <USBD_GetDescriptor+0x320>
    return;
 80153c6:	bf00      	nop
  }
}
 80153c8:	3710      	adds	r7, #16
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop

080153d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	889b      	ldrh	r3, [r3, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d131      	bne.n	8015446 <USBD_SetAddress+0x76>
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	88db      	ldrh	r3, [r3, #6]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d12d      	bne.n	8015446 <USBD_SetAddress+0x76>
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	885b      	ldrh	r3, [r3, #2]
 80153ee:	2b7f      	cmp	r3, #127	; 0x7f
 80153f0:	d829      	bhi.n	8015446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	885b      	ldrh	r3, [r3, #2]
 80153f6:	b2db      	uxtb	r3, r3
 80153f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b03      	cmp	r3, #3
 8015408:	d104      	bne.n	8015414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801540a:	6839      	ldr	r1, [r7, #0]
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f000 f9bc 	bl	801578a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015412:	e01d      	b.n	8015450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	7bfa      	ldrb	r2, [r7, #15]
 8015418:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801541c:	7bfb      	ldrb	r3, [r7, #15]
 801541e:	4619      	mov	r1, r3
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 ff0f 	bl	8016244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 fa86 	bl	8015938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801542c:	7bfb      	ldrb	r3, [r7, #15]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d004      	beq.n	801543c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2202      	movs	r2, #2
 8015436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801543a:	e009      	b.n	8015450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015444:	e004      	b.n	8015450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015446:	6839      	ldr	r1, [r7, #0]
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 f99e 	bl	801578a <USBD_CtlError>
  }
}
 801544e:	bf00      	nop
 8015450:	bf00      	nop
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015462:	2300      	movs	r3, #0
 8015464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	885b      	ldrh	r3, [r3, #2]
 801546a:	b2da      	uxtb	r2, r3
 801546c:	4b4e      	ldr	r3, [pc, #312]	; (80155a8 <USBD_SetConfig+0x150>)
 801546e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015470:	4b4d      	ldr	r3, [pc, #308]	; (80155a8 <USBD_SetConfig+0x150>)
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	2b01      	cmp	r3, #1
 8015476:	d905      	bls.n	8015484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015478:	6839      	ldr	r1, [r7, #0]
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f000 f985 	bl	801578a <USBD_CtlError>
    return USBD_FAIL;
 8015480:	2303      	movs	r3, #3
 8015482:	e08c      	b.n	801559e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b02      	cmp	r3, #2
 801548e:	d002      	beq.n	8015496 <USBD_SetConfig+0x3e>
 8015490:	2b03      	cmp	r3, #3
 8015492:	d029      	beq.n	80154e8 <USBD_SetConfig+0x90>
 8015494:	e075      	b.n	8015582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015496:	4b44      	ldr	r3, [pc, #272]	; (80155a8 <USBD_SetConfig+0x150>)
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d020      	beq.n	80154e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801549e:	4b42      	ldr	r3, [pc, #264]	; (80155a8 <USBD_SetConfig+0x150>)
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	461a      	mov	r2, r3
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80154a8:	4b3f      	ldr	r3, [pc, #252]	; (80155a8 <USBD_SetConfig+0x150>)
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	4619      	mov	r1, r3
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f7fe fff1 	bl	8014496 <USBD_SetClassConfig>
 80154b4:	4603      	mov	r3, r0
 80154b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80154b8:	7bfb      	ldrb	r3, [r7, #15]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d008      	beq.n	80154d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80154be:	6839      	ldr	r1, [r7, #0]
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f000 f962 	bl	801578a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2202      	movs	r2, #2
 80154ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80154ce:	e065      	b.n	801559c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f000 fa31 	bl	8015938 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2203      	movs	r2, #3
 80154da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80154de:	e05d      	b.n	801559c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f000 fa29 	bl	8015938 <USBD_CtlSendStatus>
      break;
 80154e6:	e059      	b.n	801559c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80154e8:	4b2f      	ldr	r3, [pc, #188]	; (80155a8 <USBD_SetConfig+0x150>)
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d112      	bne.n	8015516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2202      	movs	r2, #2
 80154f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80154f8:	4b2b      	ldr	r3, [pc, #172]	; (80155a8 <USBD_SetConfig+0x150>)
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	461a      	mov	r2, r3
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015502:	4b29      	ldr	r3, [pc, #164]	; (80155a8 <USBD_SetConfig+0x150>)
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f7fe ffe0 	bl	80144ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f000 fa12 	bl	8015938 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015514:	e042      	b.n	801559c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015516:	4b24      	ldr	r3, [pc, #144]	; (80155a8 <USBD_SetConfig+0x150>)
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	461a      	mov	r2, r3
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	429a      	cmp	r2, r3
 8015522:	d02a      	beq.n	801557a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	b2db      	uxtb	r3, r3
 801552a:	4619      	mov	r1, r3
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7fe ffce 	bl	80144ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015532:	4b1d      	ldr	r3, [pc, #116]	; (80155a8 <USBD_SetConfig+0x150>)
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	461a      	mov	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801553c:	4b1a      	ldr	r3, [pc, #104]	; (80155a8 <USBD_SetConfig+0x150>)
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	4619      	mov	r1, r3
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7fe ffa7 	bl	8014496 <USBD_SetClassConfig>
 8015548:	4603      	mov	r3, r0
 801554a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801554c:	7bfb      	ldrb	r3, [r7, #15]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00f      	beq.n	8015572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015552:	6839      	ldr	r1, [r7, #0]
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 f918 	bl	801578a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	b2db      	uxtb	r3, r3
 8015560:	4619      	mov	r1, r3
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f7fe ffb3 	bl	80144ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2202      	movs	r2, #2
 801556c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015570:	e014      	b.n	801559c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f000 f9e0 	bl	8015938 <USBD_CtlSendStatus>
      break;
 8015578:	e010      	b.n	801559c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f000 f9dc 	bl	8015938 <USBD_CtlSendStatus>
      break;
 8015580:	e00c      	b.n	801559c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015582:	6839      	ldr	r1, [r7, #0]
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f000 f900 	bl	801578a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801558a:	4b07      	ldr	r3, [pc, #28]	; (80155a8 <USBD_SetConfig+0x150>)
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	4619      	mov	r1, r3
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7fe ff9c 	bl	80144ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015596:	2303      	movs	r3, #3
 8015598:	73fb      	strb	r3, [r7, #15]
      break;
 801559a:	bf00      	nop
  }

  return ret;
 801559c:	7bfb      	ldrb	r3, [r7, #15]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3710      	adds	r7, #16
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	24006e04 	.word	0x24006e04

080155ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	88db      	ldrh	r3, [r3, #6]
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d004      	beq.n	80155c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80155be:	6839      	ldr	r1, [r7, #0]
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f000 f8e2 	bl	801578a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80155c6:	e023      	b.n	8015610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	2b02      	cmp	r3, #2
 80155d2:	dc02      	bgt.n	80155da <USBD_GetConfig+0x2e>
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	dc03      	bgt.n	80155e0 <USBD_GetConfig+0x34>
 80155d8:	e015      	b.n	8015606 <USBD_GetConfig+0x5a>
 80155da:	2b03      	cmp	r3, #3
 80155dc:	d00b      	beq.n	80155f6 <USBD_GetConfig+0x4a>
 80155de:	e012      	b.n	8015606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2200      	movs	r2, #0
 80155e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	3308      	adds	r3, #8
 80155ea:	2201      	movs	r2, #1
 80155ec:	4619      	mov	r1, r3
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f948 	bl	8015884 <USBD_CtlSendData>
        break;
 80155f4:	e00c      	b.n	8015610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	3304      	adds	r3, #4
 80155fa:	2201      	movs	r2, #1
 80155fc:	4619      	mov	r1, r3
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f000 f940 	bl	8015884 <USBD_CtlSendData>
        break;
 8015604:	e004      	b.n	8015610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015606:	6839      	ldr	r1, [r7, #0]
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f000 f8be 	bl	801578a <USBD_CtlError>
        break;
 801560e:	bf00      	nop
}
 8015610:	bf00      	nop
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}

08015618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015628:	b2db      	uxtb	r3, r3
 801562a:	3b01      	subs	r3, #1
 801562c:	2b02      	cmp	r3, #2
 801562e:	d81e      	bhi.n	801566e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	88db      	ldrh	r3, [r3, #6]
 8015634:	2b02      	cmp	r3, #2
 8015636:	d004      	beq.n	8015642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015638:	6839      	ldr	r1, [r7, #0]
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f000 f8a5 	bl	801578a <USBD_CtlError>
        break;
 8015640:	e01a      	b.n	8015678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2201      	movs	r2, #1
 8015646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801564e:	2b00      	cmp	r3, #0
 8015650:	d005      	beq.n	801565e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	f043 0202 	orr.w	r2, r3, #2
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	330c      	adds	r3, #12
 8015662:	2202      	movs	r2, #2
 8015664:	4619      	mov	r1, r3
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 f90c 	bl	8015884 <USBD_CtlSendData>
      break;
 801566c:	e004      	b.n	8015678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801566e:	6839      	ldr	r1, [r7, #0]
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f000 f88a 	bl	801578a <USBD_CtlError>
      break;
 8015676:	bf00      	nop
  }
}
 8015678:	bf00      	nop
 801567a:	3708      	adds	r7, #8
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	885b      	ldrh	r3, [r3, #2]
 801568e:	2b01      	cmp	r3, #1
 8015690:	d107      	bne.n	80156a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2201      	movs	r2, #1
 8015696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f94c 	bl	8015938 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80156a0:	e013      	b.n	80156ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	885b      	ldrh	r3, [r3, #2]
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	d10b      	bne.n	80156c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	889b      	ldrh	r3, [r3, #4]
 80156ae:	0a1b      	lsrs	r3, r3, #8
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f000 f93c 	bl	8015938 <USBD_CtlSendStatus>
}
 80156c0:	e003      	b.n	80156ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80156c2:	6839      	ldr	r1, [r7, #0]
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 f860 	bl	801578a <USBD_CtlError>
}
 80156ca:	bf00      	nop
 80156cc:	3708      	adds	r7, #8
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}

080156d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b082      	sub	sp, #8
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	6078      	str	r0, [r7, #4]
 80156da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	3b01      	subs	r3, #1
 80156e6:	2b02      	cmp	r3, #2
 80156e8:	d80b      	bhi.n	8015702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	885b      	ldrh	r3, [r3, #2]
 80156ee:	2b01      	cmp	r3, #1
 80156f0:	d10c      	bne.n	801570c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2200      	movs	r2, #0
 80156f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f000 f91c 	bl	8015938 <USBD_CtlSendStatus>
      }
      break;
 8015700:	e004      	b.n	801570c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 f840 	bl	801578a <USBD_CtlError>
      break;
 801570a:	e000      	b.n	801570e <USBD_ClrFeature+0x3c>
      break;
 801570c:	bf00      	nop
  }
}
 801570e:	bf00      	nop
 8015710:	3708      	adds	r7, #8
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b084      	sub	sp, #16
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	781a      	ldrb	r2, [r3, #0]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	3301      	adds	r3, #1
 8015730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	781a      	ldrb	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	3301      	adds	r3, #1
 801573e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015740:	68f8      	ldr	r0, [r7, #12]
 8015742:	f7ff fa17 	bl	8014b74 <SWAPBYTE>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	3301      	adds	r3, #1
 8015752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	3301      	adds	r3, #1
 8015758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f7ff fa0a 	bl	8014b74 <SWAPBYTE>
 8015760:	4603      	mov	r3, r0
 8015762:	461a      	mov	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	3301      	adds	r3, #1
 801576c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	3301      	adds	r3, #1
 8015772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f7ff f9fd 	bl	8014b74 <SWAPBYTE>
 801577a:	4603      	mov	r3, r0
 801577c:	461a      	mov	r2, r3
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	80da      	strh	r2, [r3, #6]
}
 8015782:	bf00      	nop
 8015784:	3710      	adds	r7, #16
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}

0801578a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801578a:	b580      	push	{r7, lr}
 801578c:	b082      	sub	sp, #8
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
 8015792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015794:	2180      	movs	r1, #128	; 0x80
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	f000 fcea 	bl	8016170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801579c:	2100      	movs	r1, #0
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f000 fce6 	bl	8016170 <USBD_LL_StallEP>
}
 80157a4:	bf00      	nop
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}

080157ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80157b8:	2300      	movs	r3, #0
 80157ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d042      	beq.n	8015848 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80157c6:	6938      	ldr	r0, [r7, #16]
 80157c8:	f000 f842 	bl	8015850 <USBD_GetLen>
 80157cc:	4603      	mov	r3, r0
 80157ce:	3301      	adds	r3, #1
 80157d0:	005b      	lsls	r3, r3, #1
 80157d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157d6:	d808      	bhi.n	80157ea <USBD_GetString+0x3e>
 80157d8:	6938      	ldr	r0, [r7, #16]
 80157da:	f000 f839 	bl	8015850 <USBD_GetLen>
 80157de:	4603      	mov	r3, r0
 80157e0:	3301      	adds	r3, #1
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	b29a      	uxth	r2, r3
 80157e8:	e001      	b.n	80157ee <USBD_GetString+0x42>
 80157ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80157f2:	7dfb      	ldrb	r3, [r7, #23]
 80157f4:	68ba      	ldr	r2, [r7, #8]
 80157f6:	4413      	add	r3, r2
 80157f8:	687a      	ldr	r2, [r7, #4]
 80157fa:	7812      	ldrb	r2, [r2, #0]
 80157fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80157fe:	7dfb      	ldrb	r3, [r7, #23]
 8015800:	3301      	adds	r3, #1
 8015802:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015804:	7dfb      	ldrb	r3, [r7, #23]
 8015806:	68ba      	ldr	r2, [r7, #8]
 8015808:	4413      	add	r3, r2
 801580a:	2203      	movs	r2, #3
 801580c:	701a      	strb	r2, [r3, #0]
  idx++;
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	3301      	adds	r3, #1
 8015812:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015814:	e013      	b.n	801583e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8015816:	7dfb      	ldrb	r3, [r7, #23]
 8015818:	68ba      	ldr	r2, [r7, #8]
 801581a:	4413      	add	r3, r2
 801581c:	693a      	ldr	r2, [r7, #16]
 801581e:	7812      	ldrb	r2, [r2, #0]
 8015820:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	3301      	adds	r3, #1
 8015826:	613b      	str	r3, [r7, #16]
    idx++;
 8015828:	7dfb      	ldrb	r3, [r7, #23]
 801582a:	3301      	adds	r3, #1
 801582c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801582e:	7dfb      	ldrb	r3, [r7, #23]
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	4413      	add	r3, r2
 8015834:	2200      	movs	r2, #0
 8015836:	701a      	strb	r2, [r3, #0]
    idx++;
 8015838:	7dfb      	ldrb	r3, [r7, #23]
 801583a:	3301      	adds	r3, #1
 801583c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d1e7      	bne.n	8015816 <USBD_GetString+0x6a>
 8015846:	e000      	b.n	801584a <USBD_GetString+0x9e>
    return;
 8015848:	bf00      	nop
  }
}
 801584a:	3718      	adds	r7, #24
 801584c:	46bd      	mov	sp, r7
 801584e:	bd80      	pop	{r7, pc}

08015850 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015850:	b480      	push	{r7}
 8015852:	b085      	sub	sp, #20
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015858:	2300      	movs	r3, #0
 801585a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015860:	e005      	b.n	801586e <USBD_GetLen+0x1e>
  {
    len++;
 8015862:	7bfb      	ldrb	r3, [r7, #15]
 8015864:	3301      	adds	r3, #1
 8015866:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	3301      	adds	r3, #1
 801586c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1f5      	bne.n	8015862 <USBD_GetLen+0x12>
  }

  return len;
 8015876:	7bfb      	ldrb	r3, [r7, #15]
}
 8015878:	4618      	mov	r0, r3
 801587a:	3714      	adds	r7, #20
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	60f8      	str	r0, [r7, #12]
 801588c:	60b9      	str	r1, [r7, #8]
 801588e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	2202      	movs	r2, #2
 8015894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	68ba      	ldr	r2, [r7, #8]
 80158a8:	2100      	movs	r1, #0
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f000 fce9 	bl	8016282 <USBD_LL_Transmit>

  return USBD_OK;
 80158b0:	2300      	movs	r3, #0
}
 80158b2:	4618      	mov	r0, r3
 80158b4:	3710      	adds	r7, #16
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}

080158ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80158ba:	b580      	push	{r7, lr}
 80158bc:	b084      	sub	sp, #16
 80158be:	af00      	add	r7, sp, #0
 80158c0:	60f8      	str	r0, [r7, #12]
 80158c2:	60b9      	str	r1, [r7, #8]
 80158c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	68ba      	ldr	r2, [r7, #8]
 80158ca:	2100      	movs	r1, #0
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f000 fcd8 	bl	8016282 <USBD_LL_Transmit>

  return USBD_OK;
 80158d2:	2300      	movs	r3, #0
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3710      	adds	r7, #16
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	60f8      	str	r0, [r7, #12]
 80158e4:	60b9      	str	r1, [r7, #8]
 80158e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2203      	movs	r2, #3
 80158ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	687a      	ldr	r2, [r7, #4]
 80158fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	68ba      	ldr	r2, [r7, #8]
 8015904:	2100      	movs	r1, #0
 8015906:	68f8      	ldr	r0, [r7, #12]
 8015908:	f000 fcdc 	bl	80162c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801590c:	2300      	movs	r3, #0
}
 801590e:	4618      	mov	r0, r3
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}

08015916 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015916:	b580      	push	{r7, lr}
 8015918:	b084      	sub	sp, #16
 801591a:	af00      	add	r7, sp, #0
 801591c:	60f8      	str	r0, [r7, #12]
 801591e:	60b9      	str	r1, [r7, #8]
 8015920:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	2100      	movs	r1, #0
 8015928:	68f8      	ldr	r0, [r7, #12]
 801592a:	f000 fccb 	bl	80162c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801592e:	2300      	movs	r3, #0
}
 8015930:	4618      	mov	r0, r3
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2204      	movs	r2, #4
 8015944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015948:	2300      	movs	r3, #0
 801594a:	2200      	movs	r2, #0
 801594c:	2100      	movs	r1, #0
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f000 fc97 	bl	8016282 <USBD_LL_Transmit>

  return USBD_OK;
 8015954:	2300      	movs	r3, #0
}
 8015956:	4618      	mov	r0, r3
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}

0801595e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801595e:	b580      	push	{r7, lr}
 8015960:	b082      	sub	sp, #8
 8015962:	af00      	add	r7, sp, #0
 8015964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2205      	movs	r2, #5
 801596a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801596e:	2300      	movs	r3, #0
 8015970:	2200      	movs	r2, #0
 8015972:	2100      	movs	r1, #0
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f000 fca5 	bl	80162c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801597a:	2300      	movs	r3, #0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015988:	2200      	movs	r2, #0
 801598a:	4913      	ldr	r1, [pc, #76]	; (80159d8 <MX_USB_DEVICE_Init+0x54>)
 801598c:	4813      	ldr	r0, [pc, #76]	; (80159dc <MX_USB_DEVICE_Init+0x58>)
 801598e:	f7fe fd05 	bl	801439c <USBD_Init>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d001      	beq.n	801599c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015998:	f7eb fd2a 	bl	80013f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 801599c:	4910      	ldr	r1, [pc, #64]	; (80159e0 <MX_USB_DEVICE_Init+0x5c>)
 801599e:	480f      	ldr	r0, [pc, #60]	; (80159dc <MX_USB_DEVICE_Init+0x58>)
 80159a0:	f7fe fd2c 	bl	80143fc <USBD_RegisterClass>
 80159a4:	4603      	mov	r3, r0
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d001      	beq.n	80159ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80159aa:	f7eb fd21 	bl	80013f0 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80159ae:	490d      	ldr	r1, [pc, #52]	; (80159e4 <MX_USB_DEVICE_Init+0x60>)
 80159b0:	480a      	ldr	r0, [pc, #40]	; (80159dc <MX_USB_DEVICE_Init+0x58>)
 80159b2:	f7fe fca5 	bl	8014300 <USBD_AUDIO_RegisterInterface>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d001      	beq.n	80159c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80159bc:	f7eb fd18 	bl	80013f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80159c0:	4806      	ldr	r0, [pc, #24]	; (80159dc <MX_USB_DEVICE_Init+0x58>)
 80159c2:	f7fe fd51 	bl	8014468 <USBD_Start>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d001      	beq.n	80159d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80159cc:	f7eb fd10 	bl	80013f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80159d0:	f7f5 ff76 	bl	800b8c0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80159d4:	bf00      	nop
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	240001ac 	.word	0x240001ac
 80159dc:	24006e08 	.word	0x24006e08
 80159e0:	240000d4 	.word	0x240000d4
 80159e4:	24000190 	.word	0x24000190

080159e8 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b085      	sub	sp, #20
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
	UNUSED(AudioFreq);
	UNUSED(Volume);
	UNUSED(options);
	return (USBD_OK);
 80159f4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3714      	adds	r7, #20
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr

08015a02 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8015a02:	b480      	push	{r7}
 8015a04:	b083      	sub	sp, #12
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	UNUSED(options);
	return (USBD_OK);
 8015a0a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	370c      	adds	r7, #12
 8015a10:	46bd      	mov	sp, r7
 8015a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a16:	4770      	bx	lr

08015a18 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	4613      	mov	r3, r2
 8015a24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	switch(cmd)
 8015a26:	79fb      	ldrb	r3, [r7, #7]
 8015a28:	2b01      	cmp	r3, #1
 8015a2a:	d001      	beq.n	8015a30 <AUDIO_AudioCmd_FS+0x18>
 8015a2c:	2b02      	cmp	r3, #2
	{
	case AUDIO_CMD_START:
		break;

	case AUDIO_CMD_PLAY:
		break;
 8015a2e:	e000      	b.n	8015a32 <AUDIO_AudioCmd_FS+0x1a>
		break;
 8015a30:	bf00      	nop
	}
	UNUSED(pbuf);
	UNUSED(size);
	UNUSED(cmd);
	return (USBD_OK);
 8015a32:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3e:	4770      	bx	lr

08015a40 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
	UNUSED(vol);
	return (USBD_OK);
 8015a4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	370c      	adds	r7, #12
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr

08015a58 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	4603      	mov	r3, r0
 8015a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	UNUSED(cmd);
	return (USBD_OK);
 8015a62:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	//UNUSED(pbuf);
	//UNUSED(size);
	//UNUSED(cmd);
	LOG_TIME_START(LOG_TIME_USB_WR);
 8015a7e:	2002      	movs	r0, #2
 8015a80:	f7ee ff44 	bl	800490c <logger_log_timer_start>
	if (usb_device)
 8015a84:	4b0a      	ldr	r3, [pc, #40]	; (8015ab0 <AUDIO_PeriodicTC_FS+0x40>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d008      	beq.n	8015a9e <AUDIO_PeriodicTC_FS+0x2e>
		usb_device->io_ops->write(usb_device, pbuf, size);
 8015a8c:	4b08      	ldr	r3, [pc, #32]	; (8015ab0 <AUDIO_PeriodicTC_FS+0x40>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	4a06      	ldr	r2, [pc, #24]	; (8015ab0 <AUDIO_PeriodicTC_FS+0x40>)
 8015a96:	6810      	ldr	r0, [r2, #0]
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	68f9      	ldr	r1, [r7, #12]
 8015a9c:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_USB_WR);
 8015a9e:	2002      	movs	r0, #2
 8015aa0:	f7ee ff60 	bl	8004964 <logger_log_timer_stop>
	return (USBD_OK);
 8015aa4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3710      	adds	r7, #16
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	24006498 	.word	0x24006498

08015ab4 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
	return (USBD_OK);
 8015ab8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr

08015ac4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ac4:	b480      	push	{r7}
 8015ac6:	b083      	sub	sp, #12
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	4603      	mov	r3, r0
 8015acc:	6039      	str	r1, [r7, #0]
 8015ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	2212      	movs	r2, #18
 8015ad4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015ad6:	4b03      	ldr	r3, [pc, #12]	; (8015ae4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	370c      	adds	r7, #12
 8015adc:	46bd      	mov	sp, r7
 8015ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae2:	4770      	bx	lr
 8015ae4:	240001cc 	.word	0x240001cc

08015ae8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b083      	sub	sp, #12
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	4603      	mov	r3, r0
 8015af0:	6039      	str	r1, [r7, #0]
 8015af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2204      	movs	r2, #4
 8015af8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015afa:	4b03      	ldr	r3, [pc, #12]	; (8015b08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	370c      	adds	r7, #12
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr
 8015b08:	240001e0 	.word	0x240001e0

08015b0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	4603      	mov	r3, r0
 8015b14:	6039      	str	r1, [r7, #0]
 8015b16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015b18:	79fb      	ldrb	r3, [r7, #7]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d105      	bne.n	8015b2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b1e:	683a      	ldr	r2, [r7, #0]
 8015b20:	4907      	ldr	r1, [pc, #28]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b22:	4808      	ldr	r0, [pc, #32]	; (8015b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015b24:	f7ff fe42 	bl	80157ac <USBD_GetString>
 8015b28:	e004      	b.n	8015b34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015b2a:	683a      	ldr	r2, [r7, #0]
 8015b2c:	4904      	ldr	r1, [pc, #16]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
 8015b2e:	4805      	ldr	r0, [pc, #20]	; (8015b44 <USBD_FS_ProductStrDescriptor+0x38>)
 8015b30:	f7ff fe3c 	bl	80157ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8015b34:	4b02      	ldr	r3, [pc, #8]	; (8015b40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3708      	adds	r7, #8
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	240070e4 	.word	0x240070e4
 8015b44:	0801c660 	.word	0x0801c660

08015b48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	4603      	mov	r3, r0
 8015b50:	6039      	str	r1, [r7, #0]
 8015b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015b54:	683a      	ldr	r2, [r7, #0]
 8015b56:	4904      	ldr	r1, [pc, #16]	; (8015b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015b58:	4804      	ldr	r0, [pc, #16]	; (8015b6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015b5a:	f7ff fe27 	bl	80157ac <USBD_GetString>
  return USBD_StrDesc;
 8015b5e:	4b02      	ldr	r3, [pc, #8]	; (8015b68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3708      	adds	r7, #8
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	240070e4 	.word	0x240070e4
 8015b6c:	0801c674 	.word	0x0801c674

08015b70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	6039      	str	r1, [r7, #0]
 8015b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	221a      	movs	r2, #26
 8015b80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015b82:	f000 f843 	bl	8015c0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015b86:	4b02      	ldr	r3, [pc, #8]	; (8015b90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	240001e4 	.word	0x240001e4

08015b94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	6039      	str	r1, [r7, #0]
 8015b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ba0:	79fb      	ldrb	r3, [r7, #7]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d105      	bne.n	8015bb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015ba6:	683a      	ldr	r2, [r7, #0]
 8015ba8:	4907      	ldr	r1, [pc, #28]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015baa:	4808      	ldr	r0, [pc, #32]	; (8015bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015bac:	f7ff fdfe 	bl	80157ac <USBD_GetString>
 8015bb0:	e004      	b.n	8015bbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015bb2:	683a      	ldr	r2, [r7, #0]
 8015bb4:	4904      	ldr	r1, [pc, #16]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015bb6:	4805      	ldr	r0, [pc, #20]	; (8015bcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8015bb8:	f7ff fdf8 	bl	80157ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8015bbc:	4b02      	ldr	r3, [pc, #8]	; (8015bc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	240070e4 	.word	0x240070e4
 8015bcc:	0801c688 	.word	0x0801c688

08015bd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	6039      	str	r1, [r7, #0]
 8015bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015bdc:	79fb      	ldrb	r3, [r7, #7]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d105      	bne.n	8015bee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015be2:	683a      	ldr	r2, [r7, #0]
 8015be4:	4907      	ldr	r1, [pc, #28]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015be6:	4808      	ldr	r0, [pc, #32]	; (8015c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015be8:	f7ff fde0 	bl	80157ac <USBD_GetString>
 8015bec:	e004      	b.n	8015bf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015bee:	683a      	ldr	r2, [r7, #0]
 8015bf0:	4904      	ldr	r1, [pc, #16]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015bf2:	4805      	ldr	r0, [pc, #20]	; (8015c08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015bf4:	f7ff fdda 	bl	80157ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8015bf8:	4b02      	ldr	r3, [pc, #8]	; (8015c04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3708      	adds	r7, #8
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	240070e4 	.word	0x240070e4
 8015c08:	0801c698 	.word	0x0801c698

08015c0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b084      	sub	sp, #16
 8015c10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015c12:	4b0f      	ldr	r3, [pc, #60]	; (8015c50 <Get_SerialNum+0x44>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015c18:	4b0e      	ldr	r3, [pc, #56]	; (8015c54 <Get_SerialNum+0x48>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015c1e:	4b0e      	ldr	r3, [pc, #56]	; (8015c58 <Get_SerialNum+0x4c>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015c24:	68fa      	ldr	r2, [r7, #12]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4413      	add	r3, r2
 8015c2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d009      	beq.n	8015c46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015c32:	2208      	movs	r2, #8
 8015c34:	4909      	ldr	r1, [pc, #36]	; (8015c5c <Get_SerialNum+0x50>)
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	f000 f814 	bl	8015c64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015c3c:	2204      	movs	r2, #4
 8015c3e:	4908      	ldr	r1, [pc, #32]	; (8015c60 <Get_SerialNum+0x54>)
 8015c40:	68b8      	ldr	r0, [r7, #8]
 8015c42:	f000 f80f 	bl	8015c64 <IntToUnicode>
  }
}
 8015c46:	bf00      	nop
 8015c48:	3710      	adds	r7, #16
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	1ff1e800 	.word	0x1ff1e800
 8015c54:	1ff1e804 	.word	0x1ff1e804
 8015c58:	1ff1e808 	.word	0x1ff1e808
 8015c5c:	240001e6 	.word	0x240001e6
 8015c60:	240001f6 	.word	0x240001f6

08015c64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015c64:	b480      	push	{r7}
 8015c66:	b087      	sub	sp, #28
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	4613      	mov	r3, r2
 8015c70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015c72:	2300      	movs	r3, #0
 8015c74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015c76:	2300      	movs	r3, #0
 8015c78:	75fb      	strb	r3, [r7, #23]
 8015c7a:	e027      	b.n	8015ccc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	0f1b      	lsrs	r3, r3, #28
 8015c80:	2b09      	cmp	r3, #9
 8015c82:	d80b      	bhi.n	8015c9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	0f1b      	lsrs	r3, r3, #28
 8015c88:	b2da      	uxtb	r2, r3
 8015c8a:	7dfb      	ldrb	r3, [r7, #23]
 8015c8c:	005b      	lsls	r3, r3, #1
 8015c8e:	4619      	mov	r1, r3
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	440b      	add	r3, r1
 8015c94:	3230      	adds	r2, #48	; 0x30
 8015c96:	b2d2      	uxtb	r2, r2
 8015c98:	701a      	strb	r2, [r3, #0]
 8015c9a:	e00a      	b.n	8015cb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	0f1b      	lsrs	r3, r3, #28
 8015ca0:	b2da      	uxtb	r2, r3
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	440b      	add	r3, r1
 8015cac:	3237      	adds	r2, #55	; 0x37
 8015cae:	b2d2      	uxtb	r2, r2
 8015cb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	011b      	lsls	r3, r3, #4
 8015cb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015cb8:	7dfb      	ldrb	r3, [r7, #23]
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015cc6:	7dfb      	ldrb	r3, [r7, #23]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	75fb      	strb	r3, [r7, #23]
 8015ccc:	7dfa      	ldrb	r2, [r7, #23]
 8015cce:	79fb      	ldrb	r3, [r7, #7]
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d3d3      	bcc.n	8015c7c <IntToUnicode+0x18>
  }
}
 8015cd4:	bf00      	nop
 8015cd6:	bf00      	nop
 8015cd8:	371c      	adds	r7, #28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr
	...

08015ce4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b0ba      	sub	sp, #232	; 0xe8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015cec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	601a      	str	r2, [r3, #0]
 8015cf4:	605a      	str	r2, [r3, #4]
 8015cf6:	609a      	str	r2, [r3, #8]
 8015cf8:	60da      	str	r2, [r3, #12]
 8015cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015cfc:	f107 0310 	add.w	r3, r7, #16
 8015d00:	22c0      	movs	r2, #192	; 0xc0
 8015d02:	2100      	movs	r1, #0
 8015d04:	4618      	mov	r0, r3
 8015d06:	f002 f85a 	bl	8017dbe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	4a44      	ldr	r2, [pc, #272]	; (8015e20 <HAL_PCD_MspInit+0x13c>)
 8015d10:	4293      	cmp	r3, r2
 8015d12:	f040 8081 	bne.w	8015e18 <HAL_PCD_MspInit+0x134>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015d16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015d1a:	f04f 0300 	mov.w	r3, #0
 8015d1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8015d22:	2301      	movs	r3, #1
 8015d24:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8015d26:	2318      	movs	r3, #24
 8015d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8015d2a:	2302      	movs	r3, #2
 8015d2c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8015d2e:	2304      	movs	r3, #4
 8015d30:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8015d32:	2302      	movs	r3, #2
 8015d34:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8015d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8015d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015d48:	f107 0310 	add.w	r3, r7, #16
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7f6 fdad 	bl	800c8ac <HAL_RCCEx_PeriphCLKConfig>
 8015d52:	4603      	mov	r3, r0
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d001      	beq.n	8015d5c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8015d58:	f7eb fb4a 	bl	80013f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015d5c:	f7f5 fdb0 	bl	800b8c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015d60:	4b30      	ldr	r3, [pc, #192]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d66:	4a2f      	ldr	r2, [pc, #188]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015d68:	f043 0301 	orr.w	r3, r3, #1
 8015d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015d70:	4b2c      	ldr	r3, [pc, #176]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015d76:	f003 0301 	and.w	r3, r3, #1
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8015d7e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8015d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d86:	2302      	movs	r3, #2
 8015d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d92:	2300      	movs	r3, #0
 8015d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015d98:	230a      	movs	r3, #10
 8015d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015d9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015da2:	4619      	mov	r1, r3
 8015da4:	4820      	ldr	r0, [pc, #128]	; (8015e28 <HAL_PCD_MspInit+0x144>)
 8015da6:	f7f2 fde9 	bl	800897c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8015daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015db2:	2300      	movs	r3, #0
 8015db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015db8:	2300      	movs	r3, #0
 8015dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015dbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	4818      	ldr	r0, [pc, #96]	; (8015e28 <HAL_PCD_MspInit+0x144>)
 8015dc6:	f7f2 fdd9 	bl	800897c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015dca:	4b16      	ldr	r3, [pc, #88]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015dd0:	4a14      	ldr	r2, [pc, #80]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015dda:	4b12      	ldr	r3, [pc, #72]	; (8015e24 <HAL_PCD_MspInit+0x140>)
 8015ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015de4:	60bb      	str	r3, [r7, #8]
 8015de6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8015de8:	2200      	movs	r2, #0
 8015dea:	2100      	movs	r1, #0
 8015dec:	2062      	movs	r0, #98	; 0x62
 8015dee:	f7ef f93e 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8015df2:	2062      	movs	r0, #98	; 0x62
 8015df4:	f7ef f955 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8015df8:	2200      	movs	r2, #0
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	2063      	movs	r0, #99	; 0x63
 8015dfe:	f7ef f936 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8015e02:	2063      	movs	r0, #99	; 0x63
 8015e04:	f7ef f94d 	bl	80050a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8015e08:	2200      	movs	r2, #0
 8015e0a:	2101      	movs	r1, #1
 8015e0c:	2065      	movs	r0, #101	; 0x65
 8015e0e:	f7ef f92e 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015e12:	2065      	movs	r0, #101	; 0x65
 8015e14:	f7ef f945 	bl	80050a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015e18:	bf00      	nop
 8015e1a:	37e8      	adds	r7, #232	; 0xe8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	40080000 	.word	0x40080000
 8015e24:	58024400 	.word	0x58024400
 8015e28:	58020000 	.word	0x58020000

08015e2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b082      	sub	sp, #8
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8015e40:	4619      	mov	r1, r3
 8015e42:	4610      	mov	r0, r2
 8015e44:	f7fe fb5d 	bl	8014502 <USBD_LL_SetupStage>
}
 8015e48:	bf00      	nop
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8015e62:	78fa      	ldrb	r2, [r7, #3]
 8015e64:	6879      	ldr	r1, [r7, #4]
 8015e66:	4613      	mov	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	4413      	add	r3, r2
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	440b      	add	r3, r1
 8015e70:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015e74:	681a      	ldr	r2, [r3, #0]
 8015e76:	78fb      	ldrb	r3, [r7, #3]
 8015e78:	4619      	mov	r1, r3
 8015e7a:	f7fe fb97 	bl	80145ac <USBD_LL_DataOutStage>
}
 8015e7e:	bf00      	nop
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b082      	sub	sp, #8
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
 8015e8e:	460b      	mov	r3, r1
 8015e90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8015e98:	78fa      	ldrb	r2, [r7, #3]
 8015e9a:	6879      	ldr	r1, [r7, #4]
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	4413      	add	r3, r2
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	440b      	add	r3, r1
 8015ea6:	3320      	adds	r3, #32
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	78fb      	ldrb	r3, [r7, #3]
 8015eac:	4619      	mov	r1, r3
 8015eae:	f7fe fc30 	bl	8014712 <USBD_LL_DataInStage>
}
 8015eb2:	bf00      	nop
 8015eb4:	3708      	adds	r7, #8
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}

08015eba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b082      	sub	sp, #8
 8015ebe:	af00      	add	r7, sp, #0
 8015ec0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7fe fd6a 	bl	80149a2 <USBD_LL_SOF>
}
 8015ece:	bf00      	nop
 8015ed0:	3708      	adds	r7, #8
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}

08015ed6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ed6:	b580      	push	{r7, lr}
 8015ed8:	b084      	sub	sp, #16
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015ede:	2301      	movs	r3, #1
 8015ee0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	79db      	ldrb	r3, [r3, #7]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d102      	bne.n	8015ef0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015eea:	2300      	movs	r3, #0
 8015eec:	73fb      	strb	r3, [r7, #15]
 8015eee:	e008      	b.n	8015f02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	79db      	ldrb	r3, [r3, #7]
 8015ef4:	2b02      	cmp	r3, #2
 8015ef6:	d102      	bne.n	8015efe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015ef8:	2301      	movs	r3, #1
 8015efa:	73fb      	strb	r3, [r7, #15]
 8015efc:	e001      	b.n	8015f02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015efe:	f7eb fa77 	bl	80013f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015f08:	7bfa      	ldrb	r2, [r7, #15]
 8015f0a:	4611      	mov	r1, r2
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7fe fd04 	bl	801491a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f7fe fcac 	bl	8014876 <USBD_LL_Reset>
}
 8015f1e:	bf00      	nop
 8015f20:	3710      	adds	r7, #16
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
	...

08015f28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7fe fcff 	bl	801493a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	6812      	ldr	r2, [r2, #0]
 8015f4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015f4e:	f043 0301 	orr.w	r3, r3, #1
 8015f52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	7adb      	ldrb	r3, [r3, #11]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d005      	beq.n	8015f68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f5c:	4b04      	ldr	r3, [pc, #16]	; (8015f70 <HAL_PCD_SuspendCallback+0x48>)
 8015f5e:	691b      	ldr	r3, [r3, #16]
 8015f60:	4a03      	ldr	r2, [pc, #12]	; (8015f70 <HAL_PCD_SuspendCallback+0x48>)
 8015f62:	f043 0306 	orr.w	r3, r3, #6
 8015f66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015f68:	bf00      	nop
 8015f6a:	3708      	adds	r7, #8
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	e000ed00 	.word	0xe000ed00

08015f74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b082      	sub	sp, #8
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fe fcf5 	bl	8014972 <USBD_LL_Resume>
}
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b082      	sub	sp, #8
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	460b      	mov	r3, r1
 8015f9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015fa2:	78fa      	ldrb	r2, [r7, #3]
 8015fa4:	4611      	mov	r1, r2
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fe fd4d 	bl	8014a46 <USBD_LL_IsoOUTIncomplete>
}
 8015fac:	bf00      	nop
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015fc6:	78fa      	ldrb	r2, [r7, #3]
 8015fc8:	4611      	mov	r1, r2
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7fe fd09 	bl	80149e2 <USBD_LL_IsoINIncomplete>
}
 8015fd0:	bf00      	nop
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fe fd5f 	bl	8014aaa <USBD_LL_DevConnected>
}
 8015fec:	bf00      	nop
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016002:	4618      	mov	r0, r3
 8016004:	f7fe fd5c 	bl	8014ac0 <USBD_LL_DevDisconnected>
}
 8016008:	bf00      	nop
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}

08016010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d13e      	bne.n	801609e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016020:	4a21      	ldr	r2, [pc, #132]	; (80160a8 <USBD_LL_Init+0x98>)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	4a1f      	ldr	r2, [pc, #124]	; (80160a8 <USBD_LL_Init+0x98>)
 801602c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016030:	4b1d      	ldr	r3, [pc, #116]	; (80160a8 <USBD_LL_Init+0x98>)
 8016032:	4a1e      	ldr	r2, [pc, #120]	; (80160ac <USBD_LL_Init+0x9c>)
 8016034:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016036:	4b1c      	ldr	r3, [pc, #112]	; (80160a8 <USBD_LL_Init+0x98>)
 8016038:	2209      	movs	r2, #9
 801603a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801603c:	4b1a      	ldr	r3, [pc, #104]	; (80160a8 <USBD_LL_Init+0x98>)
 801603e:	2202      	movs	r2, #2
 8016040:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016042:	4b19      	ldr	r3, [pc, #100]	; (80160a8 <USBD_LL_Init+0x98>)
 8016044:	2200      	movs	r2, #0
 8016046:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016048:	4b17      	ldr	r3, [pc, #92]	; (80160a8 <USBD_LL_Init+0x98>)
 801604a:	2202      	movs	r2, #2
 801604c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801604e:	4b16      	ldr	r3, [pc, #88]	; (80160a8 <USBD_LL_Init+0x98>)
 8016050:	2201      	movs	r2, #1
 8016052:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016054:	4b14      	ldr	r3, [pc, #80]	; (80160a8 <USBD_LL_Init+0x98>)
 8016056:	2200      	movs	r2, #0
 8016058:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801605a:	4b13      	ldr	r3, [pc, #76]	; (80160a8 <USBD_LL_Init+0x98>)
 801605c:	2200      	movs	r2, #0
 801605e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8016060:	4b11      	ldr	r3, [pc, #68]	; (80160a8 <USBD_LL_Init+0x98>)
 8016062:	2201      	movs	r2, #1
 8016064:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8016066:	4b10      	ldr	r3, [pc, #64]	; (80160a8 <USBD_LL_Init+0x98>)
 8016068:	2201      	movs	r2, #1
 801606a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801606c:	4b0e      	ldr	r3, [pc, #56]	; (80160a8 <USBD_LL_Init+0x98>)
 801606e:	2200      	movs	r2, #0
 8016070:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016072:	480d      	ldr	r0, [pc, #52]	; (80160a8 <USBD_LL_Init+0x98>)
 8016074:	f7f4 f92b 	bl	800a2ce <HAL_PCD_Init>
 8016078:	4603      	mov	r3, r0
 801607a:	2b00      	cmp	r3, #0
 801607c:	d001      	beq.n	8016082 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801607e:	f7eb f9b7 	bl	80013f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016082:	2180      	movs	r1, #128	; 0x80
 8016084:	4808      	ldr	r0, [pc, #32]	; (80160a8 <USBD_LL_Init+0x98>)
 8016086:	f7f5 fb80 	bl	800b78a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801608a:	2240      	movs	r2, #64	; 0x40
 801608c:	2100      	movs	r1, #0
 801608e:	4806      	ldr	r0, [pc, #24]	; (80160a8 <USBD_LL_Init+0x98>)
 8016090:	f7f5 fb34 	bl	800b6fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016094:	2280      	movs	r2, #128	; 0x80
 8016096:	2101      	movs	r1, #1
 8016098:	4803      	ldr	r0, [pc, #12]	; (80160a8 <USBD_LL_Init+0x98>)
 801609a:	f7f5 fb2f 	bl	800b6fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	240072e4 	.word	0x240072e4
 80160ac:	40080000 	.word	0x40080000

080160b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160b8:	2300      	movs	r3, #0
 80160ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160bc:	2300      	movs	r3, #0
 80160be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7f4 fa0d 	bl	800a4e6 <HAL_PCD_Start>
 80160cc:	4603      	mov	r3, r0
 80160ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160d0:	7bfb      	ldrb	r3, [r7, #15]
 80160d2:	4618      	mov	r0, r3
 80160d4:	f000 f942 	bl	801635c <USBD_Get_USB_Status>
 80160d8:	4603      	mov	r3, r0
 80160da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80160dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}

080160e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80160e6:	b580      	push	{r7, lr}
 80160e8:	b084      	sub	sp, #16
 80160ea:	af00      	add	r7, sp, #0
 80160ec:	6078      	str	r0, [r7, #4]
 80160ee:	4608      	mov	r0, r1
 80160f0:	4611      	mov	r1, r2
 80160f2:	461a      	mov	r2, r3
 80160f4:	4603      	mov	r3, r0
 80160f6:	70fb      	strb	r3, [r7, #3]
 80160f8:	460b      	mov	r3, r1
 80160fa:	70bb      	strb	r3, [r7, #2]
 80160fc:	4613      	mov	r3, r2
 80160fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016100:	2300      	movs	r3, #0
 8016102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016104:	2300      	movs	r3, #0
 8016106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801610e:	78bb      	ldrb	r3, [r7, #2]
 8016110:	883a      	ldrh	r2, [r7, #0]
 8016112:	78f9      	ldrb	r1, [r7, #3]
 8016114:	f7f4 ff0e 	bl	800af34 <HAL_PCD_EP_Open>
 8016118:	4603      	mov	r3, r0
 801611a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801611c:	7bfb      	ldrb	r3, [r7, #15]
 801611e:	4618      	mov	r0, r3
 8016120:	f000 f91c 	bl	801635c <USBD_Get_USB_Status>
 8016124:	4603      	mov	r3, r0
 8016126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016128:	7bbb      	ldrb	r3, [r7, #14]
}
 801612a:	4618      	mov	r0, r3
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}

08016132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016132:	b580      	push	{r7, lr}
 8016134:	b084      	sub	sp, #16
 8016136:	af00      	add	r7, sp, #0
 8016138:	6078      	str	r0, [r7, #4]
 801613a:	460b      	mov	r3, r1
 801613c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801613e:	2300      	movs	r3, #0
 8016140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016142:	2300      	movs	r3, #0
 8016144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801614c:	78fa      	ldrb	r2, [r7, #3]
 801614e:	4611      	mov	r1, r2
 8016150:	4618      	mov	r0, r3
 8016152:	f7f4 ff57 	bl	800b004 <HAL_PCD_EP_Close>
 8016156:	4603      	mov	r3, r0
 8016158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801615a:	7bfb      	ldrb	r3, [r7, #15]
 801615c:	4618      	mov	r0, r3
 801615e:	f000 f8fd 	bl	801635c <USBD_Get_USB_Status>
 8016162:	4603      	mov	r3, r0
 8016164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016166:	7bbb      	ldrb	r3, [r7, #14]
}
 8016168:	4618      	mov	r0, r3
 801616a:	3710      	adds	r7, #16
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
 8016178:	460b      	mov	r3, r1
 801617a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801617c:	2300      	movs	r3, #0
 801617e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016180:	2300      	movs	r3, #0
 8016182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801618a:	78fa      	ldrb	r2, [r7, #3]
 801618c:	4611      	mov	r1, r2
 801618e:	4618      	mov	r0, r3
 8016190:	f7f5 f80f 	bl	800b1b2 <HAL_PCD_EP_SetStall>
 8016194:	4603      	mov	r3, r0
 8016196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016198:	7bfb      	ldrb	r3, [r7, #15]
 801619a:	4618      	mov	r0, r3
 801619c:	f000 f8de 	bl	801635c <USBD_Get_USB_Status>
 80161a0:	4603      	mov	r3, r0
 80161a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}

080161ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161ae:	b580      	push	{r7, lr}
 80161b0:	b084      	sub	sp, #16
 80161b2:	af00      	add	r7, sp, #0
 80161b4:	6078      	str	r0, [r7, #4]
 80161b6:	460b      	mov	r3, r1
 80161b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161ba:	2300      	movs	r3, #0
 80161bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161be:	2300      	movs	r3, #0
 80161c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80161c8:	78fa      	ldrb	r2, [r7, #3]
 80161ca:	4611      	mov	r1, r2
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7f5 f853 	bl	800b278 <HAL_PCD_EP_ClrStall>
 80161d2:	4603      	mov	r3, r0
 80161d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161d6:	7bfb      	ldrb	r3, [r7, #15]
 80161d8:	4618      	mov	r0, r3
 80161da:	f000 f8bf 	bl	801635c <USBD_Get_USB_Status>
 80161de:	4603      	mov	r3, r0
 80161e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	3710      	adds	r7, #16
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}

080161ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161ec:	b480      	push	{r7}
 80161ee:	b085      	sub	sp, #20
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
 80161f4:	460b      	mov	r3, r1
 80161f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80161fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016204:	2b00      	cmp	r3, #0
 8016206:	da0b      	bge.n	8016220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016208:	78fb      	ldrb	r3, [r7, #3]
 801620a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801620e:	68f9      	ldr	r1, [r7, #12]
 8016210:	4613      	mov	r3, r2
 8016212:	00db      	lsls	r3, r3, #3
 8016214:	4413      	add	r3, r2
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	440b      	add	r3, r1
 801621a:	3316      	adds	r3, #22
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	e00b      	b.n	8016238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016220:	78fb      	ldrb	r3, [r7, #3]
 8016222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016226:	68f9      	ldr	r1, [r7, #12]
 8016228:	4613      	mov	r3, r2
 801622a:	00db      	lsls	r3, r3, #3
 801622c:	4413      	add	r3, r2
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	440b      	add	r3, r1
 8016232:	f203 2356 	addw	r3, r3, #598	; 0x256
 8016236:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016238:	4618      	mov	r0, r3
 801623a:	3714      	adds	r7, #20
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b084      	sub	sp, #16
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	460b      	mov	r3, r1
 801624e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016250:	2300      	movs	r3, #0
 8016252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016254:	2300      	movs	r3, #0
 8016256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801625e:	78fa      	ldrb	r2, [r7, #3]
 8016260:	4611      	mov	r1, r2
 8016262:	4618      	mov	r0, r3
 8016264:	f7f4 fe42 	bl	800aeec <HAL_PCD_SetAddress>
 8016268:	4603      	mov	r3, r0
 801626a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801626c:	7bfb      	ldrb	r3, [r7, #15]
 801626e:	4618      	mov	r0, r3
 8016270:	f000 f874 	bl	801635c <USBD_Get_USB_Status>
 8016274:	4603      	mov	r3, r0
 8016276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016278:	7bbb      	ldrb	r3, [r7, #14]
}
 801627a:	4618      	mov	r0, r3
 801627c:	3710      	adds	r7, #16
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016282:	b580      	push	{r7, lr}
 8016284:	b086      	sub	sp, #24
 8016286:	af00      	add	r7, sp, #0
 8016288:	60f8      	str	r0, [r7, #12]
 801628a:	607a      	str	r2, [r7, #4]
 801628c:	603b      	str	r3, [r7, #0]
 801628e:	460b      	mov	r3, r1
 8016290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016292:	2300      	movs	r3, #0
 8016294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016296:	2300      	movs	r3, #0
 8016298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80162a0:	7af9      	ldrb	r1, [r7, #11]
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	f7f4 ff4a 	bl	800b13e <HAL_PCD_EP_Transmit>
 80162aa:	4603      	mov	r3, r0
 80162ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162ae:	7dfb      	ldrb	r3, [r7, #23]
 80162b0:	4618      	mov	r0, r3
 80162b2:	f000 f853 	bl	801635c <USBD_Get_USB_Status>
 80162b6:	4603      	mov	r3, r0
 80162b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80162ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3718      	adds	r7, #24
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b086      	sub	sp, #24
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	607a      	str	r2, [r7, #4]
 80162ce:	603b      	str	r3, [r7, #0]
 80162d0:	460b      	mov	r3, r1
 80162d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162d4:	2300      	movs	r3, #0
 80162d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162d8:	2300      	movs	r3, #0
 80162da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80162e2:	7af9      	ldrb	r1, [r7, #11]
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	687a      	ldr	r2, [r7, #4]
 80162e8:	f7f4 fed6 	bl	800b098 <HAL_PCD_EP_Receive>
 80162ec:	4603      	mov	r3, r0
 80162ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	4618      	mov	r0, r3
 80162f4:	f000 f832 	bl	801635c <USBD_Get_USB_Status>
 80162f8:	4603      	mov	r3, r0
 80162fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80162fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3718      	adds	r7, #24
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}

08016306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016306:	b580      	push	{r7, lr}
 8016308:	b082      	sub	sp, #8
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
 801630e:	460b      	mov	r3, r1
 8016310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016318:	78fa      	ldrb	r2, [r7, #3]
 801631a:	4611      	mov	r1, r2
 801631c:	4618      	mov	r0, r3
 801631e:	f7f4 fef6 	bl	800b10e <HAL_PCD_EP_GetRxCount>
 8016322:	4603      	mov	r3, r0
}
 8016324:	4618      	mov	r0, r3
 8016326:	3708      	adds	r7, #8
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}

0801632c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801632c:	b480      	push	{r7}
 801632e:	b083      	sub	sp, #12
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016334:	4b03      	ldr	r3, [pc, #12]	; (8016344 <USBD_static_malloc+0x18>)
}
 8016336:	4618      	mov	r0, r3
 8016338:	370c      	adds	r7, #12
 801633a:	46bd      	mov	sp, r7
 801633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016340:	4770      	bx	lr
 8016342:	bf00      	nop
 8016344:	240077c8 	.word	0x240077c8

08016348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016348:	b480      	push	{r7}
 801634a:	b083      	sub	sp, #12
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016350:	bf00      	nop
 8016352:	370c      	adds	r7, #12
 8016354:	46bd      	mov	sp, r7
 8016356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635a:	4770      	bx	lr

0801635c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801635c:	b480      	push	{r7}
 801635e:	b085      	sub	sp, #20
 8016360:	af00      	add	r7, sp, #0
 8016362:	4603      	mov	r3, r0
 8016364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016366:	2300      	movs	r3, #0
 8016368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801636a:	79fb      	ldrb	r3, [r7, #7]
 801636c:	2b03      	cmp	r3, #3
 801636e:	d817      	bhi.n	80163a0 <USBD_Get_USB_Status+0x44>
 8016370:	a201      	add	r2, pc, #4	; (adr r2, 8016378 <USBD_Get_USB_Status+0x1c>)
 8016372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016376:	bf00      	nop
 8016378:	08016389 	.word	0x08016389
 801637c:	0801638f 	.word	0x0801638f
 8016380:	08016395 	.word	0x08016395
 8016384:	0801639b 	.word	0x0801639b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016388:	2300      	movs	r3, #0
 801638a:	73fb      	strb	r3, [r7, #15]
    break;
 801638c:	e00b      	b.n	80163a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801638e:	2303      	movs	r3, #3
 8016390:	73fb      	strb	r3, [r7, #15]
    break;
 8016392:	e008      	b.n	80163a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016394:	2301      	movs	r3, #1
 8016396:	73fb      	strb	r3, [r7, #15]
    break;
 8016398:	e005      	b.n	80163a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801639a:	2303      	movs	r3, #3
 801639c:	73fb      	strb	r3, [r7, #15]
    break;
 801639e:	e002      	b.n	80163a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80163a0:	2303      	movs	r3, #3
 80163a2:	73fb      	strb	r3, [r7, #15]
    break;
 80163a4:	bf00      	nop
  }
  return usb_status;
 80163a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3714      	adds	r7, #20
 80163ac:	46bd      	mov	sp, r7
 80163ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b2:	4770      	bx	lr

080163b4 <arm_sin_f32>:
 80163b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016434 <arm_sin_f32+0x80>
 80163b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80163bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80163c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80163c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163c8:	d504      	bpl.n	80163d4 <arm_sin_f32+0x20>
 80163ca:	ee17 3a90 	vmov	r3, s15
 80163ce:	3b01      	subs	r3, #1
 80163d0:	ee07 3a90 	vmov	s15, r3
 80163d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163d8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8016438 <arm_sin_f32+0x84>
 80163dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80163e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80163e4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80163e8:	ee17 3a10 	vmov	r3, s14
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163f2:	d21a      	bcs.n	801642a <arm_sin_f32+0x76>
 80163f4:	ee07 3a10 	vmov	s14, r3
 80163f8:	1c59      	adds	r1, r3, #1
 80163fa:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80163fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016402:	4a0e      	ldr	r2, [pc, #56]	; (801643c <arm_sin_f32+0x88>)
 8016404:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016408:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801640c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016410:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016414:	edd3 6a00 	vldr	s13, [r3]
 8016418:	ed92 7a00 	vldr	s14, [r2]
 801641c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016424:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016428:	4770      	bx	lr
 801642a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801642e:	2101      	movs	r1, #1
 8016430:	2300      	movs	r3, #0
 8016432:	e7e6      	b.n	8016402 <arm_sin_f32+0x4e>
 8016434:	3e22f983 	.word	0x3e22f983
 8016438:	44000000 	.word	0x44000000
 801643c:	0801c6e8 	.word	0x0801c6e8

08016440 <atof>:
 8016440:	2100      	movs	r1, #0
 8016442:	f000 be8f 	b.w	8017164 <strtod>

08016446 <atoi>:
 8016446:	220a      	movs	r2, #10
 8016448:	2100      	movs	r1, #0
 801644a:	f000 bf19 	b.w	8017280 <strtol>
	...

08016450 <malloc>:
 8016450:	4b02      	ldr	r3, [pc, #8]	; (801645c <malloc+0xc>)
 8016452:	4601      	mov	r1, r0
 8016454:	6818      	ldr	r0, [r3, #0]
 8016456:	f000 b82b 	b.w	80164b0 <_malloc_r>
 801645a:	bf00      	nop
 801645c:	240003c4 	.word	0x240003c4

08016460 <free>:
 8016460:	4b02      	ldr	r3, [pc, #8]	; (801646c <free+0xc>)
 8016462:	4601      	mov	r1, r0
 8016464:	6818      	ldr	r0, [r3, #0]
 8016466:	f002 bb5b 	b.w	8018b20 <_free_r>
 801646a:	bf00      	nop
 801646c:	240003c4 	.word	0x240003c4

08016470 <sbrk_aligned>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	4e0e      	ldr	r6, [pc, #56]	; (80164ac <sbrk_aligned+0x3c>)
 8016474:	460c      	mov	r4, r1
 8016476:	6831      	ldr	r1, [r6, #0]
 8016478:	4605      	mov	r5, r0
 801647a:	b911      	cbnz	r1, 8016482 <sbrk_aligned+0x12>
 801647c:	f001 fcf2 	bl	8017e64 <_sbrk_r>
 8016480:	6030      	str	r0, [r6, #0]
 8016482:	4621      	mov	r1, r4
 8016484:	4628      	mov	r0, r5
 8016486:	f001 fced 	bl	8017e64 <_sbrk_r>
 801648a:	1c43      	adds	r3, r0, #1
 801648c:	d00a      	beq.n	80164a4 <sbrk_aligned+0x34>
 801648e:	1cc4      	adds	r4, r0, #3
 8016490:	f024 0403 	bic.w	r4, r4, #3
 8016494:	42a0      	cmp	r0, r4
 8016496:	d007      	beq.n	80164a8 <sbrk_aligned+0x38>
 8016498:	1a21      	subs	r1, r4, r0
 801649a:	4628      	mov	r0, r5
 801649c:	f001 fce2 	bl	8017e64 <_sbrk_r>
 80164a0:	3001      	adds	r0, #1
 80164a2:	d101      	bne.n	80164a8 <sbrk_aligned+0x38>
 80164a4:	f04f 34ff 	mov.w	r4, #4294967295
 80164a8:	4620      	mov	r0, r4
 80164aa:	bd70      	pop	{r4, r5, r6, pc}
 80164ac:	2400b420 	.word	0x2400b420

080164b0 <_malloc_r>:
 80164b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164b4:	1ccd      	adds	r5, r1, #3
 80164b6:	f025 0503 	bic.w	r5, r5, #3
 80164ba:	3508      	adds	r5, #8
 80164bc:	2d0c      	cmp	r5, #12
 80164be:	bf38      	it	cc
 80164c0:	250c      	movcc	r5, #12
 80164c2:	2d00      	cmp	r5, #0
 80164c4:	4607      	mov	r7, r0
 80164c6:	db01      	blt.n	80164cc <_malloc_r+0x1c>
 80164c8:	42a9      	cmp	r1, r5
 80164ca:	d905      	bls.n	80164d8 <_malloc_r+0x28>
 80164cc:	230c      	movs	r3, #12
 80164ce:	603b      	str	r3, [r7, #0]
 80164d0:	2600      	movs	r6, #0
 80164d2:	4630      	mov	r0, r6
 80164d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80165ac <_malloc_r+0xfc>
 80164dc:	f000 f868 	bl	80165b0 <__malloc_lock>
 80164e0:	f8d8 3000 	ldr.w	r3, [r8]
 80164e4:	461c      	mov	r4, r3
 80164e6:	bb5c      	cbnz	r4, 8016540 <_malloc_r+0x90>
 80164e8:	4629      	mov	r1, r5
 80164ea:	4638      	mov	r0, r7
 80164ec:	f7ff ffc0 	bl	8016470 <sbrk_aligned>
 80164f0:	1c43      	adds	r3, r0, #1
 80164f2:	4604      	mov	r4, r0
 80164f4:	d155      	bne.n	80165a2 <_malloc_r+0xf2>
 80164f6:	f8d8 4000 	ldr.w	r4, [r8]
 80164fa:	4626      	mov	r6, r4
 80164fc:	2e00      	cmp	r6, #0
 80164fe:	d145      	bne.n	801658c <_malloc_r+0xdc>
 8016500:	2c00      	cmp	r4, #0
 8016502:	d048      	beq.n	8016596 <_malloc_r+0xe6>
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	4631      	mov	r1, r6
 8016508:	4638      	mov	r0, r7
 801650a:	eb04 0903 	add.w	r9, r4, r3
 801650e:	f001 fca9 	bl	8017e64 <_sbrk_r>
 8016512:	4581      	cmp	r9, r0
 8016514:	d13f      	bne.n	8016596 <_malloc_r+0xe6>
 8016516:	6821      	ldr	r1, [r4, #0]
 8016518:	1a6d      	subs	r5, r5, r1
 801651a:	4629      	mov	r1, r5
 801651c:	4638      	mov	r0, r7
 801651e:	f7ff ffa7 	bl	8016470 <sbrk_aligned>
 8016522:	3001      	adds	r0, #1
 8016524:	d037      	beq.n	8016596 <_malloc_r+0xe6>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	442b      	add	r3, r5
 801652a:	6023      	str	r3, [r4, #0]
 801652c:	f8d8 3000 	ldr.w	r3, [r8]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d038      	beq.n	80165a6 <_malloc_r+0xf6>
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	42a2      	cmp	r2, r4
 8016538:	d12b      	bne.n	8016592 <_malloc_r+0xe2>
 801653a:	2200      	movs	r2, #0
 801653c:	605a      	str	r2, [r3, #4]
 801653e:	e00f      	b.n	8016560 <_malloc_r+0xb0>
 8016540:	6822      	ldr	r2, [r4, #0]
 8016542:	1b52      	subs	r2, r2, r5
 8016544:	d41f      	bmi.n	8016586 <_malloc_r+0xd6>
 8016546:	2a0b      	cmp	r2, #11
 8016548:	d917      	bls.n	801657a <_malloc_r+0xca>
 801654a:	1961      	adds	r1, r4, r5
 801654c:	42a3      	cmp	r3, r4
 801654e:	6025      	str	r5, [r4, #0]
 8016550:	bf18      	it	ne
 8016552:	6059      	strne	r1, [r3, #4]
 8016554:	6863      	ldr	r3, [r4, #4]
 8016556:	bf08      	it	eq
 8016558:	f8c8 1000 	streq.w	r1, [r8]
 801655c:	5162      	str	r2, [r4, r5]
 801655e:	604b      	str	r3, [r1, #4]
 8016560:	4638      	mov	r0, r7
 8016562:	f104 060b 	add.w	r6, r4, #11
 8016566:	f000 f829 	bl	80165bc <__malloc_unlock>
 801656a:	f026 0607 	bic.w	r6, r6, #7
 801656e:	1d23      	adds	r3, r4, #4
 8016570:	1af2      	subs	r2, r6, r3
 8016572:	d0ae      	beq.n	80164d2 <_malloc_r+0x22>
 8016574:	1b9b      	subs	r3, r3, r6
 8016576:	50a3      	str	r3, [r4, r2]
 8016578:	e7ab      	b.n	80164d2 <_malloc_r+0x22>
 801657a:	42a3      	cmp	r3, r4
 801657c:	6862      	ldr	r2, [r4, #4]
 801657e:	d1dd      	bne.n	801653c <_malloc_r+0x8c>
 8016580:	f8c8 2000 	str.w	r2, [r8]
 8016584:	e7ec      	b.n	8016560 <_malloc_r+0xb0>
 8016586:	4623      	mov	r3, r4
 8016588:	6864      	ldr	r4, [r4, #4]
 801658a:	e7ac      	b.n	80164e6 <_malloc_r+0x36>
 801658c:	4634      	mov	r4, r6
 801658e:	6876      	ldr	r6, [r6, #4]
 8016590:	e7b4      	b.n	80164fc <_malloc_r+0x4c>
 8016592:	4613      	mov	r3, r2
 8016594:	e7cc      	b.n	8016530 <_malloc_r+0x80>
 8016596:	230c      	movs	r3, #12
 8016598:	603b      	str	r3, [r7, #0]
 801659a:	4638      	mov	r0, r7
 801659c:	f000 f80e 	bl	80165bc <__malloc_unlock>
 80165a0:	e797      	b.n	80164d2 <_malloc_r+0x22>
 80165a2:	6025      	str	r5, [r4, #0]
 80165a4:	e7dc      	b.n	8016560 <_malloc_r+0xb0>
 80165a6:	605b      	str	r3, [r3, #4]
 80165a8:	deff      	udf	#255	; 0xff
 80165aa:	bf00      	nop
 80165ac:	2400b41c 	.word	0x2400b41c

080165b0 <__malloc_lock>:
 80165b0:	4801      	ldr	r0, [pc, #4]	; (80165b8 <__malloc_lock+0x8>)
 80165b2:	f7eb bc5c 	b.w	8001e6e <__retarget_lock_acquire_recursive>
 80165b6:	bf00      	nop
 80165b8:	24000c04 	.word	0x24000c04

080165bc <__malloc_unlock>:
 80165bc:	4801      	ldr	r0, [pc, #4]	; (80165c4 <__malloc_unlock+0x8>)
 80165be:	f7eb bc6a 	b.w	8001e96 <__retarget_lock_release_recursive>
 80165c2:	bf00      	nop
 80165c4:	24000c04 	.word	0x24000c04

080165c8 <sulp>:
 80165c8:	b570      	push	{r4, r5, r6, lr}
 80165ca:	4604      	mov	r4, r0
 80165cc:	460d      	mov	r5, r1
 80165ce:	4616      	mov	r6, r2
 80165d0:	ec45 4b10 	vmov	d0, r4, r5
 80165d4:	f003 f9c6 	bl	8019964 <__ulp>
 80165d8:	b17e      	cbz	r6, 80165fa <sulp+0x32>
 80165da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80165de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	dd09      	ble.n	80165fa <sulp+0x32>
 80165e6:	051b      	lsls	r3, r3, #20
 80165e8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80165ec:	2000      	movs	r0, #0
 80165ee:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80165f2:	ec41 0b17 	vmov	d7, r0, r1
 80165f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165fa:	bd70      	pop	{r4, r5, r6, pc}
 80165fc:	0000      	movs	r0, r0
	...

08016600 <_strtod_l>:
 8016600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016604:	ed2d 8b0e 	vpush	{d8-d14}
 8016608:	b097      	sub	sp, #92	; 0x5c
 801660a:	4604      	mov	r4, r0
 801660c:	920d      	str	r2, [sp, #52]	; 0x34
 801660e:	2200      	movs	r2, #0
 8016610:	9212      	str	r2, [sp, #72]	; 0x48
 8016612:	468a      	mov	sl, r1
 8016614:	f04f 0800 	mov.w	r8, #0
 8016618:	f04f 0900 	mov.w	r9, #0
 801661c:	460a      	mov	r2, r1
 801661e:	9211      	str	r2, [sp, #68]	; 0x44
 8016620:	7811      	ldrb	r1, [r2, #0]
 8016622:	292b      	cmp	r1, #43	; 0x2b
 8016624:	d04c      	beq.n	80166c0 <_strtod_l+0xc0>
 8016626:	d839      	bhi.n	801669c <_strtod_l+0x9c>
 8016628:	290d      	cmp	r1, #13
 801662a:	d833      	bhi.n	8016694 <_strtod_l+0x94>
 801662c:	2908      	cmp	r1, #8
 801662e:	d833      	bhi.n	8016698 <_strtod_l+0x98>
 8016630:	2900      	cmp	r1, #0
 8016632:	d03c      	beq.n	80166ae <_strtod_l+0xae>
 8016634:	2200      	movs	r2, #0
 8016636:	9208      	str	r2, [sp, #32]
 8016638:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801663a:	7832      	ldrb	r2, [r6, #0]
 801663c:	2a30      	cmp	r2, #48	; 0x30
 801663e:	f040 80b8 	bne.w	80167b2 <_strtod_l+0x1b2>
 8016642:	7872      	ldrb	r2, [r6, #1]
 8016644:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016648:	2a58      	cmp	r2, #88	; 0x58
 801664a:	d170      	bne.n	801672e <_strtod_l+0x12e>
 801664c:	9302      	str	r3, [sp, #8]
 801664e:	9b08      	ldr	r3, [sp, #32]
 8016650:	9301      	str	r3, [sp, #4]
 8016652:	ab12      	add	r3, sp, #72	; 0x48
 8016654:	9300      	str	r3, [sp, #0]
 8016656:	4a91      	ldr	r2, [pc, #580]	; (801689c <_strtod_l+0x29c>)
 8016658:	ab13      	add	r3, sp, #76	; 0x4c
 801665a:	a911      	add	r1, sp, #68	; 0x44
 801665c:	4620      	mov	r0, r4
 801665e:	f002 fb13 	bl	8018c88 <__gethex>
 8016662:	f010 070f 	ands.w	r7, r0, #15
 8016666:	4605      	mov	r5, r0
 8016668:	d005      	beq.n	8016676 <_strtod_l+0x76>
 801666a:	2f06      	cmp	r7, #6
 801666c:	d12a      	bne.n	80166c4 <_strtod_l+0xc4>
 801666e:	3601      	adds	r6, #1
 8016670:	2300      	movs	r3, #0
 8016672:	9611      	str	r6, [sp, #68]	; 0x44
 8016674:	9308      	str	r3, [sp, #32]
 8016676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016678:	2b00      	cmp	r3, #0
 801667a:	f040 8555 	bne.w	8017128 <_strtod_l+0xb28>
 801667e:	9b08      	ldr	r3, [sp, #32]
 8016680:	ec49 8b10 	vmov	d0, r8, r9
 8016684:	b1cb      	cbz	r3, 80166ba <_strtod_l+0xba>
 8016686:	eeb1 0b40 	vneg.f64	d0, d0
 801668a:	b017      	add	sp, #92	; 0x5c
 801668c:	ecbd 8b0e 	vpop	{d8-d14}
 8016690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016694:	2920      	cmp	r1, #32
 8016696:	d1cd      	bne.n	8016634 <_strtod_l+0x34>
 8016698:	3201      	adds	r2, #1
 801669a:	e7c0      	b.n	801661e <_strtod_l+0x1e>
 801669c:	292d      	cmp	r1, #45	; 0x2d
 801669e:	d1c9      	bne.n	8016634 <_strtod_l+0x34>
 80166a0:	2101      	movs	r1, #1
 80166a2:	9108      	str	r1, [sp, #32]
 80166a4:	1c51      	adds	r1, r2, #1
 80166a6:	9111      	str	r1, [sp, #68]	; 0x44
 80166a8:	7852      	ldrb	r2, [r2, #1]
 80166aa:	2a00      	cmp	r2, #0
 80166ac:	d1c4      	bne.n	8016638 <_strtod_l+0x38>
 80166ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166b0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	f040 8535 	bne.w	8017124 <_strtod_l+0xb24>
 80166ba:	ec49 8b10 	vmov	d0, r8, r9
 80166be:	e7e4      	b.n	801668a <_strtod_l+0x8a>
 80166c0:	2100      	movs	r1, #0
 80166c2:	e7ee      	b.n	80166a2 <_strtod_l+0xa2>
 80166c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166c6:	b13a      	cbz	r2, 80166d8 <_strtod_l+0xd8>
 80166c8:	2135      	movs	r1, #53	; 0x35
 80166ca:	a814      	add	r0, sp, #80	; 0x50
 80166cc:	f003 fa44 	bl	8019b58 <__copybits>
 80166d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80166d2:	4620      	mov	r0, r4
 80166d4:	f002 fe1a 	bl	801930c <_Bfree>
 80166d8:	1e7b      	subs	r3, r7, #1
 80166da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80166dc:	2b04      	cmp	r3, #4
 80166de:	d806      	bhi.n	80166ee <_strtod_l+0xee>
 80166e0:	e8df f003 	tbb	[pc, r3]
 80166e4:	201d0314 	.word	0x201d0314
 80166e8:	14          	.byte	0x14
 80166e9:	00          	.byte	0x00
 80166ea:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80166ee:	05eb      	lsls	r3, r5, #23
 80166f0:	bf48      	it	mi
 80166f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80166f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80166fa:	0d1b      	lsrs	r3, r3, #20
 80166fc:	051b      	lsls	r3, r3, #20
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d1b9      	bne.n	8016676 <_strtod_l+0x76>
 8016702:	f001 fbd1 	bl	8017ea8 <__errno>
 8016706:	2322      	movs	r3, #34	; 0x22
 8016708:	6003      	str	r3, [r0, #0]
 801670a:	e7b4      	b.n	8016676 <_strtod_l+0x76>
 801670c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8016710:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016714:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016718:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801671c:	e7e7      	b.n	80166ee <_strtod_l+0xee>
 801671e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80168a4 <_strtod_l+0x2a4>
 8016722:	e7e4      	b.n	80166ee <_strtod_l+0xee>
 8016724:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016728:	f04f 38ff 	mov.w	r8, #4294967295
 801672c:	e7df      	b.n	80166ee <_strtod_l+0xee>
 801672e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016730:	1c5a      	adds	r2, r3, #1
 8016732:	9211      	str	r2, [sp, #68]	; 0x44
 8016734:	785b      	ldrb	r3, [r3, #1]
 8016736:	2b30      	cmp	r3, #48	; 0x30
 8016738:	d0f9      	beq.n	801672e <_strtod_l+0x12e>
 801673a:	2b00      	cmp	r3, #0
 801673c:	d09b      	beq.n	8016676 <_strtod_l+0x76>
 801673e:	2301      	movs	r3, #1
 8016740:	9306      	str	r3, [sp, #24]
 8016742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016744:	9309      	str	r3, [sp, #36]	; 0x24
 8016746:	2300      	movs	r3, #0
 8016748:	9305      	str	r3, [sp, #20]
 801674a:	9307      	str	r3, [sp, #28]
 801674c:	461e      	mov	r6, r3
 801674e:	220a      	movs	r2, #10
 8016750:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016752:	7805      	ldrb	r5, [r0, #0]
 8016754:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8016758:	b2d9      	uxtb	r1, r3
 801675a:	2909      	cmp	r1, #9
 801675c:	d92b      	bls.n	80167b6 <_strtod_l+0x1b6>
 801675e:	4950      	ldr	r1, [pc, #320]	; (80168a0 <_strtod_l+0x2a0>)
 8016760:	2201      	movs	r2, #1
 8016762:	f001 fb34 	bl	8017dce <strncmp>
 8016766:	2800      	cmp	r0, #0
 8016768:	d035      	beq.n	80167d6 <_strtod_l+0x1d6>
 801676a:	2000      	movs	r0, #0
 801676c:	462a      	mov	r2, r5
 801676e:	4633      	mov	r3, r6
 8016770:	4683      	mov	fp, r0
 8016772:	4601      	mov	r1, r0
 8016774:	2a65      	cmp	r2, #101	; 0x65
 8016776:	d001      	beq.n	801677c <_strtod_l+0x17c>
 8016778:	2a45      	cmp	r2, #69	; 0x45
 801677a:	d118      	bne.n	80167ae <_strtod_l+0x1ae>
 801677c:	b91b      	cbnz	r3, 8016786 <_strtod_l+0x186>
 801677e:	9b06      	ldr	r3, [sp, #24]
 8016780:	4303      	orrs	r3, r0
 8016782:	d094      	beq.n	80166ae <_strtod_l+0xae>
 8016784:	2300      	movs	r3, #0
 8016786:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801678a:	f10a 0201 	add.w	r2, sl, #1
 801678e:	9211      	str	r2, [sp, #68]	; 0x44
 8016790:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8016794:	2a2b      	cmp	r2, #43	; 0x2b
 8016796:	d075      	beq.n	8016884 <_strtod_l+0x284>
 8016798:	2a2d      	cmp	r2, #45	; 0x2d
 801679a:	d07b      	beq.n	8016894 <_strtod_l+0x294>
 801679c:	f04f 0e00 	mov.w	lr, #0
 80167a0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80167a4:	2d09      	cmp	r5, #9
 80167a6:	f240 8083 	bls.w	80168b0 <_strtod_l+0x2b0>
 80167aa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80167ae:	2500      	movs	r5, #0
 80167b0:	e09e      	b.n	80168f0 <_strtod_l+0x2f0>
 80167b2:	2300      	movs	r3, #0
 80167b4:	e7c4      	b.n	8016740 <_strtod_l+0x140>
 80167b6:	2e08      	cmp	r6, #8
 80167b8:	bfd5      	itete	le
 80167ba:	9907      	ldrle	r1, [sp, #28]
 80167bc:	9905      	ldrgt	r1, [sp, #20]
 80167be:	fb02 3301 	mlale	r3, r2, r1, r3
 80167c2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80167c6:	f100 0001 	add.w	r0, r0, #1
 80167ca:	bfd4      	ite	le
 80167cc:	9307      	strle	r3, [sp, #28]
 80167ce:	9305      	strgt	r3, [sp, #20]
 80167d0:	3601      	adds	r6, #1
 80167d2:	9011      	str	r0, [sp, #68]	; 0x44
 80167d4:	e7bc      	b.n	8016750 <_strtod_l+0x150>
 80167d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167d8:	1c5a      	adds	r2, r3, #1
 80167da:	9211      	str	r2, [sp, #68]	; 0x44
 80167dc:	785a      	ldrb	r2, [r3, #1]
 80167de:	b3ae      	cbz	r6, 801684c <_strtod_l+0x24c>
 80167e0:	4683      	mov	fp, r0
 80167e2:	4633      	mov	r3, r6
 80167e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80167e8:	2909      	cmp	r1, #9
 80167ea:	d912      	bls.n	8016812 <_strtod_l+0x212>
 80167ec:	2101      	movs	r1, #1
 80167ee:	e7c1      	b.n	8016774 <_strtod_l+0x174>
 80167f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167f2:	1c5a      	adds	r2, r3, #1
 80167f4:	9211      	str	r2, [sp, #68]	; 0x44
 80167f6:	785a      	ldrb	r2, [r3, #1]
 80167f8:	3001      	adds	r0, #1
 80167fa:	2a30      	cmp	r2, #48	; 0x30
 80167fc:	d0f8      	beq.n	80167f0 <_strtod_l+0x1f0>
 80167fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016802:	2b08      	cmp	r3, #8
 8016804:	f200 8495 	bhi.w	8017132 <_strtod_l+0xb32>
 8016808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801680a:	9309      	str	r3, [sp, #36]	; 0x24
 801680c:	4683      	mov	fp, r0
 801680e:	2000      	movs	r0, #0
 8016810:	4603      	mov	r3, r0
 8016812:	3a30      	subs	r2, #48	; 0x30
 8016814:	f100 0101 	add.w	r1, r0, #1
 8016818:	d012      	beq.n	8016840 <_strtod_l+0x240>
 801681a:	448b      	add	fp, r1
 801681c:	eb00 0c03 	add.w	ip, r0, r3
 8016820:	4619      	mov	r1, r3
 8016822:	250a      	movs	r5, #10
 8016824:	4561      	cmp	r1, ip
 8016826:	d113      	bne.n	8016850 <_strtod_l+0x250>
 8016828:	1819      	adds	r1, r3, r0
 801682a:	2908      	cmp	r1, #8
 801682c:	f103 0301 	add.w	r3, r3, #1
 8016830:	4403      	add	r3, r0
 8016832:	dc1b      	bgt.n	801686c <_strtod_l+0x26c>
 8016834:	9807      	ldr	r0, [sp, #28]
 8016836:	210a      	movs	r1, #10
 8016838:	fb01 2200 	mla	r2, r1, r0, r2
 801683c:	9207      	str	r2, [sp, #28]
 801683e:	2100      	movs	r1, #0
 8016840:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016842:	1c50      	adds	r0, r2, #1
 8016844:	9011      	str	r0, [sp, #68]	; 0x44
 8016846:	7852      	ldrb	r2, [r2, #1]
 8016848:	4608      	mov	r0, r1
 801684a:	e7cb      	b.n	80167e4 <_strtod_l+0x1e4>
 801684c:	4630      	mov	r0, r6
 801684e:	e7d4      	b.n	80167fa <_strtod_l+0x1fa>
 8016850:	2908      	cmp	r1, #8
 8016852:	f101 0101 	add.w	r1, r1, #1
 8016856:	dc03      	bgt.n	8016860 <_strtod_l+0x260>
 8016858:	9f07      	ldr	r7, [sp, #28]
 801685a:	436f      	muls	r7, r5
 801685c:	9707      	str	r7, [sp, #28]
 801685e:	e7e1      	b.n	8016824 <_strtod_l+0x224>
 8016860:	2910      	cmp	r1, #16
 8016862:	bfde      	ittt	le
 8016864:	9f05      	ldrle	r7, [sp, #20]
 8016866:	436f      	mulle	r7, r5
 8016868:	9705      	strle	r7, [sp, #20]
 801686a:	e7db      	b.n	8016824 <_strtod_l+0x224>
 801686c:	2b10      	cmp	r3, #16
 801686e:	bfdf      	itttt	le
 8016870:	9805      	ldrle	r0, [sp, #20]
 8016872:	210a      	movle	r1, #10
 8016874:	fb01 2200 	mlale	r2, r1, r0, r2
 8016878:	9205      	strle	r2, [sp, #20]
 801687a:	e7e0      	b.n	801683e <_strtod_l+0x23e>
 801687c:	f04f 0b00 	mov.w	fp, #0
 8016880:	2101      	movs	r1, #1
 8016882:	e77c      	b.n	801677e <_strtod_l+0x17e>
 8016884:	f04f 0e00 	mov.w	lr, #0
 8016888:	f10a 0202 	add.w	r2, sl, #2
 801688c:	9211      	str	r2, [sp, #68]	; 0x44
 801688e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8016892:	e785      	b.n	80167a0 <_strtod_l+0x1a0>
 8016894:	f04f 0e01 	mov.w	lr, #1
 8016898:	e7f6      	b.n	8016888 <_strtod_l+0x288>
 801689a:	bf00      	nop
 801689c:	0801cef0 	.word	0x0801cef0
 80168a0:	0801ceec 	.word	0x0801ceec
 80168a4:	7ff00000 	.word	0x7ff00000
 80168a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80168aa:	1c55      	adds	r5, r2, #1
 80168ac:	9511      	str	r5, [sp, #68]	; 0x44
 80168ae:	7852      	ldrb	r2, [r2, #1]
 80168b0:	2a30      	cmp	r2, #48	; 0x30
 80168b2:	d0f9      	beq.n	80168a8 <_strtod_l+0x2a8>
 80168b4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80168b8:	2d08      	cmp	r5, #8
 80168ba:	f63f af78 	bhi.w	80167ae <_strtod_l+0x1ae>
 80168be:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80168c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80168c4:	920a      	str	r2, [sp, #40]	; 0x28
 80168c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80168c8:	1c55      	adds	r5, r2, #1
 80168ca:	9511      	str	r5, [sp, #68]	; 0x44
 80168cc:	7852      	ldrb	r2, [r2, #1]
 80168ce:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80168d2:	2f09      	cmp	r7, #9
 80168d4:	d937      	bls.n	8016946 <_strtod_l+0x346>
 80168d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80168d8:	1bed      	subs	r5, r5, r7
 80168da:	2d08      	cmp	r5, #8
 80168dc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80168e0:	dc02      	bgt.n	80168e8 <_strtod_l+0x2e8>
 80168e2:	4565      	cmp	r5, ip
 80168e4:	bfa8      	it	ge
 80168e6:	4665      	movge	r5, ip
 80168e8:	f1be 0f00 	cmp.w	lr, #0
 80168ec:	d000      	beq.n	80168f0 <_strtod_l+0x2f0>
 80168ee:	426d      	negs	r5, r5
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d14d      	bne.n	8016990 <_strtod_l+0x390>
 80168f4:	9b06      	ldr	r3, [sp, #24]
 80168f6:	4303      	orrs	r3, r0
 80168f8:	f47f aebd 	bne.w	8016676 <_strtod_l+0x76>
 80168fc:	2900      	cmp	r1, #0
 80168fe:	f47f aed6 	bne.w	80166ae <_strtod_l+0xae>
 8016902:	2a69      	cmp	r2, #105	; 0x69
 8016904:	d027      	beq.n	8016956 <_strtod_l+0x356>
 8016906:	dc24      	bgt.n	8016952 <_strtod_l+0x352>
 8016908:	2a49      	cmp	r2, #73	; 0x49
 801690a:	d024      	beq.n	8016956 <_strtod_l+0x356>
 801690c:	2a4e      	cmp	r2, #78	; 0x4e
 801690e:	f47f aece 	bne.w	80166ae <_strtod_l+0xae>
 8016912:	4995      	ldr	r1, [pc, #596]	; (8016b68 <_strtod_l+0x568>)
 8016914:	a811      	add	r0, sp, #68	; 0x44
 8016916:	f002 fbf7 	bl	8019108 <__match>
 801691a:	2800      	cmp	r0, #0
 801691c:	f43f aec7 	beq.w	80166ae <_strtod_l+0xae>
 8016920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	2b28      	cmp	r3, #40	; 0x28
 8016926:	d12d      	bne.n	8016984 <_strtod_l+0x384>
 8016928:	4990      	ldr	r1, [pc, #576]	; (8016b6c <_strtod_l+0x56c>)
 801692a:	aa14      	add	r2, sp, #80	; 0x50
 801692c:	a811      	add	r0, sp, #68	; 0x44
 801692e:	f002 fbff 	bl	8019130 <__hexnan>
 8016932:	2805      	cmp	r0, #5
 8016934:	d126      	bne.n	8016984 <_strtod_l+0x384>
 8016936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016938:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801693c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016940:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016944:	e697      	b.n	8016676 <_strtod_l+0x76>
 8016946:	250a      	movs	r5, #10
 8016948:	fb05 2c0c 	mla	ip, r5, ip, r2
 801694c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8016950:	e7b9      	b.n	80168c6 <_strtod_l+0x2c6>
 8016952:	2a6e      	cmp	r2, #110	; 0x6e
 8016954:	e7db      	b.n	801690e <_strtod_l+0x30e>
 8016956:	4986      	ldr	r1, [pc, #536]	; (8016b70 <_strtod_l+0x570>)
 8016958:	a811      	add	r0, sp, #68	; 0x44
 801695a:	f002 fbd5 	bl	8019108 <__match>
 801695e:	2800      	cmp	r0, #0
 8016960:	f43f aea5 	beq.w	80166ae <_strtod_l+0xae>
 8016964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016966:	4983      	ldr	r1, [pc, #524]	; (8016b74 <_strtod_l+0x574>)
 8016968:	3b01      	subs	r3, #1
 801696a:	a811      	add	r0, sp, #68	; 0x44
 801696c:	9311      	str	r3, [sp, #68]	; 0x44
 801696e:	f002 fbcb 	bl	8019108 <__match>
 8016972:	b910      	cbnz	r0, 801697a <_strtod_l+0x37a>
 8016974:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016976:	3301      	adds	r3, #1
 8016978:	9311      	str	r3, [sp, #68]	; 0x44
 801697a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8016b88 <_strtod_l+0x588>
 801697e:	f04f 0800 	mov.w	r8, #0
 8016982:	e678      	b.n	8016676 <_strtod_l+0x76>
 8016984:	487c      	ldr	r0, [pc, #496]	; (8016b78 <_strtod_l+0x578>)
 8016986:	f001 facf 	bl	8017f28 <nan>
 801698a:	ec59 8b10 	vmov	r8, r9, d0
 801698e:	e672      	b.n	8016676 <_strtod_l+0x76>
 8016990:	eddd 7a07 	vldr	s15, [sp, #28]
 8016994:	eba5 020b 	sub.w	r2, r5, fp
 8016998:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801699c:	2e00      	cmp	r6, #0
 801699e:	bf08      	it	eq
 80169a0:	461e      	moveq	r6, r3
 80169a2:	2b10      	cmp	r3, #16
 80169a4:	9206      	str	r2, [sp, #24]
 80169a6:	461a      	mov	r2, r3
 80169a8:	bfa8      	it	ge
 80169aa:	2210      	movge	r2, #16
 80169ac:	2b09      	cmp	r3, #9
 80169ae:	ec59 8b17 	vmov	r8, r9, d7
 80169b2:	dd0c      	ble.n	80169ce <_strtod_l+0x3ce>
 80169b4:	4971      	ldr	r1, [pc, #452]	; (8016b7c <_strtod_l+0x57c>)
 80169b6:	eddd 6a05 	vldr	s13, [sp, #20]
 80169ba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80169be:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80169c2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80169c6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80169ca:	ec59 8b16 	vmov	r8, r9, d6
 80169ce:	2b0f      	cmp	r3, #15
 80169d0:	dc37      	bgt.n	8016a42 <_strtod_l+0x442>
 80169d2:	9906      	ldr	r1, [sp, #24]
 80169d4:	2900      	cmp	r1, #0
 80169d6:	f43f ae4e 	beq.w	8016676 <_strtod_l+0x76>
 80169da:	dd23      	ble.n	8016a24 <_strtod_l+0x424>
 80169dc:	2916      	cmp	r1, #22
 80169de:	dc0b      	bgt.n	80169f8 <_strtod_l+0x3f8>
 80169e0:	4b66      	ldr	r3, [pc, #408]	; (8016b7c <_strtod_l+0x57c>)
 80169e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80169e6:	ed93 7b00 	vldr	d7, [r3]
 80169ea:	ec49 8b16 	vmov	d6, r8, r9
 80169ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80169f2:	ec59 8b17 	vmov	r8, r9, d7
 80169f6:	e63e      	b.n	8016676 <_strtod_l+0x76>
 80169f8:	9806      	ldr	r0, [sp, #24]
 80169fa:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80169fe:	4281      	cmp	r1, r0
 8016a00:	db1f      	blt.n	8016a42 <_strtod_l+0x442>
 8016a02:	4a5e      	ldr	r2, [pc, #376]	; (8016b7c <_strtod_l+0x57c>)
 8016a04:	f1c3 030f 	rsb	r3, r3, #15
 8016a08:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016a0c:	ed91 7b00 	vldr	d7, [r1]
 8016a10:	ec49 8b16 	vmov	d6, r8, r9
 8016a14:	1ac3      	subs	r3, r0, r3
 8016a16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016a1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016a1e:	ed92 6b00 	vldr	d6, [r2]
 8016a22:	e7e4      	b.n	80169ee <_strtod_l+0x3ee>
 8016a24:	9906      	ldr	r1, [sp, #24]
 8016a26:	3116      	adds	r1, #22
 8016a28:	db0b      	blt.n	8016a42 <_strtod_l+0x442>
 8016a2a:	4b54      	ldr	r3, [pc, #336]	; (8016b7c <_strtod_l+0x57c>)
 8016a2c:	ebab 0505 	sub.w	r5, fp, r5
 8016a30:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016a34:	ed95 7b00 	vldr	d7, [r5]
 8016a38:	ec49 8b16 	vmov	d6, r8, r9
 8016a3c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016a40:	e7d7      	b.n	80169f2 <_strtod_l+0x3f2>
 8016a42:	9906      	ldr	r1, [sp, #24]
 8016a44:	1a9a      	subs	r2, r3, r2
 8016a46:	440a      	add	r2, r1
 8016a48:	2a00      	cmp	r2, #0
 8016a4a:	dd6e      	ble.n	8016b2a <_strtod_l+0x52a>
 8016a4c:	f012 000f 	ands.w	r0, r2, #15
 8016a50:	d00a      	beq.n	8016a68 <_strtod_l+0x468>
 8016a52:	494a      	ldr	r1, [pc, #296]	; (8016b7c <_strtod_l+0x57c>)
 8016a54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016a58:	ed91 7b00 	vldr	d7, [r1]
 8016a5c:	ec49 8b16 	vmov	d6, r8, r9
 8016a60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016a64:	ec59 8b17 	vmov	r8, r9, d7
 8016a68:	f032 020f 	bics.w	r2, r2, #15
 8016a6c:	d04e      	beq.n	8016b0c <_strtod_l+0x50c>
 8016a6e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016a72:	dd22      	ble.n	8016aba <_strtod_l+0x4ba>
 8016a74:	2500      	movs	r5, #0
 8016a76:	462e      	mov	r6, r5
 8016a78:	9507      	str	r5, [sp, #28]
 8016a7a:	462f      	mov	r7, r5
 8016a7c:	2322      	movs	r3, #34	; 0x22
 8016a7e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016b88 <_strtod_l+0x588>
 8016a82:	6023      	str	r3, [r4, #0]
 8016a84:	f04f 0800 	mov.w	r8, #0
 8016a88:	9b07      	ldr	r3, [sp, #28]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	f43f adf3 	beq.w	8016676 <_strtod_l+0x76>
 8016a90:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016a92:	4620      	mov	r0, r4
 8016a94:	f002 fc3a 	bl	801930c <_Bfree>
 8016a98:	4639      	mov	r1, r7
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	f002 fc36 	bl	801930c <_Bfree>
 8016aa0:	4631      	mov	r1, r6
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	f002 fc32 	bl	801930c <_Bfree>
 8016aa8:	9907      	ldr	r1, [sp, #28]
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f002 fc2e 	bl	801930c <_Bfree>
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f002 fc2a 	bl	801930c <_Bfree>
 8016ab8:	e5dd      	b.n	8016676 <_strtod_l+0x76>
 8016aba:	2000      	movs	r0, #0
 8016abc:	ec49 8b17 	vmov	d7, r8, r9
 8016ac0:	4f2f      	ldr	r7, [pc, #188]	; (8016b80 <_strtod_l+0x580>)
 8016ac2:	1112      	asrs	r2, r2, #4
 8016ac4:	4601      	mov	r1, r0
 8016ac6:	2a01      	cmp	r2, #1
 8016ac8:	dc23      	bgt.n	8016b12 <_strtod_l+0x512>
 8016aca:	b108      	cbz	r0, 8016ad0 <_strtod_l+0x4d0>
 8016acc:	ec59 8b17 	vmov	r8, r9, d7
 8016ad0:	4a2b      	ldr	r2, [pc, #172]	; (8016b80 <_strtod_l+0x580>)
 8016ad2:	482c      	ldr	r0, [pc, #176]	; (8016b84 <_strtod_l+0x584>)
 8016ad4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016ad8:	ed92 7b00 	vldr	d7, [r2]
 8016adc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016ae0:	ec49 8b16 	vmov	d6, r8, r9
 8016ae4:	4a28      	ldr	r2, [pc, #160]	; (8016b88 <_strtod_l+0x588>)
 8016ae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016aea:	ee17 1a90 	vmov	r1, s15
 8016aee:	400a      	ands	r2, r1
 8016af0:	4282      	cmp	r2, r0
 8016af2:	ec59 8b17 	vmov	r8, r9, d7
 8016af6:	d8bd      	bhi.n	8016a74 <_strtod_l+0x474>
 8016af8:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016afc:	4282      	cmp	r2, r0
 8016afe:	bf86      	itte	hi
 8016b00:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8016b8c <_strtod_l+0x58c>
 8016b04:	f04f 38ff 	movhi.w	r8, #4294967295
 8016b08:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	9205      	str	r2, [sp, #20]
 8016b10:	e076      	b.n	8016c00 <_strtod_l+0x600>
 8016b12:	f012 0f01 	tst.w	r2, #1
 8016b16:	d004      	beq.n	8016b22 <_strtod_l+0x522>
 8016b18:	ed97 6b00 	vldr	d6, [r7]
 8016b1c:	2001      	movs	r0, #1
 8016b1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016b22:	3101      	adds	r1, #1
 8016b24:	1052      	asrs	r2, r2, #1
 8016b26:	3708      	adds	r7, #8
 8016b28:	e7cd      	b.n	8016ac6 <_strtod_l+0x4c6>
 8016b2a:	d0ef      	beq.n	8016b0c <_strtod_l+0x50c>
 8016b2c:	4252      	negs	r2, r2
 8016b2e:	f012 000f 	ands.w	r0, r2, #15
 8016b32:	d00a      	beq.n	8016b4a <_strtod_l+0x54a>
 8016b34:	4911      	ldr	r1, [pc, #68]	; (8016b7c <_strtod_l+0x57c>)
 8016b36:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016b3a:	ed91 7b00 	vldr	d7, [r1]
 8016b3e:	ec49 8b16 	vmov	d6, r8, r9
 8016b42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016b46:	ec59 8b17 	vmov	r8, r9, d7
 8016b4a:	1112      	asrs	r2, r2, #4
 8016b4c:	d0de      	beq.n	8016b0c <_strtod_l+0x50c>
 8016b4e:	2a1f      	cmp	r2, #31
 8016b50:	dd1e      	ble.n	8016b90 <_strtod_l+0x590>
 8016b52:	2500      	movs	r5, #0
 8016b54:	462e      	mov	r6, r5
 8016b56:	9507      	str	r5, [sp, #28]
 8016b58:	462f      	mov	r7, r5
 8016b5a:	2322      	movs	r3, #34	; 0x22
 8016b5c:	f04f 0800 	mov.w	r8, #0
 8016b60:	f04f 0900 	mov.w	r9, #0
 8016b64:	6023      	str	r3, [r4, #0]
 8016b66:	e78f      	b.n	8016a88 <_strtod_l+0x488>
 8016b68:	0801d04e 	.word	0x0801d04e
 8016b6c:	0801cf04 	.word	0x0801cf04
 8016b70:	0801d046 	.word	0x0801d046
 8016b74:	0801d080 	.word	0x0801d080
 8016b78:	0801d310 	.word	0x0801d310
 8016b7c:	0801d1f0 	.word	0x0801d1f0
 8016b80:	0801d1c8 	.word	0x0801d1c8
 8016b84:	7ca00000 	.word	0x7ca00000
 8016b88:	7ff00000 	.word	0x7ff00000
 8016b8c:	7fefffff 	.word	0x7fefffff
 8016b90:	f012 0110 	ands.w	r1, r2, #16
 8016b94:	bf18      	it	ne
 8016b96:	216a      	movne	r1, #106	; 0x6a
 8016b98:	9105      	str	r1, [sp, #20]
 8016b9a:	ec49 8b17 	vmov	d7, r8, r9
 8016b9e:	49be      	ldr	r1, [pc, #760]	; (8016e98 <_strtod_l+0x898>)
 8016ba0:	2000      	movs	r0, #0
 8016ba2:	07d7      	lsls	r7, r2, #31
 8016ba4:	d504      	bpl.n	8016bb0 <_strtod_l+0x5b0>
 8016ba6:	ed91 6b00 	vldr	d6, [r1]
 8016baa:	2001      	movs	r0, #1
 8016bac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016bb0:	1052      	asrs	r2, r2, #1
 8016bb2:	f101 0108 	add.w	r1, r1, #8
 8016bb6:	d1f4      	bne.n	8016ba2 <_strtod_l+0x5a2>
 8016bb8:	b108      	cbz	r0, 8016bbe <_strtod_l+0x5be>
 8016bba:	ec59 8b17 	vmov	r8, r9, d7
 8016bbe:	9a05      	ldr	r2, [sp, #20]
 8016bc0:	b1ba      	cbz	r2, 8016bf2 <_strtod_l+0x5f2>
 8016bc2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8016bc6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8016bca:	2a00      	cmp	r2, #0
 8016bcc:	4648      	mov	r0, r9
 8016bce:	dd10      	ble.n	8016bf2 <_strtod_l+0x5f2>
 8016bd0:	2a1f      	cmp	r2, #31
 8016bd2:	f340 812c 	ble.w	8016e2e <_strtod_l+0x82e>
 8016bd6:	2a34      	cmp	r2, #52	; 0x34
 8016bd8:	bfde      	ittt	le
 8016bda:	f04f 32ff 	movle.w	r2, #4294967295
 8016bde:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8016be2:	408a      	lslle	r2, r1
 8016be4:	f04f 0800 	mov.w	r8, #0
 8016be8:	bfcc      	ite	gt
 8016bea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016bee:	ea02 0900 	andle.w	r9, r2, r0
 8016bf2:	ec49 8b17 	vmov	d7, r8, r9
 8016bf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bfe:	d0a8      	beq.n	8016b52 <_strtod_l+0x552>
 8016c00:	9a07      	ldr	r2, [sp, #28]
 8016c02:	9200      	str	r2, [sp, #0]
 8016c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016c06:	4632      	mov	r2, r6
 8016c08:	4620      	mov	r0, r4
 8016c0a:	f002 fbe7 	bl	80193dc <__s2b>
 8016c0e:	9007      	str	r0, [sp, #28]
 8016c10:	2800      	cmp	r0, #0
 8016c12:	f43f af2f 	beq.w	8016a74 <_strtod_l+0x474>
 8016c16:	9a06      	ldr	r2, [sp, #24]
 8016c18:	2a00      	cmp	r2, #0
 8016c1a:	ebab 0305 	sub.w	r3, fp, r5
 8016c1e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016e78 <_strtod_l+0x878>
 8016c22:	bfa8      	it	ge
 8016c24:	2300      	movge	r3, #0
 8016c26:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016e80 <_strtod_l+0x880>
 8016c2a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8016e88 <_strtod_l+0x888>
 8016c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c30:	2500      	movs	r5, #0
 8016c32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c36:	930c      	str	r3, [sp, #48]	; 0x30
 8016c38:	462e      	mov	r6, r5
 8016c3a:	9b07      	ldr	r3, [sp, #28]
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	6859      	ldr	r1, [r3, #4]
 8016c40:	f002 fb24 	bl	801928c <_Balloc>
 8016c44:	4607      	mov	r7, r0
 8016c46:	2800      	cmp	r0, #0
 8016c48:	f43f af18 	beq.w	8016a7c <_strtod_l+0x47c>
 8016c4c:	9b07      	ldr	r3, [sp, #28]
 8016c4e:	691a      	ldr	r2, [r3, #16]
 8016c50:	3202      	adds	r2, #2
 8016c52:	f103 010c 	add.w	r1, r3, #12
 8016c56:	0092      	lsls	r2, r2, #2
 8016c58:	300c      	adds	r0, #12
 8016c5a:	f001 f957 	bl	8017f0c <memcpy>
 8016c5e:	ec49 8b10 	vmov	d0, r8, r9
 8016c62:	aa14      	add	r2, sp, #80	; 0x50
 8016c64:	a913      	add	r1, sp, #76	; 0x4c
 8016c66:	4620      	mov	r0, r4
 8016c68:	f002 feec 	bl	8019a44 <__d2b>
 8016c6c:	ec49 8b18 	vmov	d8, r8, r9
 8016c70:	9012      	str	r0, [sp, #72]	; 0x48
 8016c72:	2800      	cmp	r0, #0
 8016c74:	f43f af02 	beq.w	8016a7c <_strtod_l+0x47c>
 8016c78:	2101      	movs	r1, #1
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f002 fc46 	bl	801950c <__i2b>
 8016c80:	4606      	mov	r6, r0
 8016c82:	2800      	cmp	r0, #0
 8016c84:	f43f aefa 	beq.w	8016a7c <_strtod_l+0x47c>
 8016c88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c8a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	bfab      	itete	ge
 8016c90:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8016c92:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8016c94:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8016c98:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8016c9c:	bfac      	ite	ge
 8016c9e:	eb03 0b02 	addge.w	fp, r3, r2
 8016ca2:	eba2 0a03 	sublt.w	sl, r2, r3
 8016ca6:	9a05      	ldr	r2, [sp, #20]
 8016ca8:	1a9b      	subs	r3, r3, r2
 8016caa:	440b      	add	r3, r1
 8016cac:	4a7b      	ldr	r2, [pc, #492]	; (8016e9c <_strtod_l+0x89c>)
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	4293      	cmp	r3, r2
 8016cb2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8016cb6:	f280 80cd 	bge.w	8016e54 <_strtod_l+0x854>
 8016cba:	1ad2      	subs	r2, r2, r3
 8016cbc:	2a1f      	cmp	r2, #31
 8016cbe:	eba1 0102 	sub.w	r1, r1, r2
 8016cc2:	f04f 0001 	mov.w	r0, #1
 8016cc6:	f300 80b9 	bgt.w	8016e3c <_strtod_l+0x83c>
 8016cca:	fa00 f302 	lsl.w	r3, r0, r2
 8016cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	930a      	str	r3, [sp, #40]	; 0x28
 8016cd4:	eb0b 0301 	add.w	r3, fp, r1
 8016cd8:	9a05      	ldr	r2, [sp, #20]
 8016cda:	459b      	cmp	fp, r3
 8016cdc:	448a      	add	sl, r1
 8016cde:	4492      	add	sl, r2
 8016ce0:	465a      	mov	r2, fp
 8016ce2:	bfa8      	it	ge
 8016ce4:	461a      	movge	r2, r3
 8016ce6:	4552      	cmp	r2, sl
 8016ce8:	bfa8      	it	ge
 8016cea:	4652      	movge	r2, sl
 8016cec:	2a00      	cmp	r2, #0
 8016cee:	bfc2      	ittt	gt
 8016cf0:	1a9b      	subgt	r3, r3, r2
 8016cf2:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016cf6:	ebab 0b02 	subgt.w	fp, fp, r2
 8016cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cfc:	2a00      	cmp	r2, #0
 8016cfe:	dd18      	ble.n	8016d32 <_strtod_l+0x732>
 8016d00:	4631      	mov	r1, r6
 8016d02:	4620      	mov	r0, r4
 8016d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d06:	f002 fcc1 	bl	801968c <__pow5mult>
 8016d0a:	4606      	mov	r6, r0
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	f43f aeb5 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d12:	4601      	mov	r1, r0
 8016d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d16:	4620      	mov	r0, r4
 8016d18:	f002 fc0e 	bl	8019538 <__multiply>
 8016d1c:	900e      	str	r0, [sp, #56]	; 0x38
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f43f aeac 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d26:	4620      	mov	r0, r4
 8016d28:	f002 faf0 	bl	801930c <_Bfree>
 8016d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d30:	9212      	str	r2, [sp, #72]	; 0x48
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	f300 8093 	bgt.w	8016e5e <_strtod_l+0x85e>
 8016d38:	9b06      	ldr	r3, [sp, #24]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	dd08      	ble.n	8016d50 <_strtod_l+0x750>
 8016d3e:	4639      	mov	r1, r7
 8016d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d42:	4620      	mov	r0, r4
 8016d44:	f002 fca2 	bl	801968c <__pow5mult>
 8016d48:	4607      	mov	r7, r0
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	f43f ae96 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d50:	f1ba 0f00 	cmp.w	sl, #0
 8016d54:	dd08      	ble.n	8016d68 <_strtod_l+0x768>
 8016d56:	4639      	mov	r1, r7
 8016d58:	4652      	mov	r2, sl
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f002 fcf0 	bl	8019740 <__lshift>
 8016d60:	4607      	mov	r7, r0
 8016d62:	2800      	cmp	r0, #0
 8016d64:	f43f ae8a 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d68:	f1bb 0f00 	cmp.w	fp, #0
 8016d6c:	dd08      	ble.n	8016d80 <_strtod_l+0x780>
 8016d6e:	4631      	mov	r1, r6
 8016d70:	465a      	mov	r2, fp
 8016d72:	4620      	mov	r0, r4
 8016d74:	f002 fce4 	bl	8019740 <__lshift>
 8016d78:	4606      	mov	r6, r0
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	f43f ae7e 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d82:	463a      	mov	r2, r7
 8016d84:	4620      	mov	r0, r4
 8016d86:	f002 fd63 	bl	8019850 <__mdiff>
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	f43f ae75 	beq.w	8016a7c <_strtod_l+0x47c>
 8016d92:	2300      	movs	r3, #0
 8016d94:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016d98:	60c3      	str	r3, [r0, #12]
 8016d9a:	4631      	mov	r1, r6
 8016d9c:	f002 fd3c 	bl	8019818 <__mcmp>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	da7f      	bge.n	8016ea4 <_strtod_l+0x8a4>
 8016da4:	ea5a 0a08 	orrs.w	sl, sl, r8
 8016da8:	f040 80a5 	bne.w	8016ef6 <_strtod_l+0x8f6>
 8016dac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f040 80a0 	bne.w	8016ef6 <_strtod_l+0x8f6>
 8016db6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016dba:	0d1b      	lsrs	r3, r3, #20
 8016dbc:	051b      	lsls	r3, r3, #20
 8016dbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016dc2:	f240 8098 	bls.w	8016ef6 <_strtod_l+0x8f6>
 8016dc6:	696b      	ldr	r3, [r5, #20]
 8016dc8:	b91b      	cbnz	r3, 8016dd2 <_strtod_l+0x7d2>
 8016dca:	692b      	ldr	r3, [r5, #16]
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	f340 8092 	ble.w	8016ef6 <_strtod_l+0x8f6>
 8016dd2:	4629      	mov	r1, r5
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f002 fcb2 	bl	8019740 <__lshift>
 8016ddc:	4631      	mov	r1, r6
 8016dde:	4605      	mov	r5, r0
 8016de0:	f002 fd1a 	bl	8019818 <__mcmp>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	f340 8086 	ble.w	8016ef6 <_strtod_l+0x8f6>
 8016dea:	9905      	ldr	r1, [sp, #20]
 8016dec:	4a2c      	ldr	r2, [pc, #176]	; (8016ea0 <_strtod_l+0x8a0>)
 8016dee:	464b      	mov	r3, r9
 8016df0:	2900      	cmp	r1, #0
 8016df2:	f000 809f 	beq.w	8016f34 <_strtod_l+0x934>
 8016df6:	ea02 0109 	and.w	r1, r2, r9
 8016dfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016dfe:	f300 8099 	bgt.w	8016f34 <_strtod_l+0x934>
 8016e02:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016e06:	f77f aea8 	ble.w	8016b5a <_strtod_l+0x55a>
 8016e0a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016e90 <_strtod_l+0x890>
 8016e0e:	ec49 8b16 	vmov	d6, r8, r9
 8016e12:	4b23      	ldr	r3, [pc, #140]	; (8016ea0 <_strtod_l+0x8a0>)
 8016e14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016e18:	ee17 2a90 	vmov	r2, s15
 8016e1c:	4013      	ands	r3, r2
 8016e1e:	ec59 8b17 	vmov	r8, r9, d7
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f47f ae34 	bne.w	8016a90 <_strtod_l+0x490>
 8016e28:	2322      	movs	r3, #34	; 0x22
 8016e2a:	6023      	str	r3, [r4, #0]
 8016e2c:	e630      	b.n	8016a90 <_strtod_l+0x490>
 8016e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8016e32:	fa01 f202 	lsl.w	r2, r1, r2
 8016e36:	ea02 0808 	and.w	r8, r2, r8
 8016e3a:	e6da      	b.n	8016bf2 <_strtod_l+0x5f2>
 8016e3c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016e40:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016e44:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016e48:	33e2      	adds	r3, #226	; 0xe2
 8016e4a:	fa00 f303 	lsl.w	r3, r0, r3
 8016e4e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8016e52:	e73f      	b.n	8016cd4 <_strtod_l+0x6d4>
 8016e54:	2200      	movs	r2, #0
 8016e56:	2301      	movs	r3, #1
 8016e58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016e5c:	e73a      	b.n	8016cd4 <_strtod_l+0x6d4>
 8016e5e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016e60:	461a      	mov	r2, r3
 8016e62:	4620      	mov	r0, r4
 8016e64:	f002 fc6c 	bl	8019740 <__lshift>
 8016e68:	9012      	str	r0, [sp, #72]	; 0x48
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	f47f af64 	bne.w	8016d38 <_strtod_l+0x738>
 8016e70:	e604      	b.n	8016a7c <_strtod_l+0x47c>
 8016e72:	bf00      	nop
 8016e74:	f3af 8000 	nop.w
 8016e78:	94a03595 	.word	0x94a03595
 8016e7c:	3fcfffff 	.word	0x3fcfffff
 8016e80:	94a03595 	.word	0x94a03595
 8016e84:	3fdfffff 	.word	0x3fdfffff
 8016e88:	35afe535 	.word	0x35afe535
 8016e8c:	3fe00000 	.word	0x3fe00000
 8016e90:	00000000 	.word	0x00000000
 8016e94:	39500000 	.word	0x39500000
 8016e98:	0801cf18 	.word	0x0801cf18
 8016e9c:	fffffc02 	.word	0xfffffc02
 8016ea0:	7ff00000 	.word	0x7ff00000
 8016ea4:	46cb      	mov	fp, r9
 8016ea6:	d15f      	bne.n	8016f68 <_strtod_l+0x968>
 8016ea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016eac:	f1ba 0f00 	cmp.w	sl, #0
 8016eb0:	d02a      	beq.n	8016f08 <_strtod_l+0x908>
 8016eb2:	4aa7      	ldr	r2, [pc, #668]	; (8017150 <_strtod_l+0xb50>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d12b      	bne.n	8016f10 <_strtod_l+0x910>
 8016eb8:	9b05      	ldr	r3, [sp, #20]
 8016eba:	4642      	mov	r2, r8
 8016ebc:	b1fb      	cbz	r3, 8016efe <_strtod_l+0x8fe>
 8016ebe:	4ba5      	ldr	r3, [pc, #660]	; (8017154 <_strtod_l+0xb54>)
 8016ec0:	ea09 0303 	and.w	r3, r9, r3
 8016ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8016ecc:	d81a      	bhi.n	8016f04 <_strtod_l+0x904>
 8016ece:	0d1b      	lsrs	r3, r3, #20
 8016ed0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d119      	bne.n	8016f10 <_strtod_l+0x910>
 8016edc:	4b9e      	ldr	r3, [pc, #632]	; (8017158 <_strtod_l+0xb58>)
 8016ede:	459b      	cmp	fp, r3
 8016ee0:	d102      	bne.n	8016ee8 <_strtod_l+0x8e8>
 8016ee2:	3201      	adds	r2, #1
 8016ee4:	f43f adca 	beq.w	8016a7c <_strtod_l+0x47c>
 8016ee8:	4b9a      	ldr	r3, [pc, #616]	; (8017154 <_strtod_l+0xb54>)
 8016eea:	ea0b 0303 	and.w	r3, fp, r3
 8016eee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016ef2:	f04f 0800 	mov.w	r8, #0
 8016ef6:	9b05      	ldr	r3, [sp, #20]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d186      	bne.n	8016e0a <_strtod_l+0x80a>
 8016efc:	e5c8      	b.n	8016a90 <_strtod_l+0x490>
 8016efe:	f04f 33ff 	mov.w	r3, #4294967295
 8016f02:	e7e9      	b.n	8016ed8 <_strtod_l+0x8d8>
 8016f04:	460b      	mov	r3, r1
 8016f06:	e7e7      	b.n	8016ed8 <_strtod_l+0x8d8>
 8016f08:	ea53 0308 	orrs.w	r3, r3, r8
 8016f0c:	f43f af6d 	beq.w	8016dea <_strtod_l+0x7ea>
 8016f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f12:	b1cb      	cbz	r3, 8016f48 <_strtod_l+0x948>
 8016f14:	ea13 0f0b 	tst.w	r3, fp
 8016f18:	d0ed      	beq.n	8016ef6 <_strtod_l+0x8f6>
 8016f1a:	9a05      	ldr	r2, [sp, #20]
 8016f1c:	4640      	mov	r0, r8
 8016f1e:	4649      	mov	r1, r9
 8016f20:	f1ba 0f00 	cmp.w	sl, #0
 8016f24:	d014      	beq.n	8016f50 <_strtod_l+0x950>
 8016f26:	f7ff fb4f 	bl	80165c8 <sulp>
 8016f2a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8016f2e:	ec59 8b17 	vmov	r8, r9, d7
 8016f32:	e7e0      	b.n	8016ef6 <_strtod_l+0x8f6>
 8016f34:	4013      	ands	r3, r2
 8016f36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016f3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016f42:	f04f 38ff 	mov.w	r8, #4294967295
 8016f46:	e7d6      	b.n	8016ef6 <_strtod_l+0x8f6>
 8016f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f4a:	ea13 0f08 	tst.w	r3, r8
 8016f4e:	e7e3      	b.n	8016f18 <_strtod_l+0x918>
 8016f50:	f7ff fb3a 	bl	80165c8 <sulp>
 8016f54:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016f58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f60:	ec59 8b10 	vmov	r8, r9, d0
 8016f64:	d1c7      	bne.n	8016ef6 <_strtod_l+0x8f6>
 8016f66:	e5f8      	b.n	8016b5a <_strtod_l+0x55a>
 8016f68:	4631      	mov	r1, r6
 8016f6a:	4628      	mov	r0, r5
 8016f6c:	f002 fdc4 	bl	8019af8 <__ratio>
 8016f70:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016f74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f7c:	d85f      	bhi.n	801703e <_strtod_l+0xa3e>
 8016f7e:	f1ba 0f00 	cmp.w	sl, #0
 8016f82:	d166      	bne.n	8017052 <_strtod_l+0xa52>
 8016f84:	f1b8 0f00 	cmp.w	r8, #0
 8016f88:	d14d      	bne.n	8017026 <_strtod_l+0xa26>
 8016f8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f8e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d162      	bne.n	801705c <_strtod_l+0xa5c>
 8016f96:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8016f9a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa2:	d401      	bmi.n	8016fa8 <_strtod_l+0x9a8>
 8016fa4:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016fa8:	eeb1 cb4d 	vneg.f64	d12, d13
 8016fac:	4869      	ldr	r0, [pc, #420]	; (8017154 <_strtod_l+0xb54>)
 8016fae:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8017160 <_strtod_l+0xb60>
 8016fb2:	ea0b 0100 	and.w	r1, fp, r0
 8016fb6:	4561      	cmp	r1, ip
 8016fb8:	ec53 2b1c 	vmov	r2, r3, d12
 8016fbc:	d17a      	bne.n	80170b4 <_strtod_l+0xab4>
 8016fbe:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8016fc2:	ec49 8b10 	vmov	d0, r8, r9
 8016fc6:	910a      	str	r1, [sp, #40]	; 0x28
 8016fc8:	f002 fccc 	bl	8019964 <__ulp>
 8016fcc:	ec49 8b1e 	vmov	d14, r8, r9
 8016fd0:	4860      	ldr	r0, [pc, #384]	; (8017154 <_strtod_l+0xb54>)
 8016fd2:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8016fd6:	ee1e 3a90 	vmov	r3, s29
 8016fda:	4a60      	ldr	r2, [pc, #384]	; (801715c <_strtod_l+0xb5c>)
 8016fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016fde:	4018      	ands	r0, r3
 8016fe0:	4290      	cmp	r0, r2
 8016fe2:	ec59 8b1e 	vmov	r8, r9, d14
 8016fe6:	d93c      	bls.n	8017062 <_strtod_l+0xa62>
 8016fe8:	ee18 2a90 	vmov	r2, s17
 8016fec:	4b5a      	ldr	r3, [pc, #360]	; (8017158 <_strtod_l+0xb58>)
 8016fee:	429a      	cmp	r2, r3
 8016ff0:	d104      	bne.n	8016ffc <_strtod_l+0x9fc>
 8016ff2:	ee18 3a10 	vmov	r3, s16
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	f43f ad40 	beq.w	8016a7c <_strtod_l+0x47c>
 8016ffc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8017158 <_strtod_l+0xb58>
 8017000:	f04f 38ff 	mov.w	r8, #4294967295
 8017004:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017006:	4620      	mov	r0, r4
 8017008:	f002 f980 	bl	801930c <_Bfree>
 801700c:	4639      	mov	r1, r7
 801700e:	4620      	mov	r0, r4
 8017010:	f002 f97c 	bl	801930c <_Bfree>
 8017014:	4631      	mov	r1, r6
 8017016:	4620      	mov	r0, r4
 8017018:	f002 f978 	bl	801930c <_Bfree>
 801701c:	4629      	mov	r1, r5
 801701e:	4620      	mov	r0, r4
 8017020:	f002 f974 	bl	801930c <_Bfree>
 8017024:	e609      	b.n	8016c3a <_strtod_l+0x63a>
 8017026:	f1b8 0f01 	cmp.w	r8, #1
 801702a:	d103      	bne.n	8017034 <_strtod_l+0xa34>
 801702c:	f1b9 0f00 	cmp.w	r9, #0
 8017030:	f43f ad93 	beq.w	8016b5a <_strtod_l+0x55a>
 8017034:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8017038:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801703c:	e7b6      	b.n	8016fac <_strtod_l+0x9ac>
 801703e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017042:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017046:	f1ba 0f00 	cmp.w	sl, #0
 801704a:	d0ad      	beq.n	8016fa8 <_strtod_l+0x9a8>
 801704c:	eeb0 cb4d 	vmov.f64	d12, d13
 8017050:	e7ac      	b.n	8016fac <_strtod_l+0x9ac>
 8017052:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8017056:	eeb0 db4c 	vmov.f64	d13, d12
 801705a:	e7a7      	b.n	8016fac <_strtod_l+0x9ac>
 801705c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8017060:	e7a4      	b.n	8016fac <_strtod_l+0x9ac>
 8017062:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8017066:	9b05      	ldr	r3, [sp, #20]
 8017068:	46cb      	mov	fp, r9
 801706a:	2b00      	cmp	r3, #0
 801706c:	d1ca      	bne.n	8017004 <_strtod_l+0xa04>
 801706e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017072:	0d1b      	lsrs	r3, r3, #20
 8017074:	051b      	lsls	r3, r3, #20
 8017076:	4299      	cmp	r1, r3
 8017078:	d1c4      	bne.n	8017004 <_strtod_l+0xa04>
 801707a:	ec51 0b1d 	vmov	r0, r1, d13
 801707e:	f7e9 fb6b 	bl	8000758 <__aeabi_d2lz>
 8017082:	f7e9 fb23 	bl	80006cc <__aeabi_l2d>
 8017086:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801708a:	ec41 0b17 	vmov	d7, r0, r1
 801708e:	ea4b 0b08 	orr.w	fp, fp, r8
 8017092:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8017096:	ee3d db47 	vsub.f64	d13, d13, d7
 801709a:	d03c      	beq.n	8017116 <_strtod_l+0xb16>
 801709c:	eeb4 dbca 	vcmpe.f64	d13, d10
 80170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a4:	f53f acf4 	bmi.w	8016a90 <_strtod_l+0x490>
 80170a8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80170ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b0:	dda8      	ble.n	8017004 <_strtod_l+0xa04>
 80170b2:	e4ed      	b.n	8016a90 <_strtod_l+0x490>
 80170b4:	9805      	ldr	r0, [sp, #20]
 80170b6:	b1f0      	cbz	r0, 80170f6 <_strtod_l+0xaf6>
 80170b8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80170bc:	d81b      	bhi.n	80170f6 <_strtod_l+0xaf6>
 80170be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8017148 <_strtod_l+0xb48>
 80170c2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80170c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ca:	d811      	bhi.n	80170f0 <_strtod_l+0xaf0>
 80170cc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80170d0:	ee1d 3a10 	vmov	r3, s26
 80170d4:	2b01      	cmp	r3, #1
 80170d6:	bf38      	it	cc
 80170d8:	2301      	movcc	r3, #1
 80170da:	ee0d 3a10 	vmov	s26, r3
 80170de:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80170e2:	f1ba 0f00 	cmp.w	sl, #0
 80170e6:	d113      	bne.n	8017110 <_strtod_l+0xb10>
 80170e8:	eeb1 7b4d 	vneg.f64	d7, d13
 80170ec:	ec53 2b17 	vmov	r2, r3, d7
 80170f0:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80170f4:	1a43      	subs	r3, r0, r1
 80170f6:	eeb0 0b48 	vmov.f64	d0, d8
 80170fa:	ec43 2b1c 	vmov	d12, r2, r3
 80170fe:	910a      	str	r1, [sp, #40]	; 0x28
 8017100:	f002 fc30 	bl	8019964 <__ulp>
 8017104:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017106:	eeac 8b00 	vfma.f64	d8, d12, d0
 801710a:	ec59 8b18 	vmov	r8, r9, d8
 801710e:	e7aa      	b.n	8017066 <_strtod_l+0xa66>
 8017110:	eeb0 7b4d 	vmov.f64	d7, d13
 8017114:	e7ea      	b.n	80170ec <_strtod_l+0xaec>
 8017116:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801711e:	f57f af71 	bpl.w	8017004 <_strtod_l+0xa04>
 8017122:	e4b5      	b.n	8016a90 <_strtod_l+0x490>
 8017124:	2300      	movs	r3, #0
 8017126:	9308      	str	r3, [sp, #32]
 8017128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801712a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801712c:	6013      	str	r3, [r2, #0]
 801712e:	f7ff baa6 	b.w	801667e <_strtod_l+0x7e>
 8017132:	2a65      	cmp	r2, #101	; 0x65
 8017134:	f43f aba2 	beq.w	801687c <_strtod_l+0x27c>
 8017138:	2a45      	cmp	r2, #69	; 0x45
 801713a:	f43f ab9f 	beq.w	801687c <_strtod_l+0x27c>
 801713e:	2101      	movs	r1, #1
 8017140:	f7ff bbd8 	b.w	80168f4 <_strtod_l+0x2f4>
 8017144:	f3af 8000 	nop.w
 8017148:	ffc00000 	.word	0xffc00000
 801714c:	41dfffff 	.word	0x41dfffff
 8017150:	000fffff 	.word	0x000fffff
 8017154:	7ff00000 	.word	0x7ff00000
 8017158:	7fefffff 	.word	0x7fefffff
 801715c:	7c9fffff 	.word	0x7c9fffff
 8017160:	7fe00000 	.word	0x7fe00000

08017164 <strtod>:
 8017164:	460a      	mov	r2, r1
 8017166:	4601      	mov	r1, r0
 8017168:	4802      	ldr	r0, [pc, #8]	; (8017174 <strtod+0x10>)
 801716a:	4b03      	ldr	r3, [pc, #12]	; (8017178 <strtod+0x14>)
 801716c:	6800      	ldr	r0, [r0, #0]
 801716e:	f7ff ba47 	b.w	8016600 <_strtod_l>
 8017172:	bf00      	nop
 8017174:	240003c4 	.word	0x240003c4
 8017178:	2400020c 	.word	0x2400020c

0801717c <_strtol_l.constprop.0>:
 801717c:	2b01      	cmp	r3, #1
 801717e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017182:	d001      	beq.n	8017188 <_strtol_l.constprop.0+0xc>
 8017184:	2b24      	cmp	r3, #36	; 0x24
 8017186:	d906      	bls.n	8017196 <_strtol_l.constprop.0+0x1a>
 8017188:	f000 fe8e 	bl	8017ea8 <__errno>
 801718c:	2316      	movs	r3, #22
 801718e:	6003      	str	r3, [r0, #0]
 8017190:	2000      	movs	r0, #0
 8017192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017196:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801727c <_strtol_l.constprop.0+0x100>
 801719a:	460d      	mov	r5, r1
 801719c:	462e      	mov	r6, r5
 801719e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80171a6:	f017 0708 	ands.w	r7, r7, #8
 80171aa:	d1f7      	bne.n	801719c <_strtol_l.constprop.0+0x20>
 80171ac:	2c2d      	cmp	r4, #45	; 0x2d
 80171ae:	d132      	bne.n	8017216 <_strtol_l.constprop.0+0x9a>
 80171b0:	782c      	ldrb	r4, [r5, #0]
 80171b2:	2701      	movs	r7, #1
 80171b4:	1cb5      	adds	r5, r6, #2
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d05b      	beq.n	8017272 <_strtol_l.constprop.0+0xf6>
 80171ba:	2b10      	cmp	r3, #16
 80171bc:	d109      	bne.n	80171d2 <_strtol_l.constprop.0+0x56>
 80171be:	2c30      	cmp	r4, #48	; 0x30
 80171c0:	d107      	bne.n	80171d2 <_strtol_l.constprop.0+0x56>
 80171c2:	782c      	ldrb	r4, [r5, #0]
 80171c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80171c8:	2c58      	cmp	r4, #88	; 0x58
 80171ca:	d14d      	bne.n	8017268 <_strtol_l.constprop.0+0xec>
 80171cc:	786c      	ldrb	r4, [r5, #1]
 80171ce:	2310      	movs	r3, #16
 80171d0:	3502      	adds	r5, #2
 80171d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80171d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80171da:	f04f 0e00 	mov.w	lr, #0
 80171de:	fbb8 f9f3 	udiv	r9, r8, r3
 80171e2:	4676      	mov	r6, lr
 80171e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80171e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80171ec:	f1bc 0f09 	cmp.w	ip, #9
 80171f0:	d816      	bhi.n	8017220 <_strtol_l.constprop.0+0xa4>
 80171f2:	4664      	mov	r4, ip
 80171f4:	42a3      	cmp	r3, r4
 80171f6:	dd24      	ble.n	8017242 <_strtol_l.constprop.0+0xc6>
 80171f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80171fc:	d008      	beq.n	8017210 <_strtol_l.constprop.0+0x94>
 80171fe:	45b1      	cmp	r9, r6
 8017200:	d31c      	bcc.n	801723c <_strtol_l.constprop.0+0xc0>
 8017202:	d101      	bne.n	8017208 <_strtol_l.constprop.0+0x8c>
 8017204:	45a2      	cmp	sl, r4
 8017206:	db19      	blt.n	801723c <_strtol_l.constprop.0+0xc0>
 8017208:	fb06 4603 	mla	r6, r6, r3, r4
 801720c:	f04f 0e01 	mov.w	lr, #1
 8017210:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017214:	e7e8      	b.n	80171e8 <_strtol_l.constprop.0+0x6c>
 8017216:	2c2b      	cmp	r4, #43	; 0x2b
 8017218:	bf04      	itt	eq
 801721a:	782c      	ldrbeq	r4, [r5, #0]
 801721c:	1cb5      	addeq	r5, r6, #2
 801721e:	e7ca      	b.n	80171b6 <_strtol_l.constprop.0+0x3a>
 8017220:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017224:	f1bc 0f19 	cmp.w	ip, #25
 8017228:	d801      	bhi.n	801722e <_strtol_l.constprop.0+0xb2>
 801722a:	3c37      	subs	r4, #55	; 0x37
 801722c:	e7e2      	b.n	80171f4 <_strtol_l.constprop.0+0x78>
 801722e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017232:	f1bc 0f19 	cmp.w	ip, #25
 8017236:	d804      	bhi.n	8017242 <_strtol_l.constprop.0+0xc6>
 8017238:	3c57      	subs	r4, #87	; 0x57
 801723a:	e7db      	b.n	80171f4 <_strtol_l.constprop.0+0x78>
 801723c:	f04f 3eff 	mov.w	lr, #4294967295
 8017240:	e7e6      	b.n	8017210 <_strtol_l.constprop.0+0x94>
 8017242:	f1be 3fff 	cmp.w	lr, #4294967295
 8017246:	d105      	bne.n	8017254 <_strtol_l.constprop.0+0xd8>
 8017248:	2322      	movs	r3, #34	; 0x22
 801724a:	6003      	str	r3, [r0, #0]
 801724c:	4646      	mov	r6, r8
 801724e:	b942      	cbnz	r2, 8017262 <_strtol_l.constprop.0+0xe6>
 8017250:	4630      	mov	r0, r6
 8017252:	e79e      	b.n	8017192 <_strtol_l.constprop.0+0x16>
 8017254:	b107      	cbz	r7, 8017258 <_strtol_l.constprop.0+0xdc>
 8017256:	4276      	negs	r6, r6
 8017258:	2a00      	cmp	r2, #0
 801725a:	d0f9      	beq.n	8017250 <_strtol_l.constprop.0+0xd4>
 801725c:	f1be 0f00 	cmp.w	lr, #0
 8017260:	d000      	beq.n	8017264 <_strtol_l.constprop.0+0xe8>
 8017262:	1e69      	subs	r1, r5, #1
 8017264:	6011      	str	r1, [r2, #0]
 8017266:	e7f3      	b.n	8017250 <_strtol_l.constprop.0+0xd4>
 8017268:	2430      	movs	r4, #48	; 0x30
 801726a:	2b00      	cmp	r3, #0
 801726c:	d1b1      	bne.n	80171d2 <_strtol_l.constprop.0+0x56>
 801726e:	2308      	movs	r3, #8
 8017270:	e7af      	b.n	80171d2 <_strtol_l.constprop.0+0x56>
 8017272:	2c30      	cmp	r4, #48	; 0x30
 8017274:	d0a5      	beq.n	80171c2 <_strtol_l.constprop.0+0x46>
 8017276:	230a      	movs	r3, #10
 8017278:	e7ab      	b.n	80171d2 <_strtol_l.constprop.0+0x56>
 801727a:	bf00      	nop
 801727c:	0801cf41 	.word	0x0801cf41

08017280 <strtol>:
 8017280:	4613      	mov	r3, r2
 8017282:	460a      	mov	r2, r1
 8017284:	4601      	mov	r1, r0
 8017286:	4802      	ldr	r0, [pc, #8]	; (8017290 <strtol+0x10>)
 8017288:	6800      	ldr	r0, [r0, #0]
 801728a:	f7ff bf77 	b.w	801717c <_strtol_l.constprop.0>
 801728e:	bf00      	nop
 8017290:	240003c4 	.word	0x240003c4

08017294 <__cvt>:
 8017294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017296:	ed2d 8b02 	vpush	{d8}
 801729a:	eeb0 8b40 	vmov.f64	d8, d0
 801729e:	b085      	sub	sp, #20
 80172a0:	4617      	mov	r7, r2
 80172a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80172a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80172a6:	ee18 2a90 	vmov	r2, s17
 80172aa:	f025 0520 	bic.w	r5, r5, #32
 80172ae:	2a00      	cmp	r2, #0
 80172b0:	bfb6      	itet	lt
 80172b2:	222d      	movlt	r2, #45	; 0x2d
 80172b4:	2200      	movge	r2, #0
 80172b6:	eeb1 8b40 	vneglt.f64	d8, d0
 80172ba:	2d46      	cmp	r5, #70	; 0x46
 80172bc:	460c      	mov	r4, r1
 80172be:	701a      	strb	r2, [r3, #0]
 80172c0:	d004      	beq.n	80172cc <__cvt+0x38>
 80172c2:	2d45      	cmp	r5, #69	; 0x45
 80172c4:	d100      	bne.n	80172c8 <__cvt+0x34>
 80172c6:	3401      	adds	r4, #1
 80172c8:	2102      	movs	r1, #2
 80172ca:	e000      	b.n	80172ce <__cvt+0x3a>
 80172cc:	2103      	movs	r1, #3
 80172ce:	ab03      	add	r3, sp, #12
 80172d0:	9301      	str	r3, [sp, #4]
 80172d2:	ab02      	add	r3, sp, #8
 80172d4:	9300      	str	r3, [sp, #0]
 80172d6:	4622      	mov	r2, r4
 80172d8:	4633      	mov	r3, r6
 80172da:	eeb0 0b48 	vmov.f64	d0, d8
 80172de:	f000 feb3 	bl	8018048 <_dtoa_r>
 80172e2:	2d47      	cmp	r5, #71	; 0x47
 80172e4:	d101      	bne.n	80172ea <__cvt+0x56>
 80172e6:	07fb      	lsls	r3, r7, #31
 80172e8:	d51a      	bpl.n	8017320 <__cvt+0x8c>
 80172ea:	2d46      	cmp	r5, #70	; 0x46
 80172ec:	eb00 0204 	add.w	r2, r0, r4
 80172f0:	d10c      	bne.n	801730c <__cvt+0x78>
 80172f2:	7803      	ldrb	r3, [r0, #0]
 80172f4:	2b30      	cmp	r3, #48	; 0x30
 80172f6:	d107      	bne.n	8017308 <__cvt+0x74>
 80172f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80172fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017300:	bf1c      	itt	ne
 8017302:	f1c4 0401 	rsbne	r4, r4, #1
 8017306:	6034      	strne	r4, [r6, #0]
 8017308:	6833      	ldr	r3, [r6, #0]
 801730a:	441a      	add	r2, r3
 801730c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017314:	bf08      	it	eq
 8017316:	9203      	streq	r2, [sp, #12]
 8017318:	2130      	movs	r1, #48	; 0x30
 801731a:	9b03      	ldr	r3, [sp, #12]
 801731c:	4293      	cmp	r3, r2
 801731e:	d307      	bcc.n	8017330 <__cvt+0x9c>
 8017320:	9b03      	ldr	r3, [sp, #12]
 8017322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017324:	1a1b      	subs	r3, r3, r0
 8017326:	6013      	str	r3, [r2, #0]
 8017328:	b005      	add	sp, #20
 801732a:	ecbd 8b02 	vpop	{d8}
 801732e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017330:	1c5c      	adds	r4, r3, #1
 8017332:	9403      	str	r4, [sp, #12]
 8017334:	7019      	strb	r1, [r3, #0]
 8017336:	e7f0      	b.n	801731a <__cvt+0x86>

08017338 <__exponent>:
 8017338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801733a:	4603      	mov	r3, r0
 801733c:	2900      	cmp	r1, #0
 801733e:	bfb8      	it	lt
 8017340:	4249      	neglt	r1, r1
 8017342:	f803 2b02 	strb.w	r2, [r3], #2
 8017346:	bfb4      	ite	lt
 8017348:	222d      	movlt	r2, #45	; 0x2d
 801734a:	222b      	movge	r2, #43	; 0x2b
 801734c:	2909      	cmp	r1, #9
 801734e:	7042      	strb	r2, [r0, #1]
 8017350:	dd2a      	ble.n	80173a8 <__exponent+0x70>
 8017352:	f10d 0207 	add.w	r2, sp, #7
 8017356:	4617      	mov	r7, r2
 8017358:	260a      	movs	r6, #10
 801735a:	4694      	mov	ip, r2
 801735c:	fb91 f5f6 	sdiv	r5, r1, r6
 8017360:	fb06 1415 	mls	r4, r6, r5, r1
 8017364:	3430      	adds	r4, #48	; 0x30
 8017366:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801736a:	460c      	mov	r4, r1
 801736c:	2c63      	cmp	r4, #99	; 0x63
 801736e:	f102 32ff 	add.w	r2, r2, #4294967295
 8017372:	4629      	mov	r1, r5
 8017374:	dcf1      	bgt.n	801735a <__exponent+0x22>
 8017376:	3130      	adds	r1, #48	; 0x30
 8017378:	f1ac 0402 	sub.w	r4, ip, #2
 801737c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017380:	1c41      	adds	r1, r0, #1
 8017382:	4622      	mov	r2, r4
 8017384:	42ba      	cmp	r2, r7
 8017386:	d30a      	bcc.n	801739e <__exponent+0x66>
 8017388:	f10d 0209 	add.w	r2, sp, #9
 801738c:	eba2 020c 	sub.w	r2, r2, ip
 8017390:	42bc      	cmp	r4, r7
 8017392:	bf88      	it	hi
 8017394:	2200      	movhi	r2, #0
 8017396:	4413      	add	r3, r2
 8017398:	1a18      	subs	r0, r3, r0
 801739a:	b003      	add	sp, #12
 801739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801739e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80173a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80173a6:	e7ed      	b.n	8017384 <__exponent+0x4c>
 80173a8:	2330      	movs	r3, #48	; 0x30
 80173aa:	3130      	adds	r1, #48	; 0x30
 80173ac:	7083      	strb	r3, [r0, #2]
 80173ae:	70c1      	strb	r1, [r0, #3]
 80173b0:	1d03      	adds	r3, r0, #4
 80173b2:	e7f1      	b.n	8017398 <__exponent+0x60>
 80173b4:	0000      	movs	r0, r0
	...

080173b8 <_printf_float>:
 80173b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173bc:	b08b      	sub	sp, #44	; 0x2c
 80173be:	460c      	mov	r4, r1
 80173c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80173c4:	4616      	mov	r6, r2
 80173c6:	461f      	mov	r7, r3
 80173c8:	4605      	mov	r5, r0
 80173ca:	f000 fd13 	bl	8017df4 <_localeconv_r>
 80173ce:	f8d0 b000 	ldr.w	fp, [r0]
 80173d2:	4658      	mov	r0, fp
 80173d4:	f7e8 ffe4 	bl	80003a0 <strlen>
 80173d8:	2300      	movs	r3, #0
 80173da:	9308      	str	r3, [sp, #32]
 80173dc:	f8d8 3000 	ldr.w	r3, [r8]
 80173e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80173e4:	6822      	ldr	r2, [r4, #0]
 80173e6:	3307      	adds	r3, #7
 80173e8:	f023 0307 	bic.w	r3, r3, #7
 80173ec:	f103 0108 	add.w	r1, r3, #8
 80173f0:	f8c8 1000 	str.w	r1, [r8]
 80173f4:	ed93 0b00 	vldr	d0, [r3]
 80173f8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017658 <_printf_float+0x2a0>
 80173fc:	eeb0 7bc0 	vabs.f64	d7, d0
 8017400:	eeb4 7b46 	vcmp.f64	d7, d6
 8017404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017408:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801740c:	4682      	mov	sl, r0
 801740e:	dd24      	ble.n	801745a <_printf_float+0xa2>
 8017410:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017418:	d502      	bpl.n	8017420 <_printf_float+0x68>
 801741a:	232d      	movs	r3, #45	; 0x2d
 801741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017420:	498f      	ldr	r1, [pc, #572]	; (8017660 <_printf_float+0x2a8>)
 8017422:	4b90      	ldr	r3, [pc, #576]	; (8017664 <_printf_float+0x2ac>)
 8017424:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017428:	bf94      	ite	ls
 801742a:	4688      	movls	r8, r1
 801742c:	4698      	movhi	r8, r3
 801742e:	2303      	movs	r3, #3
 8017430:	6123      	str	r3, [r4, #16]
 8017432:	f022 0204 	bic.w	r2, r2, #4
 8017436:	2300      	movs	r3, #0
 8017438:	6022      	str	r2, [r4, #0]
 801743a:	9304      	str	r3, [sp, #16]
 801743c:	9700      	str	r7, [sp, #0]
 801743e:	4633      	mov	r3, r6
 8017440:	aa09      	add	r2, sp, #36	; 0x24
 8017442:	4621      	mov	r1, r4
 8017444:	4628      	mov	r0, r5
 8017446:	f000 f9d1 	bl	80177ec <_printf_common>
 801744a:	3001      	adds	r0, #1
 801744c:	f040 808a 	bne.w	8017564 <_printf_float+0x1ac>
 8017450:	f04f 30ff 	mov.w	r0, #4294967295
 8017454:	b00b      	add	sp, #44	; 0x2c
 8017456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745a:	eeb4 0b40 	vcmp.f64	d0, d0
 801745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017462:	d709      	bvc.n	8017478 <_printf_float+0xc0>
 8017464:	ee10 3a90 	vmov	r3, s1
 8017468:	2b00      	cmp	r3, #0
 801746a:	bfbc      	itt	lt
 801746c:	232d      	movlt	r3, #45	; 0x2d
 801746e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017472:	497d      	ldr	r1, [pc, #500]	; (8017668 <_printf_float+0x2b0>)
 8017474:	4b7d      	ldr	r3, [pc, #500]	; (801766c <_printf_float+0x2b4>)
 8017476:	e7d5      	b.n	8017424 <_printf_float+0x6c>
 8017478:	6863      	ldr	r3, [r4, #4]
 801747a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801747e:	9104      	str	r1, [sp, #16]
 8017480:	1c59      	adds	r1, r3, #1
 8017482:	d13c      	bne.n	80174fe <_printf_float+0x146>
 8017484:	2306      	movs	r3, #6
 8017486:	6063      	str	r3, [r4, #4]
 8017488:	2300      	movs	r3, #0
 801748a:	9303      	str	r3, [sp, #12]
 801748c:	ab08      	add	r3, sp, #32
 801748e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8017492:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017496:	ab07      	add	r3, sp, #28
 8017498:	6861      	ldr	r1, [r4, #4]
 801749a:	9300      	str	r3, [sp, #0]
 801749c:	6022      	str	r2, [r4, #0]
 801749e:	f10d 031b 	add.w	r3, sp, #27
 80174a2:	4628      	mov	r0, r5
 80174a4:	f7ff fef6 	bl	8017294 <__cvt>
 80174a8:	9b04      	ldr	r3, [sp, #16]
 80174aa:	9907      	ldr	r1, [sp, #28]
 80174ac:	2b47      	cmp	r3, #71	; 0x47
 80174ae:	4680      	mov	r8, r0
 80174b0:	d108      	bne.n	80174c4 <_printf_float+0x10c>
 80174b2:	1cc8      	adds	r0, r1, #3
 80174b4:	db02      	blt.n	80174bc <_printf_float+0x104>
 80174b6:	6863      	ldr	r3, [r4, #4]
 80174b8:	4299      	cmp	r1, r3
 80174ba:	dd41      	ble.n	8017540 <_printf_float+0x188>
 80174bc:	f1a9 0902 	sub.w	r9, r9, #2
 80174c0:	fa5f f989 	uxtb.w	r9, r9
 80174c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80174c8:	d820      	bhi.n	801750c <_printf_float+0x154>
 80174ca:	3901      	subs	r1, #1
 80174cc:	464a      	mov	r2, r9
 80174ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80174d2:	9107      	str	r1, [sp, #28]
 80174d4:	f7ff ff30 	bl	8017338 <__exponent>
 80174d8:	9a08      	ldr	r2, [sp, #32]
 80174da:	9004      	str	r0, [sp, #16]
 80174dc:	1813      	adds	r3, r2, r0
 80174de:	2a01      	cmp	r2, #1
 80174e0:	6123      	str	r3, [r4, #16]
 80174e2:	dc02      	bgt.n	80174ea <_printf_float+0x132>
 80174e4:	6822      	ldr	r2, [r4, #0]
 80174e6:	07d2      	lsls	r2, r2, #31
 80174e8:	d501      	bpl.n	80174ee <_printf_float+0x136>
 80174ea:	3301      	adds	r3, #1
 80174ec:	6123      	str	r3, [r4, #16]
 80174ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d0a2      	beq.n	801743c <_printf_float+0x84>
 80174f6:	232d      	movs	r3, #45	; 0x2d
 80174f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174fc:	e79e      	b.n	801743c <_printf_float+0x84>
 80174fe:	9904      	ldr	r1, [sp, #16]
 8017500:	2947      	cmp	r1, #71	; 0x47
 8017502:	d1c1      	bne.n	8017488 <_printf_float+0xd0>
 8017504:	2b00      	cmp	r3, #0
 8017506:	d1bf      	bne.n	8017488 <_printf_float+0xd0>
 8017508:	2301      	movs	r3, #1
 801750a:	e7bc      	b.n	8017486 <_printf_float+0xce>
 801750c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017510:	d118      	bne.n	8017544 <_printf_float+0x18c>
 8017512:	2900      	cmp	r1, #0
 8017514:	6863      	ldr	r3, [r4, #4]
 8017516:	dd0b      	ble.n	8017530 <_printf_float+0x178>
 8017518:	6121      	str	r1, [r4, #16]
 801751a:	b913      	cbnz	r3, 8017522 <_printf_float+0x16a>
 801751c:	6822      	ldr	r2, [r4, #0]
 801751e:	07d0      	lsls	r0, r2, #31
 8017520:	d502      	bpl.n	8017528 <_printf_float+0x170>
 8017522:	3301      	adds	r3, #1
 8017524:	440b      	add	r3, r1
 8017526:	6123      	str	r3, [r4, #16]
 8017528:	2300      	movs	r3, #0
 801752a:	65a1      	str	r1, [r4, #88]	; 0x58
 801752c:	9304      	str	r3, [sp, #16]
 801752e:	e7de      	b.n	80174ee <_printf_float+0x136>
 8017530:	b913      	cbnz	r3, 8017538 <_printf_float+0x180>
 8017532:	6822      	ldr	r2, [r4, #0]
 8017534:	07d2      	lsls	r2, r2, #31
 8017536:	d501      	bpl.n	801753c <_printf_float+0x184>
 8017538:	3302      	adds	r3, #2
 801753a:	e7f4      	b.n	8017526 <_printf_float+0x16e>
 801753c:	2301      	movs	r3, #1
 801753e:	e7f2      	b.n	8017526 <_printf_float+0x16e>
 8017540:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017544:	9b08      	ldr	r3, [sp, #32]
 8017546:	4299      	cmp	r1, r3
 8017548:	db05      	blt.n	8017556 <_printf_float+0x19e>
 801754a:	6823      	ldr	r3, [r4, #0]
 801754c:	6121      	str	r1, [r4, #16]
 801754e:	07d8      	lsls	r0, r3, #31
 8017550:	d5ea      	bpl.n	8017528 <_printf_float+0x170>
 8017552:	1c4b      	adds	r3, r1, #1
 8017554:	e7e7      	b.n	8017526 <_printf_float+0x16e>
 8017556:	2900      	cmp	r1, #0
 8017558:	bfd4      	ite	le
 801755a:	f1c1 0202 	rsble	r2, r1, #2
 801755e:	2201      	movgt	r2, #1
 8017560:	4413      	add	r3, r2
 8017562:	e7e0      	b.n	8017526 <_printf_float+0x16e>
 8017564:	6823      	ldr	r3, [r4, #0]
 8017566:	055a      	lsls	r2, r3, #21
 8017568:	d407      	bmi.n	801757a <_printf_float+0x1c2>
 801756a:	6923      	ldr	r3, [r4, #16]
 801756c:	4642      	mov	r2, r8
 801756e:	4631      	mov	r1, r6
 8017570:	4628      	mov	r0, r5
 8017572:	47b8      	blx	r7
 8017574:	3001      	adds	r0, #1
 8017576:	d12a      	bne.n	80175ce <_printf_float+0x216>
 8017578:	e76a      	b.n	8017450 <_printf_float+0x98>
 801757a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801757e:	f240 80e0 	bls.w	8017742 <_printf_float+0x38a>
 8017582:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017586:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801758a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801758e:	d133      	bne.n	80175f8 <_printf_float+0x240>
 8017590:	4a37      	ldr	r2, [pc, #220]	; (8017670 <_printf_float+0x2b8>)
 8017592:	2301      	movs	r3, #1
 8017594:	4631      	mov	r1, r6
 8017596:	4628      	mov	r0, r5
 8017598:	47b8      	blx	r7
 801759a:	3001      	adds	r0, #1
 801759c:	f43f af58 	beq.w	8017450 <_printf_float+0x98>
 80175a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80175a4:	429a      	cmp	r2, r3
 80175a6:	db02      	blt.n	80175ae <_printf_float+0x1f6>
 80175a8:	6823      	ldr	r3, [r4, #0]
 80175aa:	07d8      	lsls	r0, r3, #31
 80175ac:	d50f      	bpl.n	80175ce <_printf_float+0x216>
 80175ae:	4653      	mov	r3, sl
 80175b0:	465a      	mov	r2, fp
 80175b2:	4631      	mov	r1, r6
 80175b4:	4628      	mov	r0, r5
 80175b6:	47b8      	blx	r7
 80175b8:	3001      	adds	r0, #1
 80175ba:	f43f af49 	beq.w	8017450 <_printf_float+0x98>
 80175be:	f04f 0800 	mov.w	r8, #0
 80175c2:	f104 091a 	add.w	r9, r4, #26
 80175c6:	9b08      	ldr	r3, [sp, #32]
 80175c8:	3b01      	subs	r3, #1
 80175ca:	4543      	cmp	r3, r8
 80175cc:	dc09      	bgt.n	80175e2 <_printf_float+0x22a>
 80175ce:	6823      	ldr	r3, [r4, #0]
 80175d0:	079b      	lsls	r3, r3, #30
 80175d2:	f100 8106 	bmi.w	80177e2 <_printf_float+0x42a>
 80175d6:	68e0      	ldr	r0, [r4, #12]
 80175d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175da:	4298      	cmp	r0, r3
 80175dc:	bfb8      	it	lt
 80175de:	4618      	movlt	r0, r3
 80175e0:	e738      	b.n	8017454 <_printf_float+0x9c>
 80175e2:	2301      	movs	r3, #1
 80175e4:	464a      	mov	r2, r9
 80175e6:	4631      	mov	r1, r6
 80175e8:	4628      	mov	r0, r5
 80175ea:	47b8      	blx	r7
 80175ec:	3001      	adds	r0, #1
 80175ee:	f43f af2f 	beq.w	8017450 <_printf_float+0x98>
 80175f2:	f108 0801 	add.w	r8, r8, #1
 80175f6:	e7e6      	b.n	80175c6 <_printf_float+0x20e>
 80175f8:	9b07      	ldr	r3, [sp, #28]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	dc3a      	bgt.n	8017674 <_printf_float+0x2bc>
 80175fe:	4a1c      	ldr	r2, [pc, #112]	; (8017670 <_printf_float+0x2b8>)
 8017600:	2301      	movs	r3, #1
 8017602:	4631      	mov	r1, r6
 8017604:	4628      	mov	r0, r5
 8017606:	47b8      	blx	r7
 8017608:	3001      	adds	r0, #1
 801760a:	f43f af21 	beq.w	8017450 <_printf_float+0x98>
 801760e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8017612:	4313      	orrs	r3, r2
 8017614:	d102      	bne.n	801761c <_printf_float+0x264>
 8017616:	6823      	ldr	r3, [r4, #0]
 8017618:	07d9      	lsls	r1, r3, #31
 801761a:	d5d8      	bpl.n	80175ce <_printf_float+0x216>
 801761c:	4653      	mov	r3, sl
 801761e:	465a      	mov	r2, fp
 8017620:	4631      	mov	r1, r6
 8017622:	4628      	mov	r0, r5
 8017624:	47b8      	blx	r7
 8017626:	3001      	adds	r0, #1
 8017628:	f43f af12 	beq.w	8017450 <_printf_float+0x98>
 801762c:	f04f 0900 	mov.w	r9, #0
 8017630:	f104 0a1a 	add.w	sl, r4, #26
 8017634:	9b07      	ldr	r3, [sp, #28]
 8017636:	425b      	negs	r3, r3
 8017638:	454b      	cmp	r3, r9
 801763a:	dc01      	bgt.n	8017640 <_printf_float+0x288>
 801763c:	9b08      	ldr	r3, [sp, #32]
 801763e:	e795      	b.n	801756c <_printf_float+0x1b4>
 8017640:	2301      	movs	r3, #1
 8017642:	4652      	mov	r2, sl
 8017644:	4631      	mov	r1, r6
 8017646:	4628      	mov	r0, r5
 8017648:	47b8      	blx	r7
 801764a:	3001      	adds	r0, #1
 801764c:	f43f af00 	beq.w	8017450 <_printf_float+0x98>
 8017650:	f109 0901 	add.w	r9, r9, #1
 8017654:	e7ee      	b.n	8017634 <_printf_float+0x27c>
 8017656:	bf00      	nop
 8017658:	ffffffff 	.word	0xffffffff
 801765c:	7fefffff 	.word	0x7fefffff
 8017660:	0801d041 	.word	0x0801d041
 8017664:	0801d045 	.word	0x0801d045
 8017668:	0801d049 	.word	0x0801d049
 801766c:	0801d04d 	.word	0x0801d04d
 8017670:	0801d051 	.word	0x0801d051
 8017674:	9a08      	ldr	r2, [sp, #32]
 8017676:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017678:	429a      	cmp	r2, r3
 801767a:	bfa8      	it	ge
 801767c:	461a      	movge	r2, r3
 801767e:	2a00      	cmp	r2, #0
 8017680:	4691      	mov	r9, r2
 8017682:	dc38      	bgt.n	80176f6 <_printf_float+0x33e>
 8017684:	2300      	movs	r3, #0
 8017686:	9305      	str	r3, [sp, #20]
 8017688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801768c:	f104 021a 	add.w	r2, r4, #26
 8017690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017692:	9905      	ldr	r1, [sp, #20]
 8017694:	9304      	str	r3, [sp, #16]
 8017696:	eba3 0309 	sub.w	r3, r3, r9
 801769a:	428b      	cmp	r3, r1
 801769c:	dc33      	bgt.n	8017706 <_printf_float+0x34e>
 801769e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	db3c      	blt.n	8017720 <_printf_float+0x368>
 80176a6:	6823      	ldr	r3, [r4, #0]
 80176a8:	07da      	lsls	r2, r3, #31
 80176aa:	d439      	bmi.n	8017720 <_printf_float+0x368>
 80176ac:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80176b0:	eba2 0903 	sub.w	r9, r2, r3
 80176b4:	9b04      	ldr	r3, [sp, #16]
 80176b6:	1ad2      	subs	r2, r2, r3
 80176b8:	4591      	cmp	r9, r2
 80176ba:	bfa8      	it	ge
 80176bc:	4691      	movge	r9, r2
 80176be:	f1b9 0f00 	cmp.w	r9, #0
 80176c2:	dc35      	bgt.n	8017730 <_printf_float+0x378>
 80176c4:	f04f 0800 	mov.w	r8, #0
 80176c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80176cc:	f104 0a1a 	add.w	sl, r4, #26
 80176d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80176d4:	1a9b      	subs	r3, r3, r2
 80176d6:	eba3 0309 	sub.w	r3, r3, r9
 80176da:	4543      	cmp	r3, r8
 80176dc:	f77f af77 	ble.w	80175ce <_printf_float+0x216>
 80176e0:	2301      	movs	r3, #1
 80176e2:	4652      	mov	r2, sl
 80176e4:	4631      	mov	r1, r6
 80176e6:	4628      	mov	r0, r5
 80176e8:	47b8      	blx	r7
 80176ea:	3001      	adds	r0, #1
 80176ec:	f43f aeb0 	beq.w	8017450 <_printf_float+0x98>
 80176f0:	f108 0801 	add.w	r8, r8, #1
 80176f4:	e7ec      	b.n	80176d0 <_printf_float+0x318>
 80176f6:	4613      	mov	r3, r2
 80176f8:	4631      	mov	r1, r6
 80176fa:	4642      	mov	r2, r8
 80176fc:	4628      	mov	r0, r5
 80176fe:	47b8      	blx	r7
 8017700:	3001      	adds	r0, #1
 8017702:	d1bf      	bne.n	8017684 <_printf_float+0x2cc>
 8017704:	e6a4      	b.n	8017450 <_printf_float+0x98>
 8017706:	2301      	movs	r3, #1
 8017708:	4631      	mov	r1, r6
 801770a:	4628      	mov	r0, r5
 801770c:	9204      	str	r2, [sp, #16]
 801770e:	47b8      	blx	r7
 8017710:	3001      	adds	r0, #1
 8017712:	f43f ae9d 	beq.w	8017450 <_printf_float+0x98>
 8017716:	9b05      	ldr	r3, [sp, #20]
 8017718:	9a04      	ldr	r2, [sp, #16]
 801771a:	3301      	adds	r3, #1
 801771c:	9305      	str	r3, [sp, #20]
 801771e:	e7b7      	b.n	8017690 <_printf_float+0x2d8>
 8017720:	4653      	mov	r3, sl
 8017722:	465a      	mov	r2, fp
 8017724:	4631      	mov	r1, r6
 8017726:	4628      	mov	r0, r5
 8017728:	47b8      	blx	r7
 801772a:	3001      	adds	r0, #1
 801772c:	d1be      	bne.n	80176ac <_printf_float+0x2f4>
 801772e:	e68f      	b.n	8017450 <_printf_float+0x98>
 8017730:	9a04      	ldr	r2, [sp, #16]
 8017732:	464b      	mov	r3, r9
 8017734:	4442      	add	r2, r8
 8017736:	4631      	mov	r1, r6
 8017738:	4628      	mov	r0, r5
 801773a:	47b8      	blx	r7
 801773c:	3001      	adds	r0, #1
 801773e:	d1c1      	bne.n	80176c4 <_printf_float+0x30c>
 8017740:	e686      	b.n	8017450 <_printf_float+0x98>
 8017742:	9a08      	ldr	r2, [sp, #32]
 8017744:	2a01      	cmp	r2, #1
 8017746:	dc01      	bgt.n	801774c <_printf_float+0x394>
 8017748:	07db      	lsls	r3, r3, #31
 801774a:	d537      	bpl.n	80177bc <_printf_float+0x404>
 801774c:	2301      	movs	r3, #1
 801774e:	4642      	mov	r2, r8
 8017750:	4631      	mov	r1, r6
 8017752:	4628      	mov	r0, r5
 8017754:	47b8      	blx	r7
 8017756:	3001      	adds	r0, #1
 8017758:	f43f ae7a 	beq.w	8017450 <_printf_float+0x98>
 801775c:	4653      	mov	r3, sl
 801775e:	465a      	mov	r2, fp
 8017760:	4631      	mov	r1, r6
 8017762:	4628      	mov	r0, r5
 8017764:	47b8      	blx	r7
 8017766:	3001      	adds	r0, #1
 8017768:	f43f ae72 	beq.w	8017450 <_printf_float+0x98>
 801776c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017770:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017778:	9b08      	ldr	r3, [sp, #32]
 801777a:	d01a      	beq.n	80177b2 <_printf_float+0x3fa>
 801777c:	3b01      	subs	r3, #1
 801777e:	f108 0201 	add.w	r2, r8, #1
 8017782:	4631      	mov	r1, r6
 8017784:	4628      	mov	r0, r5
 8017786:	47b8      	blx	r7
 8017788:	3001      	adds	r0, #1
 801778a:	d10e      	bne.n	80177aa <_printf_float+0x3f2>
 801778c:	e660      	b.n	8017450 <_printf_float+0x98>
 801778e:	2301      	movs	r3, #1
 8017790:	464a      	mov	r2, r9
 8017792:	4631      	mov	r1, r6
 8017794:	4628      	mov	r0, r5
 8017796:	47b8      	blx	r7
 8017798:	3001      	adds	r0, #1
 801779a:	f43f ae59 	beq.w	8017450 <_printf_float+0x98>
 801779e:	f108 0801 	add.w	r8, r8, #1
 80177a2:	9b08      	ldr	r3, [sp, #32]
 80177a4:	3b01      	subs	r3, #1
 80177a6:	4543      	cmp	r3, r8
 80177a8:	dcf1      	bgt.n	801778e <_printf_float+0x3d6>
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80177b0:	e6dd      	b.n	801756e <_printf_float+0x1b6>
 80177b2:	f04f 0800 	mov.w	r8, #0
 80177b6:	f104 091a 	add.w	r9, r4, #26
 80177ba:	e7f2      	b.n	80177a2 <_printf_float+0x3ea>
 80177bc:	2301      	movs	r3, #1
 80177be:	4642      	mov	r2, r8
 80177c0:	e7df      	b.n	8017782 <_printf_float+0x3ca>
 80177c2:	2301      	movs	r3, #1
 80177c4:	464a      	mov	r2, r9
 80177c6:	4631      	mov	r1, r6
 80177c8:	4628      	mov	r0, r5
 80177ca:	47b8      	blx	r7
 80177cc:	3001      	adds	r0, #1
 80177ce:	f43f ae3f 	beq.w	8017450 <_printf_float+0x98>
 80177d2:	f108 0801 	add.w	r8, r8, #1
 80177d6:	68e3      	ldr	r3, [r4, #12]
 80177d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177da:	1a5b      	subs	r3, r3, r1
 80177dc:	4543      	cmp	r3, r8
 80177de:	dcf0      	bgt.n	80177c2 <_printf_float+0x40a>
 80177e0:	e6f9      	b.n	80175d6 <_printf_float+0x21e>
 80177e2:	f04f 0800 	mov.w	r8, #0
 80177e6:	f104 0919 	add.w	r9, r4, #25
 80177ea:	e7f4      	b.n	80177d6 <_printf_float+0x41e>

080177ec <_printf_common>:
 80177ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177f0:	4616      	mov	r6, r2
 80177f2:	4699      	mov	r9, r3
 80177f4:	688a      	ldr	r2, [r1, #8]
 80177f6:	690b      	ldr	r3, [r1, #16]
 80177f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177fc:	4293      	cmp	r3, r2
 80177fe:	bfb8      	it	lt
 8017800:	4613      	movlt	r3, r2
 8017802:	6033      	str	r3, [r6, #0]
 8017804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017808:	4607      	mov	r7, r0
 801780a:	460c      	mov	r4, r1
 801780c:	b10a      	cbz	r2, 8017812 <_printf_common+0x26>
 801780e:	3301      	adds	r3, #1
 8017810:	6033      	str	r3, [r6, #0]
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	0699      	lsls	r1, r3, #26
 8017816:	bf42      	ittt	mi
 8017818:	6833      	ldrmi	r3, [r6, #0]
 801781a:	3302      	addmi	r3, #2
 801781c:	6033      	strmi	r3, [r6, #0]
 801781e:	6825      	ldr	r5, [r4, #0]
 8017820:	f015 0506 	ands.w	r5, r5, #6
 8017824:	d106      	bne.n	8017834 <_printf_common+0x48>
 8017826:	f104 0a19 	add.w	sl, r4, #25
 801782a:	68e3      	ldr	r3, [r4, #12]
 801782c:	6832      	ldr	r2, [r6, #0]
 801782e:	1a9b      	subs	r3, r3, r2
 8017830:	42ab      	cmp	r3, r5
 8017832:	dc26      	bgt.n	8017882 <_printf_common+0x96>
 8017834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017838:	1e13      	subs	r3, r2, #0
 801783a:	6822      	ldr	r2, [r4, #0]
 801783c:	bf18      	it	ne
 801783e:	2301      	movne	r3, #1
 8017840:	0692      	lsls	r2, r2, #26
 8017842:	d42b      	bmi.n	801789c <_printf_common+0xb0>
 8017844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017848:	4649      	mov	r1, r9
 801784a:	4638      	mov	r0, r7
 801784c:	47c0      	blx	r8
 801784e:	3001      	adds	r0, #1
 8017850:	d01e      	beq.n	8017890 <_printf_common+0xa4>
 8017852:	6823      	ldr	r3, [r4, #0]
 8017854:	6922      	ldr	r2, [r4, #16]
 8017856:	f003 0306 	and.w	r3, r3, #6
 801785a:	2b04      	cmp	r3, #4
 801785c:	bf02      	ittt	eq
 801785e:	68e5      	ldreq	r5, [r4, #12]
 8017860:	6833      	ldreq	r3, [r6, #0]
 8017862:	1aed      	subeq	r5, r5, r3
 8017864:	68a3      	ldr	r3, [r4, #8]
 8017866:	bf0c      	ite	eq
 8017868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801786c:	2500      	movne	r5, #0
 801786e:	4293      	cmp	r3, r2
 8017870:	bfc4      	itt	gt
 8017872:	1a9b      	subgt	r3, r3, r2
 8017874:	18ed      	addgt	r5, r5, r3
 8017876:	2600      	movs	r6, #0
 8017878:	341a      	adds	r4, #26
 801787a:	42b5      	cmp	r5, r6
 801787c:	d11a      	bne.n	80178b4 <_printf_common+0xc8>
 801787e:	2000      	movs	r0, #0
 8017880:	e008      	b.n	8017894 <_printf_common+0xa8>
 8017882:	2301      	movs	r3, #1
 8017884:	4652      	mov	r2, sl
 8017886:	4649      	mov	r1, r9
 8017888:	4638      	mov	r0, r7
 801788a:	47c0      	blx	r8
 801788c:	3001      	adds	r0, #1
 801788e:	d103      	bne.n	8017898 <_printf_common+0xac>
 8017890:	f04f 30ff 	mov.w	r0, #4294967295
 8017894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017898:	3501      	adds	r5, #1
 801789a:	e7c6      	b.n	801782a <_printf_common+0x3e>
 801789c:	18e1      	adds	r1, r4, r3
 801789e:	1c5a      	adds	r2, r3, #1
 80178a0:	2030      	movs	r0, #48	; 0x30
 80178a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178a6:	4422      	add	r2, r4
 80178a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178b0:	3302      	adds	r3, #2
 80178b2:	e7c7      	b.n	8017844 <_printf_common+0x58>
 80178b4:	2301      	movs	r3, #1
 80178b6:	4622      	mov	r2, r4
 80178b8:	4649      	mov	r1, r9
 80178ba:	4638      	mov	r0, r7
 80178bc:	47c0      	blx	r8
 80178be:	3001      	adds	r0, #1
 80178c0:	d0e6      	beq.n	8017890 <_printf_common+0xa4>
 80178c2:	3601      	adds	r6, #1
 80178c4:	e7d9      	b.n	801787a <_printf_common+0x8e>
	...

080178c8 <_printf_i>:
 80178c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178cc:	7e0f      	ldrb	r7, [r1, #24]
 80178ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178d0:	2f78      	cmp	r7, #120	; 0x78
 80178d2:	4691      	mov	r9, r2
 80178d4:	4680      	mov	r8, r0
 80178d6:	460c      	mov	r4, r1
 80178d8:	469a      	mov	sl, r3
 80178da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80178de:	d807      	bhi.n	80178f0 <_printf_i+0x28>
 80178e0:	2f62      	cmp	r7, #98	; 0x62
 80178e2:	d80a      	bhi.n	80178fa <_printf_i+0x32>
 80178e4:	2f00      	cmp	r7, #0
 80178e6:	f000 80d4 	beq.w	8017a92 <_printf_i+0x1ca>
 80178ea:	2f58      	cmp	r7, #88	; 0x58
 80178ec:	f000 80c0 	beq.w	8017a70 <_printf_i+0x1a8>
 80178f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80178f8:	e03a      	b.n	8017970 <_printf_i+0xa8>
 80178fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80178fe:	2b15      	cmp	r3, #21
 8017900:	d8f6      	bhi.n	80178f0 <_printf_i+0x28>
 8017902:	a101      	add	r1, pc, #4	; (adr r1, 8017908 <_printf_i+0x40>)
 8017904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017908:	08017961 	.word	0x08017961
 801790c:	08017975 	.word	0x08017975
 8017910:	080178f1 	.word	0x080178f1
 8017914:	080178f1 	.word	0x080178f1
 8017918:	080178f1 	.word	0x080178f1
 801791c:	080178f1 	.word	0x080178f1
 8017920:	08017975 	.word	0x08017975
 8017924:	080178f1 	.word	0x080178f1
 8017928:	080178f1 	.word	0x080178f1
 801792c:	080178f1 	.word	0x080178f1
 8017930:	080178f1 	.word	0x080178f1
 8017934:	08017a79 	.word	0x08017a79
 8017938:	080179a1 	.word	0x080179a1
 801793c:	08017a33 	.word	0x08017a33
 8017940:	080178f1 	.word	0x080178f1
 8017944:	080178f1 	.word	0x080178f1
 8017948:	08017a9b 	.word	0x08017a9b
 801794c:	080178f1 	.word	0x080178f1
 8017950:	080179a1 	.word	0x080179a1
 8017954:	080178f1 	.word	0x080178f1
 8017958:	080178f1 	.word	0x080178f1
 801795c:	08017a3b 	.word	0x08017a3b
 8017960:	682b      	ldr	r3, [r5, #0]
 8017962:	1d1a      	adds	r2, r3, #4
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	602a      	str	r2, [r5, #0]
 8017968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801796c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017970:	2301      	movs	r3, #1
 8017972:	e09f      	b.n	8017ab4 <_printf_i+0x1ec>
 8017974:	6820      	ldr	r0, [r4, #0]
 8017976:	682b      	ldr	r3, [r5, #0]
 8017978:	0607      	lsls	r7, r0, #24
 801797a:	f103 0104 	add.w	r1, r3, #4
 801797e:	6029      	str	r1, [r5, #0]
 8017980:	d501      	bpl.n	8017986 <_printf_i+0xbe>
 8017982:	681e      	ldr	r6, [r3, #0]
 8017984:	e003      	b.n	801798e <_printf_i+0xc6>
 8017986:	0646      	lsls	r6, r0, #25
 8017988:	d5fb      	bpl.n	8017982 <_printf_i+0xba>
 801798a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801798e:	2e00      	cmp	r6, #0
 8017990:	da03      	bge.n	801799a <_printf_i+0xd2>
 8017992:	232d      	movs	r3, #45	; 0x2d
 8017994:	4276      	negs	r6, r6
 8017996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801799a:	485a      	ldr	r0, [pc, #360]	; (8017b04 <_printf_i+0x23c>)
 801799c:	230a      	movs	r3, #10
 801799e:	e012      	b.n	80179c6 <_printf_i+0xfe>
 80179a0:	682b      	ldr	r3, [r5, #0]
 80179a2:	6820      	ldr	r0, [r4, #0]
 80179a4:	1d19      	adds	r1, r3, #4
 80179a6:	6029      	str	r1, [r5, #0]
 80179a8:	0605      	lsls	r5, r0, #24
 80179aa:	d501      	bpl.n	80179b0 <_printf_i+0xe8>
 80179ac:	681e      	ldr	r6, [r3, #0]
 80179ae:	e002      	b.n	80179b6 <_printf_i+0xee>
 80179b0:	0641      	lsls	r1, r0, #25
 80179b2:	d5fb      	bpl.n	80179ac <_printf_i+0xe4>
 80179b4:	881e      	ldrh	r6, [r3, #0]
 80179b6:	4853      	ldr	r0, [pc, #332]	; (8017b04 <_printf_i+0x23c>)
 80179b8:	2f6f      	cmp	r7, #111	; 0x6f
 80179ba:	bf0c      	ite	eq
 80179bc:	2308      	moveq	r3, #8
 80179be:	230a      	movne	r3, #10
 80179c0:	2100      	movs	r1, #0
 80179c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179c6:	6865      	ldr	r5, [r4, #4]
 80179c8:	60a5      	str	r5, [r4, #8]
 80179ca:	2d00      	cmp	r5, #0
 80179cc:	bfa2      	ittt	ge
 80179ce:	6821      	ldrge	r1, [r4, #0]
 80179d0:	f021 0104 	bicge.w	r1, r1, #4
 80179d4:	6021      	strge	r1, [r4, #0]
 80179d6:	b90e      	cbnz	r6, 80179dc <_printf_i+0x114>
 80179d8:	2d00      	cmp	r5, #0
 80179da:	d04b      	beq.n	8017a74 <_printf_i+0x1ac>
 80179dc:	4615      	mov	r5, r2
 80179de:	fbb6 f1f3 	udiv	r1, r6, r3
 80179e2:	fb03 6711 	mls	r7, r3, r1, r6
 80179e6:	5dc7      	ldrb	r7, [r0, r7]
 80179e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80179ec:	4637      	mov	r7, r6
 80179ee:	42bb      	cmp	r3, r7
 80179f0:	460e      	mov	r6, r1
 80179f2:	d9f4      	bls.n	80179de <_printf_i+0x116>
 80179f4:	2b08      	cmp	r3, #8
 80179f6:	d10b      	bne.n	8017a10 <_printf_i+0x148>
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	07de      	lsls	r6, r3, #31
 80179fc:	d508      	bpl.n	8017a10 <_printf_i+0x148>
 80179fe:	6923      	ldr	r3, [r4, #16]
 8017a00:	6861      	ldr	r1, [r4, #4]
 8017a02:	4299      	cmp	r1, r3
 8017a04:	bfde      	ittt	le
 8017a06:	2330      	movle	r3, #48	; 0x30
 8017a08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a10:	1b52      	subs	r2, r2, r5
 8017a12:	6122      	str	r2, [r4, #16]
 8017a14:	f8cd a000 	str.w	sl, [sp]
 8017a18:	464b      	mov	r3, r9
 8017a1a:	aa03      	add	r2, sp, #12
 8017a1c:	4621      	mov	r1, r4
 8017a1e:	4640      	mov	r0, r8
 8017a20:	f7ff fee4 	bl	80177ec <_printf_common>
 8017a24:	3001      	adds	r0, #1
 8017a26:	d14a      	bne.n	8017abe <_printf_i+0x1f6>
 8017a28:	f04f 30ff 	mov.w	r0, #4294967295
 8017a2c:	b004      	add	sp, #16
 8017a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	f043 0320 	orr.w	r3, r3, #32
 8017a38:	6023      	str	r3, [r4, #0]
 8017a3a:	4833      	ldr	r0, [pc, #204]	; (8017b08 <_printf_i+0x240>)
 8017a3c:	2778      	movs	r7, #120	; 0x78
 8017a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a42:	6823      	ldr	r3, [r4, #0]
 8017a44:	6829      	ldr	r1, [r5, #0]
 8017a46:	061f      	lsls	r7, r3, #24
 8017a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8017a4c:	d402      	bmi.n	8017a54 <_printf_i+0x18c>
 8017a4e:	065f      	lsls	r7, r3, #25
 8017a50:	bf48      	it	mi
 8017a52:	b2b6      	uxthmi	r6, r6
 8017a54:	07df      	lsls	r7, r3, #31
 8017a56:	bf48      	it	mi
 8017a58:	f043 0320 	orrmi.w	r3, r3, #32
 8017a5c:	6029      	str	r1, [r5, #0]
 8017a5e:	bf48      	it	mi
 8017a60:	6023      	strmi	r3, [r4, #0]
 8017a62:	b91e      	cbnz	r6, 8017a6c <_printf_i+0x1a4>
 8017a64:	6823      	ldr	r3, [r4, #0]
 8017a66:	f023 0320 	bic.w	r3, r3, #32
 8017a6a:	6023      	str	r3, [r4, #0]
 8017a6c:	2310      	movs	r3, #16
 8017a6e:	e7a7      	b.n	80179c0 <_printf_i+0xf8>
 8017a70:	4824      	ldr	r0, [pc, #144]	; (8017b04 <_printf_i+0x23c>)
 8017a72:	e7e4      	b.n	8017a3e <_printf_i+0x176>
 8017a74:	4615      	mov	r5, r2
 8017a76:	e7bd      	b.n	80179f4 <_printf_i+0x12c>
 8017a78:	682b      	ldr	r3, [r5, #0]
 8017a7a:	6826      	ldr	r6, [r4, #0]
 8017a7c:	6961      	ldr	r1, [r4, #20]
 8017a7e:	1d18      	adds	r0, r3, #4
 8017a80:	6028      	str	r0, [r5, #0]
 8017a82:	0635      	lsls	r5, r6, #24
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	d501      	bpl.n	8017a8c <_printf_i+0x1c4>
 8017a88:	6019      	str	r1, [r3, #0]
 8017a8a:	e002      	b.n	8017a92 <_printf_i+0x1ca>
 8017a8c:	0670      	lsls	r0, r6, #25
 8017a8e:	d5fb      	bpl.n	8017a88 <_printf_i+0x1c0>
 8017a90:	8019      	strh	r1, [r3, #0]
 8017a92:	2300      	movs	r3, #0
 8017a94:	6123      	str	r3, [r4, #16]
 8017a96:	4615      	mov	r5, r2
 8017a98:	e7bc      	b.n	8017a14 <_printf_i+0x14c>
 8017a9a:	682b      	ldr	r3, [r5, #0]
 8017a9c:	1d1a      	adds	r2, r3, #4
 8017a9e:	602a      	str	r2, [r5, #0]
 8017aa0:	681d      	ldr	r5, [r3, #0]
 8017aa2:	6862      	ldr	r2, [r4, #4]
 8017aa4:	2100      	movs	r1, #0
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	f7e8 fc2a 	bl	8000300 <memchr>
 8017aac:	b108      	cbz	r0, 8017ab2 <_printf_i+0x1ea>
 8017aae:	1b40      	subs	r0, r0, r5
 8017ab0:	6060      	str	r0, [r4, #4]
 8017ab2:	6863      	ldr	r3, [r4, #4]
 8017ab4:	6123      	str	r3, [r4, #16]
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017abc:	e7aa      	b.n	8017a14 <_printf_i+0x14c>
 8017abe:	6923      	ldr	r3, [r4, #16]
 8017ac0:	462a      	mov	r2, r5
 8017ac2:	4649      	mov	r1, r9
 8017ac4:	4640      	mov	r0, r8
 8017ac6:	47d0      	blx	sl
 8017ac8:	3001      	adds	r0, #1
 8017aca:	d0ad      	beq.n	8017a28 <_printf_i+0x160>
 8017acc:	6823      	ldr	r3, [r4, #0]
 8017ace:	079b      	lsls	r3, r3, #30
 8017ad0:	d413      	bmi.n	8017afa <_printf_i+0x232>
 8017ad2:	68e0      	ldr	r0, [r4, #12]
 8017ad4:	9b03      	ldr	r3, [sp, #12]
 8017ad6:	4298      	cmp	r0, r3
 8017ad8:	bfb8      	it	lt
 8017ada:	4618      	movlt	r0, r3
 8017adc:	e7a6      	b.n	8017a2c <_printf_i+0x164>
 8017ade:	2301      	movs	r3, #1
 8017ae0:	4632      	mov	r2, r6
 8017ae2:	4649      	mov	r1, r9
 8017ae4:	4640      	mov	r0, r8
 8017ae6:	47d0      	blx	sl
 8017ae8:	3001      	adds	r0, #1
 8017aea:	d09d      	beq.n	8017a28 <_printf_i+0x160>
 8017aec:	3501      	adds	r5, #1
 8017aee:	68e3      	ldr	r3, [r4, #12]
 8017af0:	9903      	ldr	r1, [sp, #12]
 8017af2:	1a5b      	subs	r3, r3, r1
 8017af4:	42ab      	cmp	r3, r5
 8017af6:	dcf2      	bgt.n	8017ade <_printf_i+0x216>
 8017af8:	e7eb      	b.n	8017ad2 <_printf_i+0x20a>
 8017afa:	2500      	movs	r5, #0
 8017afc:	f104 0619 	add.w	r6, r4, #25
 8017b00:	e7f5      	b.n	8017aee <_printf_i+0x226>
 8017b02:	bf00      	nop
 8017b04:	0801d053 	.word	0x0801d053
 8017b08:	0801d064 	.word	0x0801d064

08017b0c <std>:
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	b510      	push	{r4, lr}
 8017b10:	4604      	mov	r4, r0
 8017b12:	e9c0 3300 	strd	r3, r3, [r0]
 8017b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b1a:	6083      	str	r3, [r0, #8]
 8017b1c:	8181      	strh	r1, [r0, #12]
 8017b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8017b20:	81c2      	strh	r2, [r0, #14]
 8017b22:	6183      	str	r3, [r0, #24]
 8017b24:	4619      	mov	r1, r3
 8017b26:	2208      	movs	r2, #8
 8017b28:	305c      	adds	r0, #92	; 0x5c
 8017b2a:	f000 f948 	bl	8017dbe <memset>
 8017b2e:	4b0d      	ldr	r3, [pc, #52]	; (8017b64 <std+0x58>)
 8017b30:	6263      	str	r3, [r4, #36]	; 0x24
 8017b32:	4b0d      	ldr	r3, [pc, #52]	; (8017b68 <std+0x5c>)
 8017b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b36:	4b0d      	ldr	r3, [pc, #52]	; (8017b6c <std+0x60>)
 8017b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b3a:	4b0d      	ldr	r3, [pc, #52]	; (8017b70 <std+0x64>)
 8017b3c:	6323      	str	r3, [r4, #48]	; 0x30
 8017b3e:	4b0d      	ldr	r3, [pc, #52]	; (8017b74 <std+0x68>)
 8017b40:	6224      	str	r4, [r4, #32]
 8017b42:	429c      	cmp	r4, r3
 8017b44:	d006      	beq.n	8017b54 <std+0x48>
 8017b46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017b4a:	4294      	cmp	r4, r2
 8017b4c:	d002      	beq.n	8017b54 <std+0x48>
 8017b4e:	33d0      	adds	r3, #208	; 0xd0
 8017b50:	429c      	cmp	r4, r3
 8017b52:	d105      	bne.n	8017b60 <std+0x54>
 8017b54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b5c:	f7ea b961 	b.w	8001e22 <__retarget_lock_init_recursive>
 8017b60:	bd10      	pop	{r4, pc}
 8017b62:	bf00      	nop
 8017b64:	08017d39 	.word	0x08017d39
 8017b68:	08017d5b 	.word	0x08017d5b
 8017b6c:	08017d93 	.word	0x08017d93
 8017b70:	08017db7 	.word	0x08017db7
 8017b74:	2400b424 	.word	0x2400b424

08017b78 <stdio_exit_handler>:
 8017b78:	4a02      	ldr	r2, [pc, #8]	; (8017b84 <stdio_exit_handler+0xc>)
 8017b7a:	4903      	ldr	r1, [pc, #12]	; (8017b88 <stdio_exit_handler+0x10>)
 8017b7c:	4803      	ldr	r0, [pc, #12]	; (8017b8c <stdio_exit_handler+0x14>)
 8017b7e:	f000 b869 	b.w	8017c54 <_fwalk_sglue>
 8017b82:	bf00      	nop
 8017b84:	24000200 	.word	0x24000200
 8017b88:	08019fb9 	.word	0x08019fb9
 8017b8c:	24000378 	.word	0x24000378

08017b90 <cleanup_stdio>:
 8017b90:	6841      	ldr	r1, [r0, #4]
 8017b92:	4b0c      	ldr	r3, [pc, #48]	; (8017bc4 <cleanup_stdio+0x34>)
 8017b94:	4299      	cmp	r1, r3
 8017b96:	b510      	push	{r4, lr}
 8017b98:	4604      	mov	r4, r0
 8017b9a:	d001      	beq.n	8017ba0 <cleanup_stdio+0x10>
 8017b9c:	f002 fa0c 	bl	8019fb8 <_fflush_r>
 8017ba0:	68a1      	ldr	r1, [r4, #8]
 8017ba2:	4b09      	ldr	r3, [pc, #36]	; (8017bc8 <cleanup_stdio+0x38>)
 8017ba4:	4299      	cmp	r1, r3
 8017ba6:	d002      	beq.n	8017bae <cleanup_stdio+0x1e>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f002 fa05 	bl	8019fb8 <_fflush_r>
 8017bae:	68e1      	ldr	r1, [r4, #12]
 8017bb0:	4b06      	ldr	r3, [pc, #24]	; (8017bcc <cleanup_stdio+0x3c>)
 8017bb2:	4299      	cmp	r1, r3
 8017bb4:	d004      	beq.n	8017bc0 <cleanup_stdio+0x30>
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bbc:	f002 b9fc 	b.w	8019fb8 <_fflush_r>
 8017bc0:	bd10      	pop	{r4, pc}
 8017bc2:	bf00      	nop
 8017bc4:	2400b424 	.word	0x2400b424
 8017bc8:	2400b48c 	.word	0x2400b48c
 8017bcc:	2400b4f4 	.word	0x2400b4f4

08017bd0 <global_stdio_init.part.0>:
 8017bd0:	b510      	push	{r4, lr}
 8017bd2:	4b0b      	ldr	r3, [pc, #44]	; (8017c00 <global_stdio_init.part.0+0x30>)
 8017bd4:	4c0b      	ldr	r4, [pc, #44]	; (8017c04 <global_stdio_init.part.0+0x34>)
 8017bd6:	4a0c      	ldr	r2, [pc, #48]	; (8017c08 <global_stdio_init.part.0+0x38>)
 8017bd8:	601a      	str	r2, [r3, #0]
 8017bda:	4620      	mov	r0, r4
 8017bdc:	2200      	movs	r2, #0
 8017bde:	2104      	movs	r1, #4
 8017be0:	f7ff ff94 	bl	8017b0c <std>
 8017be4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017be8:	2201      	movs	r2, #1
 8017bea:	2109      	movs	r1, #9
 8017bec:	f7ff ff8e 	bl	8017b0c <std>
 8017bf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017bf4:	2202      	movs	r2, #2
 8017bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bfa:	2112      	movs	r1, #18
 8017bfc:	f7ff bf86 	b.w	8017b0c <std>
 8017c00:	2400b55c 	.word	0x2400b55c
 8017c04:	2400b424 	.word	0x2400b424
 8017c08:	08017b79 	.word	0x08017b79

08017c0c <__sfp_lock_acquire>:
 8017c0c:	4801      	ldr	r0, [pc, #4]	; (8017c14 <__sfp_lock_acquire+0x8>)
 8017c0e:	f7ea b92e 	b.w	8001e6e <__retarget_lock_acquire_recursive>
 8017c12:	bf00      	nop
 8017c14:	24000c00 	.word	0x24000c00

08017c18 <__sfp_lock_release>:
 8017c18:	4801      	ldr	r0, [pc, #4]	; (8017c20 <__sfp_lock_release+0x8>)
 8017c1a:	f7ea b93c 	b.w	8001e96 <__retarget_lock_release_recursive>
 8017c1e:	bf00      	nop
 8017c20:	24000c00 	.word	0x24000c00

08017c24 <__sinit>:
 8017c24:	b510      	push	{r4, lr}
 8017c26:	4604      	mov	r4, r0
 8017c28:	f7ff fff0 	bl	8017c0c <__sfp_lock_acquire>
 8017c2c:	6a23      	ldr	r3, [r4, #32]
 8017c2e:	b11b      	cbz	r3, 8017c38 <__sinit+0x14>
 8017c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c34:	f7ff bff0 	b.w	8017c18 <__sfp_lock_release>
 8017c38:	4b04      	ldr	r3, [pc, #16]	; (8017c4c <__sinit+0x28>)
 8017c3a:	6223      	str	r3, [r4, #32]
 8017c3c:	4b04      	ldr	r3, [pc, #16]	; (8017c50 <__sinit+0x2c>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d1f5      	bne.n	8017c30 <__sinit+0xc>
 8017c44:	f7ff ffc4 	bl	8017bd0 <global_stdio_init.part.0>
 8017c48:	e7f2      	b.n	8017c30 <__sinit+0xc>
 8017c4a:	bf00      	nop
 8017c4c:	08017b91 	.word	0x08017b91
 8017c50:	2400b55c 	.word	0x2400b55c

08017c54 <_fwalk_sglue>:
 8017c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c58:	4607      	mov	r7, r0
 8017c5a:	4688      	mov	r8, r1
 8017c5c:	4614      	mov	r4, r2
 8017c5e:	2600      	movs	r6, #0
 8017c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c64:	f1b9 0901 	subs.w	r9, r9, #1
 8017c68:	d505      	bpl.n	8017c76 <_fwalk_sglue+0x22>
 8017c6a:	6824      	ldr	r4, [r4, #0]
 8017c6c:	2c00      	cmp	r4, #0
 8017c6e:	d1f7      	bne.n	8017c60 <_fwalk_sglue+0xc>
 8017c70:	4630      	mov	r0, r6
 8017c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c76:	89ab      	ldrh	r3, [r5, #12]
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d907      	bls.n	8017c8c <_fwalk_sglue+0x38>
 8017c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c80:	3301      	adds	r3, #1
 8017c82:	d003      	beq.n	8017c8c <_fwalk_sglue+0x38>
 8017c84:	4629      	mov	r1, r5
 8017c86:	4638      	mov	r0, r7
 8017c88:	47c0      	blx	r8
 8017c8a:	4306      	orrs	r6, r0
 8017c8c:	3568      	adds	r5, #104	; 0x68
 8017c8e:	e7e9      	b.n	8017c64 <_fwalk_sglue+0x10>

08017c90 <sniprintf>:
 8017c90:	b40c      	push	{r2, r3}
 8017c92:	b530      	push	{r4, r5, lr}
 8017c94:	4b17      	ldr	r3, [pc, #92]	; (8017cf4 <sniprintf+0x64>)
 8017c96:	1e0c      	subs	r4, r1, #0
 8017c98:	681d      	ldr	r5, [r3, #0]
 8017c9a:	b09d      	sub	sp, #116	; 0x74
 8017c9c:	da08      	bge.n	8017cb0 <sniprintf+0x20>
 8017c9e:	238b      	movs	r3, #139	; 0x8b
 8017ca0:	602b      	str	r3, [r5, #0]
 8017ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8017ca6:	b01d      	add	sp, #116	; 0x74
 8017ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017cac:	b002      	add	sp, #8
 8017cae:	4770      	bx	lr
 8017cb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017cb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cb8:	bf14      	ite	ne
 8017cba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017cbe:	4623      	moveq	r3, r4
 8017cc0:	9304      	str	r3, [sp, #16]
 8017cc2:	9307      	str	r3, [sp, #28]
 8017cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cc8:	9002      	str	r0, [sp, #8]
 8017cca:	9006      	str	r0, [sp, #24]
 8017ccc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017cd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017cd2:	ab21      	add	r3, sp, #132	; 0x84
 8017cd4:	a902      	add	r1, sp, #8
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	9301      	str	r3, [sp, #4]
 8017cda:	f001 ffe9 	bl	8019cb0 <_svfiprintf_r>
 8017cde:	1c43      	adds	r3, r0, #1
 8017ce0:	bfbc      	itt	lt
 8017ce2:	238b      	movlt	r3, #139	; 0x8b
 8017ce4:	602b      	strlt	r3, [r5, #0]
 8017ce6:	2c00      	cmp	r4, #0
 8017ce8:	d0dd      	beq.n	8017ca6 <sniprintf+0x16>
 8017cea:	9b02      	ldr	r3, [sp, #8]
 8017cec:	2200      	movs	r2, #0
 8017cee:	701a      	strb	r2, [r3, #0]
 8017cf0:	e7d9      	b.n	8017ca6 <sniprintf+0x16>
 8017cf2:	bf00      	nop
 8017cf4:	240003c4 	.word	0x240003c4

08017cf8 <siprintf>:
 8017cf8:	b40e      	push	{r1, r2, r3}
 8017cfa:	b500      	push	{lr}
 8017cfc:	b09c      	sub	sp, #112	; 0x70
 8017cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8017d00:	9002      	str	r0, [sp, #8]
 8017d02:	9006      	str	r0, [sp, #24]
 8017d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d08:	4809      	ldr	r0, [pc, #36]	; (8017d30 <siprintf+0x38>)
 8017d0a:	9107      	str	r1, [sp, #28]
 8017d0c:	9104      	str	r1, [sp, #16]
 8017d0e:	4909      	ldr	r1, [pc, #36]	; (8017d34 <siprintf+0x3c>)
 8017d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d14:	9105      	str	r1, [sp, #20]
 8017d16:	6800      	ldr	r0, [r0, #0]
 8017d18:	9301      	str	r3, [sp, #4]
 8017d1a:	a902      	add	r1, sp, #8
 8017d1c:	f001 ffc8 	bl	8019cb0 <_svfiprintf_r>
 8017d20:	9b02      	ldr	r3, [sp, #8]
 8017d22:	2200      	movs	r2, #0
 8017d24:	701a      	strb	r2, [r3, #0]
 8017d26:	b01c      	add	sp, #112	; 0x70
 8017d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d2c:	b003      	add	sp, #12
 8017d2e:	4770      	bx	lr
 8017d30:	240003c4 	.word	0x240003c4
 8017d34:	ffff0208 	.word	0xffff0208

08017d38 <__sread>:
 8017d38:	b510      	push	{r4, lr}
 8017d3a:	460c      	mov	r4, r1
 8017d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d40:	f000 f87e 	bl	8017e40 <_read_r>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	bfab      	itete	ge
 8017d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8017d4c:	181b      	addge	r3, r3, r0
 8017d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017d52:	bfac      	ite	ge
 8017d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8017d56:	81a3      	strhlt	r3, [r4, #12]
 8017d58:	bd10      	pop	{r4, pc}

08017d5a <__swrite>:
 8017d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5e:	461f      	mov	r7, r3
 8017d60:	898b      	ldrh	r3, [r1, #12]
 8017d62:	05db      	lsls	r3, r3, #23
 8017d64:	4605      	mov	r5, r0
 8017d66:	460c      	mov	r4, r1
 8017d68:	4616      	mov	r6, r2
 8017d6a:	d505      	bpl.n	8017d78 <__swrite+0x1e>
 8017d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d70:	2302      	movs	r3, #2
 8017d72:	2200      	movs	r2, #0
 8017d74:	f000 f852 	bl	8017e1c <_lseek_r>
 8017d78:	89a3      	ldrh	r3, [r4, #12]
 8017d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d82:	81a3      	strh	r3, [r4, #12]
 8017d84:	4632      	mov	r2, r6
 8017d86:	463b      	mov	r3, r7
 8017d88:	4628      	mov	r0, r5
 8017d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8e:	f000 b879 	b.w	8017e84 <_write_r>

08017d92 <__sseek>:
 8017d92:	b510      	push	{r4, lr}
 8017d94:	460c      	mov	r4, r1
 8017d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d9a:	f000 f83f 	bl	8017e1c <_lseek_r>
 8017d9e:	1c43      	adds	r3, r0, #1
 8017da0:	89a3      	ldrh	r3, [r4, #12]
 8017da2:	bf15      	itete	ne
 8017da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8017da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017dae:	81a3      	strheq	r3, [r4, #12]
 8017db0:	bf18      	it	ne
 8017db2:	81a3      	strhne	r3, [r4, #12]
 8017db4:	bd10      	pop	{r4, pc}

08017db6 <__sclose>:
 8017db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dba:	f000 b81f 	b.w	8017dfc <_close_r>

08017dbe <memset>:
 8017dbe:	4402      	add	r2, r0
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	4293      	cmp	r3, r2
 8017dc4:	d100      	bne.n	8017dc8 <memset+0xa>
 8017dc6:	4770      	bx	lr
 8017dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8017dcc:	e7f9      	b.n	8017dc2 <memset+0x4>

08017dce <strncmp>:
 8017dce:	b510      	push	{r4, lr}
 8017dd0:	b16a      	cbz	r2, 8017dee <strncmp+0x20>
 8017dd2:	3901      	subs	r1, #1
 8017dd4:	1884      	adds	r4, r0, r2
 8017dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d103      	bne.n	8017dea <strncmp+0x1c>
 8017de2:	42a0      	cmp	r0, r4
 8017de4:	d001      	beq.n	8017dea <strncmp+0x1c>
 8017de6:	2a00      	cmp	r2, #0
 8017de8:	d1f5      	bne.n	8017dd6 <strncmp+0x8>
 8017dea:	1ad0      	subs	r0, r2, r3
 8017dec:	bd10      	pop	{r4, pc}
 8017dee:	4610      	mov	r0, r2
 8017df0:	e7fc      	b.n	8017dec <strncmp+0x1e>
	...

08017df4 <_localeconv_r>:
 8017df4:	4800      	ldr	r0, [pc, #0]	; (8017df8 <_localeconv_r+0x4>)
 8017df6:	4770      	bx	lr
 8017df8:	240002fc 	.word	0x240002fc

08017dfc <_close_r>:
 8017dfc:	b538      	push	{r3, r4, r5, lr}
 8017dfe:	4d06      	ldr	r5, [pc, #24]	; (8017e18 <_close_r+0x1c>)
 8017e00:	2300      	movs	r3, #0
 8017e02:	4604      	mov	r4, r0
 8017e04:	4608      	mov	r0, r1
 8017e06:	602b      	str	r3, [r5, #0]
 8017e08:	f7e9 ff01 	bl	8001c0e <_close>
 8017e0c:	1c43      	adds	r3, r0, #1
 8017e0e:	d102      	bne.n	8017e16 <_close_r+0x1a>
 8017e10:	682b      	ldr	r3, [r5, #0]
 8017e12:	b103      	cbz	r3, 8017e16 <_close_r+0x1a>
 8017e14:	6023      	str	r3, [r4, #0]
 8017e16:	bd38      	pop	{r3, r4, r5, pc}
 8017e18:	2400b560 	.word	0x2400b560

08017e1c <_lseek_r>:
 8017e1c:	b538      	push	{r3, r4, r5, lr}
 8017e1e:	4d07      	ldr	r5, [pc, #28]	; (8017e3c <_lseek_r+0x20>)
 8017e20:	4604      	mov	r4, r0
 8017e22:	4608      	mov	r0, r1
 8017e24:	4611      	mov	r1, r2
 8017e26:	2200      	movs	r2, #0
 8017e28:	602a      	str	r2, [r5, #0]
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	f7e9 ff16 	bl	8001c5c <_lseek>
 8017e30:	1c43      	adds	r3, r0, #1
 8017e32:	d102      	bne.n	8017e3a <_lseek_r+0x1e>
 8017e34:	682b      	ldr	r3, [r5, #0]
 8017e36:	b103      	cbz	r3, 8017e3a <_lseek_r+0x1e>
 8017e38:	6023      	str	r3, [r4, #0]
 8017e3a:	bd38      	pop	{r3, r4, r5, pc}
 8017e3c:	2400b560 	.word	0x2400b560

08017e40 <_read_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	4d07      	ldr	r5, [pc, #28]	; (8017e60 <_read_r+0x20>)
 8017e44:	4604      	mov	r4, r0
 8017e46:	4608      	mov	r0, r1
 8017e48:	4611      	mov	r1, r2
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	602a      	str	r2, [r5, #0]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	f7e9 fea4 	bl	8001b9c <_read>
 8017e54:	1c43      	adds	r3, r0, #1
 8017e56:	d102      	bne.n	8017e5e <_read_r+0x1e>
 8017e58:	682b      	ldr	r3, [r5, #0]
 8017e5a:	b103      	cbz	r3, 8017e5e <_read_r+0x1e>
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	2400b560 	.word	0x2400b560

08017e64 <_sbrk_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d06      	ldr	r5, [pc, #24]	; (8017e80 <_sbrk_r+0x1c>)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	602b      	str	r3, [r5, #0]
 8017e70:	f7e9 ff02 	bl	8001c78 <_sbrk>
 8017e74:	1c43      	adds	r3, r0, #1
 8017e76:	d102      	bne.n	8017e7e <_sbrk_r+0x1a>
 8017e78:	682b      	ldr	r3, [r5, #0]
 8017e7a:	b103      	cbz	r3, 8017e7e <_sbrk_r+0x1a>
 8017e7c:	6023      	str	r3, [r4, #0]
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	2400b560 	.word	0x2400b560

08017e84 <_write_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4d07      	ldr	r5, [pc, #28]	; (8017ea4 <_write_r+0x20>)
 8017e88:	4604      	mov	r4, r0
 8017e8a:	4608      	mov	r0, r1
 8017e8c:	4611      	mov	r1, r2
 8017e8e:	2200      	movs	r2, #0
 8017e90:	602a      	str	r2, [r5, #0]
 8017e92:	461a      	mov	r2, r3
 8017e94:	f7e9 fe9f 	bl	8001bd6 <_write>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	d102      	bne.n	8017ea2 <_write_r+0x1e>
 8017e9c:	682b      	ldr	r3, [r5, #0]
 8017e9e:	b103      	cbz	r3, 8017ea2 <_write_r+0x1e>
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	bd38      	pop	{r3, r4, r5, pc}
 8017ea4:	2400b560 	.word	0x2400b560

08017ea8 <__errno>:
 8017ea8:	4b01      	ldr	r3, [pc, #4]	; (8017eb0 <__errno+0x8>)
 8017eaa:	6818      	ldr	r0, [r3, #0]
 8017eac:	4770      	bx	lr
 8017eae:	bf00      	nop
 8017eb0:	240003c4 	.word	0x240003c4

08017eb4 <__libc_init_array>:
 8017eb4:	b570      	push	{r4, r5, r6, lr}
 8017eb6:	4d0d      	ldr	r5, [pc, #52]	; (8017eec <__libc_init_array+0x38>)
 8017eb8:	4c0d      	ldr	r4, [pc, #52]	; (8017ef0 <__libc_init_array+0x3c>)
 8017eba:	1b64      	subs	r4, r4, r5
 8017ebc:	10a4      	asrs	r4, r4, #2
 8017ebe:	2600      	movs	r6, #0
 8017ec0:	42a6      	cmp	r6, r4
 8017ec2:	d109      	bne.n	8017ed8 <__libc_init_array+0x24>
 8017ec4:	4d0b      	ldr	r5, [pc, #44]	; (8017ef4 <__libc_init_array+0x40>)
 8017ec6:	4c0c      	ldr	r4, [pc, #48]	; (8017ef8 <__libc_init_array+0x44>)
 8017ec8:	f003 fd46 	bl	801b958 <_init>
 8017ecc:	1b64      	subs	r4, r4, r5
 8017ece:	10a4      	asrs	r4, r4, #2
 8017ed0:	2600      	movs	r6, #0
 8017ed2:	42a6      	cmp	r6, r4
 8017ed4:	d105      	bne.n	8017ee2 <__libc_init_array+0x2e>
 8017ed6:	bd70      	pop	{r4, r5, r6, pc}
 8017ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017edc:	4798      	blx	r3
 8017ede:	3601      	adds	r6, #1
 8017ee0:	e7ee      	b.n	8017ec0 <__libc_init_array+0xc>
 8017ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ee6:	4798      	blx	r3
 8017ee8:	3601      	adds	r6, #1
 8017eea:	e7f2      	b.n	8017ed2 <__libc_init_array+0x1e>
 8017eec:	0801dd68 	.word	0x0801dd68
 8017ef0:	0801dd68 	.word	0x0801dd68
 8017ef4:	0801dd68 	.word	0x0801dd68
 8017ef8:	0801dd6c 	.word	0x0801dd6c

08017efc <strcpy>:
 8017efc:	4603      	mov	r3, r0
 8017efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017f02:	f803 2b01 	strb.w	r2, [r3], #1
 8017f06:	2a00      	cmp	r2, #0
 8017f08:	d1f9      	bne.n	8017efe <strcpy+0x2>
 8017f0a:	4770      	bx	lr

08017f0c <memcpy>:
 8017f0c:	440a      	add	r2, r1
 8017f0e:	4291      	cmp	r1, r2
 8017f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8017f14:	d100      	bne.n	8017f18 <memcpy+0xc>
 8017f16:	4770      	bx	lr
 8017f18:	b510      	push	{r4, lr}
 8017f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f22:	4291      	cmp	r1, r2
 8017f24:	d1f9      	bne.n	8017f1a <memcpy+0xe>
 8017f26:	bd10      	pop	{r4, pc}

08017f28 <nan>:
 8017f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017f30 <nan+0x8>
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop
 8017f30:	00000000 	.word	0x00000000
 8017f34:	7ff80000 	.word	0x7ff80000

08017f38 <quorem>:
 8017f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f3c:	6903      	ldr	r3, [r0, #16]
 8017f3e:	690c      	ldr	r4, [r1, #16]
 8017f40:	42a3      	cmp	r3, r4
 8017f42:	4607      	mov	r7, r0
 8017f44:	db7e      	blt.n	8018044 <quorem+0x10c>
 8017f46:	3c01      	subs	r4, #1
 8017f48:	f101 0814 	add.w	r8, r1, #20
 8017f4c:	f100 0514 	add.w	r5, r0, #20
 8017f50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f54:	9301      	str	r3, [sp, #4]
 8017f56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f5e:	3301      	adds	r3, #1
 8017f60:	429a      	cmp	r2, r3
 8017f62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017f66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017f6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8017f6e:	d331      	bcc.n	8017fd4 <quorem+0x9c>
 8017f70:	f04f 0e00 	mov.w	lr, #0
 8017f74:	4640      	mov	r0, r8
 8017f76:	46ac      	mov	ip, r5
 8017f78:	46f2      	mov	sl, lr
 8017f7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8017f7e:	b293      	uxth	r3, r2
 8017f80:	fb06 e303 	mla	r3, r6, r3, lr
 8017f84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017f88:	0c1a      	lsrs	r2, r3, #16
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8017f90:	f8dc a000 	ldr.w	sl, [ip]
 8017f94:	fa13 f38a 	uxtah	r3, r3, sl
 8017f98:	fb06 220e 	mla	r2, r6, lr, r2
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	9b00      	ldr	r3, [sp, #0]
 8017fa0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017fa4:	b292      	uxth	r2, r2
 8017fa6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017fae:	f8bd 3000 	ldrh.w	r3, [sp]
 8017fb2:	4581      	cmp	r9, r0
 8017fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017fb8:	f84c 3b04 	str.w	r3, [ip], #4
 8017fbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017fc0:	d2db      	bcs.n	8017f7a <quorem+0x42>
 8017fc2:	f855 300b 	ldr.w	r3, [r5, fp]
 8017fc6:	b92b      	cbnz	r3, 8017fd4 <quorem+0x9c>
 8017fc8:	9b01      	ldr	r3, [sp, #4]
 8017fca:	3b04      	subs	r3, #4
 8017fcc:	429d      	cmp	r5, r3
 8017fce:	461a      	mov	r2, r3
 8017fd0:	d32c      	bcc.n	801802c <quorem+0xf4>
 8017fd2:	613c      	str	r4, [r7, #16]
 8017fd4:	4638      	mov	r0, r7
 8017fd6:	f001 fc1f 	bl	8019818 <__mcmp>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	db22      	blt.n	8018024 <quorem+0xec>
 8017fde:	3601      	adds	r6, #1
 8017fe0:	4629      	mov	r1, r5
 8017fe2:	2000      	movs	r0, #0
 8017fe4:	f858 2b04 	ldr.w	r2, [r8], #4
 8017fe8:	f8d1 c000 	ldr.w	ip, [r1]
 8017fec:	b293      	uxth	r3, r2
 8017fee:	1ac3      	subs	r3, r0, r3
 8017ff0:	0c12      	lsrs	r2, r2, #16
 8017ff2:	fa13 f38c 	uxtah	r3, r3, ip
 8017ff6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018004:	45c1      	cmp	r9, r8
 8018006:	f841 3b04 	str.w	r3, [r1], #4
 801800a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801800e:	d2e9      	bcs.n	8017fe4 <quorem+0xac>
 8018010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018018:	b922      	cbnz	r2, 8018024 <quorem+0xec>
 801801a:	3b04      	subs	r3, #4
 801801c:	429d      	cmp	r5, r3
 801801e:	461a      	mov	r2, r3
 8018020:	d30a      	bcc.n	8018038 <quorem+0x100>
 8018022:	613c      	str	r4, [r7, #16]
 8018024:	4630      	mov	r0, r6
 8018026:	b003      	add	sp, #12
 8018028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801802c:	6812      	ldr	r2, [r2, #0]
 801802e:	3b04      	subs	r3, #4
 8018030:	2a00      	cmp	r2, #0
 8018032:	d1ce      	bne.n	8017fd2 <quorem+0x9a>
 8018034:	3c01      	subs	r4, #1
 8018036:	e7c9      	b.n	8017fcc <quorem+0x94>
 8018038:	6812      	ldr	r2, [r2, #0]
 801803a:	3b04      	subs	r3, #4
 801803c:	2a00      	cmp	r2, #0
 801803e:	d1f0      	bne.n	8018022 <quorem+0xea>
 8018040:	3c01      	subs	r4, #1
 8018042:	e7eb      	b.n	801801c <quorem+0xe4>
 8018044:	2000      	movs	r0, #0
 8018046:	e7ee      	b.n	8018026 <quorem+0xee>

08018048 <_dtoa_r>:
 8018048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801804c:	ed2d 8b02 	vpush	{d8}
 8018050:	69c5      	ldr	r5, [r0, #28]
 8018052:	b091      	sub	sp, #68	; 0x44
 8018054:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018058:	ec59 8b10 	vmov	r8, r9, d0
 801805c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801805e:	9106      	str	r1, [sp, #24]
 8018060:	4606      	mov	r6, r0
 8018062:	9208      	str	r2, [sp, #32]
 8018064:	930c      	str	r3, [sp, #48]	; 0x30
 8018066:	b975      	cbnz	r5, 8018086 <_dtoa_r+0x3e>
 8018068:	2010      	movs	r0, #16
 801806a:	f7fe f9f1 	bl	8016450 <malloc>
 801806e:	4602      	mov	r2, r0
 8018070:	61f0      	str	r0, [r6, #28]
 8018072:	b920      	cbnz	r0, 801807e <_dtoa_r+0x36>
 8018074:	4ba6      	ldr	r3, [pc, #664]	; (8018310 <_dtoa_r+0x2c8>)
 8018076:	21ef      	movs	r1, #239	; 0xef
 8018078:	48a6      	ldr	r0, [pc, #664]	; (8018314 <_dtoa_r+0x2cc>)
 801807a:	f001 ffdf 	bl	801a03c <__assert_func>
 801807e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018082:	6005      	str	r5, [r0, #0]
 8018084:	60c5      	str	r5, [r0, #12]
 8018086:	69f3      	ldr	r3, [r6, #28]
 8018088:	6819      	ldr	r1, [r3, #0]
 801808a:	b151      	cbz	r1, 80180a2 <_dtoa_r+0x5a>
 801808c:	685a      	ldr	r2, [r3, #4]
 801808e:	604a      	str	r2, [r1, #4]
 8018090:	2301      	movs	r3, #1
 8018092:	4093      	lsls	r3, r2
 8018094:	608b      	str	r3, [r1, #8]
 8018096:	4630      	mov	r0, r6
 8018098:	f001 f938 	bl	801930c <_Bfree>
 801809c:	69f3      	ldr	r3, [r6, #28]
 801809e:	2200      	movs	r2, #0
 80180a0:	601a      	str	r2, [r3, #0]
 80180a2:	f1b9 0300 	subs.w	r3, r9, #0
 80180a6:	bfbb      	ittet	lt
 80180a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80180ac:	9303      	strlt	r3, [sp, #12]
 80180ae:	2300      	movge	r3, #0
 80180b0:	2201      	movlt	r2, #1
 80180b2:	bfac      	ite	ge
 80180b4:	6023      	strge	r3, [r4, #0]
 80180b6:	6022      	strlt	r2, [r4, #0]
 80180b8:	4b97      	ldr	r3, [pc, #604]	; (8018318 <_dtoa_r+0x2d0>)
 80180ba:	9c03      	ldr	r4, [sp, #12]
 80180bc:	43a3      	bics	r3, r4
 80180be:	d11c      	bne.n	80180fa <_dtoa_r+0xb2>
 80180c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80180c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80180c6:	6013      	str	r3, [r2, #0]
 80180c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80180cc:	ea53 0308 	orrs.w	r3, r3, r8
 80180d0:	f000 84fb 	beq.w	8018aca <_dtoa_r+0xa82>
 80180d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80180d6:	b963      	cbnz	r3, 80180f2 <_dtoa_r+0xaa>
 80180d8:	4b90      	ldr	r3, [pc, #576]	; (801831c <_dtoa_r+0x2d4>)
 80180da:	e020      	b.n	801811e <_dtoa_r+0xd6>
 80180dc:	4b90      	ldr	r3, [pc, #576]	; (8018320 <_dtoa_r+0x2d8>)
 80180de:	9301      	str	r3, [sp, #4]
 80180e0:	3308      	adds	r3, #8
 80180e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80180e4:	6013      	str	r3, [r2, #0]
 80180e6:	9801      	ldr	r0, [sp, #4]
 80180e8:	b011      	add	sp, #68	; 0x44
 80180ea:	ecbd 8b02 	vpop	{d8}
 80180ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f2:	4b8a      	ldr	r3, [pc, #552]	; (801831c <_dtoa_r+0x2d4>)
 80180f4:	9301      	str	r3, [sp, #4]
 80180f6:	3303      	adds	r3, #3
 80180f8:	e7f3      	b.n	80180e2 <_dtoa_r+0x9a>
 80180fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80180fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018106:	d10c      	bne.n	8018122 <_dtoa_r+0xda>
 8018108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801810a:	2301      	movs	r3, #1
 801810c:	6013      	str	r3, [r2, #0]
 801810e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018110:	2b00      	cmp	r3, #0
 8018112:	f000 84d7 	beq.w	8018ac4 <_dtoa_r+0xa7c>
 8018116:	4b83      	ldr	r3, [pc, #524]	; (8018324 <_dtoa_r+0x2dc>)
 8018118:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801811a:	6013      	str	r3, [r2, #0]
 801811c:	3b01      	subs	r3, #1
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	e7e1      	b.n	80180e6 <_dtoa_r+0x9e>
 8018122:	aa0e      	add	r2, sp, #56	; 0x38
 8018124:	a90f      	add	r1, sp, #60	; 0x3c
 8018126:	4630      	mov	r0, r6
 8018128:	eeb0 0b48 	vmov.f64	d0, d8
 801812c:	f001 fc8a 	bl	8019a44 <__d2b>
 8018130:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8018134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018136:	4605      	mov	r5, r0
 8018138:	2b00      	cmp	r3, #0
 801813a:	d046      	beq.n	80181ca <_dtoa_r+0x182>
 801813c:	eeb0 7b48 	vmov.f64	d7, d8
 8018140:	ee18 1a90 	vmov	r1, s17
 8018144:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018148:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801814c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018154:	2000      	movs	r0, #0
 8018156:	ee07 1a90 	vmov	s15, r1
 801815a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801815e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80182f8 <_dtoa_r+0x2b0>
 8018162:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018166:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018300 <_dtoa_r+0x2b8>
 801816a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801816e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8018308 <_dtoa_r+0x2c0>
 8018172:	ee07 3a90 	vmov	s15, r3
 8018176:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801817a:	eeb0 7b46 	vmov.f64	d7, d6
 801817e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018182:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018186:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801818a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801818e:	ee16 ba90 	vmov	fp, s13
 8018192:	9009      	str	r0, [sp, #36]	; 0x24
 8018194:	d508      	bpl.n	80181a8 <_dtoa_r+0x160>
 8018196:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801819a:	eeb4 6b47 	vcmp.f64	d6, d7
 801819e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a2:	bf18      	it	ne
 80181a4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80181a8:	f1bb 0f16 	cmp.w	fp, #22
 80181ac:	d82b      	bhi.n	8018206 <_dtoa_r+0x1be>
 80181ae:	495e      	ldr	r1, [pc, #376]	; (8018328 <_dtoa_r+0x2e0>)
 80181b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80181b4:	ed91 7b00 	vldr	d7, [r1]
 80181b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80181bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c0:	d501      	bpl.n	80181c6 <_dtoa_r+0x17e>
 80181c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80181c6:	2100      	movs	r1, #0
 80181c8:	e01e      	b.n	8018208 <_dtoa_r+0x1c0>
 80181ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181cc:	4413      	add	r3, r2
 80181ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80181d2:	2920      	cmp	r1, #32
 80181d4:	bfc1      	itttt	gt
 80181d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80181da:	408c      	lslgt	r4, r1
 80181dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80181e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80181e4:	bfd6      	itet	le
 80181e6:	f1c1 0120 	rsble	r1, r1, #32
 80181ea:	4321      	orrgt	r1, r4
 80181ec:	fa08 f101 	lslle.w	r1, r8, r1
 80181f0:	ee07 1a90 	vmov	s15, r1
 80181f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80181f8:	3b01      	subs	r3, #1
 80181fa:	ee17 1a90 	vmov	r1, s15
 80181fe:	2001      	movs	r0, #1
 8018200:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018204:	e7a7      	b.n	8018156 <_dtoa_r+0x10e>
 8018206:	2101      	movs	r1, #1
 8018208:	1ad2      	subs	r2, r2, r3
 801820a:	1e53      	subs	r3, r2, #1
 801820c:	9305      	str	r3, [sp, #20]
 801820e:	bf45      	ittet	mi
 8018210:	f1c2 0301 	rsbmi	r3, r2, #1
 8018214:	9304      	strmi	r3, [sp, #16]
 8018216:	2300      	movpl	r3, #0
 8018218:	2300      	movmi	r3, #0
 801821a:	bf4c      	ite	mi
 801821c:	9305      	strmi	r3, [sp, #20]
 801821e:	9304      	strpl	r3, [sp, #16]
 8018220:	f1bb 0f00 	cmp.w	fp, #0
 8018224:	910b      	str	r1, [sp, #44]	; 0x2c
 8018226:	db18      	blt.n	801825a <_dtoa_r+0x212>
 8018228:	9b05      	ldr	r3, [sp, #20]
 801822a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801822e:	445b      	add	r3, fp
 8018230:	9305      	str	r3, [sp, #20]
 8018232:	2300      	movs	r3, #0
 8018234:	9a06      	ldr	r2, [sp, #24]
 8018236:	2a09      	cmp	r2, #9
 8018238:	d848      	bhi.n	80182cc <_dtoa_r+0x284>
 801823a:	2a05      	cmp	r2, #5
 801823c:	bfc4      	itt	gt
 801823e:	3a04      	subgt	r2, #4
 8018240:	9206      	strgt	r2, [sp, #24]
 8018242:	9a06      	ldr	r2, [sp, #24]
 8018244:	f1a2 0202 	sub.w	r2, r2, #2
 8018248:	bfcc      	ite	gt
 801824a:	2400      	movgt	r4, #0
 801824c:	2401      	movle	r4, #1
 801824e:	2a03      	cmp	r2, #3
 8018250:	d847      	bhi.n	80182e2 <_dtoa_r+0x29a>
 8018252:	e8df f002 	tbb	[pc, r2]
 8018256:	2d0b      	.short	0x2d0b
 8018258:	392b      	.short	0x392b
 801825a:	9b04      	ldr	r3, [sp, #16]
 801825c:	2200      	movs	r2, #0
 801825e:	eba3 030b 	sub.w	r3, r3, fp
 8018262:	9304      	str	r3, [sp, #16]
 8018264:	920a      	str	r2, [sp, #40]	; 0x28
 8018266:	f1cb 0300 	rsb	r3, fp, #0
 801826a:	e7e3      	b.n	8018234 <_dtoa_r+0x1ec>
 801826c:	2200      	movs	r2, #0
 801826e:	9207      	str	r2, [sp, #28]
 8018270:	9a08      	ldr	r2, [sp, #32]
 8018272:	2a00      	cmp	r2, #0
 8018274:	dc38      	bgt.n	80182e8 <_dtoa_r+0x2a0>
 8018276:	f04f 0a01 	mov.w	sl, #1
 801827a:	46d1      	mov	r9, sl
 801827c:	4652      	mov	r2, sl
 801827e:	f8cd a020 	str.w	sl, [sp, #32]
 8018282:	69f7      	ldr	r7, [r6, #28]
 8018284:	2100      	movs	r1, #0
 8018286:	2004      	movs	r0, #4
 8018288:	f100 0c14 	add.w	ip, r0, #20
 801828c:	4594      	cmp	ip, r2
 801828e:	d930      	bls.n	80182f2 <_dtoa_r+0x2aa>
 8018290:	6079      	str	r1, [r7, #4]
 8018292:	4630      	mov	r0, r6
 8018294:	930d      	str	r3, [sp, #52]	; 0x34
 8018296:	f000 fff9 	bl	801928c <_Balloc>
 801829a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801829c:	9001      	str	r0, [sp, #4]
 801829e:	4602      	mov	r2, r0
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d145      	bne.n	8018330 <_dtoa_r+0x2e8>
 80182a4:	4b21      	ldr	r3, [pc, #132]	; (801832c <_dtoa_r+0x2e4>)
 80182a6:	f240 11af 	movw	r1, #431	; 0x1af
 80182aa:	e6e5      	b.n	8018078 <_dtoa_r+0x30>
 80182ac:	2201      	movs	r2, #1
 80182ae:	e7de      	b.n	801826e <_dtoa_r+0x226>
 80182b0:	2200      	movs	r2, #0
 80182b2:	9207      	str	r2, [sp, #28]
 80182b4:	9a08      	ldr	r2, [sp, #32]
 80182b6:	eb0b 0a02 	add.w	sl, fp, r2
 80182ba:	f10a 0901 	add.w	r9, sl, #1
 80182be:	464a      	mov	r2, r9
 80182c0:	2a01      	cmp	r2, #1
 80182c2:	bfb8      	it	lt
 80182c4:	2201      	movlt	r2, #1
 80182c6:	e7dc      	b.n	8018282 <_dtoa_r+0x23a>
 80182c8:	2201      	movs	r2, #1
 80182ca:	e7f2      	b.n	80182b2 <_dtoa_r+0x26a>
 80182cc:	2401      	movs	r4, #1
 80182ce:	2200      	movs	r2, #0
 80182d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80182d4:	f04f 3aff 	mov.w	sl, #4294967295
 80182d8:	2100      	movs	r1, #0
 80182da:	46d1      	mov	r9, sl
 80182dc:	2212      	movs	r2, #18
 80182de:	9108      	str	r1, [sp, #32]
 80182e0:	e7cf      	b.n	8018282 <_dtoa_r+0x23a>
 80182e2:	2201      	movs	r2, #1
 80182e4:	9207      	str	r2, [sp, #28]
 80182e6:	e7f5      	b.n	80182d4 <_dtoa_r+0x28c>
 80182e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80182ec:	46d1      	mov	r9, sl
 80182ee:	4652      	mov	r2, sl
 80182f0:	e7c7      	b.n	8018282 <_dtoa_r+0x23a>
 80182f2:	3101      	adds	r1, #1
 80182f4:	0040      	lsls	r0, r0, #1
 80182f6:	e7c7      	b.n	8018288 <_dtoa_r+0x240>
 80182f8:	636f4361 	.word	0x636f4361
 80182fc:	3fd287a7 	.word	0x3fd287a7
 8018300:	8b60c8b3 	.word	0x8b60c8b3
 8018304:	3fc68a28 	.word	0x3fc68a28
 8018308:	509f79fb 	.word	0x509f79fb
 801830c:	3fd34413 	.word	0x3fd34413
 8018310:	0801d08a 	.word	0x0801d08a
 8018314:	0801d0a1 	.word	0x0801d0a1
 8018318:	7ff00000 	.word	0x7ff00000
 801831c:	0801d086 	.word	0x0801d086
 8018320:	0801d07d 	.word	0x0801d07d
 8018324:	0801d052 	.word	0x0801d052
 8018328:	0801d1f0 	.word	0x0801d1f0
 801832c:	0801d0f9 	.word	0x0801d0f9
 8018330:	69f2      	ldr	r2, [r6, #28]
 8018332:	9901      	ldr	r1, [sp, #4]
 8018334:	6011      	str	r1, [r2, #0]
 8018336:	f1b9 0f0e 	cmp.w	r9, #14
 801833a:	d86c      	bhi.n	8018416 <_dtoa_r+0x3ce>
 801833c:	2c00      	cmp	r4, #0
 801833e:	d06a      	beq.n	8018416 <_dtoa_r+0x3ce>
 8018340:	f1bb 0f00 	cmp.w	fp, #0
 8018344:	f340 80a0 	ble.w	8018488 <_dtoa_r+0x440>
 8018348:	4ac1      	ldr	r2, [pc, #772]	; (8018650 <_dtoa_r+0x608>)
 801834a:	f00b 010f 	and.w	r1, fp, #15
 801834e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018352:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8018356:	ed92 7b00 	vldr	d7, [r2]
 801835a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801835e:	f000 8087 	beq.w	8018470 <_dtoa_r+0x428>
 8018362:	49bc      	ldr	r1, [pc, #752]	; (8018654 <_dtoa_r+0x60c>)
 8018364:	ed91 6b08 	vldr	d6, [r1, #32]
 8018368:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801836c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018370:	f002 020f 	and.w	r2, r2, #15
 8018374:	2103      	movs	r1, #3
 8018376:	48b7      	ldr	r0, [pc, #732]	; (8018654 <_dtoa_r+0x60c>)
 8018378:	2a00      	cmp	r2, #0
 801837a:	d17b      	bne.n	8018474 <_dtoa_r+0x42c>
 801837c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018380:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018384:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801838a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801838e:	2a00      	cmp	r2, #0
 8018390:	f000 80a0 	beq.w	80184d4 <_dtoa_r+0x48c>
 8018394:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018398:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a0:	f140 8098 	bpl.w	80184d4 <_dtoa_r+0x48c>
 80183a4:	f1b9 0f00 	cmp.w	r9, #0
 80183a8:	f000 8094 	beq.w	80184d4 <_dtoa_r+0x48c>
 80183ac:	f1ba 0f00 	cmp.w	sl, #0
 80183b0:	dd2f      	ble.n	8018412 <_dtoa_r+0x3ca>
 80183b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80183b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80183be:	f10b 32ff 	add.w	r2, fp, #4294967295
 80183c2:	3101      	adds	r1, #1
 80183c4:	4654      	mov	r4, sl
 80183c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80183ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80183ce:	ee07 1a90 	vmov	s15, r1
 80183d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80183d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80183da:	ee15 7a90 	vmov	r7, s11
 80183de:	ec51 0b15 	vmov	r0, r1, d5
 80183e2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80183e6:	2c00      	cmp	r4, #0
 80183e8:	d177      	bne.n	80184da <_dtoa_r+0x492>
 80183ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80183ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80183f2:	ec41 0b17 	vmov	d7, r0, r1
 80183f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80183fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183fe:	f300 826a 	bgt.w	80188d6 <_dtoa_r+0x88e>
 8018402:	eeb1 7b47 	vneg.f64	d7, d7
 8018406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801840e:	f100 8260 	bmi.w	80188d2 <_dtoa_r+0x88a>
 8018412:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018418:	2a00      	cmp	r2, #0
 801841a:	f2c0 811d 	blt.w	8018658 <_dtoa_r+0x610>
 801841e:	f1bb 0f0e 	cmp.w	fp, #14
 8018422:	f300 8119 	bgt.w	8018658 <_dtoa_r+0x610>
 8018426:	4b8a      	ldr	r3, [pc, #552]	; (8018650 <_dtoa_r+0x608>)
 8018428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801842c:	ed93 6b00 	vldr	d6, [r3]
 8018430:	9b08      	ldr	r3, [sp, #32]
 8018432:	2b00      	cmp	r3, #0
 8018434:	f280 80b7 	bge.w	80185a6 <_dtoa_r+0x55e>
 8018438:	f1b9 0f00 	cmp.w	r9, #0
 801843c:	f300 80b3 	bgt.w	80185a6 <_dtoa_r+0x55e>
 8018440:	f040 8246 	bne.w	80188d0 <_dtoa_r+0x888>
 8018444:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018448:	ee26 6b07 	vmul.f64	d6, d6, d7
 801844c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018450:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018458:	464c      	mov	r4, r9
 801845a:	464f      	mov	r7, r9
 801845c:	f280 821c 	bge.w	8018898 <_dtoa_r+0x850>
 8018460:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018464:	2331      	movs	r3, #49	; 0x31
 8018466:	f808 3b01 	strb.w	r3, [r8], #1
 801846a:	f10b 0b01 	add.w	fp, fp, #1
 801846e:	e218      	b.n	80188a2 <_dtoa_r+0x85a>
 8018470:	2102      	movs	r1, #2
 8018472:	e780      	b.n	8018376 <_dtoa_r+0x32e>
 8018474:	07d4      	lsls	r4, r2, #31
 8018476:	d504      	bpl.n	8018482 <_dtoa_r+0x43a>
 8018478:	ed90 6b00 	vldr	d6, [r0]
 801847c:	3101      	adds	r1, #1
 801847e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018482:	1052      	asrs	r2, r2, #1
 8018484:	3008      	adds	r0, #8
 8018486:	e777      	b.n	8018378 <_dtoa_r+0x330>
 8018488:	d022      	beq.n	80184d0 <_dtoa_r+0x488>
 801848a:	f1cb 0200 	rsb	r2, fp, #0
 801848e:	4970      	ldr	r1, [pc, #448]	; (8018650 <_dtoa_r+0x608>)
 8018490:	f002 000f 	and.w	r0, r2, #15
 8018494:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018498:	ed91 7b00 	vldr	d7, [r1]
 801849c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80184a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184a4:	486b      	ldr	r0, [pc, #428]	; (8018654 <_dtoa_r+0x60c>)
 80184a6:	1112      	asrs	r2, r2, #4
 80184a8:	2400      	movs	r4, #0
 80184aa:	2102      	movs	r1, #2
 80184ac:	b92a      	cbnz	r2, 80184ba <_dtoa_r+0x472>
 80184ae:	2c00      	cmp	r4, #0
 80184b0:	f43f af6a 	beq.w	8018388 <_dtoa_r+0x340>
 80184b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184b8:	e766      	b.n	8018388 <_dtoa_r+0x340>
 80184ba:	07d7      	lsls	r7, r2, #31
 80184bc:	d505      	bpl.n	80184ca <_dtoa_r+0x482>
 80184be:	ed90 6b00 	vldr	d6, [r0]
 80184c2:	3101      	adds	r1, #1
 80184c4:	2401      	movs	r4, #1
 80184c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184ca:	1052      	asrs	r2, r2, #1
 80184cc:	3008      	adds	r0, #8
 80184ce:	e7ed      	b.n	80184ac <_dtoa_r+0x464>
 80184d0:	2102      	movs	r1, #2
 80184d2:	e759      	b.n	8018388 <_dtoa_r+0x340>
 80184d4:	465a      	mov	r2, fp
 80184d6:	464c      	mov	r4, r9
 80184d8:	e775      	b.n	80183c6 <_dtoa_r+0x37e>
 80184da:	ec41 0b17 	vmov	d7, r0, r1
 80184de:	495c      	ldr	r1, [pc, #368]	; (8018650 <_dtoa_r+0x608>)
 80184e0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80184e4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80184e8:	9901      	ldr	r1, [sp, #4]
 80184ea:	440c      	add	r4, r1
 80184ec:	9907      	ldr	r1, [sp, #28]
 80184ee:	b351      	cbz	r1, 8018546 <_dtoa_r+0x4fe>
 80184f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80184f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80184f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80184fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018504:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018508:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801850c:	ee14 1a90 	vmov	r1, s9
 8018510:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018514:	3130      	adds	r1, #48	; 0x30
 8018516:	ee36 6b45 	vsub.f64	d6, d6, d5
 801851a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018522:	f808 1b01 	strb.w	r1, [r8], #1
 8018526:	d439      	bmi.n	801859c <_dtoa_r+0x554>
 8018528:	ee32 5b46 	vsub.f64	d5, d2, d6
 801852c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018534:	d472      	bmi.n	801861c <_dtoa_r+0x5d4>
 8018536:	45a0      	cmp	r8, r4
 8018538:	f43f af6b 	beq.w	8018412 <_dtoa_r+0x3ca>
 801853c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018540:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018544:	e7e0      	b.n	8018508 <_dtoa_r+0x4c0>
 8018546:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801854a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801854e:	4620      	mov	r0, r4
 8018550:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018554:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018558:	ee14 1a90 	vmov	r1, s9
 801855c:	3130      	adds	r1, #48	; 0x30
 801855e:	f808 1b01 	strb.w	r1, [r8], #1
 8018562:	45a0      	cmp	r8, r4
 8018564:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018568:	ee36 6b45 	vsub.f64	d6, d6, d5
 801856c:	d118      	bne.n	80185a0 <_dtoa_r+0x558>
 801856e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018572:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018576:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857e:	dc4d      	bgt.n	801861c <_dtoa_r+0x5d4>
 8018580:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018584:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801858c:	f57f af41 	bpl.w	8018412 <_dtoa_r+0x3ca>
 8018590:	4680      	mov	r8, r0
 8018592:	3801      	subs	r0, #1
 8018594:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018598:	2b30      	cmp	r3, #48	; 0x30
 801859a:	d0f9      	beq.n	8018590 <_dtoa_r+0x548>
 801859c:	4693      	mov	fp, r2
 801859e:	e02a      	b.n	80185f6 <_dtoa_r+0x5ae>
 80185a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80185a4:	e7d6      	b.n	8018554 <_dtoa_r+0x50c>
 80185a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80185aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80185ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80185b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80185b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80185ba:	ee15 3a10 	vmov	r3, s10
 80185be:	3330      	adds	r3, #48	; 0x30
 80185c0:	f808 3b01 	strb.w	r3, [r8], #1
 80185c4:	9b01      	ldr	r3, [sp, #4]
 80185c6:	eba8 0303 	sub.w	r3, r8, r3
 80185ca:	4599      	cmp	r9, r3
 80185cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80185d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80185d4:	d133      	bne.n	801863e <_dtoa_r+0x5f6>
 80185d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80185da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80185de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e2:	dc1a      	bgt.n	801861a <_dtoa_r+0x5d2>
 80185e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80185e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ec:	d103      	bne.n	80185f6 <_dtoa_r+0x5ae>
 80185ee:	ee15 3a10 	vmov	r3, s10
 80185f2:	07d9      	lsls	r1, r3, #31
 80185f4:	d411      	bmi.n	801861a <_dtoa_r+0x5d2>
 80185f6:	4629      	mov	r1, r5
 80185f8:	4630      	mov	r0, r6
 80185fa:	f000 fe87 	bl	801930c <_Bfree>
 80185fe:	2300      	movs	r3, #0
 8018600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018602:	f888 3000 	strb.w	r3, [r8]
 8018606:	f10b 0301 	add.w	r3, fp, #1
 801860a:	6013      	str	r3, [r2, #0]
 801860c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801860e:	2b00      	cmp	r3, #0
 8018610:	f43f ad69 	beq.w	80180e6 <_dtoa_r+0x9e>
 8018614:	f8c3 8000 	str.w	r8, [r3]
 8018618:	e565      	b.n	80180e6 <_dtoa_r+0x9e>
 801861a:	465a      	mov	r2, fp
 801861c:	4643      	mov	r3, r8
 801861e:	4698      	mov	r8, r3
 8018620:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8018624:	2939      	cmp	r1, #57	; 0x39
 8018626:	d106      	bne.n	8018636 <_dtoa_r+0x5ee>
 8018628:	9901      	ldr	r1, [sp, #4]
 801862a:	4299      	cmp	r1, r3
 801862c:	d1f7      	bne.n	801861e <_dtoa_r+0x5d6>
 801862e:	9801      	ldr	r0, [sp, #4]
 8018630:	2130      	movs	r1, #48	; 0x30
 8018632:	3201      	adds	r2, #1
 8018634:	7001      	strb	r1, [r0, #0]
 8018636:	7819      	ldrb	r1, [r3, #0]
 8018638:	3101      	adds	r1, #1
 801863a:	7019      	strb	r1, [r3, #0]
 801863c:	e7ae      	b.n	801859c <_dtoa_r+0x554>
 801863e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018642:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801864a:	d1b2      	bne.n	80185b2 <_dtoa_r+0x56a>
 801864c:	e7d3      	b.n	80185f6 <_dtoa_r+0x5ae>
 801864e:	bf00      	nop
 8018650:	0801d1f0 	.word	0x0801d1f0
 8018654:	0801d1c8 	.word	0x0801d1c8
 8018658:	9907      	ldr	r1, [sp, #28]
 801865a:	2900      	cmp	r1, #0
 801865c:	f000 80d0 	beq.w	8018800 <_dtoa_r+0x7b8>
 8018660:	9906      	ldr	r1, [sp, #24]
 8018662:	2901      	cmp	r1, #1
 8018664:	f300 80b4 	bgt.w	80187d0 <_dtoa_r+0x788>
 8018668:	9909      	ldr	r1, [sp, #36]	; 0x24
 801866a:	2900      	cmp	r1, #0
 801866c:	f000 80ac 	beq.w	80187c8 <_dtoa_r+0x780>
 8018670:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018674:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018678:	461c      	mov	r4, r3
 801867a:	9309      	str	r3, [sp, #36]	; 0x24
 801867c:	9b04      	ldr	r3, [sp, #16]
 801867e:	4413      	add	r3, r2
 8018680:	9304      	str	r3, [sp, #16]
 8018682:	9b05      	ldr	r3, [sp, #20]
 8018684:	2101      	movs	r1, #1
 8018686:	4413      	add	r3, r2
 8018688:	4630      	mov	r0, r6
 801868a:	9305      	str	r3, [sp, #20]
 801868c:	f000 ff3e 	bl	801950c <__i2b>
 8018690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018692:	4607      	mov	r7, r0
 8018694:	f1b8 0f00 	cmp.w	r8, #0
 8018698:	d00d      	beq.n	80186b6 <_dtoa_r+0x66e>
 801869a:	9a05      	ldr	r2, [sp, #20]
 801869c:	2a00      	cmp	r2, #0
 801869e:	dd0a      	ble.n	80186b6 <_dtoa_r+0x66e>
 80186a0:	4542      	cmp	r2, r8
 80186a2:	9904      	ldr	r1, [sp, #16]
 80186a4:	bfa8      	it	ge
 80186a6:	4642      	movge	r2, r8
 80186a8:	1a89      	subs	r1, r1, r2
 80186aa:	9104      	str	r1, [sp, #16]
 80186ac:	9905      	ldr	r1, [sp, #20]
 80186ae:	eba8 0802 	sub.w	r8, r8, r2
 80186b2:	1a8a      	subs	r2, r1, r2
 80186b4:	9205      	str	r2, [sp, #20]
 80186b6:	b303      	cbz	r3, 80186fa <_dtoa_r+0x6b2>
 80186b8:	9a07      	ldr	r2, [sp, #28]
 80186ba:	2a00      	cmp	r2, #0
 80186bc:	f000 80a5 	beq.w	801880a <_dtoa_r+0x7c2>
 80186c0:	2c00      	cmp	r4, #0
 80186c2:	dd13      	ble.n	80186ec <_dtoa_r+0x6a4>
 80186c4:	4639      	mov	r1, r7
 80186c6:	4622      	mov	r2, r4
 80186c8:	4630      	mov	r0, r6
 80186ca:	930d      	str	r3, [sp, #52]	; 0x34
 80186cc:	f000 ffde 	bl	801968c <__pow5mult>
 80186d0:	462a      	mov	r2, r5
 80186d2:	4601      	mov	r1, r0
 80186d4:	4607      	mov	r7, r0
 80186d6:	4630      	mov	r0, r6
 80186d8:	f000 ff2e 	bl	8019538 <__multiply>
 80186dc:	4629      	mov	r1, r5
 80186de:	9009      	str	r0, [sp, #36]	; 0x24
 80186e0:	4630      	mov	r0, r6
 80186e2:	f000 fe13 	bl	801930c <_Bfree>
 80186e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186ea:	4615      	mov	r5, r2
 80186ec:	1b1a      	subs	r2, r3, r4
 80186ee:	d004      	beq.n	80186fa <_dtoa_r+0x6b2>
 80186f0:	4629      	mov	r1, r5
 80186f2:	4630      	mov	r0, r6
 80186f4:	f000 ffca 	bl	801968c <__pow5mult>
 80186f8:	4605      	mov	r5, r0
 80186fa:	2101      	movs	r1, #1
 80186fc:	4630      	mov	r0, r6
 80186fe:	f000 ff05 	bl	801950c <__i2b>
 8018702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018704:	2b00      	cmp	r3, #0
 8018706:	4604      	mov	r4, r0
 8018708:	f340 8081 	ble.w	801880e <_dtoa_r+0x7c6>
 801870c:	461a      	mov	r2, r3
 801870e:	4601      	mov	r1, r0
 8018710:	4630      	mov	r0, r6
 8018712:	f000 ffbb 	bl	801968c <__pow5mult>
 8018716:	9b06      	ldr	r3, [sp, #24]
 8018718:	2b01      	cmp	r3, #1
 801871a:	4604      	mov	r4, r0
 801871c:	dd7a      	ble.n	8018814 <_dtoa_r+0x7cc>
 801871e:	2300      	movs	r3, #0
 8018720:	9309      	str	r3, [sp, #36]	; 0x24
 8018722:	6922      	ldr	r2, [r4, #16]
 8018724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018728:	6910      	ldr	r0, [r2, #16]
 801872a:	f000 fea1 	bl	8019470 <__hi0bits>
 801872e:	f1c0 0020 	rsb	r0, r0, #32
 8018732:	9b05      	ldr	r3, [sp, #20]
 8018734:	4418      	add	r0, r3
 8018736:	f010 001f 	ands.w	r0, r0, #31
 801873a:	f000 8093 	beq.w	8018864 <_dtoa_r+0x81c>
 801873e:	f1c0 0220 	rsb	r2, r0, #32
 8018742:	2a04      	cmp	r2, #4
 8018744:	f340 8085 	ble.w	8018852 <_dtoa_r+0x80a>
 8018748:	9b04      	ldr	r3, [sp, #16]
 801874a:	f1c0 001c 	rsb	r0, r0, #28
 801874e:	4403      	add	r3, r0
 8018750:	9304      	str	r3, [sp, #16]
 8018752:	9b05      	ldr	r3, [sp, #20]
 8018754:	4480      	add	r8, r0
 8018756:	4403      	add	r3, r0
 8018758:	9305      	str	r3, [sp, #20]
 801875a:	9b04      	ldr	r3, [sp, #16]
 801875c:	2b00      	cmp	r3, #0
 801875e:	dd05      	ble.n	801876c <_dtoa_r+0x724>
 8018760:	4629      	mov	r1, r5
 8018762:	461a      	mov	r2, r3
 8018764:	4630      	mov	r0, r6
 8018766:	f000 ffeb 	bl	8019740 <__lshift>
 801876a:	4605      	mov	r5, r0
 801876c:	9b05      	ldr	r3, [sp, #20]
 801876e:	2b00      	cmp	r3, #0
 8018770:	dd05      	ble.n	801877e <_dtoa_r+0x736>
 8018772:	4621      	mov	r1, r4
 8018774:	461a      	mov	r2, r3
 8018776:	4630      	mov	r0, r6
 8018778:	f000 ffe2 	bl	8019740 <__lshift>
 801877c:	4604      	mov	r4, r0
 801877e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018780:	2b00      	cmp	r3, #0
 8018782:	d071      	beq.n	8018868 <_dtoa_r+0x820>
 8018784:	4621      	mov	r1, r4
 8018786:	4628      	mov	r0, r5
 8018788:	f001 f846 	bl	8019818 <__mcmp>
 801878c:	2800      	cmp	r0, #0
 801878e:	da6b      	bge.n	8018868 <_dtoa_r+0x820>
 8018790:	2300      	movs	r3, #0
 8018792:	4629      	mov	r1, r5
 8018794:	220a      	movs	r2, #10
 8018796:	4630      	mov	r0, r6
 8018798:	f000 fdda 	bl	8019350 <__multadd>
 801879c:	9b07      	ldr	r3, [sp, #28]
 801879e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187a2:	4605      	mov	r5, r0
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	f000 8197 	beq.w	8018ad8 <_dtoa_r+0xa90>
 80187aa:	4639      	mov	r1, r7
 80187ac:	2300      	movs	r3, #0
 80187ae:	220a      	movs	r2, #10
 80187b0:	4630      	mov	r0, r6
 80187b2:	f000 fdcd 	bl	8019350 <__multadd>
 80187b6:	f1ba 0f00 	cmp.w	sl, #0
 80187ba:	4607      	mov	r7, r0
 80187bc:	f300 8093 	bgt.w	80188e6 <_dtoa_r+0x89e>
 80187c0:	9b06      	ldr	r3, [sp, #24]
 80187c2:	2b02      	cmp	r3, #2
 80187c4:	dc57      	bgt.n	8018876 <_dtoa_r+0x82e>
 80187c6:	e08e      	b.n	80188e6 <_dtoa_r+0x89e>
 80187c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80187ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80187ce:	e751      	b.n	8018674 <_dtoa_r+0x62c>
 80187d0:	f109 34ff 	add.w	r4, r9, #4294967295
 80187d4:	42a3      	cmp	r3, r4
 80187d6:	bfbf      	itttt	lt
 80187d8:	1ae2      	sublt	r2, r4, r3
 80187da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80187dc:	189b      	addlt	r3, r3, r2
 80187de:	930a      	strlt	r3, [sp, #40]	; 0x28
 80187e0:	bfae      	itee	ge
 80187e2:	1b1c      	subge	r4, r3, r4
 80187e4:	4623      	movlt	r3, r4
 80187e6:	2400      	movlt	r4, #0
 80187e8:	f1b9 0f00 	cmp.w	r9, #0
 80187ec:	bfb5      	itete	lt
 80187ee:	9a04      	ldrlt	r2, [sp, #16]
 80187f0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80187f4:	eba2 0809 	sublt.w	r8, r2, r9
 80187f8:	464a      	movge	r2, r9
 80187fa:	bfb8      	it	lt
 80187fc:	2200      	movlt	r2, #0
 80187fe:	e73c      	b.n	801867a <_dtoa_r+0x632>
 8018800:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018804:	9f07      	ldr	r7, [sp, #28]
 8018806:	461c      	mov	r4, r3
 8018808:	e744      	b.n	8018694 <_dtoa_r+0x64c>
 801880a:	461a      	mov	r2, r3
 801880c:	e770      	b.n	80186f0 <_dtoa_r+0x6a8>
 801880e:	9b06      	ldr	r3, [sp, #24]
 8018810:	2b01      	cmp	r3, #1
 8018812:	dc18      	bgt.n	8018846 <_dtoa_r+0x7fe>
 8018814:	9b02      	ldr	r3, [sp, #8]
 8018816:	b9b3      	cbnz	r3, 8018846 <_dtoa_r+0x7fe>
 8018818:	9b03      	ldr	r3, [sp, #12]
 801881a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801881e:	b9a2      	cbnz	r2, 801884a <_dtoa_r+0x802>
 8018820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018824:	0d12      	lsrs	r2, r2, #20
 8018826:	0512      	lsls	r2, r2, #20
 8018828:	b18a      	cbz	r2, 801884e <_dtoa_r+0x806>
 801882a:	9b04      	ldr	r3, [sp, #16]
 801882c:	3301      	adds	r3, #1
 801882e:	9304      	str	r3, [sp, #16]
 8018830:	9b05      	ldr	r3, [sp, #20]
 8018832:	3301      	adds	r3, #1
 8018834:	9305      	str	r3, [sp, #20]
 8018836:	2301      	movs	r3, #1
 8018838:	9309      	str	r3, [sp, #36]	; 0x24
 801883a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801883c:	2b00      	cmp	r3, #0
 801883e:	f47f af70 	bne.w	8018722 <_dtoa_r+0x6da>
 8018842:	2001      	movs	r0, #1
 8018844:	e775      	b.n	8018732 <_dtoa_r+0x6ea>
 8018846:	2300      	movs	r3, #0
 8018848:	e7f6      	b.n	8018838 <_dtoa_r+0x7f0>
 801884a:	9b02      	ldr	r3, [sp, #8]
 801884c:	e7f4      	b.n	8018838 <_dtoa_r+0x7f0>
 801884e:	9209      	str	r2, [sp, #36]	; 0x24
 8018850:	e7f3      	b.n	801883a <_dtoa_r+0x7f2>
 8018852:	d082      	beq.n	801875a <_dtoa_r+0x712>
 8018854:	9b04      	ldr	r3, [sp, #16]
 8018856:	321c      	adds	r2, #28
 8018858:	4413      	add	r3, r2
 801885a:	9304      	str	r3, [sp, #16]
 801885c:	9b05      	ldr	r3, [sp, #20]
 801885e:	4490      	add	r8, r2
 8018860:	4413      	add	r3, r2
 8018862:	e779      	b.n	8018758 <_dtoa_r+0x710>
 8018864:	4602      	mov	r2, r0
 8018866:	e7f5      	b.n	8018854 <_dtoa_r+0x80c>
 8018868:	f1b9 0f00 	cmp.w	r9, #0
 801886c:	dc36      	bgt.n	80188dc <_dtoa_r+0x894>
 801886e:	9b06      	ldr	r3, [sp, #24]
 8018870:	2b02      	cmp	r3, #2
 8018872:	dd33      	ble.n	80188dc <_dtoa_r+0x894>
 8018874:	46ca      	mov	sl, r9
 8018876:	f1ba 0f00 	cmp.w	sl, #0
 801887a:	d10d      	bne.n	8018898 <_dtoa_r+0x850>
 801887c:	4621      	mov	r1, r4
 801887e:	4653      	mov	r3, sl
 8018880:	2205      	movs	r2, #5
 8018882:	4630      	mov	r0, r6
 8018884:	f000 fd64 	bl	8019350 <__multadd>
 8018888:	4601      	mov	r1, r0
 801888a:	4604      	mov	r4, r0
 801888c:	4628      	mov	r0, r5
 801888e:	f000 ffc3 	bl	8019818 <__mcmp>
 8018892:	2800      	cmp	r0, #0
 8018894:	f73f ade4 	bgt.w	8018460 <_dtoa_r+0x418>
 8018898:	9b08      	ldr	r3, [sp, #32]
 801889a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801889e:	ea6f 0b03 	mvn.w	fp, r3
 80188a2:	f04f 0900 	mov.w	r9, #0
 80188a6:	4621      	mov	r1, r4
 80188a8:	4630      	mov	r0, r6
 80188aa:	f000 fd2f 	bl	801930c <_Bfree>
 80188ae:	2f00      	cmp	r7, #0
 80188b0:	f43f aea1 	beq.w	80185f6 <_dtoa_r+0x5ae>
 80188b4:	f1b9 0f00 	cmp.w	r9, #0
 80188b8:	d005      	beq.n	80188c6 <_dtoa_r+0x87e>
 80188ba:	45b9      	cmp	r9, r7
 80188bc:	d003      	beq.n	80188c6 <_dtoa_r+0x87e>
 80188be:	4649      	mov	r1, r9
 80188c0:	4630      	mov	r0, r6
 80188c2:	f000 fd23 	bl	801930c <_Bfree>
 80188c6:	4639      	mov	r1, r7
 80188c8:	4630      	mov	r0, r6
 80188ca:	f000 fd1f 	bl	801930c <_Bfree>
 80188ce:	e692      	b.n	80185f6 <_dtoa_r+0x5ae>
 80188d0:	2400      	movs	r4, #0
 80188d2:	4627      	mov	r7, r4
 80188d4:	e7e0      	b.n	8018898 <_dtoa_r+0x850>
 80188d6:	4693      	mov	fp, r2
 80188d8:	4627      	mov	r7, r4
 80188da:	e5c1      	b.n	8018460 <_dtoa_r+0x418>
 80188dc:	9b07      	ldr	r3, [sp, #28]
 80188de:	46ca      	mov	sl, r9
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	f000 8100 	beq.w	8018ae6 <_dtoa_r+0xa9e>
 80188e6:	f1b8 0f00 	cmp.w	r8, #0
 80188ea:	dd05      	ble.n	80188f8 <_dtoa_r+0x8b0>
 80188ec:	4639      	mov	r1, r7
 80188ee:	4642      	mov	r2, r8
 80188f0:	4630      	mov	r0, r6
 80188f2:	f000 ff25 	bl	8019740 <__lshift>
 80188f6:	4607      	mov	r7, r0
 80188f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d05d      	beq.n	80189ba <_dtoa_r+0x972>
 80188fe:	6879      	ldr	r1, [r7, #4]
 8018900:	4630      	mov	r0, r6
 8018902:	f000 fcc3 	bl	801928c <_Balloc>
 8018906:	4680      	mov	r8, r0
 8018908:	b928      	cbnz	r0, 8018916 <_dtoa_r+0x8ce>
 801890a:	4b82      	ldr	r3, [pc, #520]	; (8018b14 <_dtoa_r+0xacc>)
 801890c:	4602      	mov	r2, r0
 801890e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018912:	f7ff bbb1 	b.w	8018078 <_dtoa_r+0x30>
 8018916:	693a      	ldr	r2, [r7, #16]
 8018918:	3202      	adds	r2, #2
 801891a:	0092      	lsls	r2, r2, #2
 801891c:	f107 010c 	add.w	r1, r7, #12
 8018920:	300c      	adds	r0, #12
 8018922:	f7ff faf3 	bl	8017f0c <memcpy>
 8018926:	2201      	movs	r2, #1
 8018928:	4641      	mov	r1, r8
 801892a:	4630      	mov	r0, r6
 801892c:	f000 ff08 	bl	8019740 <__lshift>
 8018930:	9b01      	ldr	r3, [sp, #4]
 8018932:	3301      	adds	r3, #1
 8018934:	9304      	str	r3, [sp, #16]
 8018936:	9b01      	ldr	r3, [sp, #4]
 8018938:	4453      	add	r3, sl
 801893a:	9308      	str	r3, [sp, #32]
 801893c:	9b02      	ldr	r3, [sp, #8]
 801893e:	f003 0301 	and.w	r3, r3, #1
 8018942:	46b9      	mov	r9, r7
 8018944:	9307      	str	r3, [sp, #28]
 8018946:	4607      	mov	r7, r0
 8018948:	9b04      	ldr	r3, [sp, #16]
 801894a:	4621      	mov	r1, r4
 801894c:	3b01      	subs	r3, #1
 801894e:	4628      	mov	r0, r5
 8018950:	9302      	str	r3, [sp, #8]
 8018952:	f7ff faf1 	bl	8017f38 <quorem>
 8018956:	4603      	mov	r3, r0
 8018958:	3330      	adds	r3, #48	; 0x30
 801895a:	9005      	str	r0, [sp, #20]
 801895c:	4649      	mov	r1, r9
 801895e:	4628      	mov	r0, r5
 8018960:	9309      	str	r3, [sp, #36]	; 0x24
 8018962:	f000 ff59 	bl	8019818 <__mcmp>
 8018966:	463a      	mov	r2, r7
 8018968:	4682      	mov	sl, r0
 801896a:	4621      	mov	r1, r4
 801896c:	4630      	mov	r0, r6
 801896e:	f000 ff6f 	bl	8019850 <__mdiff>
 8018972:	68c2      	ldr	r2, [r0, #12]
 8018974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018976:	4680      	mov	r8, r0
 8018978:	bb0a      	cbnz	r2, 80189be <_dtoa_r+0x976>
 801897a:	4601      	mov	r1, r0
 801897c:	4628      	mov	r0, r5
 801897e:	f000 ff4b 	bl	8019818 <__mcmp>
 8018982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018984:	4602      	mov	r2, r0
 8018986:	4641      	mov	r1, r8
 8018988:	4630      	mov	r0, r6
 801898a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801898e:	f000 fcbd 	bl	801930c <_Bfree>
 8018992:	9b06      	ldr	r3, [sp, #24]
 8018994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018996:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801899a:	ea43 0102 	orr.w	r1, r3, r2
 801899e:	9b07      	ldr	r3, [sp, #28]
 80189a0:	4319      	orrs	r1, r3
 80189a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189a4:	d10d      	bne.n	80189c2 <_dtoa_r+0x97a>
 80189a6:	2b39      	cmp	r3, #57	; 0x39
 80189a8:	d029      	beq.n	80189fe <_dtoa_r+0x9b6>
 80189aa:	f1ba 0f00 	cmp.w	sl, #0
 80189ae:	dd01      	ble.n	80189b4 <_dtoa_r+0x96c>
 80189b0:	9b05      	ldr	r3, [sp, #20]
 80189b2:	3331      	adds	r3, #49	; 0x31
 80189b4:	9a02      	ldr	r2, [sp, #8]
 80189b6:	7013      	strb	r3, [r2, #0]
 80189b8:	e775      	b.n	80188a6 <_dtoa_r+0x85e>
 80189ba:	4638      	mov	r0, r7
 80189bc:	e7b8      	b.n	8018930 <_dtoa_r+0x8e8>
 80189be:	2201      	movs	r2, #1
 80189c0:	e7e1      	b.n	8018986 <_dtoa_r+0x93e>
 80189c2:	f1ba 0f00 	cmp.w	sl, #0
 80189c6:	db06      	blt.n	80189d6 <_dtoa_r+0x98e>
 80189c8:	9906      	ldr	r1, [sp, #24]
 80189ca:	ea41 0a0a 	orr.w	sl, r1, sl
 80189ce:	9907      	ldr	r1, [sp, #28]
 80189d0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80189d4:	d120      	bne.n	8018a18 <_dtoa_r+0x9d0>
 80189d6:	2a00      	cmp	r2, #0
 80189d8:	ddec      	ble.n	80189b4 <_dtoa_r+0x96c>
 80189da:	4629      	mov	r1, r5
 80189dc:	2201      	movs	r2, #1
 80189de:	4630      	mov	r0, r6
 80189e0:	9304      	str	r3, [sp, #16]
 80189e2:	f000 fead 	bl	8019740 <__lshift>
 80189e6:	4621      	mov	r1, r4
 80189e8:	4605      	mov	r5, r0
 80189ea:	f000 ff15 	bl	8019818 <__mcmp>
 80189ee:	2800      	cmp	r0, #0
 80189f0:	9b04      	ldr	r3, [sp, #16]
 80189f2:	dc02      	bgt.n	80189fa <_dtoa_r+0x9b2>
 80189f4:	d1de      	bne.n	80189b4 <_dtoa_r+0x96c>
 80189f6:	07da      	lsls	r2, r3, #31
 80189f8:	d5dc      	bpl.n	80189b4 <_dtoa_r+0x96c>
 80189fa:	2b39      	cmp	r3, #57	; 0x39
 80189fc:	d1d8      	bne.n	80189b0 <_dtoa_r+0x968>
 80189fe:	9a02      	ldr	r2, [sp, #8]
 8018a00:	2339      	movs	r3, #57	; 0x39
 8018a02:	7013      	strb	r3, [r2, #0]
 8018a04:	4643      	mov	r3, r8
 8018a06:	4698      	mov	r8, r3
 8018a08:	3b01      	subs	r3, #1
 8018a0a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018a0e:	2a39      	cmp	r2, #57	; 0x39
 8018a10:	d051      	beq.n	8018ab6 <_dtoa_r+0xa6e>
 8018a12:	3201      	adds	r2, #1
 8018a14:	701a      	strb	r2, [r3, #0]
 8018a16:	e746      	b.n	80188a6 <_dtoa_r+0x85e>
 8018a18:	2a00      	cmp	r2, #0
 8018a1a:	dd03      	ble.n	8018a24 <_dtoa_r+0x9dc>
 8018a1c:	2b39      	cmp	r3, #57	; 0x39
 8018a1e:	d0ee      	beq.n	80189fe <_dtoa_r+0x9b6>
 8018a20:	3301      	adds	r3, #1
 8018a22:	e7c7      	b.n	80189b4 <_dtoa_r+0x96c>
 8018a24:	9a04      	ldr	r2, [sp, #16]
 8018a26:	9908      	ldr	r1, [sp, #32]
 8018a28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018a2c:	428a      	cmp	r2, r1
 8018a2e:	d02b      	beq.n	8018a88 <_dtoa_r+0xa40>
 8018a30:	4629      	mov	r1, r5
 8018a32:	2300      	movs	r3, #0
 8018a34:	220a      	movs	r2, #10
 8018a36:	4630      	mov	r0, r6
 8018a38:	f000 fc8a 	bl	8019350 <__multadd>
 8018a3c:	45b9      	cmp	r9, r7
 8018a3e:	4605      	mov	r5, r0
 8018a40:	f04f 0300 	mov.w	r3, #0
 8018a44:	f04f 020a 	mov.w	r2, #10
 8018a48:	4649      	mov	r1, r9
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	d107      	bne.n	8018a5e <_dtoa_r+0xa16>
 8018a4e:	f000 fc7f 	bl	8019350 <__multadd>
 8018a52:	4681      	mov	r9, r0
 8018a54:	4607      	mov	r7, r0
 8018a56:	9b04      	ldr	r3, [sp, #16]
 8018a58:	3301      	adds	r3, #1
 8018a5a:	9304      	str	r3, [sp, #16]
 8018a5c:	e774      	b.n	8018948 <_dtoa_r+0x900>
 8018a5e:	f000 fc77 	bl	8019350 <__multadd>
 8018a62:	4639      	mov	r1, r7
 8018a64:	4681      	mov	r9, r0
 8018a66:	2300      	movs	r3, #0
 8018a68:	220a      	movs	r2, #10
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	f000 fc70 	bl	8019350 <__multadd>
 8018a70:	4607      	mov	r7, r0
 8018a72:	e7f0      	b.n	8018a56 <_dtoa_r+0xa0e>
 8018a74:	f1ba 0f00 	cmp.w	sl, #0
 8018a78:	9a01      	ldr	r2, [sp, #4]
 8018a7a:	bfcc      	ite	gt
 8018a7c:	46d0      	movgt	r8, sl
 8018a7e:	f04f 0801 	movle.w	r8, #1
 8018a82:	4490      	add	r8, r2
 8018a84:	f04f 0900 	mov.w	r9, #0
 8018a88:	4629      	mov	r1, r5
 8018a8a:	2201      	movs	r2, #1
 8018a8c:	4630      	mov	r0, r6
 8018a8e:	9302      	str	r3, [sp, #8]
 8018a90:	f000 fe56 	bl	8019740 <__lshift>
 8018a94:	4621      	mov	r1, r4
 8018a96:	4605      	mov	r5, r0
 8018a98:	f000 febe 	bl	8019818 <__mcmp>
 8018a9c:	2800      	cmp	r0, #0
 8018a9e:	dcb1      	bgt.n	8018a04 <_dtoa_r+0x9bc>
 8018aa0:	d102      	bne.n	8018aa8 <_dtoa_r+0xa60>
 8018aa2:	9b02      	ldr	r3, [sp, #8]
 8018aa4:	07db      	lsls	r3, r3, #31
 8018aa6:	d4ad      	bmi.n	8018a04 <_dtoa_r+0x9bc>
 8018aa8:	4643      	mov	r3, r8
 8018aaa:	4698      	mov	r8, r3
 8018aac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ab0:	2a30      	cmp	r2, #48	; 0x30
 8018ab2:	d0fa      	beq.n	8018aaa <_dtoa_r+0xa62>
 8018ab4:	e6f7      	b.n	80188a6 <_dtoa_r+0x85e>
 8018ab6:	9a01      	ldr	r2, [sp, #4]
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d1a4      	bne.n	8018a06 <_dtoa_r+0x9be>
 8018abc:	f10b 0b01 	add.w	fp, fp, #1
 8018ac0:	2331      	movs	r3, #49	; 0x31
 8018ac2:	e778      	b.n	80189b6 <_dtoa_r+0x96e>
 8018ac4:	4b14      	ldr	r3, [pc, #80]	; (8018b18 <_dtoa_r+0xad0>)
 8018ac6:	f7ff bb2a 	b.w	801811e <_dtoa_r+0xd6>
 8018aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f47f ab05 	bne.w	80180dc <_dtoa_r+0x94>
 8018ad2:	4b12      	ldr	r3, [pc, #72]	; (8018b1c <_dtoa_r+0xad4>)
 8018ad4:	f7ff bb23 	b.w	801811e <_dtoa_r+0xd6>
 8018ad8:	f1ba 0f00 	cmp.w	sl, #0
 8018adc:	dc03      	bgt.n	8018ae6 <_dtoa_r+0xa9e>
 8018ade:	9b06      	ldr	r3, [sp, #24]
 8018ae0:	2b02      	cmp	r3, #2
 8018ae2:	f73f aec8 	bgt.w	8018876 <_dtoa_r+0x82e>
 8018ae6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018aea:	4621      	mov	r1, r4
 8018aec:	4628      	mov	r0, r5
 8018aee:	f7ff fa23 	bl	8017f38 <quorem>
 8018af2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018af6:	f808 3b01 	strb.w	r3, [r8], #1
 8018afa:	9a01      	ldr	r2, [sp, #4]
 8018afc:	eba8 0202 	sub.w	r2, r8, r2
 8018b00:	4592      	cmp	sl, r2
 8018b02:	ddb7      	ble.n	8018a74 <_dtoa_r+0xa2c>
 8018b04:	4629      	mov	r1, r5
 8018b06:	2300      	movs	r3, #0
 8018b08:	220a      	movs	r2, #10
 8018b0a:	4630      	mov	r0, r6
 8018b0c:	f000 fc20 	bl	8019350 <__multadd>
 8018b10:	4605      	mov	r5, r0
 8018b12:	e7ea      	b.n	8018aea <_dtoa_r+0xaa2>
 8018b14:	0801d0f9 	.word	0x0801d0f9
 8018b18:	0801d051 	.word	0x0801d051
 8018b1c:	0801d07d 	.word	0x0801d07d

08018b20 <_free_r>:
 8018b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b22:	2900      	cmp	r1, #0
 8018b24:	d044      	beq.n	8018bb0 <_free_r+0x90>
 8018b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b2a:	9001      	str	r0, [sp, #4]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8018b32:	bfb8      	it	lt
 8018b34:	18e4      	addlt	r4, r4, r3
 8018b36:	f7fd fd3b 	bl	80165b0 <__malloc_lock>
 8018b3a:	4a1e      	ldr	r2, [pc, #120]	; (8018bb4 <_free_r+0x94>)
 8018b3c:	9801      	ldr	r0, [sp, #4]
 8018b3e:	6813      	ldr	r3, [r2, #0]
 8018b40:	b933      	cbnz	r3, 8018b50 <_free_r+0x30>
 8018b42:	6063      	str	r3, [r4, #4]
 8018b44:	6014      	str	r4, [r2, #0]
 8018b46:	b003      	add	sp, #12
 8018b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018b4c:	f7fd bd36 	b.w	80165bc <__malloc_unlock>
 8018b50:	42a3      	cmp	r3, r4
 8018b52:	d908      	bls.n	8018b66 <_free_r+0x46>
 8018b54:	6825      	ldr	r5, [r4, #0]
 8018b56:	1961      	adds	r1, r4, r5
 8018b58:	428b      	cmp	r3, r1
 8018b5a:	bf01      	itttt	eq
 8018b5c:	6819      	ldreq	r1, [r3, #0]
 8018b5e:	685b      	ldreq	r3, [r3, #4]
 8018b60:	1949      	addeq	r1, r1, r5
 8018b62:	6021      	streq	r1, [r4, #0]
 8018b64:	e7ed      	b.n	8018b42 <_free_r+0x22>
 8018b66:	461a      	mov	r2, r3
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	b10b      	cbz	r3, 8018b70 <_free_r+0x50>
 8018b6c:	42a3      	cmp	r3, r4
 8018b6e:	d9fa      	bls.n	8018b66 <_free_r+0x46>
 8018b70:	6811      	ldr	r1, [r2, #0]
 8018b72:	1855      	adds	r5, r2, r1
 8018b74:	42a5      	cmp	r5, r4
 8018b76:	d10b      	bne.n	8018b90 <_free_r+0x70>
 8018b78:	6824      	ldr	r4, [r4, #0]
 8018b7a:	4421      	add	r1, r4
 8018b7c:	1854      	adds	r4, r2, r1
 8018b7e:	42a3      	cmp	r3, r4
 8018b80:	6011      	str	r1, [r2, #0]
 8018b82:	d1e0      	bne.n	8018b46 <_free_r+0x26>
 8018b84:	681c      	ldr	r4, [r3, #0]
 8018b86:	685b      	ldr	r3, [r3, #4]
 8018b88:	6053      	str	r3, [r2, #4]
 8018b8a:	440c      	add	r4, r1
 8018b8c:	6014      	str	r4, [r2, #0]
 8018b8e:	e7da      	b.n	8018b46 <_free_r+0x26>
 8018b90:	d902      	bls.n	8018b98 <_free_r+0x78>
 8018b92:	230c      	movs	r3, #12
 8018b94:	6003      	str	r3, [r0, #0]
 8018b96:	e7d6      	b.n	8018b46 <_free_r+0x26>
 8018b98:	6825      	ldr	r5, [r4, #0]
 8018b9a:	1961      	adds	r1, r4, r5
 8018b9c:	428b      	cmp	r3, r1
 8018b9e:	bf04      	itt	eq
 8018ba0:	6819      	ldreq	r1, [r3, #0]
 8018ba2:	685b      	ldreq	r3, [r3, #4]
 8018ba4:	6063      	str	r3, [r4, #4]
 8018ba6:	bf04      	itt	eq
 8018ba8:	1949      	addeq	r1, r1, r5
 8018baa:	6021      	streq	r1, [r4, #0]
 8018bac:	6054      	str	r4, [r2, #4]
 8018bae:	e7ca      	b.n	8018b46 <_free_r+0x26>
 8018bb0:	b003      	add	sp, #12
 8018bb2:	bd30      	pop	{r4, r5, pc}
 8018bb4:	2400b41c 	.word	0x2400b41c

08018bb8 <rshift>:
 8018bb8:	6903      	ldr	r3, [r0, #16]
 8018bba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018bc6:	f100 0414 	add.w	r4, r0, #20
 8018bca:	dd45      	ble.n	8018c58 <rshift+0xa0>
 8018bcc:	f011 011f 	ands.w	r1, r1, #31
 8018bd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018bd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018bd8:	d10c      	bne.n	8018bf4 <rshift+0x3c>
 8018bda:	f100 0710 	add.w	r7, r0, #16
 8018bde:	4629      	mov	r1, r5
 8018be0:	42b1      	cmp	r1, r6
 8018be2:	d334      	bcc.n	8018c4e <rshift+0x96>
 8018be4:	1a9b      	subs	r3, r3, r2
 8018be6:	009b      	lsls	r3, r3, #2
 8018be8:	1eea      	subs	r2, r5, #3
 8018bea:	4296      	cmp	r6, r2
 8018bec:	bf38      	it	cc
 8018bee:	2300      	movcc	r3, #0
 8018bf0:	4423      	add	r3, r4
 8018bf2:	e015      	b.n	8018c20 <rshift+0x68>
 8018bf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018bf8:	f1c1 0820 	rsb	r8, r1, #32
 8018bfc:	40cf      	lsrs	r7, r1
 8018bfe:	f105 0e04 	add.w	lr, r5, #4
 8018c02:	46a1      	mov	r9, r4
 8018c04:	4576      	cmp	r6, lr
 8018c06:	46f4      	mov	ip, lr
 8018c08:	d815      	bhi.n	8018c36 <rshift+0x7e>
 8018c0a:	1a9a      	subs	r2, r3, r2
 8018c0c:	0092      	lsls	r2, r2, #2
 8018c0e:	3a04      	subs	r2, #4
 8018c10:	3501      	adds	r5, #1
 8018c12:	42ae      	cmp	r6, r5
 8018c14:	bf38      	it	cc
 8018c16:	2200      	movcc	r2, #0
 8018c18:	18a3      	adds	r3, r4, r2
 8018c1a:	50a7      	str	r7, [r4, r2]
 8018c1c:	b107      	cbz	r7, 8018c20 <rshift+0x68>
 8018c1e:	3304      	adds	r3, #4
 8018c20:	1b1a      	subs	r2, r3, r4
 8018c22:	42a3      	cmp	r3, r4
 8018c24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018c28:	bf08      	it	eq
 8018c2a:	2300      	moveq	r3, #0
 8018c2c:	6102      	str	r2, [r0, #16]
 8018c2e:	bf08      	it	eq
 8018c30:	6143      	streq	r3, [r0, #20]
 8018c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c36:	f8dc c000 	ldr.w	ip, [ip]
 8018c3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8018c3e:	ea4c 0707 	orr.w	r7, ip, r7
 8018c42:	f849 7b04 	str.w	r7, [r9], #4
 8018c46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018c4a:	40cf      	lsrs	r7, r1
 8018c4c:	e7da      	b.n	8018c04 <rshift+0x4c>
 8018c4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018c52:	f847 cf04 	str.w	ip, [r7, #4]!
 8018c56:	e7c3      	b.n	8018be0 <rshift+0x28>
 8018c58:	4623      	mov	r3, r4
 8018c5a:	e7e1      	b.n	8018c20 <rshift+0x68>

08018c5c <__hexdig_fun>:
 8018c5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018c60:	2b09      	cmp	r3, #9
 8018c62:	d802      	bhi.n	8018c6a <__hexdig_fun+0xe>
 8018c64:	3820      	subs	r0, #32
 8018c66:	b2c0      	uxtb	r0, r0
 8018c68:	4770      	bx	lr
 8018c6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018c6e:	2b05      	cmp	r3, #5
 8018c70:	d801      	bhi.n	8018c76 <__hexdig_fun+0x1a>
 8018c72:	3847      	subs	r0, #71	; 0x47
 8018c74:	e7f7      	b.n	8018c66 <__hexdig_fun+0xa>
 8018c76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018c7a:	2b05      	cmp	r3, #5
 8018c7c:	d801      	bhi.n	8018c82 <__hexdig_fun+0x26>
 8018c7e:	3827      	subs	r0, #39	; 0x27
 8018c80:	e7f1      	b.n	8018c66 <__hexdig_fun+0xa>
 8018c82:	2000      	movs	r0, #0
 8018c84:	4770      	bx	lr
	...

08018c88 <__gethex>:
 8018c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8c:	4617      	mov	r7, r2
 8018c8e:	680a      	ldr	r2, [r1, #0]
 8018c90:	b085      	sub	sp, #20
 8018c92:	f102 0b02 	add.w	fp, r2, #2
 8018c96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018c9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018c9e:	4681      	mov	r9, r0
 8018ca0:	468a      	mov	sl, r1
 8018ca2:	9302      	str	r3, [sp, #8]
 8018ca4:	32fe      	adds	r2, #254	; 0xfe
 8018ca6:	eb02 030b 	add.w	r3, r2, fp
 8018caa:	46d8      	mov	r8, fp
 8018cac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018cb0:	9301      	str	r3, [sp, #4]
 8018cb2:	2830      	cmp	r0, #48	; 0x30
 8018cb4:	d0f7      	beq.n	8018ca6 <__gethex+0x1e>
 8018cb6:	f7ff ffd1 	bl	8018c5c <__hexdig_fun>
 8018cba:	4604      	mov	r4, r0
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	d138      	bne.n	8018d32 <__gethex+0xaa>
 8018cc0:	49a7      	ldr	r1, [pc, #668]	; (8018f60 <__gethex+0x2d8>)
 8018cc2:	2201      	movs	r2, #1
 8018cc4:	4640      	mov	r0, r8
 8018cc6:	f7ff f882 	bl	8017dce <strncmp>
 8018cca:	4606      	mov	r6, r0
 8018ccc:	2800      	cmp	r0, #0
 8018cce:	d169      	bne.n	8018da4 <__gethex+0x11c>
 8018cd0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018cd4:	465d      	mov	r5, fp
 8018cd6:	f7ff ffc1 	bl	8018c5c <__hexdig_fun>
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d064      	beq.n	8018da8 <__gethex+0x120>
 8018cde:	465a      	mov	r2, fp
 8018ce0:	7810      	ldrb	r0, [r2, #0]
 8018ce2:	2830      	cmp	r0, #48	; 0x30
 8018ce4:	4690      	mov	r8, r2
 8018ce6:	f102 0201 	add.w	r2, r2, #1
 8018cea:	d0f9      	beq.n	8018ce0 <__gethex+0x58>
 8018cec:	f7ff ffb6 	bl	8018c5c <__hexdig_fun>
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	fab0 f480 	clz	r4, r0
 8018cf6:	0964      	lsrs	r4, r4, #5
 8018cf8:	465e      	mov	r6, fp
 8018cfa:	9301      	str	r3, [sp, #4]
 8018cfc:	4642      	mov	r2, r8
 8018cfe:	4615      	mov	r5, r2
 8018d00:	3201      	adds	r2, #1
 8018d02:	7828      	ldrb	r0, [r5, #0]
 8018d04:	f7ff ffaa 	bl	8018c5c <__hexdig_fun>
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	d1f8      	bne.n	8018cfe <__gethex+0x76>
 8018d0c:	4994      	ldr	r1, [pc, #592]	; (8018f60 <__gethex+0x2d8>)
 8018d0e:	2201      	movs	r2, #1
 8018d10:	4628      	mov	r0, r5
 8018d12:	f7ff f85c 	bl	8017dce <strncmp>
 8018d16:	b978      	cbnz	r0, 8018d38 <__gethex+0xb0>
 8018d18:	b946      	cbnz	r6, 8018d2c <__gethex+0xa4>
 8018d1a:	1c6e      	adds	r6, r5, #1
 8018d1c:	4632      	mov	r2, r6
 8018d1e:	4615      	mov	r5, r2
 8018d20:	3201      	adds	r2, #1
 8018d22:	7828      	ldrb	r0, [r5, #0]
 8018d24:	f7ff ff9a 	bl	8018c5c <__hexdig_fun>
 8018d28:	2800      	cmp	r0, #0
 8018d2a:	d1f8      	bne.n	8018d1e <__gethex+0x96>
 8018d2c:	1b73      	subs	r3, r6, r5
 8018d2e:	009e      	lsls	r6, r3, #2
 8018d30:	e004      	b.n	8018d3c <__gethex+0xb4>
 8018d32:	2400      	movs	r4, #0
 8018d34:	4626      	mov	r6, r4
 8018d36:	e7e1      	b.n	8018cfc <__gethex+0x74>
 8018d38:	2e00      	cmp	r6, #0
 8018d3a:	d1f7      	bne.n	8018d2c <__gethex+0xa4>
 8018d3c:	782b      	ldrb	r3, [r5, #0]
 8018d3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018d42:	2b50      	cmp	r3, #80	; 0x50
 8018d44:	d13d      	bne.n	8018dc2 <__gethex+0x13a>
 8018d46:	786b      	ldrb	r3, [r5, #1]
 8018d48:	2b2b      	cmp	r3, #43	; 0x2b
 8018d4a:	d02f      	beq.n	8018dac <__gethex+0x124>
 8018d4c:	2b2d      	cmp	r3, #45	; 0x2d
 8018d4e:	d031      	beq.n	8018db4 <__gethex+0x12c>
 8018d50:	1c69      	adds	r1, r5, #1
 8018d52:	f04f 0b00 	mov.w	fp, #0
 8018d56:	7808      	ldrb	r0, [r1, #0]
 8018d58:	f7ff ff80 	bl	8018c5c <__hexdig_fun>
 8018d5c:	1e42      	subs	r2, r0, #1
 8018d5e:	b2d2      	uxtb	r2, r2
 8018d60:	2a18      	cmp	r2, #24
 8018d62:	d82e      	bhi.n	8018dc2 <__gethex+0x13a>
 8018d64:	f1a0 0210 	sub.w	r2, r0, #16
 8018d68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018d6c:	f7ff ff76 	bl	8018c5c <__hexdig_fun>
 8018d70:	f100 3cff 	add.w	ip, r0, #4294967295
 8018d74:	fa5f fc8c 	uxtb.w	ip, ip
 8018d78:	f1bc 0f18 	cmp.w	ip, #24
 8018d7c:	d91d      	bls.n	8018dba <__gethex+0x132>
 8018d7e:	f1bb 0f00 	cmp.w	fp, #0
 8018d82:	d000      	beq.n	8018d86 <__gethex+0xfe>
 8018d84:	4252      	negs	r2, r2
 8018d86:	4416      	add	r6, r2
 8018d88:	f8ca 1000 	str.w	r1, [sl]
 8018d8c:	b1dc      	cbz	r4, 8018dc6 <__gethex+0x13e>
 8018d8e:	9b01      	ldr	r3, [sp, #4]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	bf14      	ite	ne
 8018d94:	f04f 0800 	movne.w	r8, #0
 8018d98:	f04f 0806 	moveq.w	r8, #6
 8018d9c:	4640      	mov	r0, r8
 8018d9e:	b005      	add	sp, #20
 8018da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da4:	4645      	mov	r5, r8
 8018da6:	4626      	mov	r6, r4
 8018da8:	2401      	movs	r4, #1
 8018daa:	e7c7      	b.n	8018d3c <__gethex+0xb4>
 8018dac:	f04f 0b00 	mov.w	fp, #0
 8018db0:	1ca9      	adds	r1, r5, #2
 8018db2:	e7d0      	b.n	8018d56 <__gethex+0xce>
 8018db4:	f04f 0b01 	mov.w	fp, #1
 8018db8:	e7fa      	b.n	8018db0 <__gethex+0x128>
 8018dba:	230a      	movs	r3, #10
 8018dbc:	fb03 0002 	mla	r0, r3, r2, r0
 8018dc0:	e7d0      	b.n	8018d64 <__gethex+0xdc>
 8018dc2:	4629      	mov	r1, r5
 8018dc4:	e7e0      	b.n	8018d88 <__gethex+0x100>
 8018dc6:	eba5 0308 	sub.w	r3, r5, r8
 8018dca:	3b01      	subs	r3, #1
 8018dcc:	4621      	mov	r1, r4
 8018dce:	2b07      	cmp	r3, #7
 8018dd0:	dc0a      	bgt.n	8018de8 <__gethex+0x160>
 8018dd2:	4648      	mov	r0, r9
 8018dd4:	f000 fa5a 	bl	801928c <_Balloc>
 8018dd8:	4604      	mov	r4, r0
 8018dda:	b940      	cbnz	r0, 8018dee <__gethex+0x166>
 8018ddc:	4b61      	ldr	r3, [pc, #388]	; (8018f64 <__gethex+0x2dc>)
 8018dde:	4602      	mov	r2, r0
 8018de0:	21e4      	movs	r1, #228	; 0xe4
 8018de2:	4861      	ldr	r0, [pc, #388]	; (8018f68 <__gethex+0x2e0>)
 8018de4:	f001 f92a 	bl	801a03c <__assert_func>
 8018de8:	3101      	adds	r1, #1
 8018dea:	105b      	asrs	r3, r3, #1
 8018dec:	e7ef      	b.n	8018dce <__gethex+0x146>
 8018dee:	f100 0a14 	add.w	sl, r0, #20
 8018df2:	2300      	movs	r3, #0
 8018df4:	495a      	ldr	r1, [pc, #360]	; (8018f60 <__gethex+0x2d8>)
 8018df6:	f8cd a004 	str.w	sl, [sp, #4]
 8018dfa:	469b      	mov	fp, r3
 8018dfc:	45a8      	cmp	r8, r5
 8018dfe:	d342      	bcc.n	8018e86 <__gethex+0x1fe>
 8018e00:	9801      	ldr	r0, [sp, #4]
 8018e02:	f840 bb04 	str.w	fp, [r0], #4
 8018e06:	eba0 000a 	sub.w	r0, r0, sl
 8018e0a:	1080      	asrs	r0, r0, #2
 8018e0c:	6120      	str	r0, [r4, #16]
 8018e0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8018e12:	4658      	mov	r0, fp
 8018e14:	f000 fb2c 	bl	8019470 <__hi0bits>
 8018e18:	683d      	ldr	r5, [r7, #0]
 8018e1a:	eba8 0000 	sub.w	r0, r8, r0
 8018e1e:	42a8      	cmp	r0, r5
 8018e20:	dd59      	ble.n	8018ed6 <__gethex+0x24e>
 8018e22:	eba0 0805 	sub.w	r8, r0, r5
 8018e26:	4641      	mov	r1, r8
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f000 feb8 	bl	8019b9e <__any_on>
 8018e2e:	4683      	mov	fp, r0
 8018e30:	b1b8      	cbz	r0, 8018e62 <__gethex+0x1da>
 8018e32:	f108 33ff 	add.w	r3, r8, #4294967295
 8018e36:	1159      	asrs	r1, r3, #5
 8018e38:	f003 021f 	and.w	r2, r3, #31
 8018e3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018e40:	f04f 0b01 	mov.w	fp, #1
 8018e44:	fa0b f202 	lsl.w	r2, fp, r2
 8018e48:	420a      	tst	r2, r1
 8018e4a:	d00a      	beq.n	8018e62 <__gethex+0x1da>
 8018e4c:	455b      	cmp	r3, fp
 8018e4e:	dd06      	ble.n	8018e5e <__gethex+0x1d6>
 8018e50:	f1a8 0102 	sub.w	r1, r8, #2
 8018e54:	4620      	mov	r0, r4
 8018e56:	f000 fea2 	bl	8019b9e <__any_on>
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	d138      	bne.n	8018ed0 <__gethex+0x248>
 8018e5e:	f04f 0b02 	mov.w	fp, #2
 8018e62:	4641      	mov	r1, r8
 8018e64:	4620      	mov	r0, r4
 8018e66:	f7ff fea7 	bl	8018bb8 <rshift>
 8018e6a:	4446      	add	r6, r8
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	42b3      	cmp	r3, r6
 8018e70:	da41      	bge.n	8018ef6 <__gethex+0x26e>
 8018e72:	4621      	mov	r1, r4
 8018e74:	4648      	mov	r0, r9
 8018e76:	f000 fa49 	bl	801930c <_Bfree>
 8018e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	6013      	str	r3, [r2, #0]
 8018e80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018e84:	e78a      	b.n	8018d9c <__gethex+0x114>
 8018e86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018e8a:	2a2e      	cmp	r2, #46	; 0x2e
 8018e8c:	d014      	beq.n	8018eb8 <__gethex+0x230>
 8018e8e:	2b20      	cmp	r3, #32
 8018e90:	d106      	bne.n	8018ea0 <__gethex+0x218>
 8018e92:	9b01      	ldr	r3, [sp, #4]
 8018e94:	f843 bb04 	str.w	fp, [r3], #4
 8018e98:	f04f 0b00 	mov.w	fp, #0
 8018e9c:	9301      	str	r3, [sp, #4]
 8018e9e:	465b      	mov	r3, fp
 8018ea0:	7828      	ldrb	r0, [r5, #0]
 8018ea2:	9303      	str	r3, [sp, #12]
 8018ea4:	f7ff feda 	bl	8018c5c <__hexdig_fun>
 8018ea8:	9b03      	ldr	r3, [sp, #12]
 8018eaa:	f000 000f 	and.w	r0, r0, #15
 8018eae:	4098      	lsls	r0, r3
 8018eb0:	ea4b 0b00 	orr.w	fp, fp, r0
 8018eb4:	3304      	adds	r3, #4
 8018eb6:	e7a1      	b.n	8018dfc <__gethex+0x174>
 8018eb8:	45a8      	cmp	r8, r5
 8018eba:	d8e8      	bhi.n	8018e8e <__gethex+0x206>
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	4628      	mov	r0, r5
 8018ec0:	9303      	str	r3, [sp, #12]
 8018ec2:	f7fe ff84 	bl	8017dce <strncmp>
 8018ec6:	4926      	ldr	r1, [pc, #152]	; (8018f60 <__gethex+0x2d8>)
 8018ec8:	9b03      	ldr	r3, [sp, #12]
 8018eca:	2800      	cmp	r0, #0
 8018ecc:	d1df      	bne.n	8018e8e <__gethex+0x206>
 8018ece:	e795      	b.n	8018dfc <__gethex+0x174>
 8018ed0:	f04f 0b03 	mov.w	fp, #3
 8018ed4:	e7c5      	b.n	8018e62 <__gethex+0x1da>
 8018ed6:	da0b      	bge.n	8018ef0 <__gethex+0x268>
 8018ed8:	eba5 0800 	sub.w	r8, r5, r0
 8018edc:	4621      	mov	r1, r4
 8018ede:	4642      	mov	r2, r8
 8018ee0:	4648      	mov	r0, r9
 8018ee2:	f000 fc2d 	bl	8019740 <__lshift>
 8018ee6:	eba6 0608 	sub.w	r6, r6, r8
 8018eea:	4604      	mov	r4, r0
 8018eec:	f100 0a14 	add.w	sl, r0, #20
 8018ef0:	f04f 0b00 	mov.w	fp, #0
 8018ef4:	e7ba      	b.n	8018e6c <__gethex+0x1e4>
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	42b3      	cmp	r3, r6
 8018efa:	dd73      	ble.n	8018fe4 <__gethex+0x35c>
 8018efc:	1b9e      	subs	r6, r3, r6
 8018efe:	42b5      	cmp	r5, r6
 8018f00:	dc34      	bgt.n	8018f6c <__gethex+0x2e4>
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	2b02      	cmp	r3, #2
 8018f06:	d023      	beq.n	8018f50 <__gethex+0x2c8>
 8018f08:	2b03      	cmp	r3, #3
 8018f0a:	d025      	beq.n	8018f58 <__gethex+0x2d0>
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	d115      	bne.n	8018f3c <__gethex+0x2b4>
 8018f10:	42b5      	cmp	r5, r6
 8018f12:	d113      	bne.n	8018f3c <__gethex+0x2b4>
 8018f14:	2d01      	cmp	r5, #1
 8018f16:	d10b      	bne.n	8018f30 <__gethex+0x2a8>
 8018f18:	9a02      	ldr	r2, [sp, #8]
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6013      	str	r3, [r2, #0]
 8018f1e:	2301      	movs	r3, #1
 8018f20:	6123      	str	r3, [r4, #16]
 8018f22:	f8ca 3000 	str.w	r3, [sl]
 8018f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f28:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018f2c:	601c      	str	r4, [r3, #0]
 8018f2e:	e735      	b.n	8018d9c <__gethex+0x114>
 8018f30:	1e69      	subs	r1, r5, #1
 8018f32:	4620      	mov	r0, r4
 8018f34:	f000 fe33 	bl	8019b9e <__any_on>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d1ed      	bne.n	8018f18 <__gethex+0x290>
 8018f3c:	4621      	mov	r1, r4
 8018f3e:	4648      	mov	r0, r9
 8018f40:	f000 f9e4 	bl	801930c <_Bfree>
 8018f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f46:	2300      	movs	r3, #0
 8018f48:	6013      	str	r3, [r2, #0]
 8018f4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018f4e:	e725      	b.n	8018d9c <__gethex+0x114>
 8018f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d1f2      	bne.n	8018f3c <__gethex+0x2b4>
 8018f56:	e7df      	b.n	8018f18 <__gethex+0x290>
 8018f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d1dc      	bne.n	8018f18 <__gethex+0x290>
 8018f5e:	e7ed      	b.n	8018f3c <__gethex+0x2b4>
 8018f60:	0801ceec 	.word	0x0801ceec
 8018f64:	0801d0f9 	.word	0x0801d0f9
 8018f68:	0801d10a 	.word	0x0801d10a
 8018f6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8018f70:	f1bb 0f00 	cmp.w	fp, #0
 8018f74:	d133      	bne.n	8018fde <__gethex+0x356>
 8018f76:	f1b8 0f00 	cmp.w	r8, #0
 8018f7a:	d004      	beq.n	8018f86 <__gethex+0x2fe>
 8018f7c:	4641      	mov	r1, r8
 8018f7e:	4620      	mov	r0, r4
 8018f80:	f000 fe0d 	bl	8019b9e <__any_on>
 8018f84:	4683      	mov	fp, r0
 8018f86:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018f90:	f008 081f 	and.w	r8, r8, #31
 8018f94:	fa03 f308 	lsl.w	r3, r3, r8
 8018f98:	4213      	tst	r3, r2
 8018f9a:	4631      	mov	r1, r6
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	bf18      	it	ne
 8018fa0:	f04b 0b02 	orrne.w	fp, fp, #2
 8018fa4:	1bad      	subs	r5, r5, r6
 8018fa6:	f7ff fe07 	bl	8018bb8 <rshift>
 8018faa:	687e      	ldr	r6, [r7, #4]
 8018fac:	f04f 0802 	mov.w	r8, #2
 8018fb0:	f1bb 0f00 	cmp.w	fp, #0
 8018fb4:	d04a      	beq.n	801904c <__gethex+0x3c4>
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	2b02      	cmp	r3, #2
 8018fba:	d016      	beq.n	8018fea <__gethex+0x362>
 8018fbc:	2b03      	cmp	r3, #3
 8018fbe:	d018      	beq.n	8018ff2 <__gethex+0x36a>
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d109      	bne.n	8018fd8 <__gethex+0x350>
 8018fc4:	f01b 0f02 	tst.w	fp, #2
 8018fc8:	d006      	beq.n	8018fd8 <__gethex+0x350>
 8018fca:	f8da 3000 	ldr.w	r3, [sl]
 8018fce:	ea4b 0b03 	orr.w	fp, fp, r3
 8018fd2:	f01b 0f01 	tst.w	fp, #1
 8018fd6:	d10f      	bne.n	8018ff8 <__gethex+0x370>
 8018fd8:	f048 0810 	orr.w	r8, r8, #16
 8018fdc:	e036      	b.n	801904c <__gethex+0x3c4>
 8018fde:	f04f 0b01 	mov.w	fp, #1
 8018fe2:	e7d0      	b.n	8018f86 <__gethex+0x2fe>
 8018fe4:	f04f 0801 	mov.w	r8, #1
 8018fe8:	e7e2      	b.n	8018fb0 <__gethex+0x328>
 8018fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fec:	f1c3 0301 	rsb	r3, r3, #1
 8018ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d0ef      	beq.n	8018fd8 <__gethex+0x350>
 8018ff8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018ffc:	f104 0214 	add.w	r2, r4, #20
 8019000:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8019004:	9301      	str	r3, [sp, #4]
 8019006:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801900a:	2300      	movs	r3, #0
 801900c:	4694      	mov	ip, r2
 801900e:	f852 1b04 	ldr.w	r1, [r2], #4
 8019012:	f1b1 3fff 	cmp.w	r1, #4294967295
 8019016:	d01e      	beq.n	8019056 <__gethex+0x3ce>
 8019018:	3101      	adds	r1, #1
 801901a:	f8cc 1000 	str.w	r1, [ip]
 801901e:	f1b8 0f02 	cmp.w	r8, #2
 8019022:	f104 0214 	add.w	r2, r4, #20
 8019026:	d13d      	bne.n	80190a4 <__gethex+0x41c>
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	3b01      	subs	r3, #1
 801902c:	42ab      	cmp	r3, r5
 801902e:	d10b      	bne.n	8019048 <__gethex+0x3c0>
 8019030:	1169      	asrs	r1, r5, #5
 8019032:	2301      	movs	r3, #1
 8019034:	f005 051f 	and.w	r5, r5, #31
 8019038:	fa03 f505 	lsl.w	r5, r3, r5
 801903c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019040:	421d      	tst	r5, r3
 8019042:	bf18      	it	ne
 8019044:	f04f 0801 	movne.w	r8, #1
 8019048:	f048 0820 	orr.w	r8, r8, #32
 801904c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801904e:	601c      	str	r4, [r3, #0]
 8019050:	9b02      	ldr	r3, [sp, #8]
 8019052:	601e      	str	r6, [r3, #0]
 8019054:	e6a2      	b.n	8018d9c <__gethex+0x114>
 8019056:	4290      	cmp	r0, r2
 8019058:	f842 3c04 	str.w	r3, [r2, #-4]
 801905c:	d8d6      	bhi.n	801900c <__gethex+0x384>
 801905e:	68a2      	ldr	r2, [r4, #8]
 8019060:	4593      	cmp	fp, r2
 8019062:	db17      	blt.n	8019094 <__gethex+0x40c>
 8019064:	6861      	ldr	r1, [r4, #4]
 8019066:	4648      	mov	r0, r9
 8019068:	3101      	adds	r1, #1
 801906a:	f000 f90f 	bl	801928c <_Balloc>
 801906e:	4682      	mov	sl, r0
 8019070:	b918      	cbnz	r0, 801907a <__gethex+0x3f2>
 8019072:	4b1b      	ldr	r3, [pc, #108]	; (80190e0 <__gethex+0x458>)
 8019074:	4602      	mov	r2, r0
 8019076:	2184      	movs	r1, #132	; 0x84
 8019078:	e6b3      	b.n	8018de2 <__gethex+0x15a>
 801907a:	6922      	ldr	r2, [r4, #16]
 801907c:	3202      	adds	r2, #2
 801907e:	f104 010c 	add.w	r1, r4, #12
 8019082:	0092      	lsls	r2, r2, #2
 8019084:	300c      	adds	r0, #12
 8019086:	f7fe ff41 	bl	8017f0c <memcpy>
 801908a:	4621      	mov	r1, r4
 801908c:	4648      	mov	r0, r9
 801908e:	f000 f93d 	bl	801930c <_Bfree>
 8019092:	4654      	mov	r4, sl
 8019094:	6922      	ldr	r2, [r4, #16]
 8019096:	1c51      	adds	r1, r2, #1
 8019098:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801909c:	6121      	str	r1, [r4, #16]
 801909e:	2101      	movs	r1, #1
 80190a0:	6151      	str	r1, [r2, #20]
 80190a2:	e7bc      	b.n	801901e <__gethex+0x396>
 80190a4:	6921      	ldr	r1, [r4, #16]
 80190a6:	4559      	cmp	r1, fp
 80190a8:	dd0b      	ble.n	80190c2 <__gethex+0x43a>
 80190aa:	2101      	movs	r1, #1
 80190ac:	4620      	mov	r0, r4
 80190ae:	f7ff fd83 	bl	8018bb8 <rshift>
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	3601      	adds	r6, #1
 80190b6:	42b3      	cmp	r3, r6
 80190b8:	f6ff aedb 	blt.w	8018e72 <__gethex+0x1ea>
 80190bc:	f04f 0801 	mov.w	r8, #1
 80190c0:	e7c2      	b.n	8019048 <__gethex+0x3c0>
 80190c2:	f015 051f 	ands.w	r5, r5, #31
 80190c6:	d0f9      	beq.n	80190bc <__gethex+0x434>
 80190c8:	9b01      	ldr	r3, [sp, #4]
 80190ca:	441a      	add	r2, r3
 80190cc:	f1c5 0520 	rsb	r5, r5, #32
 80190d0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80190d4:	f000 f9cc 	bl	8019470 <__hi0bits>
 80190d8:	42a8      	cmp	r0, r5
 80190da:	dbe6      	blt.n	80190aa <__gethex+0x422>
 80190dc:	e7ee      	b.n	80190bc <__gethex+0x434>
 80190de:	bf00      	nop
 80190e0:	0801d0f9 	.word	0x0801d0f9

080190e4 <L_shift>:
 80190e4:	f1c2 0208 	rsb	r2, r2, #8
 80190e8:	0092      	lsls	r2, r2, #2
 80190ea:	b570      	push	{r4, r5, r6, lr}
 80190ec:	f1c2 0620 	rsb	r6, r2, #32
 80190f0:	6843      	ldr	r3, [r0, #4]
 80190f2:	6804      	ldr	r4, [r0, #0]
 80190f4:	fa03 f506 	lsl.w	r5, r3, r6
 80190f8:	432c      	orrs	r4, r5
 80190fa:	40d3      	lsrs	r3, r2
 80190fc:	6004      	str	r4, [r0, #0]
 80190fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8019102:	4288      	cmp	r0, r1
 8019104:	d3f4      	bcc.n	80190f0 <L_shift+0xc>
 8019106:	bd70      	pop	{r4, r5, r6, pc}

08019108 <__match>:
 8019108:	b530      	push	{r4, r5, lr}
 801910a:	6803      	ldr	r3, [r0, #0]
 801910c:	3301      	adds	r3, #1
 801910e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019112:	b914      	cbnz	r4, 801911a <__match+0x12>
 8019114:	6003      	str	r3, [r0, #0]
 8019116:	2001      	movs	r0, #1
 8019118:	bd30      	pop	{r4, r5, pc}
 801911a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801911e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019122:	2d19      	cmp	r5, #25
 8019124:	bf98      	it	ls
 8019126:	3220      	addls	r2, #32
 8019128:	42a2      	cmp	r2, r4
 801912a:	d0f0      	beq.n	801910e <__match+0x6>
 801912c:	2000      	movs	r0, #0
 801912e:	e7f3      	b.n	8019118 <__match+0x10>

08019130 <__hexnan>:
 8019130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019134:	680b      	ldr	r3, [r1, #0]
 8019136:	6801      	ldr	r1, [r0, #0]
 8019138:	115e      	asrs	r6, r3, #5
 801913a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801913e:	f013 031f 	ands.w	r3, r3, #31
 8019142:	b087      	sub	sp, #28
 8019144:	bf18      	it	ne
 8019146:	3604      	addne	r6, #4
 8019148:	2500      	movs	r5, #0
 801914a:	1f37      	subs	r7, r6, #4
 801914c:	4682      	mov	sl, r0
 801914e:	4690      	mov	r8, r2
 8019150:	9301      	str	r3, [sp, #4]
 8019152:	f846 5c04 	str.w	r5, [r6, #-4]
 8019156:	46b9      	mov	r9, r7
 8019158:	463c      	mov	r4, r7
 801915a:	9502      	str	r5, [sp, #8]
 801915c:	46ab      	mov	fp, r5
 801915e:	784a      	ldrb	r2, [r1, #1]
 8019160:	1c4b      	adds	r3, r1, #1
 8019162:	9303      	str	r3, [sp, #12]
 8019164:	b342      	cbz	r2, 80191b8 <__hexnan+0x88>
 8019166:	4610      	mov	r0, r2
 8019168:	9105      	str	r1, [sp, #20]
 801916a:	9204      	str	r2, [sp, #16]
 801916c:	f7ff fd76 	bl	8018c5c <__hexdig_fun>
 8019170:	2800      	cmp	r0, #0
 8019172:	d14f      	bne.n	8019214 <__hexnan+0xe4>
 8019174:	9a04      	ldr	r2, [sp, #16]
 8019176:	9905      	ldr	r1, [sp, #20]
 8019178:	2a20      	cmp	r2, #32
 801917a:	d818      	bhi.n	80191ae <__hexnan+0x7e>
 801917c:	9b02      	ldr	r3, [sp, #8]
 801917e:	459b      	cmp	fp, r3
 8019180:	dd13      	ble.n	80191aa <__hexnan+0x7a>
 8019182:	454c      	cmp	r4, r9
 8019184:	d206      	bcs.n	8019194 <__hexnan+0x64>
 8019186:	2d07      	cmp	r5, #7
 8019188:	dc04      	bgt.n	8019194 <__hexnan+0x64>
 801918a:	462a      	mov	r2, r5
 801918c:	4649      	mov	r1, r9
 801918e:	4620      	mov	r0, r4
 8019190:	f7ff ffa8 	bl	80190e4 <L_shift>
 8019194:	4544      	cmp	r4, r8
 8019196:	d950      	bls.n	801923a <__hexnan+0x10a>
 8019198:	2300      	movs	r3, #0
 801919a:	f1a4 0904 	sub.w	r9, r4, #4
 801919e:	f844 3c04 	str.w	r3, [r4, #-4]
 80191a2:	f8cd b008 	str.w	fp, [sp, #8]
 80191a6:	464c      	mov	r4, r9
 80191a8:	461d      	mov	r5, r3
 80191aa:	9903      	ldr	r1, [sp, #12]
 80191ac:	e7d7      	b.n	801915e <__hexnan+0x2e>
 80191ae:	2a29      	cmp	r2, #41	; 0x29
 80191b0:	d155      	bne.n	801925e <__hexnan+0x12e>
 80191b2:	3102      	adds	r1, #2
 80191b4:	f8ca 1000 	str.w	r1, [sl]
 80191b8:	f1bb 0f00 	cmp.w	fp, #0
 80191bc:	d04f      	beq.n	801925e <__hexnan+0x12e>
 80191be:	454c      	cmp	r4, r9
 80191c0:	d206      	bcs.n	80191d0 <__hexnan+0xa0>
 80191c2:	2d07      	cmp	r5, #7
 80191c4:	dc04      	bgt.n	80191d0 <__hexnan+0xa0>
 80191c6:	462a      	mov	r2, r5
 80191c8:	4649      	mov	r1, r9
 80191ca:	4620      	mov	r0, r4
 80191cc:	f7ff ff8a 	bl	80190e4 <L_shift>
 80191d0:	4544      	cmp	r4, r8
 80191d2:	d934      	bls.n	801923e <__hexnan+0x10e>
 80191d4:	f1a8 0204 	sub.w	r2, r8, #4
 80191d8:	4623      	mov	r3, r4
 80191da:	f853 1b04 	ldr.w	r1, [r3], #4
 80191de:	f842 1f04 	str.w	r1, [r2, #4]!
 80191e2:	429f      	cmp	r7, r3
 80191e4:	d2f9      	bcs.n	80191da <__hexnan+0xaa>
 80191e6:	1b3b      	subs	r3, r7, r4
 80191e8:	f023 0303 	bic.w	r3, r3, #3
 80191ec:	3304      	adds	r3, #4
 80191ee:	3e03      	subs	r6, #3
 80191f0:	3401      	adds	r4, #1
 80191f2:	42a6      	cmp	r6, r4
 80191f4:	bf38      	it	cc
 80191f6:	2304      	movcc	r3, #4
 80191f8:	4443      	add	r3, r8
 80191fa:	2200      	movs	r2, #0
 80191fc:	f843 2b04 	str.w	r2, [r3], #4
 8019200:	429f      	cmp	r7, r3
 8019202:	d2fb      	bcs.n	80191fc <__hexnan+0xcc>
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	b91b      	cbnz	r3, 8019210 <__hexnan+0xe0>
 8019208:	4547      	cmp	r7, r8
 801920a:	d126      	bne.n	801925a <__hexnan+0x12a>
 801920c:	2301      	movs	r3, #1
 801920e:	603b      	str	r3, [r7, #0]
 8019210:	2005      	movs	r0, #5
 8019212:	e025      	b.n	8019260 <__hexnan+0x130>
 8019214:	3501      	adds	r5, #1
 8019216:	2d08      	cmp	r5, #8
 8019218:	f10b 0b01 	add.w	fp, fp, #1
 801921c:	dd06      	ble.n	801922c <__hexnan+0xfc>
 801921e:	4544      	cmp	r4, r8
 8019220:	d9c3      	bls.n	80191aa <__hexnan+0x7a>
 8019222:	2300      	movs	r3, #0
 8019224:	f844 3c04 	str.w	r3, [r4, #-4]
 8019228:	2501      	movs	r5, #1
 801922a:	3c04      	subs	r4, #4
 801922c:	6822      	ldr	r2, [r4, #0]
 801922e:	f000 000f 	and.w	r0, r0, #15
 8019232:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8019236:	6020      	str	r0, [r4, #0]
 8019238:	e7b7      	b.n	80191aa <__hexnan+0x7a>
 801923a:	2508      	movs	r5, #8
 801923c:	e7b5      	b.n	80191aa <__hexnan+0x7a>
 801923e:	9b01      	ldr	r3, [sp, #4]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d0df      	beq.n	8019204 <__hexnan+0xd4>
 8019244:	f1c3 0320 	rsb	r3, r3, #32
 8019248:	f04f 32ff 	mov.w	r2, #4294967295
 801924c:	40da      	lsrs	r2, r3
 801924e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8019252:	4013      	ands	r3, r2
 8019254:	f846 3c04 	str.w	r3, [r6, #-4]
 8019258:	e7d4      	b.n	8019204 <__hexnan+0xd4>
 801925a:	3f04      	subs	r7, #4
 801925c:	e7d2      	b.n	8019204 <__hexnan+0xd4>
 801925e:	2004      	movs	r0, #4
 8019260:	b007      	add	sp, #28
 8019262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019266 <__ascii_mbtowc>:
 8019266:	b082      	sub	sp, #8
 8019268:	b901      	cbnz	r1, 801926c <__ascii_mbtowc+0x6>
 801926a:	a901      	add	r1, sp, #4
 801926c:	b142      	cbz	r2, 8019280 <__ascii_mbtowc+0x1a>
 801926e:	b14b      	cbz	r3, 8019284 <__ascii_mbtowc+0x1e>
 8019270:	7813      	ldrb	r3, [r2, #0]
 8019272:	600b      	str	r3, [r1, #0]
 8019274:	7812      	ldrb	r2, [r2, #0]
 8019276:	1e10      	subs	r0, r2, #0
 8019278:	bf18      	it	ne
 801927a:	2001      	movne	r0, #1
 801927c:	b002      	add	sp, #8
 801927e:	4770      	bx	lr
 8019280:	4610      	mov	r0, r2
 8019282:	e7fb      	b.n	801927c <__ascii_mbtowc+0x16>
 8019284:	f06f 0001 	mvn.w	r0, #1
 8019288:	e7f8      	b.n	801927c <__ascii_mbtowc+0x16>
	...

0801928c <_Balloc>:
 801928c:	b570      	push	{r4, r5, r6, lr}
 801928e:	69c6      	ldr	r6, [r0, #28]
 8019290:	4604      	mov	r4, r0
 8019292:	460d      	mov	r5, r1
 8019294:	b976      	cbnz	r6, 80192b4 <_Balloc+0x28>
 8019296:	2010      	movs	r0, #16
 8019298:	f7fd f8da 	bl	8016450 <malloc>
 801929c:	4602      	mov	r2, r0
 801929e:	61e0      	str	r0, [r4, #28]
 80192a0:	b920      	cbnz	r0, 80192ac <_Balloc+0x20>
 80192a2:	4b18      	ldr	r3, [pc, #96]	; (8019304 <_Balloc+0x78>)
 80192a4:	4818      	ldr	r0, [pc, #96]	; (8019308 <_Balloc+0x7c>)
 80192a6:	216b      	movs	r1, #107	; 0x6b
 80192a8:	f000 fec8 	bl	801a03c <__assert_func>
 80192ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192b0:	6006      	str	r6, [r0, #0]
 80192b2:	60c6      	str	r6, [r0, #12]
 80192b4:	69e6      	ldr	r6, [r4, #28]
 80192b6:	68f3      	ldr	r3, [r6, #12]
 80192b8:	b183      	cbz	r3, 80192dc <_Balloc+0x50>
 80192ba:	69e3      	ldr	r3, [r4, #28]
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80192c2:	b9b8      	cbnz	r0, 80192f4 <_Balloc+0x68>
 80192c4:	2101      	movs	r1, #1
 80192c6:	fa01 f605 	lsl.w	r6, r1, r5
 80192ca:	1d72      	adds	r2, r6, #5
 80192cc:	0092      	lsls	r2, r2, #2
 80192ce:	4620      	mov	r0, r4
 80192d0:	f000 fed2 	bl	801a078 <_calloc_r>
 80192d4:	b160      	cbz	r0, 80192f0 <_Balloc+0x64>
 80192d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80192da:	e00e      	b.n	80192fa <_Balloc+0x6e>
 80192dc:	2221      	movs	r2, #33	; 0x21
 80192de:	2104      	movs	r1, #4
 80192e0:	4620      	mov	r0, r4
 80192e2:	f000 fec9 	bl	801a078 <_calloc_r>
 80192e6:	69e3      	ldr	r3, [r4, #28]
 80192e8:	60f0      	str	r0, [r6, #12]
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d1e4      	bne.n	80192ba <_Balloc+0x2e>
 80192f0:	2000      	movs	r0, #0
 80192f2:	bd70      	pop	{r4, r5, r6, pc}
 80192f4:	6802      	ldr	r2, [r0, #0]
 80192f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192fa:	2300      	movs	r3, #0
 80192fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019300:	e7f7      	b.n	80192f2 <_Balloc+0x66>
 8019302:	bf00      	nop
 8019304:	0801d08a 	.word	0x0801d08a
 8019308:	0801d16a 	.word	0x0801d16a

0801930c <_Bfree>:
 801930c:	b570      	push	{r4, r5, r6, lr}
 801930e:	69c6      	ldr	r6, [r0, #28]
 8019310:	4605      	mov	r5, r0
 8019312:	460c      	mov	r4, r1
 8019314:	b976      	cbnz	r6, 8019334 <_Bfree+0x28>
 8019316:	2010      	movs	r0, #16
 8019318:	f7fd f89a 	bl	8016450 <malloc>
 801931c:	4602      	mov	r2, r0
 801931e:	61e8      	str	r0, [r5, #28]
 8019320:	b920      	cbnz	r0, 801932c <_Bfree+0x20>
 8019322:	4b09      	ldr	r3, [pc, #36]	; (8019348 <_Bfree+0x3c>)
 8019324:	4809      	ldr	r0, [pc, #36]	; (801934c <_Bfree+0x40>)
 8019326:	218f      	movs	r1, #143	; 0x8f
 8019328:	f000 fe88 	bl	801a03c <__assert_func>
 801932c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019330:	6006      	str	r6, [r0, #0]
 8019332:	60c6      	str	r6, [r0, #12]
 8019334:	b13c      	cbz	r4, 8019346 <_Bfree+0x3a>
 8019336:	69eb      	ldr	r3, [r5, #28]
 8019338:	6862      	ldr	r2, [r4, #4]
 801933a:	68db      	ldr	r3, [r3, #12]
 801933c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019340:	6021      	str	r1, [r4, #0]
 8019342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	0801d08a 	.word	0x0801d08a
 801934c:	0801d16a 	.word	0x0801d16a

08019350 <__multadd>:
 8019350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019354:	690d      	ldr	r5, [r1, #16]
 8019356:	4607      	mov	r7, r0
 8019358:	460c      	mov	r4, r1
 801935a:	461e      	mov	r6, r3
 801935c:	f101 0c14 	add.w	ip, r1, #20
 8019360:	2000      	movs	r0, #0
 8019362:	f8dc 3000 	ldr.w	r3, [ip]
 8019366:	b299      	uxth	r1, r3
 8019368:	fb02 6101 	mla	r1, r2, r1, r6
 801936c:	0c1e      	lsrs	r6, r3, #16
 801936e:	0c0b      	lsrs	r3, r1, #16
 8019370:	fb02 3306 	mla	r3, r2, r6, r3
 8019374:	b289      	uxth	r1, r1
 8019376:	3001      	adds	r0, #1
 8019378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801937c:	4285      	cmp	r5, r0
 801937e:	f84c 1b04 	str.w	r1, [ip], #4
 8019382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019386:	dcec      	bgt.n	8019362 <__multadd+0x12>
 8019388:	b30e      	cbz	r6, 80193ce <__multadd+0x7e>
 801938a:	68a3      	ldr	r3, [r4, #8]
 801938c:	42ab      	cmp	r3, r5
 801938e:	dc19      	bgt.n	80193c4 <__multadd+0x74>
 8019390:	6861      	ldr	r1, [r4, #4]
 8019392:	4638      	mov	r0, r7
 8019394:	3101      	adds	r1, #1
 8019396:	f7ff ff79 	bl	801928c <_Balloc>
 801939a:	4680      	mov	r8, r0
 801939c:	b928      	cbnz	r0, 80193aa <__multadd+0x5a>
 801939e:	4602      	mov	r2, r0
 80193a0:	4b0c      	ldr	r3, [pc, #48]	; (80193d4 <__multadd+0x84>)
 80193a2:	480d      	ldr	r0, [pc, #52]	; (80193d8 <__multadd+0x88>)
 80193a4:	21ba      	movs	r1, #186	; 0xba
 80193a6:	f000 fe49 	bl	801a03c <__assert_func>
 80193aa:	6922      	ldr	r2, [r4, #16]
 80193ac:	3202      	adds	r2, #2
 80193ae:	f104 010c 	add.w	r1, r4, #12
 80193b2:	0092      	lsls	r2, r2, #2
 80193b4:	300c      	adds	r0, #12
 80193b6:	f7fe fda9 	bl	8017f0c <memcpy>
 80193ba:	4621      	mov	r1, r4
 80193bc:	4638      	mov	r0, r7
 80193be:	f7ff ffa5 	bl	801930c <_Bfree>
 80193c2:	4644      	mov	r4, r8
 80193c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80193c8:	3501      	adds	r5, #1
 80193ca:	615e      	str	r6, [r3, #20]
 80193cc:	6125      	str	r5, [r4, #16]
 80193ce:	4620      	mov	r0, r4
 80193d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d4:	0801d0f9 	.word	0x0801d0f9
 80193d8:	0801d16a 	.word	0x0801d16a

080193dc <__s2b>:
 80193dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193e0:	460c      	mov	r4, r1
 80193e2:	4615      	mov	r5, r2
 80193e4:	461f      	mov	r7, r3
 80193e6:	2209      	movs	r2, #9
 80193e8:	3308      	adds	r3, #8
 80193ea:	4606      	mov	r6, r0
 80193ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80193f0:	2100      	movs	r1, #0
 80193f2:	2201      	movs	r2, #1
 80193f4:	429a      	cmp	r2, r3
 80193f6:	db09      	blt.n	801940c <__s2b+0x30>
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7ff ff47 	bl	801928c <_Balloc>
 80193fe:	b940      	cbnz	r0, 8019412 <__s2b+0x36>
 8019400:	4602      	mov	r2, r0
 8019402:	4b19      	ldr	r3, [pc, #100]	; (8019468 <__s2b+0x8c>)
 8019404:	4819      	ldr	r0, [pc, #100]	; (801946c <__s2b+0x90>)
 8019406:	21d3      	movs	r1, #211	; 0xd3
 8019408:	f000 fe18 	bl	801a03c <__assert_func>
 801940c:	0052      	lsls	r2, r2, #1
 801940e:	3101      	adds	r1, #1
 8019410:	e7f0      	b.n	80193f4 <__s2b+0x18>
 8019412:	9b08      	ldr	r3, [sp, #32]
 8019414:	6143      	str	r3, [r0, #20]
 8019416:	2d09      	cmp	r5, #9
 8019418:	f04f 0301 	mov.w	r3, #1
 801941c:	6103      	str	r3, [r0, #16]
 801941e:	dd16      	ble.n	801944e <__s2b+0x72>
 8019420:	f104 0909 	add.w	r9, r4, #9
 8019424:	46c8      	mov	r8, r9
 8019426:	442c      	add	r4, r5
 8019428:	f818 3b01 	ldrb.w	r3, [r8], #1
 801942c:	4601      	mov	r1, r0
 801942e:	3b30      	subs	r3, #48	; 0x30
 8019430:	220a      	movs	r2, #10
 8019432:	4630      	mov	r0, r6
 8019434:	f7ff ff8c 	bl	8019350 <__multadd>
 8019438:	45a0      	cmp	r8, r4
 801943a:	d1f5      	bne.n	8019428 <__s2b+0x4c>
 801943c:	f1a5 0408 	sub.w	r4, r5, #8
 8019440:	444c      	add	r4, r9
 8019442:	1b2d      	subs	r5, r5, r4
 8019444:	1963      	adds	r3, r4, r5
 8019446:	42bb      	cmp	r3, r7
 8019448:	db04      	blt.n	8019454 <__s2b+0x78>
 801944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801944e:	340a      	adds	r4, #10
 8019450:	2509      	movs	r5, #9
 8019452:	e7f6      	b.n	8019442 <__s2b+0x66>
 8019454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019458:	4601      	mov	r1, r0
 801945a:	3b30      	subs	r3, #48	; 0x30
 801945c:	220a      	movs	r2, #10
 801945e:	4630      	mov	r0, r6
 8019460:	f7ff ff76 	bl	8019350 <__multadd>
 8019464:	e7ee      	b.n	8019444 <__s2b+0x68>
 8019466:	bf00      	nop
 8019468:	0801d0f9 	.word	0x0801d0f9
 801946c:	0801d16a 	.word	0x0801d16a

08019470 <__hi0bits>:
 8019470:	0c03      	lsrs	r3, r0, #16
 8019472:	041b      	lsls	r3, r3, #16
 8019474:	b9d3      	cbnz	r3, 80194ac <__hi0bits+0x3c>
 8019476:	0400      	lsls	r0, r0, #16
 8019478:	2310      	movs	r3, #16
 801947a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801947e:	bf04      	itt	eq
 8019480:	0200      	lsleq	r0, r0, #8
 8019482:	3308      	addeq	r3, #8
 8019484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019488:	bf04      	itt	eq
 801948a:	0100      	lsleq	r0, r0, #4
 801948c:	3304      	addeq	r3, #4
 801948e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019492:	bf04      	itt	eq
 8019494:	0080      	lsleq	r0, r0, #2
 8019496:	3302      	addeq	r3, #2
 8019498:	2800      	cmp	r0, #0
 801949a:	db05      	blt.n	80194a8 <__hi0bits+0x38>
 801949c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80194a0:	f103 0301 	add.w	r3, r3, #1
 80194a4:	bf08      	it	eq
 80194a6:	2320      	moveq	r3, #32
 80194a8:	4618      	mov	r0, r3
 80194aa:	4770      	bx	lr
 80194ac:	2300      	movs	r3, #0
 80194ae:	e7e4      	b.n	801947a <__hi0bits+0xa>

080194b0 <__lo0bits>:
 80194b0:	6803      	ldr	r3, [r0, #0]
 80194b2:	f013 0207 	ands.w	r2, r3, #7
 80194b6:	d00c      	beq.n	80194d2 <__lo0bits+0x22>
 80194b8:	07d9      	lsls	r1, r3, #31
 80194ba:	d422      	bmi.n	8019502 <__lo0bits+0x52>
 80194bc:	079a      	lsls	r2, r3, #30
 80194be:	bf49      	itett	mi
 80194c0:	085b      	lsrmi	r3, r3, #1
 80194c2:	089b      	lsrpl	r3, r3, #2
 80194c4:	6003      	strmi	r3, [r0, #0]
 80194c6:	2201      	movmi	r2, #1
 80194c8:	bf5c      	itt	pl
 80194ca:	6003      	strpl	r3, [r0, #0]
 80194cc:	2202      	movpl	r2, #2
 80194ce:	4610      	mov	r0, r2
 80194d0:	4770      	bx	lr
 80194d2:	b299      	uxth	r1, r3
 80194d4:	b909      	cbnz	r1, 80194da <__lo0bits+0x2a>
 80194d6:	0c1b      	lsrs	r3, r3, #16
 80194d8:	2210      	movs	r2, #16
 80194da:	b2d9      	uxtb	r1, r3
 80194dc:	b909      	cbnz	r1, 80194e2 <__lo0bits+0x32>
 80194de:	3208      	adds	r2, #8
 80194e0:	0a1b      	lsrs	r3, r3, #8
 80194e2:	0719      	lsls	r1, r3, #28
 80194e4:	bf04      	itt	eq
 80194e6:	091b      	lsreq	r3, r3, #4
 80194e8:	3204      	addeq	r2, #4
 80194ea:	0799      	lsls	r1, r3, #30
 80194ec:	bf04      	itt	eq
 80194ee:	089b      	lsreq	r3, r3, #2
 80194f0:	3202      	addeq	r2, #2
 80194f2:	07d9      	lsls	r1, r3, #31
 80194f4:	d403      	bmi.n	80194fe <__lo0bits+0x4e>
 80194f6:	085b      	lsrs	r3, r3, #1
 80194f8:	f102 0201 	add.w	r2, r2, #1
 80194fc:	d003      	beq.n	8019506 <__lo0bits+0x56>
 80194fe:	6003      	str	r3, [r0, #0]
 8019500:	e7e5      	b.n	80194ce <__lo0bits+0x1e>
 8019502:	2200      	movs	r2, #0
 8019504:	e7e3      	b.n	80194ce <__lo0bits+0x1e>
 8019506:	2220      	movs	r2, #32
 8019508:	e7e1      	b.n	80194ce <__lo0bits+0x1e>
	...

0801950c <__i2b>:
 801950c:	b510      	push	{r4, lr}
 801950e:	460c      	mov	r4, r1
 8019510:	2101      	movs	r1, #1
 8019512:	f7ff febb 	bl	801928c <_Balloc>
 8019516:	4602      	mov	r2, r0
 8019518:	b928      	cbnz	r0, 8019526 <__i2b+0x1a>
 801951a:	4b05      	ldr	r3, [pc, #20]	; (8019530 <__i2b+0x24>)
 801951c:	4805      	ldr	r0, [pc, #20]	; (8019534 <__i2b+0x28>)
 801951e:	f240 1145 	movw	r1, #325	; 0x145
 8019522:	f000 fd8b 	bl	801a03c <__assert_func>
 8019526:	2301      	movs	r3, #1
 8019528:	6144      	str	r4, [r0, #20]
 801952a:	6103      	str	r3, [r0, #16]
 801952c:	bd10      	pop	{r4, pc}
 801952e:	bf00      	nop
 8019530:	0801d0f9 	.word	0x0801d0f9
 8019534:	0801d16a 	.word	0x0801d16a

08019538 <__multiply>:
 8019538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801953c:	4691      	mov	r9, r2
 801953e:	690a      	ldr	r2, [r1, #16]
 8019540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019544:	429a      	cmp	r2, r3
 8019546:	bfb8      	it	lt
 8019548:	460b      	movlt	r3, r1
 801954a:	460c      	mov	r4, r1
 801954c:	bfbc      	itt	lt
 801954e:	464c      	movlt	r4, r9
 8019550:	4699      	movlt	r9, r3
 8019552:	6927      	ldr	r7, [r4, #16]
 8019554:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019558:	68a3      	ldr	r3, [r4, #8]
 801955a:	6861      	ldr	r1, [r4, #4]
 801955c:	eb07 060a 	add.w	r6, r7, sl
 8019560:	42b3      	cmp	r3, r6
 8019562:	b085      	sub	sp, #20
 8019564:	bfb8      	it	lt
 8019566:	3101      	addlt	r1, #1
 8019568:	f7ff fe90 	bl	801928c <_Balloc>
 801956c:	b930      	cbnz	r0, 801957c <__multiply+0x44>
 801956e:	4602      	mov	r2, r0
 8019570:	4b44      	ldr	r3, [pc, #272]	; (8019684 <__multiply+0x14c>)
 8019572:	4845      	ldr	r0, [pc, #276]	; (8019688 <__multiply+0x150>)
 8019574:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019578:	f000 fd60 	bl	801a03c <__assert_func>
 801957c:	f100 0514 	add.w	r5, r0, #20
 8019580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019584:	462b      	mov	r3, r5
 8019586:	2200      	movs	r2, #0
 8019588:	4543      	cmp	r3, r8
 801958a:	d321      	bcc.n	80195d0 <__multiply+0x98>
 801958c:	f104 0314 	add.w	r3, r4, #20
 8019590:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019594:	f109 0314 	add.w	r3, r9, #20
 8019598:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801959c:	9202      	str	r2, [sp, #8]
 801959e:	1b3a      	subs	r2, r7, r4
 80195a0:	3a15      	subs	r2, #21
 80195a2:	f022 0203 	bic.w	r2, r2, #3
 80195a6:	3204      	adds	r2, #4
 80195a8:	f104 0115 	add.w	r1, r4, #21
 80195ac:	428f      	cmp	r7, r1
 80195ae:	bf38      	it	cc
 80195b0:	2204      	movcc	r2, #4
 80195b2:	9201      	str	r2, [sp, #4]
 80195b4:	9a02      	ldr	r2, [sp, #8]
 80195b6:	9303      	str	r3, [sp, #12]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d80c      	bhi.n	80195d6 <__multiply+0x9e>
 80195bc:	2e00      	cmp	r6, #0
 80195be:	dd03      	ble.n	80195c8 <__multiply+0x90>
 80195c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d05b      	beq.n	8019680 <__multiply+0x148>
 80195c8:	6106      	str	r6, [r0, #16]
 80195ca:	b005      	add	sp, #20
 80195cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195d0:	f843 2b04 	str.w	r2, [r3], #4
 80195d4:	e7d8      	b.n	8019588 <__multiply+0x50>
 80195d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80195da:	f1ba 0f00 	cmp.w	sl, #0
 80195de:	d024      	beq.n	801962a <__multiply+0xf2>
 80195e0:	f104 0e14 	add.w	lr, r4, #20
 80195e4:	46a9      	mov	r9, r5
 80195e6:	f04f 0c00 	mov.w	ip, #0
 80195ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80195ee:	f8d9 1000 	ldr.w	r1, [r9]
 80195f2:	fa1f fb82 	uxth.w	fp, r2
 80195f6:	b289      	uxth	r1, r1
 80195f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80195fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019600:	f8d9 2000 	ldr.w	r2, [r9]
 8019604:	4461      	add	r1, ip
 8019606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801960a:	fb0a c20b 	mla	r2, sl, fp, ip
 801960e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019612:	b289      	uxth	r1, r1
 8019614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019618:	4577      	cmp	r7, lr
 801961a:	f849 1b04 	str.w	r1, [r9], #4
 801961e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019622:	d8e2      	bhi.n	80195ea <__multiply+0xb2>
 8019624:	9a01      	ldr	r2, [sp, #4]
 8019626:	f845 c002 	str.w	ip, [r5, r2]
 801962a:	9a03      	ldr	r2, [sp, #12]
 801962c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019630:	3304      	adds	r3, #4
 8019632:	f1b9 0f00 	cmp.w	r9, #0
 8019636:	d021      	beq.n	801967c <__multiply+0x144>
 8019638:	6829      	ldr	r1, [r5, #0]
 801963a:	f104 0c14 	add.w	ip, r4, #20
 801963e:	46ae      	mov	lr, r5
 8019640:	f04f 0a00 	mov.w	sl, #0
 8019644:	f8bc b000 	ldrh.w	fp, [ip]
 8019648:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801964c:	fb09 220b 	mla	r2, r9, fp, r2
 8019650:	4452      	add	r2, sl
 8019652:	b289      	uxth	r1, r1
 8019654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019658:	f84e 1b04 	str.w	r1, [lr], #4
 801965c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019664:	f8be 1000 	ldrh.w	r1, [lr]
 8019668:	fb09 110a 	mla	r1, r9, sl, r1
 801966c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019670:	4567      	cmp	r7, ip
 8019672:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019676:	d8e5      	bhi.n	8019644 <__multiply+0x10c>
 8019678:	9a01      	ldr	r2, [sp, #4]
 801967a:	50a9      	str	r1, [r5, r2]
 801967c:	3504      	adds	r5, #4
 801967e:	e799      	b.n	80195b4 <__multiply+0x7c>
 8019680:	3e01      	subs	r6, #1
 8019682:	e79b      	b.n	80195bc <__multiply+0x84>
 8019684:	0801d0f9 	.word	0x0801d0f9
 8019688:	0801d16a 	.word	0x0801d16a

0801968c <__pow5mult>:
 801968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019690:	4615      	mov	r5, r2
 8019692:	f012 0203 	ands.w	r2, r2, #3
 8019696:	4606      	mov	r6, r0
 8019698:	460f      	mov	r7, r1
 801969a:	d007      	beq.n	80196ac <__pow5mult+0x20>
 801969c:	4c25      	ldr	r4, [pc, #148]	; (8019734 <__pow5mult+0xa8>)
 801969e:	3a01      	subs	r2, #1
 80196a0:	2300      	movs	r3, #0
 80196a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80196a6:	f7ff fe53 	bl	8019350 <__multadd>
 80196aa:	4607      	mov	r7, r0
 80196ac:	10ad      	asrs	r5, r5, #2
 80196ae:	d03d      	beq.n	801972c <__pow5mult+0xa0>
 80196b0:	69f4      	ldr	r4, [r6, #28]
 80196b2:	b97c      	cbnz	r4, 80196d4 <__pow5mult+0x48>
 80196b4:	2010      	movs	r0, #16
 80196b6:	f7fc fecb 	bl	8016450 <malloc>
 80196ba:	4602      	mov	r2, r0
 80196bc:	61f0      	str	r0, [r6, #28]
 80196be:	b928      	cbnz	r0, 80196cc <__pow5mult+0x40>
 80196c0:	4b1d      	ldr	r3, [pc, #116]	; (8019738 <__pow5mult+0xac>)
 80196c2:	481e      	ldr	r0, [pc, #120]	; (801973c <__pow5mult+0xb0>)
 80196c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80196c8:	f000 fcb8 	bl	801a03c <__assert_func>
 80196cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80196d0:	6004      	str	r4, [r0, #0]
 80196d2:	60c4      	str	r4, [r0, #12]
 80196d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80196d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80196dc:	b94c      	cbnz	r4, 80196f2 <__pow5mult+0x66>
 80196de:	f240 2171 	movw	r1, #625	; 0x271
 80196e2:	4630      	mov	r0, r6
 80196e4:	f7ff ff12 	bl	801950c <__i2b>
 80196e8:	2300      	movs	r3, #0
 80196ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80196ee:	4604      	mov	r4, r0
 80196f0:	6003      	str	r3, [r0, #0]
 80196f2:	f04f 0900 	mov.w	r9, #0
 80196f6:	07eb      	lsls	r3, r5, #31
 80196f8:	d50a      	bpl.n	8019710 <__pow5mult+0x84>
 80196fa:	4639      	mov	r1, r7
 80196fc:	4622      	mov	r2, r4
 80196fe:	4630      	mov	r0, r6
 8019700:	f7ff ff1a 	bl	8019538 <__multiply>
 8019704:	4639      	mov	r1, r7
 8019706:	4680      	mov	r8, r0
 8019708:	4630      	mov	r0, r6
 801970a:	f7ff fdff 	bl	801930c <_Bfree>
 801970e:	4647      	mov	r7, r8
 8019710:	106d      	asrs	r5, r5, #1
 8019712:	d00b      	beq.n	801972c <__pow5mult+0xa0>
 8019714:	6820      	ldr	r0, [r4, #0]
 8019716:	b938      	cbnz	r0, 8019728 <__pow5mult+0x9c>
 8019718:	4622      	mov	r2, r4
 801971a:	4621      	mov	r1, r4
 801971c:	4630      	mov	r0, r6
 801971e:	f7ff ff0b 	bl	8019538 <__multiply>
 8019722:	6020      	str	r0, [r4, #0]
 8019724:	f8c0 9000 	str.w	r9, [r0]
 8019728:	4604      	mov	r4, r0
 801972a:	e7e4      	b.n	80196f6 <__pow5mult+0x6a>
 801972c:	4638      	mov	r0, r7
 801972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019732:	bf00      	nop
 8019734:	0801d2b8 	.word	0x0801d2b8
 8019738:	0801d08a 	.word	0x0801d08a
 801973c:	0801d16a 	.word	0x0801d16a

08019740 <__lshift>:
 8019740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019744:	460c      	mov	r4, r1
 8019746:	6849      	ldr	r1, [r1, #4]
 8019748:	6923      	ldr	r3, [r4, #16]
 801974a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801974e:	68a3      	ldr	r3, [r4, #8]
 8019750:	4607      	mov	r7, r0
 8019752:	4691      	mov	r9, r2
 8019754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019758:	f108 0601 	add.w	r6, r8, #1
 801975c:	42b3      	cmp	r3, r6
 801975e:	db0b      	blt.n	8019778 <__lshift+0x38>
 8019760:	4638      	mov	r0, r7
 8019762:	f7ff fd93 	bl	801928c <_Balloc>
 8019766:	4605      	mov	r5, r0
 8019768:	b948      	cbnz	r0, 801977e <__lshift+0x3e>
 801976a:	4602      	mov	r2, r0
 801976c:	4b28      	ldr	r3, [pc, #160]	; (8019810 <__lshift+0xd0>)
 801976e:	4829      	ldr	r0, [pc, #164]	; (8019814 <__lshift+0xd4>)
 8019770:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019774:	f000 fc62 	bl	801a03c <__assert_func>
 8019778:	3101      	adds	r1, #1
 801977a:	005b      	lsls	r3, r3, #1
 801977c:	e7ee      	b.n	801975c <__lshift+0x1c>
 801977e:	2300      	movs	r3, #0
 8019780:	f100 0114 	add.w	r1, r0, #20
 8019784:	f100 0210 	add.w	r2, r0, #16
 8019788:	4618      	mov	r0, r3
 801978a:	4553      	cmp	r3, sl
 801978c:	db33      	blt.n	80197f6 <__lshift+0xb6>
 801978e:	6920      	ldr	r0, [r4, #16]
 8019790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019794:	f104 0314 	add.w	r3, r4, #20
 8019798:	f019 091f 	ands.w	r9, r9, #31
 801979c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80197a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80197a4:	d02b      	beq.n	80197fe <__lshift+0xbe>
 80197a6:	f1c9 0e20 	rsb	lr, r9, #32
 80197aa:	468a      	mov	sl, r1
 80197ac:	2200      	movs	r2, #0
 80197ae:	6818      	ldr	r0, [r3, #0]
 80197b0:	fa00 f009 	lsl.w	r0, r0, r9
 80197b4:	4310      	orrs	r0, r2
 80197b6:	f84a 0b04 	str.w	r0, [sl], #4
 80197ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80197be:	459c      	cmp	ip, r3
 80197c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80197c4:	d8f3      	bhi.n	80197ae <__lshift+0x6e>
 80197c6:	ebac 0304 	sub.w	r3, ip, r4
 80197ca:	3b15      	subs	r3, #21
 80197cc:	f023 0303 	bic.w	r3, r3, #3
 80197d0:	3304      	adds	r3, #4
 80197d2:	f104 0015 	add.w	r0, r4, #21
 80197d6:	4584      	cmp	ip, r0
 80197d8:	bf38      	it	cc
 80197da:	2304      	movcc	r3, #4
 80197dc:	50ca      	str	r2, [r1, r3]
 80197de:	b10a      	cbz	r2, 80197e4 <__lshift+0xa4>
 80197e0:	f108 0602 	add.w	r6, r8, #2
 80197e4:	3e01      	subs	r6, #1
 80197e6:	4638      	mov	r0, r7
 80197e8:	612e      	str	r6, [r5, #16]
 80197ea:	4621      	mov	r1, r4
 80197ec:	f7ff fd8e 	bl	801930c <_Bfree>
 80197f0:	4628      	mov	r0, r5
 80197f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80197fa:	3301      	adds	r3, #1
 80197fc:	e7c5      	b.n	801978a <__lshift+0x4a>
 80197fe:	3904      	subs	r1, #4
 8019800:	f853 2b04 	ldr.w	r2, [r3], #4
 8019804:	f841 2f04 	str.w	r2, [r1, #4]!
 8019808:	459c      	cmp	ip, r3
 801980a:	d8f9      	bhi.n	8019800 <__lshift+0xc0>
 801980c:	e7ea      	b.n	80197e4 <__lshift+0xa4>
 801980e:	bf00      	nop
 8019810:	0801d0f9 	.word	0x0801d0f9
 8019814:	0801d16a 	.word	0x0801d16a

08019818 <__mcmp>:
 8019818:	b530      	push	{r4, r5, lr}
 801981a:	6902      	ldr	r2, [r0, #16]
 801981c:	690c      	ldr	r4, [r1, #16]
 801981e:	1b12      	subs	r2, r2, r4
 8019820:	d10e      	bne.n	8019840 <__mcmp+0x28>
 8019822:	f100 0314 	add.w	r3, r0, #20
 8019826:	3114      	adds	r1, #20
 8019828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801982c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019838:	42a5      	cmp	r5, r4
 801983a:	d003      	beq.n	8019844 <__mcmp+0x2c>
 801983c:	d305      	bcc.n	801984a <__mcmp+0x32>
 801983e:	2201      	movs	r2, #1
 8019840:	4610      	mov	r0, r2
 8019842:	bd30      	pop	{r4, r5, pc}
 8019844:	4283      	cmp	r3, r0
 8019846:	d3f3      	bcc.n	8019830 <__mcmp+0x18>
 8019848:	e7fa      	b.n	8019840 <__mcmp+0x28>
 801984a:	f04f 32ff 	mov.w	r2, #4294967295
 801984e:	e7f7      	b.n	8019840 <__mcmp+0x28>

08019850 <__mdiff>:
 8019850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019854:	460c      	mov	r4, r1
 8019856:	4606      	mov	r6, r0
 8019858:	4611      	mov	r1, r2
 801985a:	4620      	mov	r0, r4
 801985c:	4690      	mov	r8, r2
 801985e:	f7ff ffdb 	bl	8019818 <__mcmp>
 8019862:	1e05      	subs	r5, r0, #0
 8019864:	d110      	bne.n	8019888 <__mdiff+0x38>
 8019866:	4629      	mov	r1, r5
 8019868:	4630      	mov	r0, r6
 801986a:	f7ff fd0f 	bl	801928c <_Balloc>
 801986e:	b930      	cbnz	r0, 801987e <__mdiff+0x2e>
 8019870:	4b3a      	ldr	r3, [pc, #232]	; (801995c <__mdiff+0x10c>)
 8019872:	4602      	mov	r2, r0
 8019874:	f240 2137 	movw	r1, #567	; 0x237
 8019878:	4839      	ldr	r0, [pc, #228]	; (8019960 <__mdiff+0x110>)
 801987a:	f000 fbdf 	bl	801a03c <__assert_func>
 801987e:	2301      	movs	r3, #1
 8019880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019888:	bfa4      	itt	ge
 801988a:	4643      	movge	r3, r8
 801988c:	46a0      	movge	r8, r4
 801988e:	4630      	mov	r0, r6
 8019890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019894:	bfa6      	itte	ge
 8019896:	461c      	movge	r4, r3
 8019898:	2500      	movge	r5, #0
 801989a:	2501      	movlt	r5, #1
 801989c:	f7ff fcf6 	bl	801928c <_Balloc>
 80198a0:	b920      	cbnz	r0, 80198ac <__mdiff+0x5c>
 80198a2:	4b2e      	ldr	r3, [pc, #184]	; (801995c <__mdiff+0x10c>)
 80198a4:	4602      	mov	r2, r0
 80198a6:	f240 2145 	movw	r1, #581	; 0x245
 80198aa:	e7e5      	b.n	8019878 <__mdiff+0x28>
 80198ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80198b0:	6926      	ldr	r6, [r4, #16]
 80198b2:	60c5      	str	r5, [r0, #12]
 80198b4:	f104 0914 	add.w	r9, r4, #20
 80198b8:	f108 0514 	add.w	r5, r8, #20
 80198bc:	f100 0e14 	add.w	lr, r0, #20
 80198c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80198c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80198c8:	f108 0210 	add.w	r2, r8, #16
 80198cc:	46f2      	mov	sl, lr
 80198ce:	2100      	movs	r1, #0
 80198d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80198d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80198d8:	fa11 f88b 	uxtah	r8, r1, fp
 80198dc:	b299      	uxth	r1, r3
 80198de:	0c1b      	lsrs	r3, r3, #16
 80198e0:	eba8 0801 	sub.w	r8, r8, r1
 80198e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80198e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80198ec:	fa1f f888 	uxth.w	r8, r8
 80198f0:	1419      	asrs	r1, r3, #16
 80198f2:	454e      	cmp	r6, r9
 80198f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80198f8:	f84a 3b04 	str.w	r3, [sl], #4
 80198fc:	d8e8      	bhi.n	80198d0 <__mdiff+0x80>
 80198fe:	1b33      	subs	r3, r6, r4
 8019900:	3b15      	subs	r3, #21
 8019902:	f023 0303 	bic.w	r3, r3, #3
 8019906:	3304      	adds	r3, #4
 8019908:	3415      	adds	r4, #21
 801990a:	42a6      	cmp	r6, r4
 801990c:	bf38      	it	cc
 801990e:	2304      	movcc	r3, #4
 8019910:	441d      	add	r5, r3
 8019912:	4473      	add	r3, lr
 8019914:	469e      	mov	lr, r3
 8019916:	462e      	mov	r6, r5
 8019918:	4566      	cmp	r6, ip
 801991a:	d30e      	bcc.n	801993a <__mdiff+0xea>
 801991c:	f10c 0203 	add.w	r2, ip, #3
 8019920:	1b52      	subs	r2, r2, r5
 8019922:	f022 0203 	bic.w	r2, r2, #3
 8019926:	3d03      	subs	r5, #3
 8019928:	45ac      	cmp	ip, r5
 801992a:	bf38      	it	cc
 801992c:	2200      	movcc	r2, #0
 801992e:	4413      	add	r3, r2
 8019930:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019934:	b17a      	cbz	r2, 8019956 <__mdiff+0x106>
 8019936:	6107      	str	r7, [r0, #16]
 8019938:	e7a4      	b.n	8019884 <__mdiff+0x34>
 801993a:	f856 8b04 	ldr.w	r8, [r6], #4
 801993e:	fa11 f288 	uxtah	r2, r1, r8
 8019942:	1414      	asrs	r4, r2, #16
 8019944:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019948:	b292      	uxth	r2, r2
 801994a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801994e:	f84e 2b04 	str.w	r2, [lr], #4
 8019952:	1421      	asrs	r1, r4, #16
 8019954:	e7e0      	b.n	8019918 <__mdiff+0xc8>
 8019956:	3f01      	subs	r7, #1
 8019958:	e7ea      	b.n	8019930 <__mdiff+0xe0>
 801995a:	bf00      	nop
 801995c:	0801d0f9 	.word	0x0801d0f9
 8019960:	0801d16a 	.word	0x0801d16a

08019964 <__ulp>:
 8019964:	b082      	sub	sp, #8
 8019966:	ed8d 0b00 	vstr	d0, [sp]
 801996a:	9a01      	ldr	r2, [sp, #4]
 801996c:	4b0f      	ldr	r3, [pc, #60]	; (80199ac <__ulp+0x48>)
 801996e:	4013      	ands	r3, r2
 8019970:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019974:	2b00      	cmp	r3, #0
 8019976:	dc08      	bgt.n	801998a <__ulp+0x26>
 8019978:	425b      	negs	r3, r3
 801997a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801997e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019982:	da04      	bge.n	801998e <__ulp+0x2a>
 8019984:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019988:	4113      	asrs	r3, r2
 801998a:	2200      	movs	r2, #0
 801998c:	e008      	b.n	80199a0 <__ulp+0x3c>
 801998e:	f1a2 0314 	sub.w	r3, r2, #20
 8019992:	2b1e      	cmp	r3, #30
 8019994:	bfda      	itte	le
 8019996:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801999a:	40da      	lsrle	r2, r3
 801999c:	2201      	movgt	r2, #1
 801999e:	2300      	movs	r3, #0
 80199a0:	4619      	mov	r1, r3
 80199a2:	4610      	mov	r0, r2
 80199a4:	ec41 0b10 	vmov	d0, r0, r1
 80199a8:	b002      	add	sp, #8
 80199aa:	4770      	bx	lr
 80199ac:	7ff00000 	.word	0x7ff00000

080199b0 <__b2d>:
 80199b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b4:	6906      	ldr	r6, [r0, #16]
 80199b6:	f100 0814 	add.w	r8, r0, #20
 80199ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80199be:	1f37      	subs	r7, r6, #4
 80199c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80199c4:	4610      	mov	r0, r2
 80199c6:	f7ff fd53 	bl	8019470 <__hi0bits>
 80199ca:	f1c0 0320 	rsb	r3, r0, #32
 80199ce:	280a      	cmp	r0, #10
 80199d0:	600b      	str	r3, [r1, #0]
 80199d2:	491b      	ldr	r1, [pc, #108]	; (8019a40 <__b2d+0x90>)
 80199d4:	dc15      	bgt.n	8019a02 <__b2d+0x52>
 80199d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80199da:	fa22 f30c 	lsr.w	r3, r2, ip
 80199de:	45b8      	cmp	r8, r7
 80199e0:	ea43 0501 	orr.w	r5, r3, r1
 80199e4:	bf34      	ite	cc
 80199e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80199ea:	2300      	movcs	r3, #0
 80199ec:	3015      	adds	r0, #21
 80199ee:	fa02 f000 	lsl.w	r0, r2, r0
 80199f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80199f6:	4303      	orrs	r3, r0
 80199f8:	461c      	mov	r4, r3
 80199fa:	ec45 4b10 	vmov	d0, r4, r5
 80199fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a02:	45b8      	cmp	r8, r7
 8019a04:	bf3a      	itte	cc
 8019a06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019a0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8019a0e:	2300      	movcs	r3, #0
 8019a10:	380b      	subs	r0, #11
 8019a12:	d012      	beq.n	8019a3a <__b2d+0x8a>
 8019a14:	f1c0 0120 	rsb	r1, r0, #32
 8019a18:	fa23 f401 	lsr.w	r4, r3, r1
 8019a1c:	4082      	lsls	r2, r0
 8019a1e:	4322      	orrs	r2, r4
 8019a20:	4547      	cmp	r7, r8
 8019a22:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019a26:	bf8c      	ite	hi
 8019a28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019a2c:	2200      	movls	r2, #0
 8019a2e:	4083      	lsls	r3, r0
 8019a30:	40ca      	lsrs	r2, r1
 8019a32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019a36:	4313      	orrs	r3, r2
 8019a38:	e7de      	b.n	80199f8 <__b2d+0x48>
 8019a3a:	ea42 0501 	orr.w	r5, r2, r1
 8019a3e:	e7db      	b.n	80199f8 <__b2d+0x48>
 8019a40:	3ff00000 	.word	0x3ff00000

08019a44 <__d2b>:
 8019a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019a48:	460f      	mov	r7, r1
 8019a4a:	2101      	movs	r1, #1
 8019a4c:	ec59 8b10 	vmov	r8, r9, d0
 8019a50:	4616      	mov	r6, r2
 8019a52:	f7ff fc1b 	bl	801928c <_Balloc>
 8019a56:	4604      	mov	r4, r0
 8019a58:	b930      	cbnz	r0, 8019a68 <__d2b+0x24>
 8019a5a:	4602      	mov	r2, r0
 8019a5c:	4b24      	ldr	r3, [pc, #144]	; (8019af0 <__d2b+0xac>)
 8019a5e:	4825      	ldr	r0, [pc, #148]	; (8019af4 <__d2b+0xb0>)
 8019a60:	f240 310f 	movw	r1, #783	; 0x30f
 8019a64:	f000 faea 	bl	801a03c <__assert_func>
 8019a68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019a6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019a70:	bb2d      	cbnz	r5, 8019abe <__d2b+0x7a>
 8019a72:	9301      	str	r3, [sp, #4]
 8019a74:	f1b8 0300 	subs.w	r3, r8, #0
 8019a78:	d026      	beq.n	8019ac8 <__d2b+0x84>
 8019a7a:	4668      	mov	r0, sp
 8019a7c:	9300      	str	r3, [sp, #0]
 8019a7e:	f7ff fd17 	bl	80194b0 <__lo0bits>
 8019a82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019a86:	b1e8      	cbz	r0, 8019ac4 <__d2b+0x80>
 8019a88:	f1c0 0320 	rsb	r3, r0, #32
 8019a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a90:	430b      	orrs	r3, r1
 8019a92:	40c2      	lsrs	r2, r0
 8019a94:	6163      	str	r3, [r4, #20]
 8019a96:	9201      	str	r2, [sp, #4]
 8019a98:	9b01      	ldr	r3, [sp, #4]
 8019a9a:	61a3      	str	r3, [r4, #24]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	bf14      	ite	ne
 8019aa0:	2202      	movne	r2, #2
 8019aa2:	2201      	moveq	r2, #1
 8019aa4:	6122      	str	r2, [r4, #16]
 8019aa6:	b1bd      	cbz	r5, 8019ad8 <__d2b+0x94>
 8019aa8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019aac:	4405      	add	r5, r0
 8019aae:	603d      	str	r5, [r7, #0]
 8019ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019ab4:	6030      	str	r0, [r6, #0]
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	b003      	add	sp, #12
 8019aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019ac2:	e7d6      	b.n	8019a72 <__d2b+0x2e>
 8019ac4:	6161      	str	r1, [r4, #20]
 8019ac6:	e7e7      	b.n	8019a98 <__d2b+0x54>
 8019ac8:	a801      	add	r0, sp, #4
 8019aca:	f7ff fcf1 	bl	80194b0 <__lo0bits>
 8019ace:	9b01      	ldr	r3, [sp, #4]
 8019ad0:	6163      	str	r3, [r4, #20]
 8019ad2:	3020      	adds	r0, #32
 8019ad4:	2201      	movs	r2, #1
 8019ad6:	e7e5      	b.n	8019aa4 <__d2b+0x60>
 8019ad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019adc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ae0:	6038      	str	r0, [r7, #0]
 8019ae2:	6918      	ldr	r0, [r3, #16]
 8019ae4:	f7ff fcc4 	bl	8019470 <__hi0bits>
 8019ae8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019aec:	e7e2      	b.n	8019ab4 <__d2b+0x70>
 8019aee:	bf00      	nop
 8019af0:	0801d0f9 	.word	0x0801d0f9
 8019af4:	0801d16a 	.word	0x0801d16a

08019af8 <__ratio>:
 8019af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	4688      	mov	r8, r1
 8019afe:	4669      	mov	r1, sp
 8019b00:	4681      	mov	r9, r0
 8019b02:	f7ff ff55 	bl	80199b0 <__b2d>
 8019b06:	a901      	add	r1, sp, #4
 8019b08:	4640      	mov	r0, r8
 8019b0a:	ec55 4b10 	vmov	r4, r5, d0
 8019b0e:	ee10 aa10 	vmov	sl, s0
 8019b12:	f7ff ff4d 	bl	80199b0 <__b2d>
 8019b16:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019b1a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019b1e:	1ad2      	subs	r2, r2, r3
 8019b20:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019b24:	1a5b      	subs	r3, r3, r1
 8019b26:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019b2a:	ec57 6b10 	vmov	r6, r7, d0
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	bfd6      	itet	le
 8019b32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019b36:	462a      	movgt	r2, r5
 8019b38:	463a      	movle	r2, r7
 8019b3a:	46ab      	mov	fp, r5
 8019b3c:	bfd6      	itet	le
 8019b3e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019b42:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019b46:	ee00 3a90 	vmovle	s1, r3
 8019b4a:	ec4b ab17 	vmov	d7, sl, fp
 8019b4e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019b52:	b003      	add	sp, #12
 8019b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b58 <__copybits>:
 8019b58:	3901      	subs	r1, #1
 8019b5a:	b570      	push	{r4, r5, r6, lr}
 8019b5c:	1149      	asrs	r1, r1, #5
 8019b5e:	6914      	ldr	r4, [r2, #16]
 8019b60:	3101      	adds	r1, #1
 8019b62:	f102 0314 	add.w	r3, r2, #20
 8019b66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019b6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019b6e:	1f05      	subs	r5, r0, #4
 8019b70:	42a3      	cmp	r3, r4
 8019b72:	d30c      	bcc.n	8019b8e <__copybits+0x36>
 8019b74:	1aa3      	subs	r3, r4, r2
 8019b76:	3b11      	subs	r3, #17
 8019b78:	f023 0303 	bic.w	r3, r3, #3
 8019b7c:	3211      	adds	r2, #17
 8019b7e:	42a2      	cmp	r2, r4
 8019b80:	bf88      	it	hi
 8019b82:	2300      	movhi	r3, #0
 8019b84:	4418      	add	r0, r3
 8019b86:	2300      	movs	r3, #0
 8019b88:	4288      	cmp	r0, r1
 8019b8a:	d305      	bcc.n	8019b98 <__copybits+0x40>
 8019b8c:	bd70      	pop	{r4, r5, r6, pc}
 8019b8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019b92:	f845 6f04 	str.w	r6, [r5, #4]!
 8019b96:	e7eb      	b.n	8019b70 <__copybits+0x18>
 8019b98:	f840 3b04 	str.w	r3, [r0], #4
 8019b9c:	e7f4      	b.n	8019b88 <__copybits+0x30>

08019b9e <__any_on>:
 8019b9e:	f100 0214 	add.w	r2, r0, #20
 8019ba2:	6900      	ldr	r0, [r0, #16]
 8019ba4:	114b      	asrs	r3, r1, #5
 8019ba6:	4298      	cmp	r0, r3
 8019ba8:	b510      	push	{r4, lr}
 8019baa:	db11      	blt.n	8019bd0 <__any_on+0x32>
 8019bac:	dd0a      	ble.n	8019bc4 <__any_on+0x26>
 8019bae:	f011 011f 	ands.w	r1, r1, #31
 8019bb2:	d007      	beq.n	8019bc4 <__any_on+0x26>
 8019bb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019bb8:	fa24 f001 	lsr.w	r0, r4, r1
 8019bbc:	fa00 f101 	lsl.w	r1, r0, r1
 8019bc0:	428c      	cmp	r4, r1
 8019bc2:	d10b      	bne.n	8019bdc <__any_on+0x3e>
 8019bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d803      	bhi.n	8019bd4 <__any_on+0x36>
 8019bcc:	2000      	movs	r0, #0
 8019bce:	bd10      	pop	{r4, pc}
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	e7f7      	b.n	8019bc4 <__any_on+0x26>
 8019bd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019bd8:	2900      	cmp	r1, #0
 8019bda:	d0f5      	beq.n	8019bc8 <__any_on+0x2a>
 8019bdc:	2001      	movs	r0, #1
 8019bde:	e7f6      	b.n	8019bce <__any_on+0x30>

08019be0 <__ascii_wctomb>:
 8019be0:	b149      	cbz	r1, 8019bf6 <__ascii_wctomb+0x16>
 8019be2:	2aff      	cmp	r2, #255	; 0xff
 8019be4:	bf85      	ittet	hi
 8019be6:	238a      	movhi	r3, #138	; 0x8a
 8019be8:	6003      	strhi	r3, [r0, #0]
 8019bea:	700a      	strbls	r2, [r1, #0]
 8019bec:	f04f 30ff 	movhi.w	r0, #4294967295
 8019bf0:	bf98      	it	ls
 8019bf2:	2001      	movls	r0, #1
 8019bf4:	4770      	bx	lr
 8019bf6:	4608      	mov	r0, r1
 8019bf8:	4770      	bx	lr

08019bfa <__ssputs_r>:
 8019bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bfe:	688e      	ldr	r6, [r1, #8]
 8019c00:	461f      	mov	r7, r3
 8019c02:	42be      	cmp	r6, r7
 8019c04:	680b      	ldr	r3, [r1, #0]
 8019c06:	4682      	mov	sl, r0
 8019c08:	460c      	mov	r4, r1
 8019c0a:	4690      	mov	r8, r2
 8019c0c:	d82c      	bhi.n	8019c68 <__ssputs_r+0x6e>
 8019c0e:	898a      	ldrh	r2, [r1, #12]
 8019c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c14:	d026      	beq.n	8019c64 <__ssputs_r+0x6a>
 8019c16:	6965      	ldr	r5, [r4, #20]
 8019c18:	6909      	ldr	r1, [r1, #16]
 8019c1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c1e:	eba3 0901 	sub.w	r9, r3, r1
 8019c22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c26:	1c7b      	adds	r3, r7, #1
 8019c28:	444b      	add	r3, r9
 8019c2a:	106d      	asrs	r5, r5, #1
 8019c2c:	429d      	cmp	r5, r3
 8019c2e:	bf38      	it	cc
 8019c30:	461d      	movcc	r5, r3
 8019c32:	0553      	lsls	r3, r2, #21
 8019c34:	d527      	bpl.n	8019c86 <__ssputs_r+0x8c>
 8019c36:	4629      	mov	r1, r5
 8019c38:	f7fc fc3a 	bl	80164b0 <_malloc_r>
 8019c3c:	4606      	mov	r6, r0
 8019c3e:	b360      	cbz	r0, 8019c9a <__ssputs_r+0xa0>
 8019c40:	6921      	ldr	r1, [r4, #16]
 8019c42:	464a      	mov	r2, r9
 8019c44:	f7fe f962 	bl	8017f0c <memcpy>
 8019c48:	89a3      	ldrh	r3, [r4, #12]
 8019c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c52:	81a3      	strh	r3, [r4, #12]
 8019c54:	6126      	str	r6, [r4, #16]
 8019c56:	6165      	str	r5, [r4, #20]
 8019c58:	444e      	add	r6, r9
 8019c5a:	eba5 0509 	sub.w	r5, r5, r9
 8019c5e:	6026      	str	r6, [r4, #0]
 8019c60:	60a5      	str	r5, [r4, #8]
 8019c62:	463e      	mov	r6, r7
 8019c64:	42be      	cmp	r6, r7
 8019c66:	d900      	bls.n	8019c6a <__ssputs_r+0x70>
 8019c68:	463e      	mov	r6, r7
 8019c6a:	6820      	ldr	r0, [r4, #0]
 8019c6c:	4632      	mov	r2, r6
 8019c6e:	4641      	mov	r1, r8
 8019c70:	f000 f9ca 	bl	801a008 <memmove>
 8019c74:	68a3      	ldr	r3, [r4, #8]
 8019c76:	1b9b      	subs	r3, r3, r6
 8019c78:	60a3      	str	r3, [r4, #8]
 8019c7a:	6823      	ldr	r3, [r4, #0]
 8019c7c:	4433      	add	r3, r6
 8019c7e:	6023      	str	r3, [r4, #0]
 8019c80:	2000      	movs	r0, #0
 8019c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c86:	462a      	mov	r2, r5
 8019c88:	f000 fa0c 	bl	801a0a4 <_realloc_r>
 8019c8c:	4606      	mov	r6, r0
 8019c8e:	2800      	cmp	r0, #0
 8019c90:	d1e0      	bne.n	8019c54 <__ssputs_r+0x5a>
 8019c92:	6921      	ldr	r1, [r4, #16]
 8019c94:	4650      	mov	r0, sl
 8019c96:	f7fe ff43 	bl	8018b20 <_free_r>
 8019c9a:	230c      	movs	r3, #12
 8019c9c:	f8ca 3000 	str.w	r3, [sl]
 8019ca0:	89a3      	ldrh	r3, [r4, #12]
 8019ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cac:	e7e9      	b.n	8019c82 <__ssputs_r+0x88>
	...

08019cb0 <_svfiprintf_r>:
 8019cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb4:	4698      	mov	r8, r3
 8019cb6:	898b      	ldrh	r3, [r1, #12]
 8019cb8:	061b      	lsls	r3, r3, #24
 8019cba:	b09d      	sub	sp, #116	; 0x74
 8019cbc:	4607      	mov	r7, r0
 8019cbe:	460d      	mov	r5, r1
 8019cc0:	4614      	mov	r4, r2
 8019cc2:	d50e      	bpl.n	8019ce2 <_svfiprintf_r+0x32>
 8019cc4:	690b      	ldr	r3, [r1, #16]
 8019cc6:	b963      	cbnz	r3, 8019ce2 <_svfiprintf_r+0x32>
 8019cc8:	2140      	movs	r1, #64	; 0x40
 8019cca:	f7fc fbf1 	bl	80164b0 <_malloc_r>
 8019cce:	6028      	str	r0, [r5, #0]
 8019cd0:	6128      	str	r0, [r5, #16]
 8019cd2:	b920      	cbnz	r0, 8019cde <_svfiprintf_r+0x2e>
 8019cd4:	230c      	movs	r3, #12
 8019cd6:	603b      	str	r3, [r7, #0]
 8019cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cdc:	e0d0      	b.n	8019e80 <_svfiprintf_r+0x1d0>
 8019cde:	2340      	movs	r3, #64	; 0x40
 8019ce0:	616b      	str	r3, [r5, #20]
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8019ce6:	2320      	movs	r3, #32
 8019ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8019cf0:	2330      	movs	r3, #48	; 0x30
 8019cf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019e98 <_svfiprintf_r+0x1e8>
 8019cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019cfa:	f04f 0901 	mov.w	r9, #1
 8019cfe:	4623      	mov	r3, r4
 8019d00:	469a      	mov	sl, r3
 8019d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d06:	b10a      	cbz	r2, 8019d0c <_svfiprintf_r+0x5c>
 8019d08:	2a25      	cmp	r2, #37	; 0x25
 8019d0a:	d1f9      	bne.n	8019d00 <_svfiprintf_r+0x50>
 8019d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8019d10:	d00b      	beq.n	8019d2a <_svfiprintf_r+0x7a>
 8019d12:	465b      	mov	r3, fp
 8019d14:	4622      	mov	r2, r4
 8019d16:	4629      	mov	r1, r5
 8019d18:	4638      	mov	r0, r7
 8019d1a:	f7ff ff6e 	bl	8019bfa <__ssputs_r>
 8019d1e:	3001      	adds	r0, #1
 8019d20:	f000 80a9 	beq.w	8019e76 <_svfiprintf_r+0x1c6>
 8019d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d26:	445a      	add	r2, fp
 8019d28:	9209      	str	r2, [sp, #36]	; 0x24
 8019d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f000 80a1 	beq.w	8019e76 <_svfiprintf_r+0x1c6>
 8019d34:	2300      	movs	r3, #0
 8019d36:	f04f 32ff 	mov.w	r2, #4294967295
 8019d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d3e:	f10a 0a01 	add.w	sl, sl, #1
 8019d42:	9304      	str	r3, [sp, #16]
 8019d44:	9307      	str	r3, [sp, #28]
 8019d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8019d4c:	4654      	mov	r4, sl
 8019d4e:	2205      	movs	r2, #5
 8019d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d54:	4850      	ldr	r0, [pc, #320]	; (8019e98 <_svfiprintf_r+0x1e8>)
 8019d56:	f7e6 fad3 	bl	8000300 <memchr>
 8019d5a:	9a04      	ldr	r2, [sp, #16]
 8019d5c:	b9d8      	cbnz	r0, 8019d96 <_svfiprintf_r+0xe6>
 8019d5e:	06d0      	lsls	r0, r2, #27
 8019d60:	bf44      	itt	mi
 8019d62:	2320      	movmi	r3, #32
 8019d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d68:	0711      	lsls	r1, r2, #28
 8019d6a:	bf44      	itt	mi
 8019d6c:	232b      	movmi	r3, #43	; 0x2b
 8019d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d72:	f89a 3000 	ldrb.w	r3, [sl]
 8019d76:	2b2a      	cmp	r3, #42	; 0x2a
 8019d78:	d015      	beq.n	8019da6 <_svfiprintf_r+0xf6>
 8019d7a:	9a07      	ldr	r2, [sp, #28]
 8019d7c:	4654      	mov	r4, sl
 8019d7e:	2000      	movs	r0, #0
 8019d80:	f04f 0c0a 	mov.w	ip, #10
 8019d84:	4621      	mov	r1, r4
 8019d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d8a:	3b30      	subs	r3, #48	; 0x30
 8019d8c:	2b09      	cmp	r3, #9
 8019d8e:	d94d      	bls.n	8019e2c <_svfiprintf_r+0x17c>
 8019d90:	b1b0      	cbz	r0, 8019dc0 <_svfiprintf_r+0x110>
 8019d92:	9207      	str	r2, [sp, #28]
 8019d94:	e014      	b.n	8019dc0 <_svfiprintf_r+0x110>
 8019d96:	eba0 0308 	sub.w	r3, r0, r8
 8019d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	9304      	str	r3, [sp, #16]
 8019da2:	46a2      	mov	sl, r4
 8019da4:	e7d2      	b.n	8019d4c <_svfiprintf_r+0x9c>
 8019da6:	9b03      	ldr	r3, [sp, #12]
 8019da8:	1d19      	adds	r1, r3, #4
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	9103      	str	r1, [sp, #12]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	bfbb      	ittet	lt
 8019db2:	425b      	neglt	r3, r3
 8019db4:	f042 0202 	orrlt.w	r2, r2, #2
 8019db8:	9307      	strge	r3, [sp, #28]
 8019dba:	9307      	strlt	r3, [sp, #28]
 8019dbc:	bfb8      	it	lt
 8019dbe:	9204      	strlt	r2, [sp, #16]
 8019dc0:	7823      	ldrb	r3, [r4, #0]
 8019dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8019dc4:	d10c      	bne.n	8019de0 <_svfiprintf_r+0x130>
 8019dc6:	7863      	ldrb	r3, [r4, #1]
 8019dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8019dca:	d134      	bne.n	8019e36 <_svfiprintf_r+0x186>
 8019dcc:	9b03      	ldr	r3, [sp, #12]
 8019dce:	1d1a      	adds	r2, r3, #4
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	9203      	str	r2, [sp, #12]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	bfb8      	it	lt
 8019dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ddc:	3402      	adds	r4, #2
 8019dde:	9305      	str	r3, [sp, #20]
 8019de0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019ea8 <_svfiprintf_r+0x1f8>
 8019de4:	7821      	ldrb	r1, [r4, #0]
 8019de6:	2203      	movs	r2, #3
 8019de8:	4650      	mov	r0, sl
 8019dea:	f7e6 fa89 	bl	8000300 <memchr>
 8019dee:	b138      	cbz	r0, 8019e00 <_svfiprintf_r+0x150>
 8019df0:	9b04      	ldr	r3, [sp, #16]
 8019df2:	eba0 000a 	sub.w	r0, r0, sl
 8019df6:	2240      	movs	r2, #64	; 0x40
 8019df8:	4082      	lsls	r2, r0
 8019dfa:	4313      	orrs	r3, r2
 8019dfc:	3401      	adds	r4, #1
 8019dfe:	9304      	str	r3, [sp, #16]
 8019e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e04:	4825      	ldr	r0, [pc, #148]	; (8019e9c <_svfiprintf_r+0x1ec>)
 8019e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e0a:	2206      	movs	r2, #6
 8019e0c:	f7e6 fa78 	bl	8000300 <memchr>
 8019e10:	2800      	cmp	r0, #0
 8019e12:	d038      	beq.n	8019e86 <_svfiprintf_r+0x1d6>
 8019e14:	4b22      	ldr	r3, [pc, #136]	; (8019ea0 <_svfiprintf_r+0x1f0>)
 8019e16:	bb1b      	cbnz	r3, 8019e60 <_svfiprintf_r+0x1b0>
 8019e18:	9b03      	ldr	r3, [sp, #12]
 8019e1a:	3307      	adds	r3, #7
 8019e1c:	f023 0307 	bic.w	r3, r3, #7
 8019e20:	3308      	adds	r3, #8
 8019e22:	9303      	str	r3, [sp, #12]
 8019e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e26:	4433      	add	r3, r6
 8019e28:	9309      	str	r3, [sp, #36]	; 0x24
 8019e2a:	e768      	b.n	8019cfe <_svfiprintf_r+0x4e>
 8019e2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e30:	460c      	mov	r4, r1
 8019e32:	2001      	movs	r0, #1
 8019e34:	e7a6      	b.n	8019d84 <_svfiprintf_r+0xd4>
 8019e36:	2300      	movs	r3, #0
 8019e38:	3401      	adds	r4, #1
 8019e3a:	9305      	str	r3, [sp, #20]
 8019e3c:	4619      	mov	r1, r3
 8019e3e:	f04f 0c0a 	mov.w	ip, #10
 8019e42:	4620      	mov	r0, r4
 8019e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e48:	3a30      	subs	r2, #48	; 0x30
 8019e4a:	2a09      	cmp	r2, #9
 8019e4c:	d903      	bls.n	8019e56 <_svfiprintf_r+0x1a6>
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d0c6      	beq.n	8019de0 <_svfiprintf_r+0x130>
 8019e52:	9105      	str	r1, [sp, #20]
 8019e54:	e7c4      	b.n	8019de0 <_svfiprintf_r+0x130>
 8019e56:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e5a:	4604      	mov	r4, r0
 8019e5c:	2301      	movs	r3, #1
 8019e5e:	e7f0      	b.n	8019e42 <_svfiprintf_r+0x192>
 8019e60:	ab03      	add	r3, sp, #12
 8019e62:	9300      	str	r3, [sp, #0]
 8019e64:	462a      	mov	r2, r5
 8019e66:	4b0f      	ldr	r3, [pc, #60]	; (8019ea4 <_svfiprintf_r+0x1f4>)
 8019e68:	a904      	add	r1, sp, #16
 8019e6a:	4638      	mov	r0, r7
 8019e6c:	f7fd faa4 	bl	80173b8 <_printf_float>
 8019e70:	1c42      	adds	r2, r0, #1
 8019e72:	4606      	mov	r6, r0
 8019e74:	d1d6      	bne.n	8019e24 <_svfiprintf_r+0x174>
 8019e76:	89ab      	ldrh	r3, [r5, #12]
 8019e78:	065b      	lsls	r3, r3, #25
 8019e7a:	f53f af2d 	bmi.w	8019cd8 <_svfiprintf_r+0x28>
 8019e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e80:	b01d      	add	sp, #116	; 0x74
 8019e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e86:	ab03      	add	r3, sp, #12
 8019e88:	9300      	str	r3, [sp, #0]
 8019e8a:	462a      	mov	r2, r5
 8019e8c:	4b05      	ldr	r3, [pc, #20]	; (8019ea4 <_svfiprintf_r+0x1f4>)
 8019e8e:	a904      	add	r1, sp, #16
 8019e90:	4638      	mov	r0, r7
 8019e92:	f7fd fd19 	bl	80178c8 <_printf_i>
 8019e96:	e7eb      	b.n	8019e70 <_svfiprintf_r+0x1c0>
 8019e98:	0801d2c4 	.word	0x0801d2c4
 8019e9c:	0801d2ce 	.word	0x0801d2ce
 8019ea0:	080173b9 	.word	0x080173b9
 8019ea4:	08019bfb 	.word	0x08019bfb
 8019ea8:	0801d2ca 	.word	0x0801d2ca

08019eac <__sflush_r>:
 8019eac:	898a      	ldrh	r2, [r1, #12]
 8019eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	0710      	lsls	r0, r2, #28
 8019eb6:	460c      	mov	r4, r1
 8019eb8:	d458      	bmi.n	8019f6c <__sflush_r+0xc0>
 8019eba:	684b      	ldr	r3, [r1, #4]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	dc05      	bgt.n	8019ecc <__sflush_r+0x20>
 8019ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	dc02      	bgt.n	8019ecc <__sflush_r+0x20>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ece:	2e00      	cmp	r6, #0
 8019ed0:	d0f9      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019ed8:	682f      	ldr	r7, [r5, #0]
 8019eda:	6a21      	ldr	r1, [r4, #32]
 8019edc:	602b      	str	r3, [r5, #0]
 8019ede:	d032      	beq.n	8019f46 <__sflush_r+0x9a>
 8019ee0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019ee2:	89a3      	ldrh	r3, [r4, #12]
 8019ee4:	075a      	lsls	r2, r3, #29
 8019ee6:	d505      	bpl.n	8019ef4 <__sflush_r+0x48>
 8019ee8:	6863      	ldr	r3, [r4, #4]
 8019eea:	1ac0      	subs	r0, r0, r3
 8019eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019eee:	b10b      	cbz	r3, 8019ef4 <__sflush_r+0x48>
 8019ef0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ef2:	1ac0      	subs	r0, r0, r3
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	4602      	mov	r2, r0
 8019ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019efa:	6a21      	ldr	r1, [r4, #32]
 8019efc:	4628      	mov	r0, r5
 8019efe:	47b0      	blx	r6
 8019f00:	1c43      	adds	r3, r0, #1
 8019f02:	89a3      	ldrh	r3, [r4, #12]
 8019f04:	d106      	bne.n	8019f14 <__sflush_r+0x68>
 8019f06:	6829      	ldr	r1, [r5, #0]
 8019f08:	291d      	cmp	r1, #29
 8019f0a:	d82b      	bhi.n	8019f64 <__sflush_r+0xb8>
 8019f0c:	4a29      	ldr	r2, [pc, #164]	; (8019fb4 <__sflush_r+0x108>)
 8019f0e:	410a      	asrs	r2, r1
 8019f10:	07d6      	lsls	r6, r2, #31
 8019f12:	d427      	bmi.n	8019f64 <__sflush_r+0xb8>
 8019f14:	2200      	movs	r2, #0
 8019f16:	6062      	str	r2, [r4, #4]
 8019f18:	04d9      	lsls	r1, r3, #19
 8019f1a:	6922      	ldr	r2, [r4, #16]
 8019f1c:	6022      	str	r2, [r4, #0]
 8019f1e:	d504      	bpl.n	8019f2a <__sflush_r+0x7e>
 8019f20:	1c42      	adds	r2, r0, #1
 8019f22:	d101      	bne.n	8019f28 <__sflush_r+0x7c>
 8019f24:	682b      	ldr	r3, [r5, #0]
 8019f26:	b903      	cbnz	r3, 8019f2a <__sflush_r+0x7e>
 8019f28:	6560      	str	r0, [r4, #84]	; 0x54
 8019f2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f2c:	602f      	str	r7, [r5, #0]
 8019f2e:	2900      	cmp	r1, #0
 8019f30:	d0c9      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019f32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f36:	4299      	cmp	r1, r3
 8019f38:	d002      	beq.n	8019f40 <__sflush_r+0x94>
 8019f3a:	4628      	mov	r0, r5
 8019f3c:	f7fe fdf0 	bl	8018b20 <_free_r>
 8019f40:	2000      	movs	r0, #0
 8019f42:	6360      	str	r0, [r4, #52]	; 0x34
 8019f44:	e7c0      	b.n	8019ec8 <__sflush_r+0x1c>
 8019f46:	2301      	movs	r3, #1
 8019f48:	4628      	mov	r0, r5
 8019f4a:	47b0      	blx	r6
 8019f4c:	1c41      	adds	r1, r0, #1
 8019f4e:	d1c8      	bne.n	8019ee2 <__sflush_r+0x36>
 8019f50:	682b      	ldr	r3, [r5, #0]
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d0c5      	beq.n	8019ee2 <__sflush_r+0x36>
 8019f56:	2b1d      	cmp	r3, #29
 8019f58:	d001      	beq.n	8019f5e <__sflush_r+0xb2>
 8019f5a:	2b16      	cmp	r3, #22
 8019f5c:	d101      	bne.n	8019f62 <__sflush_r+0xb6>
 8019f5e:	602f      	str	r7, [r5, #0]
 8019f60:	e7b1      	b.n	8019ec6 <__sflush_r+0x1a>
 8019f62:	89a3      	ldrh	r3, [r4, #12]
 8019f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f68:	81a3      	strh	r3, [r4, #12]
 8019f6a:	e7ad      	b.n	8019ec8 <__sflush_r+0x1c>
 8019f6c:	690f      	ldr	r7, [r1, #16]
 8019f6e:	2f00      	cmp	r7, #0
 8019f70:	d0a9      	beq.n	8019ec6 <__sflush_r+0x1a>
 8019f72:	0793      	lsls	r3, r2, #30
 8019f74:	680e      	ldr	r6, [r1, #0]
 8019f76:	bf08      	it	eq
 8019f78:	694b      	ldreq	r3, [r1, #20]
 8019f7a:	600f      	str	r7, [r1, #0]
 8019f7c:	bf18      	it	ne
 8019f7e:	2300      	movne	r3, #0
 8019f80:	eba6 0807 	sub.w	r8, r6, r7
 8019f84:	608b      	str	r3, [r1, #8]
 8019f86:	f1b8 0f00 	cmp.w	r8, #0
 8019f8a:	dd9c      	ble.n	8019ec6 <__sflush_r+0x1a>
 8019f8c:	6a21      	ldr	r1, [r4, #32]
 8019f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f90:	4643      	mov	r3, r8
 8019f92:	463a      	mov	r2, r7
 8019f94:	4628      	mov	r0, r5
 8019f96:	47b0      	blx	r6
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	dc06      	bgt.n	8019faa <__sflush_r+0xfe>
 8019f9c:	89a3      	ldrh	r3, [r4, #12]
 8019f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fa2:	81a3      	strh	r3, [r4, #12]
 8019fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8019fa8:	e78e      	b.n	8019ec8 <__sflush_r+0x1c>
 8019faa:	4407      	add	r7, r0
 8019fac:	eba8 0800 	sub.w	r8, r8, r0
 8019fb0:	e7e9      	b.n	8019f86 <__sflush_r+0xda>
 8019fb2:	bf00      	nop
 8019fb4:	dfbffffe 	.word	0xdfbffffe

08019fb8 <_fflush_r>:
 8019fb8:	b538      	push	{r3, r4, r5, lr}
 8019fba:	690b      	ldr	r3, [r1, #16]
 8019fbc:	4605      	mov	r5, r0
 8019fbe:	460c      	mov	r4, r1
 8019fc0:	b913      	cbnz	r3, 8019fc8 <_fflush_r+0x10>
 8019fc2:	2500      	movs	r5, #0
 8019fc4:	4628      	mov	r0, r5
 8019fc6:	bd38      	pop	{r3, r4, r5, pc}
 8019fc8:	b118      	cbz	r0, 8019fd2 <_fflush_r+0x1a>
 8019fca:	6a03      	ldr	r3, [r0, #32]
 8019fcc:	b90b      	cbnz	r3, 8019fd2 <_fflush_r+0x1a>
 8019fce:	f7fd fe29 	bl	8017c24 <__sinit>
 8019fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d0f3      	beq.n	8019fc2 <_fflush_r+0xa>
 8019fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019fdc:	07d0      	lsls	r0, r2, #31
 8019fde:	d404      	bmi.n	8019fea <_fflush_r+0x32>
 8019fe0:	0599      	lsls	r1, r3, #22
 8019fe2:	d402      	bmi.n	8019fea <_fflush_r+0x32>
 8019fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fe6:	f7e7 ff42 	bl	8001e6e <__retarget_lock_acquire_recursive>
 8019fea:	4628      	mov	r0, r5
 8019fec:	4621      	mov	r1, r4
 8019fee:	f7ff ff5d 	bl	8019eac <__sflush_r>
 8019ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019ff4:	07da      	lsls	r2, r3, #31
 8019ff6:	4605      	mov	r5, r0
 8019ff8:	d4e4      	bmi.n	8019fc4 <_fflush_r+0xc>
 8019ffa:	89a3      	ldrh	r3, [r4, #12]
 8019ffc:	059b      	lsls	r3, r3, #22
 8019ffe:	d4e1      	bmi.n	8019fc4 <_fflush_r+0xc>
 801a000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a002:	f7e7 ff48 	bl	8001e96 <__retarget_lock_release_recursive>
 801a006:	e7dd      	b.n	8019fc4 <_fflush_r+0xc>

0801a008 <memmove>:
 801a008:	4288      	cmp	r0, r1
 801a00a:	b510      	push	{r4, lr}
 801a00c:	eb01 0402 	add.w	r4, r1, r2
 801a010:	d902      	bls.n	801a018 <memmove+0x10>
 801a012:	4284      	cmp	r4, r0
 801a014:	4623      	mov	r3, r4
 801a016:	d807      	bhi.n	801a028 <memmove+0x20>
 801a018:	1e43      	subs	r3, r0, #1
 801a01a:	42a1      	cmp	r1, r4
 801a01c:	d008      	beq.n	801a030 <memmove+0x28>
 801a01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a022:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a026:	e7f8      	b.n	801a01a <memmove+0x12>
 801a028:	4402      	add	r2, r0
 801a02a:	4601      	mov	r1, r0
 801a02c:	428a      	cmp	r2, r1
 801a02e:	d100      	bne.n	801a032 <memmove+0x2a>
 801a030:	bd10      	pop	{r4, pc}
 801a032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a03a:	e7f7      	b.n	801a02c <memmove+0x24>

0801a03c <__assert_func>:
 801a03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a03e:	4614      	mov	r4, r2
 801a040:	461a      	mov	r2, r3
 801a042:	4b09      	ldr	r3, [pc, #36]	; (801a068 <__assert_func+0x2c>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	4605      	mov	r5, r0
 801a048:	68d8      	ldr	r0, [r3, #12]
 801a04a:	b14c      	cbz	r4, 801a060 <__assert_func+0x24>
 801a04c:	4b07      	ldr	r3, [pc, #28]	; (801a06c <__assert_func+0x30>)
 801a04e:	9100      	str	r1, [sp, #0]
 801a050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a054:	4906      	ldr	r1, [pc, #24]	; (801a070 <__assert_func+0x34>)
 801a056:	462b      	mov	r3, r5
 801a058:	f000 f854 	bl	801a104 <fiprintf>
 801a05c:	f000 f864 	bl	801a128 <abort>
 801a060:	4b04      	ldr	r3, [pc, #16]	; (801a074 <__assert_func+0x38>)
 801a062:	461c      	mov	r4, r3
 801a064:	e7f3      	b.n	801a04e <__assert_func+0x12>
 801a066:	bf00      	nop
 801a068:	240003c4 	.word	0x240003c4
 801a06c:	0801d2d5 	.word	0x0801d2d5
 801a070:	0801d2e2 	.word	0x0801d2e2
 801a074:	0801d310 	.word	0x0801d310

0801a078 <_calloc_r>:
 801a078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a07a:	fba1 2402 	umull	r2, r4, r1, r2
 801a07e:	b94c      	cbnz	r4, 801a094 <_calloc_r+0x1c>
 801a080:	4611      	mov	r1, r2
 801a082:	9201      	str	r2, [sp, #4]
 801a084:	f7fc fa14 	bl	80164b0 <_malloc_r>
 801a088:	9a01      	ldr	r2, [sp, #4]
 801a08a:	4605      	mov	r5, r0
 801a08c:	b930      	cbnz	r0, 801a09c <_calloc_r+0x24>
 801a08e:	4628      	mov	r0, r5
 801a090:	b003      	add	sp, #12
 801a092:	bd30      	pop	{r4, r5, pc}
 801a094:	220c      	movs	r2, #12
 801a096:	6002      	str	r2, [r0, #0]
 801a098:	2500      	movs	r5, #0
 801a09a:	e7f8      	b.n	801a08e <_calloc_r+0x16>
 801a09c:	4621      	mov	r1, r4
 801a09e:	f7fd fe8e 	bl	8017dbe <memset>
 801a0a2:	e7f4      	b.n	801a08e <_calloc_r+0x16>

0801a0a4 <_realloc_r>:
 801a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0a8:	4680      	mov	r8, r0
 801a0aa:	4614      	mov	r4, r2
 801a0ac:	460e      	mov	r6, r1
 801a0ae:	b921      	cbnz	r1, 801a0ba <_realloc_r+0x16>
 801a0b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b4:	4611      	mov	r1, r2
 801a0b6:	f7fc b9fb 	b.w	80164b0 <_malloc_r>
 801a0ba:	b92a      	cbnz	r2, 801a0c8 <_realloc_r+0x24>
 801a0bc:	f7fe fd30 	bl	8018b20 <_free_r>
 801a0c0:	4625      	mov	r5, r4
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0c8:	f000 f835 	bl	801a136 <_malloc_usable_size_r>
 801a0cc:	4284      	cmp	r4, r0
 801a0ce:	4607      	mov	r7, r0
 801a0d0:	d802      	bhi.n	801a0d8 <_realloc_r+0x34>
 801a0d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a0d6:	d812      	bhi.n	801a0fe <_realloc_r+0x5a>
 801a0d8:	4621      	mov	r1, r4
 801a0da:	4640      	mov	r0, r8
 801a0dc:	f7fc f9e8 	bl	80164b0 <_malloc_r>
 801a0e0:	4605      	mov	r5, r0
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	d0ed      	beq.n	801a0c2 <_realloc_r+0x1e>
 801a0e6:	42bc      	cmp	r4, r7
 801a0e8:	4622      	mov	r2, r4
 801a0ea:	4631      	mov	r1, r6
 801a0ec:	bf28      	it	cs
 801a0ee:	463a      	movcs	r2, r7
 801a0f0:	f7fd ff0c 	bl	8017f0c <memcpy>
 801a0f4:	4631      	mov	r1, r6
 801a0f6:	4640      	mov	r0, r8
 801a0f8:	f7fe fd12 	bl	8018b20 <_free_r>
 801a0fc:	e7e1      	b.n	801a0c2 <_realloc_r+0x1e>
 801a0fe:	4635      	mov	r5, r6
 801a100:	e7df      	b.n	801a0c2 <_realloc_r+0x1e>
	...

0801a104 <fiprintf>:
 801a104:	b40e      	push	{r1, r2, r3}
 801a106:	b503      	push	{r0, r1, lr}
 801a108:	4601      	mov	r1, r0
 801a10a:	ab03      	add	r3, sp, #12
 801a10c:	4805      	ldr	r0, [pc, #20]	; (801a124 <fiprintf+0x20>)
 801a10e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a112:	6800      	ldr	r0, [r0, #0]
 801a114:	9301      	str	r3, [sp, #4]
 801a116:	f000 f83f 	bl	801a198 <_vfiprintf_r>
 801a11a:	b002      	add	sp, #8
 801a11c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a120:	b003      	add	sp, #12
 801a122:	4770      	bx	lr
 801a124:	240003c4 	.word	0x240003c4

0801a128 <abort>:
 801a128:	b508      	push	{r3, lr}
 801a12a:	2006      	movs	r0, #6
 801a12c:	f000 fa0c 	bl	801a548 <raise>
 801a130:	2001      	movs	r0, #1
 801a132:	f7e7 fd29 	bl	8001b88 <_exit>

0801a136 <_malloc_usable_size_r>:
 801a136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a13a:	1f18      	subs	r0, r3, #4
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	bfbc      	itt	lt
 801a140:	580b      	ldrlt	r3, [r1, r0]
 801a142:	18c0      	addlt	r0, r0, r3
 801a144:	4770      	bx	lr

0801a146 <__sfputc_r>:
 801a146:	6893      	ldr	r3, [r2, #8]
 801a148:	3b01      	subs	r3, #1
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	b410      	push	{r4}
 801a14e:	6093      	str	r3, [r2, #8]
 801a150:	da08      	bge.n	801a164 <__sfputc_r+0x1e>
 801a152:	6994      	ldr	r4, [r2, #24]
 801a154:	42a3      	cmp	r3, r4
 801a156:	db01      	blt.n	801a15c <__sfputc_r+0x16>
 801a158:	290a      	cmp	r1, #10
 801a15a:	d103      	bne.n	801a164 <__sfputc_r+0x1e>
 801a15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a160:	f000 b934 	b.w	801a3cc <__swbuf_r>
 801a164:	6813      	ldr	r3, [r2, #0]
 801a166:	1c58      	adds	r0, r3, #1
 801a168:	6010      	str	r0, [r2, #0]
 801a16a:	7019      	strb	r1, [r3, #0]
 801a16c:	4608      	mov	r0, r1
 801a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a172:	4770      	bx	lr

0801a174 <__sfputs_r>:
 801a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a176:	4606      	mov	r6, r0
 801a178:	460f      	mov	r7, r1
 801a17a:	4614      	mov	r4, r2
 801a17c:	18d5      	adds	r5, r2, r3
 801a17e:	42ac      	cmp	r4, r5
 801a180:	d101      	bne.n	801a186 <__sfputs_r+0x12>
 801a182:	2000      	movs	r0, #0
 801a184:	e007      	b.n	801a196 <__sfputs_r+0x22>
 801a186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a18a:	463a      	mov	r2, r7
 801a18c:	4630      	mov	r0, r6
 801a18e:	f7ff ffda 	bl	801a146 <__sfputc_r>
 801a192:	1c43      	adds	r3, r0, #1
 801a194:	d1f3      	bne.n	801a17e <__sfputs_r+0xa>
 801a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a198 <_vfiprintf_r>:
 801a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a19c:	460d      	mov	r5, r1
 801a19e:	b09d      	sub	sp, #116	; 0x74
 801a1a0:	4614      	mov	r4, r2
 801a1a2:	4698      	mov	r8, r3
 801a1a4:	4606      	mov	r6, r0
 801a1a6:	b118      	cbz	r0, 801a1b0 <_vfiprintf_r+0x18>
 801a1a8:	6a03      	ldr	r3, [r0, #32]
 801a1aa:	b90b      	cbnz	r3, 801a1b0 <_vfiprintf_r+0x18>
 801a1ac:	f7fd fd3a 	bl	8017c24 <__sinit>
 801a1b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1b2:	07d9      	lsls	r1, r3, #31
 801a1b4:	d405      	bmi.n	801a1c2 <_vfiprintf_r+0x2a>
 801a1b6:	89ab      	ldrh	r3, [r5, #12]
 801a1b8:	059a      	lsls	r2, r3, #22
 801a1ba:	d402      	bmi.n	801a1c2 <_vfiprintf_r+0x2a>
 801a1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1be:	f7e7 fe56 	bl	8001e6e <__retarget_lock_acquire_recursive>
 801a1c2:	89ab      	ldrh	r3, [r5, #12]
 801a1c4:	071b      	lsls	r3, r3, #28
 801a1c6:	d501      	bpl.n	801a1cc <_vfiprintf_r+0x34>
 801a1c8:	692b      	ldr	r3, [r5, #16]
 801a1ca:	b99b      	cbnz	r3, 801a1f4 <_vfiprintf_r+0x5c>
 801a1cc:	4629      	mov	r1, r5
 801a1ce:	4630      	mov	r0, r6
 801a1d0:	f000 f93a 	bl	801a448 <__swsetup_r>
 801a1d4:	b170      	cbz	r0, 801a1f4 <_vfiprintf_r+0x5c>
 801a1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1d8:	07dc      	lsls	r4, r3, #31
 801a1da:	d504      	bpl.n	801a1e6 <_vfiprintf_r+0x4e>
 801a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a1e0:	b01d      	add	sp, #116	; 0x74
 801a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e6:	89ab      	ldrh	r3, [r5, #12]
 801a1e8:	0598      	lsls	r0, r3, #22
 801a1ea:	d4f7      	bmi.n	801a1dc <_vfiprintf_r+0x44>
 801a1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1ee:	f7e7 fe52 	bl	8001e96 <__retarget_lock_release_recursive>
 801a1f2:	e7f3      	b.n	801a1dc <_vfiprintf_r+0x44>
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a1f8:	2320      	movs	r3, #32
 801a1fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801a202:	2330      	movs	r3, #48	; 0x30
 801a204:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a3b8 <_vfiprintf_r+0x220>
 801a208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a20c:	f04f 0901 	mov.w	r9, #1
 801a210:	4623      	mov	r3, r4
 801a212:	469a      	mov	sl, r3
 801a214:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a218:	b10a      	cbz	r2, 801a21e <_vfiprintf_r+0x86>
 801a21a:	2a25      	cmp	r2, #37	; 0x25
 801a21c:	d1f9      	bne.n	801a212 <_vfiprintf_r+0x7a>
 801a21e:	ebba 0b04 	subs.w	fp, sl, r4
 801a222:	d00b      	beq.n	801a23c <_vfiprintf_r+0xa4>
 801a224:	465b      	mov	r3, fp
 801a226:	4622      	mov	r2, r4
 801a228:	4629      	mov	r1, r5
 801a22a:	4630      	mov	r0, r6
 801a22c:	f7ff ffa2 	bl	801a174 <__sfputs_r>
 801a230:	3001      	adds	r0, #1
 801a232:	f000 80a9 	beq.w	801a388 <_vfiprintf_r+0x1f0>
 801a236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a238:	445a      	add	r2, fp
 801a23a:	9209      	str	r2, [sp, #36]	; 0x24
 801a23c:	f89a 3000 	ldrb.w	r3, [sl]
 801a240:	2b00      	cmp	r3, #0
 801a242:	f000 80a1 	beq.w	801a388 <_vfiprintf_r+0x1f0>
 801a246:	2300      	movs	r3, #0
 801a248:	f04f 32ff 	mov.w	r2, #4294967295
 801a24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a250:	f10a 0a01 	add.w	sl, sl, #1
 801a254:	9304      	str	r3, [sp, #16]
 801a256:	9307      	str	r3, [sp, #28]
 801a258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a25c:	931a      	str	r3, [sp, #104]	; 0x68
 801a25e:	4654      	mov	r4, sl
 801a260:	2205      	movs	r2, #5
 801a262:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a266:	4854      	ldr	r0, [pc, #336]	; (801a3b8 <_vfiprintf_r+0x220>)
 801a268:	f7e6 f84a 	bl	8000300 <memchr>
 801a26c:	9a04      	ldr	r2, [sp, #16]
 801a26e:	b9d8      	cbnz	r0, 801a2a8 <_vfiprintf_r+0x110>
 801a270:	06d1      	lsls	r1, r2, #27
 801a272:	bf44      	itt	mi
 801a274:	2320      	movmi	r3, #32
 801a276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a27a:	0713      	lsls	r3, r2, #28
 801a27c:	bf44      	itt	mi
 801a27e:	232b      	movmi	r3, #43	; 0x2b
 801a280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a284:	f89a 3000 	ldrb.w	r3, [sl]
 801a288:	2b2a      	cmp	r3, #42	; 0x2a
 801a28a:	d015      	beq.n	801a2b8 <_vfiprintf_r+0x120>
 801a28c:	9a07      	ldr	r2, [sp, #28]
 801a28e:	4654      	mov	r4, sl
 801a290:	2000      	movs	r0, #0
 801a292:	f04f 0c0a 	mov.w	ip, #10
 801a296:	4621      	mov	r1, r4
 801a298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a29c:	3b30      	subs	r3, #48	; 0x30
 801a29e:	2b09      	cmp	r3, #9
 801a2a0:	d94d      	bls.n	801a33e <_vfiprintf_r+0x1a6>
 801a2a2:	b1b0      	cbz	r0, 801a2d2 <_vfiprintf_r+0x13a>
 801a2a4:	9207      	str	r2, [sp, #28]
 801a2a6:	e014      	b.n	801a2d2 <_vfiprintf_r+0x13a>
 801a2a8:	eba0 0308 	sub.w	r3, r0, r8
 801a2ac:	fa09 f303 	lsl.w	r3, r9, r3
 801a2b0:	4313      	orrs	r3, r2
 801a2b2:	9304      	str	r3, [sp, #16]
 801a2b4:	46a2      	mov	sl, r4
 801a2b6:	e7d2      	b.n	801a25e <_vfiprintf_r+0xc6>
 801a2b8:	9b03      	ldr	r3, [sp, #12]
 801a2ba:	1d19      	adds	r1, r3, #4
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	9103      	str	r1, [sp, #12]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	bfbb      	ittet	lt
 801a2c4:	425b      	neglt	r3, r3
 801a2c6:	f042 0202 	orrlt.w	r2, r2, #2
 801a2ca:	9307      	strge	r3, [sp, #28]
 801a2cc:	9307      	strlt	r3, [sp, #28]
 801a2ce:	bfb8      	it	lt
 801a2d0:	9204      	strlt	r2, [sp, #16]
 801a2d2:	7823      	ldrb	r3, [r4, #0]
 801a2d4:	2b2e      	cmp	r3, #46	; 0x2e
 801a2d6:	d10c      	bne.n	801a2f2 <_vfiprintf_r+0x15a>
 801a2d8:	7863      	ldrb	r3, [r4, #1]
 801a2da:	2b2a      	cmp	r3, #42	; 0x2a
 801a2dc:	d134      	bne.n	801a348 <_vfiprintf_r+0x1b0>
 801a2de:	9b03      	ldr	r3, [sp, #12]
 801a2e0:	1d1a      	adds	r2, r3, #4
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	9203      	str	r2, [sp, #12]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	bfb8      	it	lt
 801a2ea:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2ee:	3402      	adds	r4, #2
 801a2f0:	9305      	str	r3, [sp, #20]
 801a2f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a3c8 <_vfiprintf_r+0x230>
 801a2f6:	7821      	ldrb	r1, [r4, #0]
 801a2f8:	2203      	movs	r2, #3
 801a2fa:	4650      	mov	r0, sl
 801a2fc:	f7e6 f800 	bl	8000300 <memchr>
 801a300:	b138      	cbz	r0, 801a312 <_vfiprintf_r+0x17a>
 801a302:	9b04      	ldr	r3, [sp, #16]
 801a304:	eba0 000a 	sub.w	r0, r0, sl
 801a308:	2240      	movs	r2, #64	; 0x40
 801a30a:	4082      	lsls	r2, r0
 801a30c:	4313      	orrs	r3, r2
 801a30e:	3401      	adds	r4, #1
 801a310:	9304      	str	r3, [sp, #16]
 801a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a316:	4829      	ldr	r0, [pc, #164]	; (801a3bc <_vfiprintf_r+0x224>)
 801a318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a31c:	2206      	movs	r2, #6
 801a31e:	f7e5 ffef 	bl	8000300 <memchr>
 801a322:	2800      	cmp	r0, #0
 801a324:	d03f      	beq.n	801a3a6 <_vfiprintf_r+0x20e>
 801a326:	4b26      	ldr	r3, [pc, #152]	; (801a3c0 <_vfiprintf_r+0x228>)
 801a328:	bb1b      	cbnz	r3, 801a372 <_vfiprintf_r+0x1da>
 801a32a:	9b03      	ldr	r3, [sp, #12]
 801a32c:	3307      	adds	r3, #7
 801a32e:	f023 0307 	bic.w	r3, r3, #7
 801a332:	3308      	adds	r3, #8
 801a334:	9303      	str	r3, [sp, #12]
 801a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a338:	443b      	add	r3, r7
 801a33a:	9309      	str	r3, [sp, #36]	; 0x24
 801a33c:	e768      	b.n	801a210 <_vfiprintf_r+0x78>
 801a33e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a342:	460c      	mov	r4, r1
 801a344:	2001      	movs	r0, #1
 801a346:	e7a6      	b.n	801a296 <_vfiprintf_r+0xfe>
 801a348:	2300      	movs	r3, #0
 801a34a:	3401      	adds	r4, #1
 801a34c:	9305      	str	r3, [sp, #20]
 801a34e:	4619      	mov	r1, r3
 801a350:	f04f 0c0a 	mov.w	ip, #10
 801a354:	4620      	mov	r0, r4
 801a356:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a35a:	3a30      	subs	r2, #48	; 0x30
 801a35c:	2a09      	cmp	r2, #9
 801a35e:	d903      	bls.n	801a368 <_vfiprintf_r+0x1d0>
 801a360:	2b00      	cmp	r3, #0
 801a362:	d0c6      	beq.n	801a2f2 <_vfiprintf_r+0x15a>
 801a364:	9105      	str	r1, [sp, #20]
 801a366:	e7c4      	b.n	801a2f2 <_vfiprintf_r+0x15a>
 801a368:	fb0c 2101 	mla	r1, ip, r1, r2
 801a36c:	4604      	mov	r4, r0
 801a36e:	2301      	movs	r3, #1
 801a370:	e7f0      	b.n	801a354 <_vfiprintf_r+0x1bc>
 801a372:	ab03      	add	r3, sp, #12
 801a374:	9300      	str	r3, [sp, #0]
 801a376:	462a      	mov	r2, r5
 801a378:	4b12      	ldr	r3, [pc, #72]	; (801a3c4 <_vfiprintf_r+0x22c>)
 801a37a:	a904      	add	r1, sp, #16
 801a37c:	4630      	mov	r0, r6
 801a37e:	f7fd f81b 	bl	80173b8 <_printf_float>
 801a382:	4607      	mov	r7, r0
 801a384:	1c78      	adds	r0, r7, #1
 801a386:	d1d6      	bne.n	801a336 <_vfiprintf_r+0x19e>
 801a388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a38a:	07d9      	lsls	r1, r3, #31
 801a38c:	d405      	bmi.n	801a39a <_vfiprintf_r+0x202>
 801a38e:	89ab      	ldrh	r3, [r5, #12]
 801a390:	059a      	lsls	r2, r3, #22
 801a392:	d402      	bmi.n	801a39a <_vfiprintf_r+0x202>
 801a394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a396:	f7e7 fd7e 	bl	8001e96 <__retarget_lock_release_recursive>
 801a39a:	89ab      	ldrh	r3, [r5, #12]
 801a39c:	065b      	lsls	r3, r3, #25
 801a39e:	f53f af1d 	bmi.w	801a1dc <_vfiprintf_r+0x44>
 801a3a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a3a4:	e71c      	b.n	801a1e0 <_vfiprintf_r+0x48>
 801a3a6:	ab03      	add	r3, sp, #12
 801a3a8:	9300      	str	r3, [sp, #0]
 801a3aa:	462a      	mov	r2, r5
 801a3ac:	4b05      	ldr	r3, [pc, #20]	; (801a3c4 <_vfiprintf_r+0x22c>)
 801a3ae:	a904      	add	r1, sp, #16
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	f7fd fa89 	bl	80178c8 <_printf_i>
 801a3b6:	e7e4      	b.n	801a382 <_vfiprintf_r+0x1ea>
 801a3b8:	0801d2c4 	.word	0x0801d2c4
 801a3bc:	0801d2ce 	.word	0x0801d2ce
 801a3c0:	080173b9 	.word	0x080173b9
 801a3c4:	0801a175 	.word	0x0801a175
 801a3c8:	0801d2ca 	.word	0x0801d2ca

0801a3cc <__swbuf_r>:
 801a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ce:	460e      	mov	r6, r1
 801a3d0:	4614      	mov	r4, r2
 801a3d2:	4605      	mov	r5, r0
 801a3d4:	b118      	cbz	r0, 801a3de <__swbuf_r+0x12>
 801a3d6:	6a03      	ldr	r3, [r0, #32]
 801a3d8:	b90b      	cbnz	r3, 801a3de <__swbuf_r+0x12>
 801a3da:	f7fd fc23 	bl	8017c24 <__sinit>
 801a3de:	69a3      	ldr	r3, [r4, #24]
 801a3e0:	60a3      	str	r3, [r4, #8]
 801a3e2:	89a3      	ldrh	r3, [r4, #12]
 801a3e4:	071a      	lsls	r2, r3, #28
 801a3e6:	d525      	bpl.n	801a434 <__swbuf_r+0x68>
 801a3e8:	6923      	ldr	r3, [r4, #16]
 801a3ea:	b31b      	cbz	r3, 801a434 <__swbuf_r+0x68>
 801a3ec:	6823      	ldr	r3, [r4, #0]
 801a3ee:	6922      	ldr	r2, [r4, #16]
 801a3f0:	1a98      	subs	r0, r3, r2
 801a3f2:	6963      	ldr	r3, [r4, #20]
 801a3f4:	b2f6      	uxtb	r6, r6
 801a3f6:	4283      	cmp	r3, r0
 801a3f8:	4637      	mov	r7, r6
 801a3fa:	dc04      	bgt.n	801a406 <__swbuf_r+0x3a>
 801a3fc:	4621      	mov	r1, r4
 801a3fe:	4628      	mov	r0, r5
 801a400:	f7ff fdda 	bl	8019fb8 <_fflush_r>
 801a404:	b9e0      	cbnz	r0, 801a440 <__swbuf_r+0x74>
 801a406:	68a3      	ldr	r3, [r4, #8]
 801a408:	3b01      	subs	r3, #1
 801a40a:	60a3      	str	r3, [r4, #8]
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	1c5a      	adds	r2, r3, #1
 801a410:	6022      	str	r2, [r4, #0]
 801a412:	701e      	strb	r6, [r3, #0]
 801a414:	6962      	ldr	r2, [r4, #20]
 801a416:	1c43      	adds	r3, r0, #1
 801a418:	429a      	cmp	r2, r3
 801a41a:	d004      	beq.n	801a426 <__swbuf_r+0x5a>
 801a41c:	89a3      	ldrh	r3, [r4, #12]
 801a41e:	07db      	lsls	r3, r3, #31
 801a420:	d506      	bpl.n	801a430 <__swbuf_r+0x64>
 801a422:	2e0a      	cmp	r6, #10
 801a424:	d104      	bne.n	801a430 <__swbuf_r+0x64>
 801a426:	4621      	mov	r1, r4
 801a428:	4628      	mov	r0, r5
 801a42a:	f7ff fdc5 	bl	8019fb8 <_fflush_r>
 801a42e:	b938      	cbnz	r0, 801a440 <__swbuf_r+0x74>
 801a430:	4638      	mov	r0, r7
 801a432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a434:	4621      	mov	r1, r4
 801a436:	4628      	mov	r0, r5
 801a438:	f000 f806 	bl	801a448 <__swsetup_r>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d0d5      	beq.n	801a3ec <__swbuf_r+0x20>
 801a440:	f04f 37ff 	mov.w	r7, #4294967295
 801a444:	e7f4      	b.n	801a430 <__swbuf_r+0x64>
	...

0801a448 <__swsetup_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	4b2a      	ldr	r3, [pc, #168]	; (801a4f4 <__swsetup_r+0xac>)
 801a44c:	4605      	mov	r5, r0
 801a44e:	6818      	ldr	r0, [r3, #0]
 801a450:	460c      	mov	r4, r1
 801a452:	b118      	cbz	r0, 801a45c <__swsetup_r+0x14>
 801a454:	6a03      	ldr	r3, [r0, #32]
 801a456:	b90b      	cbnz	r3, 801a45c <__swsetup_r+0x14>
 801a458:	f7fd fbe4 	bl	8017c24 <__sinit>
 801a45c:	89a3      	ldrh	r3, [r4, #12]
 801a45e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a462:	0718      	lsls	r0, r3, #28
 801a464:	d422      	bmi.n	801a4ac <__swsetup_r+0x64>
 801a466:	06d9      	lsls	r1, r3, #27
 801a468:	d407      	bmi.n	801a47a <__swsetup_r+0x32>
 801a46a:	2309      	movs	r3, #9
 801a46c:	602b      	str	r3, [r5, #0]
 801a46e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a472:	81a3      	strh	r3, [r4, #12]
 801a474:	f04f 30ff 	mov.w	r0, #4294967295
 801a478:	e034      	b.n	801a4e4 <__swsetup_r+0x9c>
 801a47a:	0758      	lsls	r0, r3, #29
 801a47c:	d512      	bpl.n	801a4a4 <__swsetup_r+0x5c>
 801a47e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a480:	b141      	cbz	r1, 801a494 <__swsetup_r+0x4c>
 801a482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a486:	4299      	cmp	r1, r3
 801a488:	d002      	beq.n	801a490 <__swsetup_r+0x48>
 801a48a:	4628      	mov	r0, r5
 801a48c:	f7fe fb48 	bl	8018b20 <_free_r>
 801a490:	2300      	movs	r3, #0
 801a492:	6363      	str	r3, [r4, #52]	; 0x34
 801a494:	89a3      	ldrh	r3, [r4, #12]
 801a496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a49a:	81a3      	strh	r3, [r4, #12]
 801a49c:	2300      	movs	r3, #0
 801a49e:	6063      	str	r3, [r4, #4]
 801a4a0:	6923      	ldr	r3, [r4, #16]
 801a4a2:	6023      	str	r3, [r4, #0]
 801a4a4:	89a3      	ldrh	r3, [r4, #12]
 801a4a6:	f043 0308 	orr.w	r3, r3, #8
 801a4aa:	81a3      	strh	r3, [r4, #12]
 801a4ac:	6923      	ldr	r3, [r4, #16]
 801a4ae:	b94b      	cbnz	r3, 801a4c4 <__swsetup_r+0x7c>
 801a4b0:	89a3      	ldrh	r3, [r4, #12]
 801a4b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4ba:	d003      	beq.n	801a4c4 <__swsetup_r+0x7c>
 801a4bc:	4621      	mov	r1, r4
 801a4be:	4628      	mov	r0, r5
 801a4c0:	f000 f884 	bl	801a5cc <__smakebuf_r>
 801a4c4:	89a0      	ldrh	r0, [r4, #12]
 801a4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4ca:	f010 0301 	ands.w	r3, r0, #1
 801a4ce:	d00a      	beq.n	801a4e6 <__swsetup_r+0x9e>
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	60a3      	str	r3, [r4, #8]
 801a4d4:	6963      	ldr	r3, [r4, #20]
 801a4d6:	425b      	negs	r3, r3
 801a4d8:	61a3      	str	r3, [r4, #24]
 801a4da:	6923      	ldr	r3, [r4, #16]
 801a4dc:	b943      	cbnz	r3, 801a4f0 <__swsetup_r+0xa8>
 801a4de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4e2:	d1c4      	bne.n	801a46e <__swsetup_r+0x26>
 801a4e4:	bd38      	pop	{r3, r4, r5, pc}
 801a4e6:	0781      	lsls	r1, r0, #30
 801a4e8:	bf58      	it	pl
 801a4ea:	6963      	ldrpl	r3, [r4, #20]
 801a4ec:	60a3      	str	r3, [r4, #8]
 801a4ee:	e7f4      	b.n	801a4da <__swsetup_r+0x92>
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	e7f7      	b.n	801a4e4 <__swsetup_r+0x9c>
 801a4f4:	240003c4 	.word	0x240003c4

0801a4f8 <_raise_r>:
 801a4f8:	291f      	cmp	r1, #31
 801a4fa:	b538      	push	{r3, r4, r5, lr}
 801a4fc:	4604      	mov	r4, r0
 801a4fe:	460d      	mov	r5, r1
 801a500:	d904      	bls.n	801a50c <_raise_r+0x14>
 801a502:	2316      	movs	r3, #22
 801a504:	6003      	str	r3, [r0, #0]
 801a506:	f04f 30ff 	mov.w	r0, #4294967295
 801a50a:	bd38      	pop	{r3, r4, r5, pc}
 801a50c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a50e:	b112      	cbz	r2, 801a516 <_raise_r+0x1e>
 801a510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a514:	b94b      	cbnz	r3, 801a52a <_raise_r+0x32>
 801a516:	4620      	mov	r0, r4
 801a518:	f000 f830 	bl	801a57c <_getpid_r>
 801a51c:	462a      	mov	r2, r5
 801a51e:	4601      	mov	r1, r0
 801a520:	4620      	mov	r0, r4
 801a522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a526:	f000 b817 	b.w	801a558 <_kill_r>
 801a52a:	2b01      	cmp	r3, #1
 801a52c:	d00a      	beq.n	801a544 <_raise_r+0x4c>
 801a52e:	1c59      	adds	r1, r3, #1
 801a530:	d103      	bne.n	801a53a <_raise_r+0x42>
 801a532:	2316      	movs	r3, #22
 801a534:	6003      	str	r3, [r0, #0]
 801a536:	2001      	movs	r0, #1
 801a538:	e7e7      	b.n	801a50a <_raise_r+0x12>
 801a53a:	2400      	movs	r4, #0
 801a53c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a540:	4628      	mov	r0, r5
 801a542:	4798      	blx	r3
 801a544:	2000      	movs	r0, #0
 801a546:	e7e0      	b.n	801a50a <_raise_r+0x12>

0801a548 <raise>:
 801a548:	4b02      	ldr	r3, [pc, #8]	; (801a554 <raise+0xc>)
 801a54a:	4601      	mov	r1, r0
 801a54c:	6818      	ldr	r0, [r3, #0]
 801a54e:	f7ff bfd3 	b.w	801a4f8 <_raise_r>
 801a552:	bf00      	nop
 801a554:	240003c4 	.word	0x240003c4

0801a558 <_kill_r>:
 801a558:	b538      	push	{r3, r4, r5, lr}
 801a55a:	4d07      	ldr	r5, [pc, #28]	; (801a578 <_kill_r+0x20>)
 801a55c:	2300      	movs	r3, #0
 801a55e:	4604      	mov	r4, r0
 801a560:	4608      	mov	r0, r1
 801a562:	4611      	mov	r1, r2
 801a564:	602b      	str	r3, [r5, #0]
 801a566:	f7e7 faff 	bl	8001b68 <_kill>
 801a56a:	1c43      	adds	r3, r0, #1
 801a56c:	d102      	bne.n	801a574 <_kill_r+0x1c>
 801a56e:	682b      	ldr	r3, [r5, #0]
 801a570:	b103      	cbz	r3, 801a574 <_kill_r+0x1c>
 801a572:	6023      	str	r3, [r4, #0]
 801a574:	bd38      	pop	{r3, r4, r5, pc}
 801a576:	bf00      	nop
 801a578:	2400b560 	.word	0x2400b560

0801a57c <_getpid_r>:
 801a57c:	f7e7 baec 	b.w	8001b58 <_getpid>

0801a580 <__swhatbuf_r>:
 801a580:	b570      	push	{r4, r5, r6, lr}
 801a582:	460c      	mov	r4, r1
 801a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a588:	2900      	cmp	r1, #0
 801a58a:	b096      	sub	sp, #88	; 0x58
 801a58c:	4615      	mov	r5, r2
 801a58e:	461e      	mov	r6, r3
 801a590:	da0d      	bge.n	801a5ae <__swhatbuf_r+0x2e>
 801a592:	89a3      	ldrh	r3, [r4, #12]
 801a594:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a598:	f04f 0100 	mov.w	r1, #0
 801a59c:	bf0c      	ite	eq
 801a59e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a5a2:	2340      	movne	r3, #64	; 0x40
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	6031      	str	r1, [r6, #0]
 801a5a8:	602b      	str	r3, [r5, #0]
 801a5aa:	b016      	add	sp, #88	; 0x58
 801a5ac:	bd70      	pop	{r4, r5, r6, pc}
 801a5ae:	466a      	mov	r2, sp
 801a5b0:	f000 f848 	bl	801a644 <_fstat_r>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	dbec      	blt.n	801a592 <__swhatbuf_r+0x12>
 801a5b8:	9901      	ldr	r1, [sp, #4]
 801a5ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a5be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a5c2:	4259      	negs	r1, r3
 801a5c4:	4159      	adcs	r1, r3
 801a5c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a5ca:	e7eb      	b.n	801a5a4 <__swhatbuf_r+0x24>

0801a5cc <__smakebuf_r>:
 801a5cc:	898b      	ldrh	r3, [r1, #12]
 801a5ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5d0:	079d      	lsls	r5, r3, #30
 801a5d2:	4606      	mov	r6, r0
 801a5d4:	460c      	mov	r4, r1
 801a5d6:	d507      	bpl.n	801a5e8 <__smakebuf_r+0x1c>
 801a5d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5dc:	6023      	str	r3, [r4, #0]
 801a5de:	6123      	str	r3, [r4, #16]
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	6163      	str	r3, [r4, #20]
 801a5e4:	b002      	add	sp, #8
 801a5e6:	bd70      	pop	{r4, r5, r6, pc}
 801a5e8:	ab01      	add	r3, sp, #4
 801a5ea:	466a      	mov	r2, sp
 801a5ec:	f7ff ffc8 	bl	801a580 <__swhatbuf_r>
 801a5f0:	9900      	ldr	r1, [sp, #0]
 801a5f2:	4605      	mov	r5, r0
 801a5f4:	4630      	mov	r0, r6
 801a5f6:	f7fb ff5b 	bl	80164b0 <_malloc_r>
 801a5fa:	b948      	cbnz	r0, 801a610 <__smakebuf_r+0x44>
 801a5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a600:	059a      	lsls	r2, r3, #22
 801a602:	d4ef      	bmi.n	801a5e4 <__smakebuf_r+0x18>
 801a604:	f023 0303 	bic.w	r3, r3, #3
 801a608:	f043 0302 	orr.w	r3, r3, #2
 801a60c:	81a3      	strh	r3, [r4, #12]
 801a60e:	e7e3      	b.n	801a5d8 <__smakebuf_r+0xc>
 801a610:	89a3      	ldrh	r3, [r4, #12]
 801a612:	6020      	str	r0, [r4, #0]
 801a614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a618:	81a3      	strh	r3, [r4, #12]
 801a61a:	9b00      	ldr	r3, [sp, #0]
 801a61c:	6163      	str	r3, [r4, #20]
 801a61e:	9b01      	ldr	r3, [sp, #4]
 801a620:	6120      	str	r0, [r4, #16]
 801a622:	b15b      	cbz	r3, 801a63c <__smakebuf_r+0x70>
 801a624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a628:	4630      	mov	r0, r6
 801a62a:	f000 f81d 	bl	801a668 <_isatty_r>
 801a62e:	b128      	cbz	r0, 801a63c <__smakebuf_r+0x70>
 801a630:	89a3      	ldrh	r3, [r4, #12]
 801a632:	f023 0303 	bic.w	r3, r3, #3
 801a636:	f043 0301 	orr.w	r3, r3, #1
 801a63a:	81a3      	strh	r3, [r4, #12]
 801a63c:	89a3      	ldrh	r3, [r4, #12]
 801a63e:	431d      	orrs	r5, r3
 801a640:	81a5      	strh	r5, [r4, #12]
 801a642:	e7cf      	b.n	801a5e4 <__smakebuf_r+0x18>

0801a644 <_fstat_r>:
 801a644:	b538      	push	{r3, r4, r5, lr}
 801a646:	4d07      	ldr	r5, [pc, #28]	; (801a664 <_fstat_r+0x20>)
 801a648:	2300      	movs	r3, #0
 801a64a:	4604      	mov	r4, r0
 801a64c:	4608      	mov	r0, r1
 801a64e:	4611      	mov	r1, r2
 801a650:	602b      	str	r3, [r5, #0]
 801a652:	f7e7 fae8 	bl	8001c26 <_fstat>
 801a656:	1c43      	adds	r3, r0, #1
 801a658:	d102      	bne.n	801a660 <_fstat_r+0x1c>
 801a65a:	682b      	ldr	r3, [r5, #0]
 801a65c:	b103      	cbz	r3, 801a660 <_fstat_r+0x1c>
 801a65e:	6023      	str	r3, [r4, #0]
 801a660:	bd38      	pop	{r3, r4, r5, pc}
 801a662:	bf00      	nop
 801a664:	2400b560 	.word	0x2400b560

0801a668 <_isatty_r>:
 801a668:	b538      	push	{r3, r4, r5, lr}
 801a66a:	4d06      	ldr	r5, [pc, #24]	; (801a684 <_isatty_r+0x1c>)
 801a66c:	2300      	movs	r3, #0
 801a66e:	4604      	mov	r4, r0
 801a670:	4608      	mov	r0, r1
 801a672:	602b      	str	r3, [r5, #0]
 801a674:	f7e7 fae7 	bl	8001c46 <_isatty>
 801a678:	1c43      	adds	r3, r0, #1
 801a67a:	d102      	bne.n	801a682 <_isatty_r+0x1a>
 801a67c:	682b      	ldr	r3, [r5, #0]
 801a67e:	b103      	cbz	r3, 801a682 <_isatty_r+0x1a>
 801a680:	6023      	str	r3, [r4, #0]
 801a682:	bd38      	pop	{r3, r4, r5, pc}
 801a684:	2400b560 	.word	0x2400b560

0801a688 <sinh>:
 801a688:	b508      	push	{r3, lr}
 801a68a:	ed2d 8b04 	vpush	{d8-d9}
 801a68e:	eeb0 9b40 	vmov.f64	d9, d0
 801a692:	f000 fad1 	bl	801ac38 <__ieee754_sinh>
 801a696:	eeb0 8b40 	vmov.f64	d8, d0
 801a69a:	f000 f8b9 	bl	801a810 <finite>
 801a69e:	b990      	cbnz	r0, 801a6c6 <sinh+0x3e>
 801a6a0:	eeb0 0b49 	vmov.f64	d0, d9
 801a6a4:	f000 f8b4 	bl	801a810 <finite>
 801a6a8:	b168      	cbz	r0, 801a6c6 <sinh+0x3e>
 801a6aa:	f7fd fbfd 	bl	8017ea8 <__errno>
 801a6ae:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 801a6b2:	ed9f 8b07 	vldr	d8, [pc, #28]	; 801a6d0 <sinh+0x48>
 801a6b6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801a6d8 <sinh+0x50>
 801a6ba:	2322      	movs	r3, #34	; 0x22
 801a6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6c0:	6003      	str	r3, [r0, #0]
 801a6c2:	fe38 8b07 	vselgt.f64	d8, d8, d7
 801a6c6:	eeb0 0b48 	vmov.f64	d0, d8
 801a6ca:	ecbd 8b04 	vpop	{d8-d9}
 801a6ce:	bd08      	pop	{r3, pc}
 801a6d0:	00000000 	.word	0x00000000
 801a6d4:	7ff00000 	.word	0x7ff00000
 801a6d8:	00000000 	.word	0x00000000
 801a6dc:	fff00000 	.word	0xfff00000

0801a6e0 <cos>:
 801a6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6e2:	eeb0 7b40 	vmov.f64	d7, d0
 801a6e6:	ee17 3a90 	vmov	r3, s15
 801a6ea:	4a21      	ldr	r2, [pc, #132]	; (801a770 <cos+0x90>)
 801a6ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a6f0:	4293      	cmp	r3, r2
 801a6f2:	dc06      	bgt.n	801a702 <cos+0x22>
 801a6f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801a768 <cos+0x88>
 801a6f8:	b005      	add	sp, #20
 801a6fa:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6fe:	f000 b893 	b.w	801a828 <__kernel_cos>
 801a702:	4a1c      	ldr	r2, [pc, #112]	; (801a774 <cos+0x94>)
 801a704:	4293      	cmp	r3, r2
 801a706:	dd04      	ble.n	801a712 <cos+0x32>
 801a708:	ee30 0b40 	vsub.f64	d0, d0, d0
 801a70c:	b005      	add	sp, #20
 801a70e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a712:	4668      	mov	r0, sp
 801a714:	f000 f94c 	bl	801a9b0 <__ieee754_rem_pio2>
 801a718:	f000 0003 	and.w	r0, r0, #3
 801a71c:	2801      	cmp	r0, #1
 801a71e:	d009      	beq.n	801a734 <cos+0x54>
 801a720:	2802      	cmp	r0, #2
 801a722:	d010      	beq.n	801a746 <cos+0x66>
 801a724:	b9b0      	cbnz	r0, 801a754 <cos+0x74>
 801a726:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a72a:	ed9d 0b00 	vldr	d0, [sp]
 801a72e:	f000 f87b 	bl	801a828 <__kernel_cos>
 801a732:	e7eb      	b.n	801a70c <cos+0x2c>
 801a734:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a738:	ed9d 0b00 	vldr	d0, [sp]
 801a73c:	f000 f8e0 	bl	801a900 <__kernel_sin>
 801a740:	eeb1 0b40 	vneg.f64	d0, d0
 801a744:	e7e2      	b.n	801a70c <cos+0x2c>
 801a746:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a74a:	ed9d 0b00 	vldr	d0, [sp]
 801a74e:	f000 f86b 	bl	801a828 <__kernel_cos>
 801a752:	e7f5      	b.n	801a740 <cos+0x60>
 801a754:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a758:	ed9d 0b00 	vldr	d0, [sp]
 801a75c:	2001      	movs	r0, #1
 801a75e:	f000 f8cf 	bl	801a900 <__kernel_sin>
 801a762:	e7d3      	b.n	801a70c <cos+0x2c>
 801a764:	f3af 8000 	nop.w
	...
 801a770:	3fe921fb 	.word	0x3fe921fb
 801a774:	7fefffff 	.word	0x7fefffff

0801a778 <sin>:
 801a778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a77a:	eeb0 7b40 	vmov.f64	d7, d0
 801a77e:	ee17 3a90 	vmov	r3, s15
 801a782:	4a21      	ldr	r2, [pc, #132]	; (801a808 <sin+0x90>)
 801a784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a788:	4293      	cmp	r3, r2
 801a78a:	dc07      	bgt.n	801a79c <sin+0x24>
 801a78c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801a800 <sin+0x88>
 801a790:	2000      	movs	r0, #0
 801a792:	b005      	add	sp, #20
 801a794:	f85d eb04 	ldr.w	lr, [sp], #4
 801a798:	f000 b8b2 	b.w	801a900 <__kernel_sin>
 801a79c:	4a1b      	ldr	r2, [pc, #108]	; (801a80c <sin+0x94>)
 801a79e:	4293      	cmp	r3, r2
 801a7a0:	dd04      	ble.n	801a7ac <sin+0x34>
 801a7a2:	ee30 0b40 	vsub.f64	d0, d0, d0
 801a7a6:	b005      	add	sp, #20
 801a7a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a7ac:	4668      	mov	r0, sp
 801a7ae:	f000 f8ff 	bl	801a9b0 <__ieee754_rem_pio2>
 801a7b2:	f000 0003 	and.w	r0, r0, #3
 801a7b6:	2801      	cmp	r0, #1
 801a7b8:	d00a      	beq.n	801a7d0 <sin+0x58>
 801a7ba:	2802      	cmp	r0, #2
 801a7bc:	d00f      	beq.n	801a7de <sin+0x66>
 801a7be:	b9c0      	cbnz	r0, 801a7f2 <sin+0x7a>
 801a7c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7c4:	ed9d 0b00 	vldr	d0, [sp]
 801a7c8:	2001      	movs	r0, #1
 801a7ca:	f000 f899 	bl	801a900 <__kernel_sin>
 801a7ce:	e7ea      	b.n	801a7a6 <sin+0x2e>
 801a7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7d4:	ed9d 0b00 	vldr	d0, [sp]
 801a7d8:	f000 f826 	bl	801a828 <__kernel_cos>
 801a7dc:	e7e3      	b.n	801a7a6 <sin+0x2e>
 801a7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7e2:	ed9d 0b00 	vldr	d0, [sp]
 801a7e6:	2001      	movs	r0, #1
 801a7e8:	f000 f88a 	bl	801a900 <__kernel_sin>
 801a7ec:	eeb1 0b40 	vneg.f64	d0, d0
 801a7f0:	e7d9      	b.n	801a7a6 <sin+0x2e>
 801a7f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a7f6:	ed9d 0b00 	vldr	d0, [sp]
 801a7fa:	f000 f815 	bl	801a828 <__kernel_cos>
 801a7fe:	e7f5      	b.n	801a7ec <sin+0x74>
	...
 801a808:	3fe921fb 	.word	0x3fe921fb
 801a80c:	7fefffff 	.word	0x7fefffff

0801a810 <finite>:
 801a810:	b082      	sub	sp, #8
 801a812:	ed8d 0b00 	vstr	d0, [sp]
 801a816:	9801      	ldr	r0, [sp, #4]
 801a818:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a81c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a820:	0fc0      	lsrs	r0, r0, #31
 801a822:	b002      	add	sp, #8
 801a824:	4770      	bx	lr
	...

0801a828 <__kernel_cos>:
 801a828:	ee10 1a90 	vmov	r1, s1
 801a82c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a834:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801a838:	da05      	bge.n	801a846 <__kernel_cos+0x1e>
 801a83a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801a83e:	ee17 3a90 	vmov	r3, s15
 801a842:	2b00      	cmp	r3, #0
 801a844:	d03d      	beq.n	801a8c2 <__kernel_cos+0x9a>
 801a846:	ee20 5b00 	vmul.f64	d5, d0, d0
 801a84a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801a84e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 801a8c8 <__kernel_cos+0xa0>
 801a852:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801a8d0 <__kernel_cos+0xa8>
 801a856:	eea5 4b07 	vfma.f64	d4, d5, d7
 801a85a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801a8d8 <__kernel_cos+0xb0>
 801a85e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a862:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 801a8e0 <__kernel_cos+0xb8>
 801a866:	eea7 4b05 	vfma.f64	d4, d7, d5
 801a86a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801a8e8 <__kernel_cos+0xc0>
 801a86e:	4b22      	ldr	r3, [pc, #136]	; (801a8f8 <__kernel_cos+0xd0>)
 801a870:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a874:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 801a8f0 <__kernel_cos+0xc8>
 801a878:	4299      	cmp	r1, r3
 801a87a:	eea7 4b05 	vfma.f64	d4, d7, d5
 801a87e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a882:	ee24 4b05 	vmul.f64	d4, d4, d5
 801a886:	ee25 7b07 	vmul.f64	d7, d5, d7
 801a88a:	eea5 1b04 	vfma.f64	d1, d5, d4
 801a88e:	dc04      	bgt.n	801a89a <__kernel_cos+0x72>
 801a890:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a894:	ee36 0b47 	vsub.f64	d0, d6, d7
 801a898:	4770      	bx	lr
 801a89a:	4b18      	ldr	r3, [pc, #96]	; (801a8fc <__kernel_cos+0xd4>)
 801a89c:	4299      	cmp	r1, r3
 801a89e:	dc0d      	bgt.n	801a8bc <__kernel_cos+0x94>
 801a8a0:	2200      	movs	r2, #0
 801a8a2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801a8a6:	ec43 2b15 	vmov	d5, r2, r3
 801a8aa:	ee36 0b45 	vsub.f64	d0, d6, d5
 801a8ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 801a8b2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a8b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801a8ba:	4770      	bx	lr
 801a8bc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801a8c0:	e7f3      	b.n	801a8aa <__kernel_cos+0x82>
 801a8c2:	eeb0 0b46 	vmov.f64	d0, d6
 801a8c6:	4770      	bx	lr
 801a8c8:	be8838d4 	.word	0xbe8838d4
 801a8cc:	bda8fae9 	.word	0xbda8fae9
 801a8d0:	bdb4b1c4 	.word	0xbdb4b1c4
 801a8d4:	3e21ee9e 	.word	0x3e21ee9e
 801a8d8:	809c52ad 	.word	0x809c52ad
 801a8dc:	be927e4f 	.word	0xbe927e4f
 801a8e0:	19cb1590 	.word	0x19cb1590
 801a8e4:	3efa01a0 	.word	0x3efa01a0
 801a8e8:	16c15177 	.word	0x16c15177
 801a8ec:	bf56c16c 	.word	0xbf56c16c
 801a8f0:	5555554c 	.word	0x5555554c
 801a8f4:	3fa55555 	.word	0x3fa55555
 801a8f8:	3fd33332 	.word	0x3fd33332
 801a8fc:	3fe90000 	.word	0x3fe90000

0801a900 <__kernel_sin>:
 801a900:	ee10 3a90 	vmov	r3, s1
 801a904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a908:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a90c:	da04      	bge.n	801a918 <__kernel_sin+0x18>
 801a90e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801a912:	ee17 3a90 	vmov	r3, s15
 801a916:	b35b      	cbz	r3, 801a970 <__kernel_sin+0x70>
 801a918:	ee20 6b00 	vmul.f64	d6, d0, d0
 801a91c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801a920:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801a978 <__kernel_sin+0x78>
 801a924:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801a980 <__kernel_sin+0x80>
 801a928:	eea6 4b07 	vfma.f64	d4, d6, d7
 801a92c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801a988 <__kernel_sin+0x88>
 801a930:	eea4 7b06 	vfma.f64	d7, d4, d6
 801a934:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801a990 <__kernel_sin+0x90>
 801a938:	eea7 4b06 	vfma.f64	d4, d7, d6
 801a93c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801a998 <__kernel_sin+0x98>
 801a940:	eea4 7b06 	vfma.f64	d7, d4, d6
 801a944:	b930      	cbnz	r0, 801a954 <__kernel_sin+0x54>
 801a946:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801a9a0 <__kernel_sin+0xa0>
 801a94a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801a94e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801a952:	4770      	bx	lr
 801a954:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801a958:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801a95c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801a960:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801a964:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801a9a8 <__kernel_sin+0xa8>
 801a968:	eea5 1b07 	vfma.f64	d1, d5, d7
 801a96c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop
 801a974:	f3af 8000 	nop.w
 801a978:	5acfd57c 	.word	0x5acfd57c
 801a97c:	3de5d93a 	.word	0x3de5d93a
 801a980:	8a2b9ceb 	.word	0x8a2b9ceb
 801a984:	be5ae5e6 	.word	0xbe5ae5e6
 801a988:	57b1fe7d 	.word	0x57b1fe7d
 801a98c:	3ec71de3 	.word	0x3ec71de3
 801a990:	19c161d5 	.word	0x19c161d5
 801a994:	bf2a01a0 	.word	0xbf2a01a0
 801a998:	1110f8a6 	.word	0x1110f8a6
 801a99c:	3f811111 	.word	0x3f811111
 801a9a0:	55555549 	.word	0x55555549
 801a9a4:	bfc55555 	.word	0xbfc55555
 801a9a8:	55555549 	.word	0x55555549
 801a9ac:	3fc55555 	.word	0x3fc55555

0801a9b0 <__ieee754_rem_pio2>:
 801a9b0:	b570      	push	{r4, r5, r6, lr}
 801a9b2:	eeb0 7b40 	vmov.f64	d7, d0
 801a9b6:	ee17 5a90 	vmov	r5, s15
 801a9ba:	4b99      	ldr	r3, [pc, #612]	; (801ac20 <__ieee754_rem_pio2+0x270>)
 801a9bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a9c0:	429e      	cmp	r6, r3
 801a9c2:	b088      	sub	sp, #32
 801a9c4:	4604      	mov	r4, r0
 801a9c6:	dc07      	bgt.n	801a9d8 <__ieee754_rem_pio2+0x28>
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	2300      	movs	r3, #0
 801a9cc:	ed84 0b00 	vstr	d0, [r4]
 801a9d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a9d4:	2000      	movs	r0, #0
 801a9d6:	e01b      	b.n	801aa10 <__ieee754_rem_pio2+0x60>
 801a9d8:	4b92      	ldr	r3, [pc, #584]	; (801ac24 <__ieee754_rem_pio2+0x274>)
 801a9da:	429e      	cmp	r6, r3
 801a9dc:	dc3b      	bgt.n	801aa56 <__ieee754_rem_pio2+0xa6>
 801a9de:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801a9e2:	2d00      	cmp	r5, #0
 801a9e4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801abe0 <__ieee754_rem_pio2+0x230>
 801a9e8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801a9ec:	dd19      	ble.n	801aa22 <__ieee754_rem_pio2+0x72>
 801a9ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 801a9f2:	429e      	cmp	r6, r3
 801a9f4:	d00e      	beq.n	801aa14 <__ieee754_rem_pio2+0x64>
 801a9f6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801abe8 <__ieee754_rem_pio2+0x238>
 801a9fa:	ee37 5b46 	vsub.f64	d5, d7, d6
 801a9fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 801aa02:	ed84 5b00 	vstr	d5, [r4]
 801aa06:	ee37 7b46 	vsub.f64	d7, d7, d6
 801aa0a:	ed84 7b02 	vstr	d7, [r4, #8]
 801aa0e:	2001      	movs	r0, #1
 801aa10:	b008      	add	sp, #32
 801aa12:	bd70      	pop	{r4, r5, r6, pc}
 801aa14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801abf0 <__ieee754_rem_pio2+0x240>
 801aa18:	ee37 7b46 	vsub.f64	d7, d7, d6
 801aa1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801abf8 <__ieee754_rem_pio2+0x248>
 801aa20:	e7eb      	b.n	801a9fa <__ieee754_rem_pio2+0x4a>
 801aa22:	429e      	cmp	r6, r3
 801aa24:	ee30 7b06 	vadd.f64	d7, d0, d6
 801aa28:	d00e      	beq.n	801aa48 <__ieee754_rem_pio2+0x98>
 801aa2a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801abe8 <__ieee754_rem_pio2+0x238>
 801aa2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 801aa32:	ee37 7b45 	vsub.f64	d7, d7, d5
 801aa36:	ed84 5b00 	vstr	d5, [r4]
 801aa3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 801aa42:	ed84 7b02 	vstr	d7, [r4, #8]
 801aa46:	e7e3      	b.n	801aa10 <__ieee754_rem_pio2+0x60>
 801aa48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801abf0 <__ieee754_rem_pio2+0x240>
 801aa4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801aa50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801abf8 <__ieee754_rem_pio2+0x248>
 801aa54:	e7eb      	b.n	801aa2e <__ieee754_rem_pio2+0x7e>
 801aa56:	4b74      	ldr	r3, [pc, #464]	; (801ac28 <__ieee754_rem_pio2+0x278>)
 801aa58:	429e      	cmp	r6, r3
 801aa5a:	dc70      	bgt.n	801ab3e <__ieee754_rem_pio2+0x18e>
 801aa5c:	f000 f96e 	bl	801ad3c <fabs>
 801aa60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801aa64:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801ac00 <__ieee754_rem_pio2+0x250>
 801aa68:	eea0 7b06 	vfma.f64	d7, d0, d6
 801aa6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801aa70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801aa74:	ee17 0a90 	vmov	r0, s15
 801aa78:	eeb1 4b45 	vneg.f64	d4, d5
 801aa7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801abe0 <__ieee754_rem_pio2+0x230>
 801aa80:	eea5 0b47 	vfms.f64	d0, d5, d7
 801aa84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801abe8 <__ieee754_rem_pio2+0x238>
 801aa88:	281f      	cmp	r0, #31
 801aa8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801aa8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801aa92:	dc08      	bgt.n	801aaa6 <__ieee754_rem_pio2+0xf6>
 801aa94:	4b65      	ldr	r3, [pc, #404]	; (801ac2c <__ieee754_rem_pio2+0x27c>)
 801aa96:	1e42      	subs	r2, r0, #1
 801aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa9c:	42b3      	cmp	r3, r6
 801aa9e:	d002      	beq.n	801aaa6 <__ieee754_rem_pio2+0xf6>
 801aaa0:	ed84 6b00 	vstr	d6, [r4]
 801aaa4:	e024      	b.n	801aaf0 <__ieee754_rem_pio2+0x140>
 801aaa6:	ee16 3a90 	vmov	r3, s13
 801aaaa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801aaae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801aab2:	2b10      	cmp	r3, #16
 801aab4:	ea4f 5226 	mov.w	r2, r6, asr #20
 801aab8:	ddf2      	ble.n	801aaa0 <__ieee754_rem_pio2+0xf0>
 801aaba:	eeb0 6b40 	vmov.f64	d6, d0
 801aabe:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801abf0 <__ieee754_rem_pio2+0x240>
 801aac2:	eea4 6b03 	vfma.f64	d6, d4, d3
 801aac6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801aaca:	eea4 7b03 	vfma.f64	d7, d4, d3
 801aace:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801abf8 <__ieee754_rem_pio2+0x248>
 801aad2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801aad6:	ee36 3b47 	vsub.f64	d3, d6, d7
 801aada:	ee13 3a90 	vmov	r3, s7
 801aade:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801aae2:	1ad3      	subs	r3, r2, r3
 801aae4:	2b31      	cmp	r3, #49	; 0x31
 801aae6:	dc17      	bgt.n	801ab18 <__ieee754_rem_pio2+0x168>
 801aae8:	eeb0 0b46 	vmov.f64	d0, d6
 801aaec:	ed84 3b00 	vstr	d3, [r4]
 801aaf0:	ed94 6b00 	vldr	d6, [r4]
 801aaf4:	2d00      	cmp	r5, #0
 801aaf6:	ee30 0b46 	vsub.f64	d0, d0, d6
 801aafa:	ee30 0b47 	vsub.f64	d0, d0, d7
 801aafe:	ed84 0b02 	vstr	d0, [r4, #8]
 801ab02:	da85      	bge.n	801aa10 <__ieee754_rem_pio2+0x60>
 801ab04:	eeb1 6b46 	vneg.f64	d6, d6
 801ab08:	eeb1 0b40 	vneg.f64	d0, d0
 801ab0c:	ed84 6b00 	vstr	d6, [r4]
 801ab10:	ed84 0b02 	vstr	d0, [r4, #8]
 801ab14:	4240      	negs	r0, r0
 801ab16:	e77b      	b.n	801aa10 <__ieee754_rem_pio2+0x60>
 801ab18:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801ac08 <__ieee754_rem_pio2+0x258>
 801ab1c:	eeb0 0b46 	vmov.f64	d0, d6
 801ab20:	eea4 0b07 	vfma.f64	d0, d4, d7
 801ab24:	ee36 6b40 	vsub.f64	d6, d6, d0
 801ab28:	eea4 6b07 	vfma.f64	d6, d4, d7
 801ab2c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801ac10 <__ieee754_rem_pio2+0x260>
 801ab30:	eeb0 7b46 	vmov.f64	d7, d6
 801ab34:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801ab38:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ab3c:	e7b0      	b.n	801aaa0 <__ieee754_rem_pio2+0xf0>
 801ab3e:	4b3c      	ldr	r3, [pc, #240]	; (801ac30 <__ieee754_rem_pio2+0x280>)
 801ab40:	429e      	cmp	r6, r3
 801ab42:	dd06      	ble.n	801ab52 <__ieee754_rem_pio2+0x1a2>
 801ab44:	ee30 7b40 	vsub.f64	d7, d0, d0
 801ab48:	ed80 7b02 	vstr	d7, [r0, #8]
 801ab4c:	ed80 7b00 	vstr	d7, [r0]
 801ab50:	e740      	b.n	801a9d4 <__ieee754_rem_pio2+0x24>
 801ab52:	1532      	asrs	r2, r6, #20
 801ab54:	ee10 0a10 	vmov	r0, s0
 801ab58:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801ab5c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801ab60:	ec41 0b17 	vmov	d7, r0, r1
 801ab64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ab68:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801ac18 <__ieee754_rem_pio2+0x268>
 801ab6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ab70:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab74:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ab78:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ab7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ab80:	a808      	add	r0, sp, #32
 801ab82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ab86:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab8a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ab8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ab92:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ab96:	2103      	movs	r1, #3
 801ab98:	ed30 7b02 	vldmdb	r0!, {d7}
 801ab9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801aba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba4:	460b      	mov	r3, r1
 801aba6:	f101 31ff 	add.w	r1, r1, #4294967295
 801abaa:	d0f5      	beq.n	801ab98 <__ieee754_rem_pio2+0x1e8>
 801abac:	4921      	ldr	r1, [pc, #132]	; (801ac34 <__ieee754_rem_pio2+0x284>)
 801abae:	9101      	str	r1, [sp, #4]
 801abb0:	2102      	movs	r1, #2
 801abb2:	9100      	str	r1, [sp, #0]
 801abb4:	a802      	add	r0, sp, #8
 801abb6:	4621      	mov	r1, r4
 801abb8:	f000 fb42 	bl	801b240 <__kernel_rem_pio2>
 801abbc:	2d00      	cmp	r5, #0
 801abbe:	f6bf af27 	bge.w	801aa10 <__ieee754_rem_pio2+0x60>
 801abc2:	ed94 7b00 	vldr	d7, [r4]
 801abc6:	eeb1 7b47 	vneg.f64	d7, d7
 801abca:	ed84 7b00 	vstr	d7, [r4]
 801abce:	ed94 7b02 	vldr	d7, [r4, #8]
 801abd2:	eeb1 7b47 	vneg.f64	d7, d7
 801abd6:	ed84 7b02 	vstr	d7, [r4, #8]
 801abda:	e79b      	b.n	801ab14 <__ieee754_rem_pio2+0x164>
 801abdc:	f3af 8000 	nop.w
 801abe0:	54400000 	.word	0x54400000
 801abe4:	3ff921fb 	.word	0x3ff921fb
 801abe8:	1a626331 	.word	0x1a626331
 801abec:	3dd0b461 	.word	0x3dd0b461
 801abf0:	1a600000 	.word	0x1a600000
 801abf4:	3dd0b461 	.word	0x3dd0b461
 801abf8:	2e037073 	.word	0x2e037073
 801abfc:	3ba3198a 	.word	0x3ba3198a
 801ac00:	6dc9c883 	.word	0x6dc9c883
 801ac04:	3fe45f30 	.word	0x3fe45f30
 801ac08:	2e000000 	.word	0x2e000000
 801ac0c:	3ba3198a 	.word	0x3ba3198a
 801ac10:	252049c1 	.word	0x252049c1
 801ac14:	397b839a 	.word	0x397b839a
 801ac18:	00000000 	.word	0x00000000
 801ac1c:	41700000 	.word	0x41700000
 801ac20:	3fe921fb 	.word	0x3fe921fb
 801ac24:	4002d97b 	.word	0x4002d97b
 801ac28:	413921fb 	.word	0x413921fb
 801ac2c:	0801d314 	.word	0x0801d314
 801ac30:	7fefffff 	.word	0x7fefffff
 801ac34:	0801d394 	.word	0x0801d394

0801ac38 <__ieee754_sinh>:
 801ac38:	b510      	push	{r4, lr}
 801ac3a:	eeb0 7b40 	vmov.f64	d7, d0
 801ac3e:	ee17 3a90 	vmov	r3, s15
 801ac42:	4a37      	ldr	r2, [pc, #220]	; (801ad20 <__ieee754_sinh+0xe8>)
 801ac44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801ac48:	4294      	cmp	r4, r2
 801ac4a:	ed2d 8b04 	vpush	{d8-d9}
 801ac4e:	dd06      	ble.n	801ac5e <__ieee754_sinh+0x26>
 801ac50:	ee30 7b00 	vadd.f64	d7, d0, d0
 801ac54:	eeb0 0b47 	vmov.f64	d0, d7
 801ac58:	ecbd 8b04 	vpop	{d8-d9}
 801ac5c:	bd10      	pop	{r4, pc}
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	4b30      	ldr	r3, [pc, #192]	; (801ad24 <__ieee754_sinh+0xec>)
 801ac62:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801ac66:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 801ac6a:	fe28 8b06 	vselge.f64	d8, d8, d6
 801ac6e:	429c      	cmp	r4, r3
 801ac70:	dc2a      	bgt.n	801acc8 <__ieee754_sinh+0x90>
 801ac72:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801ac76:	4b2c      	ldr	r3, [pc, #176]	; (801ad28 <__ieee754_sinh+0xf0>)
 801ac78:	429c      	cmp	r4, r3
 801ac7a:	dc08      	bgt.n	801ac8e <__ieee754_sinh+0x56>
 801ac7c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 801ad18 <__ieee754_sinh+0xe0>
 801ac80:	ee30 6b06 	vadd.f64	d6, d0, d6
 801ac84:	eeb4 6bc9 	vcmpe.f64	d6, d9
 801ac88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac8c:	dce2      	bgt.n	801ac54 <__ieee754_sinh+0x1c>
 801ac8e:	eeb0 0b47 	vmov.f64	d0, d7
 801ac92:	f000 f853 	bl	801ad3c <fabs>
 801ac96:	f000 f85b 	bl	801ad50 <expm1>
 801ac9a:	4b24      	ldr	r3, [pc, #144]	; (801ad2c <__ieee754_sinh+0xf4>)
 801ac9c:	429c      	cmp	r4, r3
 801ac9e:	dc0c      	bgt.n	801acba <__ieee754_sinh+0x82>
 801aca0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801aca4:	ee30 9b09 	vadd.f64	d9, d0, d9
 801aca8:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801acac:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801acb0:	ee90 7b06 	vfnms.f64	d7, d0, d6
 801acb4:	ee27 7b08 	vmul.f64	d7, d7, d8
 801acb8:	e7cc      	b.n	801ac54 <__ieee754_sinh+0x1c>
 801acba:	ee30 9b09 	vadd.f64	d9, d0, d9
 801acbe:	ee80 7b09 	vdiv.f64	d7, d0, d9
 801acc2:	ee37 7b00 	vadd.f64	d7, d7, d0
 801acc6:	e7f5      	b.n	801acb4 <__ieee754_sinh+0x7c>
 801acc8:	4b19      	ldr	r3, [pc, #100]	; (801ad30 <__ieee754_sinh+0xf8>)
 801acca:	429c      	cmp	r4, r3
 801accc:	dc06      	bgt.n	801acdc <__ieee754_sinh+0xa4>
 801acce:	f000 f835 	bl	801ad3c <fabs>
 801acd2:	f000 f995 	bl	801b000 <exp>
 801acd6:	ee28 7b00 	vmul.f64	d7, d8, d0
 801acda:	e7bb      	b.n	801ac54 <__ieee754_sinh+0x1c>
 801acdc:	4b15      	ldr	r3, [pc, #84]	; (801ad34 <__ieee754_sinh+0xfc>)
 801acde:	429c      	cmp	r4, r3
 801ace0:	dd07      	ble.n	801acf2 <__ieee754_sinh+0xba>
 801ace2:	3301      	adds	r3, #1
 801ace4:	429c      	cmp	r4, r3
 801ace6:	d111      	bne.n	801ad0c <__ieee754_sinh+0xd4>
 801ace8:	ee10 2a10 	vmov	r2, s0
 801acec:	4b12      	ldr	r3, [pc, #72]	; (801ad38 <__ieee754_sinh+0x100>)
 801acee:	429a      	cmp	r2, r3
 801acf0:	d80c      	bhi.n	801ad0c <__ieee754_sinh+0xd4>
 801acf2:	eeb0 0b47 	vmov.f64	d0, d7
 801acf6:	f000 f821 	bl	801ad3c <fabs>
 801acfa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801acfe:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ad02:	f000 f97d 	bl	801b000 <exp>
 801ad06:	ee28 8b00 	vmul.f64	d8, d8, d0
 801ad0a:	e7e4      	b.n	801acd6 <__ieee754_sinh+0x9e>
 801ad0c:	ed9f 6b02 	vldr	d6, [pc, #8]	; 801ad18 <__ieee754_sinh+0xe0>
 801ad10:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ad14:	e79e      	b.n	801ac54 <__ieee754_sinh+0x1c>
 801ad16:	bf00      	nop
 801ad18:	3cac7433 	.word	0x3cac7433
 801ad1c:	7fac7b1f 	.word	0x7fac7b1f
 801ad20:	7fefffff 	.word	0x7fefffff
 801ad24:	4035ffff 	.word	0x4035ffff
 801ad28:	3e2fffff 	.word	0x3e2fffff
 801ad2c:	3fefffff 	.word	0x3fefffff
 801ad30:	40862e41 	.word	0x40862e41
 801ad34:	408633cd 	.word	0x408633cd
 801ad38:	8fb9f87d 	.word	0x8fb9f87d

0801ad3c <fabs>:
 801ad3c:	ec51 0b10 	vmov	r0, r1, d0
 801ad40:	ee10 2a10 	vmov	r2, s0
 801ad44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ad48:	ec43 2b10 	vmov	d0, r2, r3
 801ad4c:	4770      	bx	lr
	...

0801ad50 <expm1>:
 801ad50:	b410      	push	{r4}
 801ad52:	ee10 2a90 	vmov	r2, s1
 801ad56:	49a4      	ldr	r1, [pc, #656]	; (801afe8 <expm1+0x298>)
 801ad58:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801ad5c:	428b      	cmp	r3, r1
 801ad5e:	ed2d 8b02 	vpush	{d8}
 801ad62:	d934      	bls.n	801adce <expm1+0x7e>
 801ad64:	49a1      	ldr	r1, [pc, #644]	; (801afec <expm1+0x29c>)
 801ad66:	428b      	cmp	r3, r1
 801ad68:	d923      	bls.n	801adb2 <expm1+0x62>
 801ad6a:	49a1      	ldr	r1, [pc, #644]	; (801aff0 <expm1+0x2a0>)
 801ad6c:	428b      	cmp	r3, r1
 801ad6e:	d912      	bls.n	801ad96 <expm1+0x46>
 801ad70:	ee10 1a10 	vmov	r1, s0
 801ad74:	f3c2 0313 	ubfx	r3, r2, #0, #20
 801ad78:	430b      	orrs	r3, r1
 801ad7a:	d006      	beq.n	801ad8a <expm1+0x3a>
 801ad7c:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ad80:	ecbd 8b02 	vpop	{d8}
 801ad84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad88:	4770      	bx	lr
 801ad8a:	2a00      	cmp	r2, #0
 801ad8c:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ad90:	fe20 0b07 	vselge.f64	d0, d0, d7
 801ad94:	e7f4      	b.n	801ad80 <expm1+0x30>
 801ad96:	ed9f 7b7c 	vldr	d7, [pc, #496]	; 801af88 <expm1+0x238>
 801ad9a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada2:	dd06      	ble.n	801adb2 <expm1+0x62>
 801ada4:	ecbd 8b02 	vpop	{d8}
 801ada8:	2000      	movs	r0, #0
 801adaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adae:	f000 ba1f 	b.w	801b1f0 <__math_oflow>
 801adb2:	2a00      	cmp	r2, #0
 801adb4:	da59      	bge.n	801ae6a <expm1+0x11a>
 801adb6:	ed9f 7b76 	vldr	d7, [pc, #472]	; 801af90 <expm1+0x240>
 801adba:	ee30 7b07 	vadd.f64	d7, d0, d7
 801adbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801adc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc6:	d550      	bpl.n	801ae6a <expm1+0x11a>
 801adc8:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801adcc:	e7d8      	b.n	801ad80 <expm1+0x30>
 801adce:	4989      	ldr	r1, [pc, #548]	; (801aff4 <expm1+0x2a4>)
 801add0:	428b      	cmp	r3, r1
 801add2:	d966      	bls.n	801aea2 <expm1+0x152>
 801add4:	4988      	ldr	r1, [pc, #544]	; (801aff8 <expm1+0x2a8>)
 801add6:	428b      	cmp	r3, r1
 801add8:	d847      	bhi.n	801ae6a <expm1+0x11a>
 801adda:	2a00      	cmp	r2, #0
 801addc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 801af98 <expm1+0x248>
 801ade0:	db3c      	blt.n	801ae5c <expm1+0x10c>
 801ade2:	ee30 7b47 	vsub.f64	d7, d0, d7
 801ade6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 801afa0 <expm1+0x250>
 801adea:	2301      	movs	r3, #1
 801adec:	ee37 0b46 	vsub.f64	d0, d7, d6
 801adf0:	ee37 7b40 	vsub.f64	d7, d7, d0
 801adf4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801adf8:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 801afa8 <expm1+0x258>
 801adfc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ae00:	ee20 8b03 	vmul.f64	d8, d0, d3
 801ae04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801afb0 <expm1+0x260>
 801ae08:	ee20 6b08 	vmul.f64	d6, d0, d8
 801ae0c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 801ae10:	eea6 5b04 	vfma.f64	d5, d6, d4
 801ae14:	ed9f 4b68 	vldr	d4, [pc, #416]	; 801afb8 <expm1+0x268>
 801ae18:	ed9f 2b69 	vldr	d2, [pc, #420]	; 801afc0 <expm1+0x270>
 801ae1c:	eea5 4b06 	vfma.f64	d4, d5, d6
 801ae20:	ed9f 5b69 	vldr	d5, [pc, #420]	; 801afc8 <expm1+0x278>
 801ae24:	eea4 5b06 	vfma.f64	d5, d4, d6
 801ae28:	eea5 2b06 	vfma.f64	d2, d5, d6
 801ae2c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801ae30:	eeb0 4b45 	vmov.f64	d4, d5
 801ae34:	eea2 4b06 	vfma.f64	d4, d2, d6
 801ae38:	eea8 1b44 	vfms.f64	d1, d8, d4
 801ae3c:	eeb1 8b08 	vmov.f64	d8, #24	; 0x40c00000  6.0
 801ae40:	ee34 2b41 	vsub.f64	d2, d4, d1
 801ae44:	eea0 8b41 	vfms.f64	d8, d0, d1
 801ae48:	ee82 4b08 	vdiv.f64	d4, d2, d8
 801ae4c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801ae50:	bbab      	cbnz	r3, 801aebe <expm1+0x16e>
 801ae52:	ee90 6b04 	vfnms.f64	d6, d0, d4
 801ae56:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ae5a:	e791      	b.n	801ad80 <expm1+0x30>
 801ae5c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 801afd0 <expm1+0x280>
 801ae60:	ee30 7b07 	vadd.f64	d7, d0, d7
 801ae64:	f04f 33ff 	mov.w	r3, #4294967295
 801ae68:	e7c0      	b.n	801adec <expm1+0x9c>
 801ae6a:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 801ae6e:	2a00      	cmp	r2, #0
 801ae70:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ae74:	fe27 7b06 	vselge.f64	d7, d7, d6
 801ae78:	ed9f 6b57 	vldr	d6, [pc, #348]	; 801afd8 <expm1+0x288>
 801ae7c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 801af98 <expm1+0x248>
 801ae80:	ee00 7b06 	vmla.f64	d7, d0, d6
 801ae84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ae88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ae8c:	ee17 3a90 	vmov	r3, s15
 801ae90:	eeb0 7b40 	vmov.f64	d7, d0
 801ae94:	eea6 7b45 	vfms.f64	d7, d6, d5
 801ae98:	ed9f 5b41 	vldr	d5, [pc, #260]	; 801afa0 <expm1+0x250>
 801ae9c:	ee26 6b05 	vmul.f64	d6, d6, d5
 801aea0:	e7a4      	b.n	801adec <expm1+0x9c>
 801aea2:	4a56      	ldr	r2, [pc, #344]	; (801affc <expm1+0x2ac>)
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d808      	bhi.n	801aeba <expm1+0x16a>
 801aea8:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801afe0 <expm1+0x290>
 801aeac:	ee30 7b07 	vadd.f64	d7, d0, d7
 801aeb0:	ee37 7b47 	vsub.f64	d7, d7, d7
 801aeb4:	ee30 0b47 	vsub.f64	d0, d0, d7
 801aeb8:	e762      	b.n	801ad80 <expm1+0x30>
 801aeba:	2300      	movs	r3, #0
 801aebc:	e79c      	b.n	801adf8 <expm1+0xa8>
 801aebe:	1c5a      	adds	r2, r3, #1
 801aec0:	ee34 4b47 	vsub.f64	d4, d4, d7
 801aec4:	ee94 7b00 	vfnms.f64	d7, d4, d0
 801aec8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801aecc:	d106      	bne.n	801aedc <expm1+0x18c>
 801aece:	ee30 7b47 	vsub.f64	d7, d0, d7
 801aed2:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 801aed6:	eea7 0b03 	vfma.f64	d0, d7, d3
 801aeda:	e751      	b.n	801ad80 <expm1+0x30>
 801aedc:	2b01      	cmp	r3, #1
 801aede:	d118      	bne.n	801af12 <expm1+0x1c2>
 801aee0:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 801aee4:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801aee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeec:	d508      	bpl.n	801af00 <expm1+0x1b0>
 801aeee:	ee30 3b03 	vadd.f64	d3, d0, d3
 801aef2:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 801aef6:	ee37 7b43 	vsub.f64	d7, d7, d3
 801aefa:	ee27 0b00 	vmul.f64	d0, d7, d0
 801aefe:	e73f      	b.n	801ad80 <expm1+0x30>
 801af00:	ee30 7b47 	vsub.f64	d7, d0, d7
 801af04:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801af08:	eea7 5b06 	vfma.f64	d5, d7, d6
 801af0c:	eeb0 0b45 	vmov.f64	d0, d5
 801af10:	e736      	b.n	801ad80 <expm1+0x30>
 801af12:	1c5a      	adds	r2, r3, #1
 801af14:	2a39      	cmp	r2, #57	; 0x39
 801af16:	ea4f 5403 	mov.w	r4, r3, lsl #20
 801af1a:	d90d      	bls.n	801af38 <expm1+0x1e8>
 801af1c:	ee37 7b40 	vsub.f64	d7, d7, d0
 801af20:	ee35 7b47 	vsub.f64	d7, d5, d7
 801af24:	ee17 1a90 	vmov	r1, s15
 801af28:	ec53 2b17 	vmov	r2, r3, d7
 801af2c:	1863      	adds	r3, r4, r1
 801af2e:	ec43 2b10 	vmov	d0, r2, r3
 801af32:	ee30 0b45 	vsub.f64	d0, d0, d5
 801af36:	e723      	b.n	801ad80 <expm1+0x30>
 801af38:	2b13      	cmp	r3, #19
 801af3a:	f04f 0000 	mov.w	r0, #0
 801af3e:	dc15      	bgt.n	801af6c <expm1+0x21c>
 801af40:	ee37 7b40 	vsub.f64	d7, d7, d0
 801af44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801af48:	fa42 f303 	asr.w	r3, r2, r3
 801af4c:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 801af50:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801af54:	ec41 0b16 	vmov	d6, r0, r1
 801af58:	ee36 7b47 	vsub.f64	d7, d6, d7
 801af5c:	ee17 1a90 	vmov	r1, s15
 801af60:	ec53 2b17 	vmov	r2, r3, d7
 801af64:	1863      	adds	r3, r4, r1
 801af66:	ec43 2b10 	vmov	d0, r2, r3
 801af6a:	e709      	b.n	801ad80 <expm1+0x30>
 801af6c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 801af70:	3303      	adds	r3, #3
 801af72:	0519      	lsls	r1, r3, #20
 801af74:	ec41 0b16 	vmov	d6, r0, r1
 801af78:	ee37 7b06 	vadd.f64	d7, d7, d6
 801af7c:	ee30 7b47 	vsub.f64	d7, d0, d7
 801af80:	ee37 7b05 	vadd.f64	d7, d7, d5
 801af84:	e7ea      	b.n	801af5c <expm1+0x20c>
 801af86:	bf00      	nop
 801af88:	fefa39ef 	.word	0xfefa39ef
 801af8c:	40862e42 	.word	0x40862e42
 801af90:	c2f8f359 	.word	0xc2f8f359
 801af94:	01a56e1f 	.word	0x01a56e1f
 801af98:	fee00000 	.word	0xfee00000
 801af9c:	3fe62e42 	.word	0x3fe62e42
 801afa0:	35793c76 	.word	0x35793c76
 801afa4:	3dea39ef 	.word	0x3dea39ef
 801afa8:	6e09c32d 	.word	0x6e09c32d
 801afac:	be8afdb7 	.word	0xbe8afdb7
 801afb0:	86e65239 	.word	0x86e65239
 801afb4:	3ed0cfca 	.word	0x3ed0cfca
 801afb8:	9eaadbb7 	.word	0x9eaadbb7
 801afbc:	bf14ce19 	.word	0xbf14ce19
 801afc0:	111110f4 	.word	0x111110f4
 801afc4:	bfa11111 	.word	0xbfa11111
 801afc8:	19fe5585 	.word	0x19fe5585
 801afcc:	3f5a01a0 	.word	0x3f5a01a0
 801afd0:	35793c76 	.word	0x35793c76
 801afd4:	bdea39ef 	.word	0xbdea39ef
 801afd8:	652b82fe 	.word	0x652b82fe
 801afdc:	3ff71547 	.word	0x3ff71547
 801afe0:	8800759c 	.word	0x8800759c
 801afe4:	7e37e43c 	.word	0x7e37e43c
 801afe8:	40436879 	.word	0x40436879
 801afec:	40862e41 	.word	0x40862e41
 801aff0:	7fefffff 	.word	0x7fefffff
 801aff4:	3fd62e42 	.word	0x3fd62e42
 801aff8:	3ff0a2b1 	.word	0x3ff0a2b1
 801affc:	3c8fffff 	.word	0x3c8fffff

0801b000 <exp>:
 801b000:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801b002:	ee10 3a90 	vmov	r3, s1
 801b006:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801b00a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801b00e:	18a2      	adds	r2, r4, r2
 801b010:	2a3e      	cmp	r2, #62	; 0x3e
 801b012:	ee10 1a10 	vmov	r1, s0
 801b016:	d922      	bls.n	801b05e <exp+0x5e>
 801b018:	2a00      	cmp	r2, #0
 801b01a:	da06      	bge.n	801b02a <exp+0x2a>
 801b01c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801b020:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b024:	b004      	add	sp, #16
 801b026:	bcf0      	pop	{r4, r5, r6, r7}
 801b028:	4770      	bx	lr
 801b02a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801b02e:	f04f 0000 	mov.w	r0, #0
 801b032:	d913      	bls.n	801b05c <exp+0x5c>
 801b034:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 801b038:	bf08      	it	eq
 801b03a:	4281      	cmpeq	r1, r0
 801b03c:	f000 80a0 	beq.w	801b180 <exp+0x180>
 801b040:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b044:	4294      	cmp	r4, r2
 801b046:	d0e9      	beq.n	801b01c <exp+0x1c>
 801b048:	4283      	cmp	r3, r0
 801b04a:	da03      	bge.n	801b054 <exp+0x54>
 801b04c:	b004      	add	sp, #16
 801b04e:	bcf0      	pop	{r4, r5, r6, r7}
 801b050:	f000 b8c6 	b.w	801b1e0 <__math_uflow>
 801b054:	b004      	add	sp, #16
 801b056:	bcf0      	pop	{r4, r5, r6, r7}
 801b058:	f000 b8ca 	b.w	801b1f0 <__math_oflow>
 801b05c:	4604      	mov	r4, r0
 801b05e:	4950      	ldr	r1, [pc, #320]	; (801b1a0 <exp+0x1a0>)
 801b060:	ed91 6b02 	vldr	d6, [r1, #8]
 801b064:	ed91 5b00 	vldr	d5, [r1]
 801b068:	eeb0 7b46 	vmov.f64	d7, d6
 801b06c:	eea5 7b00 	vfma.f64	d7, d5, d0
 801b070:	ee17 5a10 	vmov	r5, s14
 801b074:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b078:	ed91 6b04 	vldr	d6, [r1, #16]
 801b07c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801b080:	eea6 0b07 	vfma.f64	d0, d6, d7
 801b084:	ed91 6b06 	vldr	d6, [r1, #24]
 801b088:	18d8      	adds	r0, r3, r3
 801b08a:	f100 030f 	add.w	r3, r0, #15
 801b08e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801b092:	eea6 0b07 	vfma.f64	d0, d6, d7
 801b096:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801b09a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801b09e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801b0a2:	ed91 4b08 	vldr	d4, [r1, #32]
 801b0a6:	ee30 6b06 	vadd.f64	d6, d0, d6
 801b0aa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801b0ae:	eea3 4b00 	vfma.f64	d4, d3, d0
 801b0b2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801b0b6:	eea4 6b07 	vfma.f64	d6, d4, d7
 801b0ba:	ee27 7b07 	vmul.f64	d7, d7, d7
 801b0be:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 801b0c2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801b0c6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801b0ca:	eea3 4b00 	vfma.f64	d4, d3, d0
 801b0ce:	2600      	movs	r6, #0
 801b0d0:	19f2      	adds	r2, r6, r7
 801b0d2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801b0d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801b0da:	2c00      	cmp	r4, #0
 801b0dc:	d14b      	bne.n	801b176 <exp+0x176>
 801b0de:	42b5      	cmp	r5, r6
 801b0e0:	db10      	blt.n	801b104 <exp+0x104>
 801b0e2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801b0e6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 801b188 <exp+0x188>
 801b0ea:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801b0ee:	4610      	mov	r0, r2
 801b0f0:	ec41 0b10 	vmov	d0, r0, r1
 801b0f4:	eea6 0b00 	vfma.f64	d0, d6, d0
 801b0f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b0fc:	b004      	add	sp, #16
 801b0fe:	bcf0      	pop	{r4, r5, r6, r7}
 801b100:	f000 b88a 	b.w	801b218 <__math_check_oflow>
 801b104:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801b108:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801b10c:	4610      	mov	r0, r2
 801b10e:	ec41 0b17 	vmov	d7, r0, r1
 801b112:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801b116:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b11a:	ee37 5b06 	vadd.f64	d5, d7, d6
 801b11e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801b122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b126:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b190 <exp+0x190>
 801b12a:	d51e      	bpl.n	801b16a <exp+0x16a>
 801b12c:	ee35 3b04 	vadd.f64	d3, d5, d4
 801b130:	ee37 7b45 	vsub.f64	d7, d7, d5
 801b134:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b138:	ee34 6b43 	vsub.f64	d6, d4, d3
 801b13c:	ee36 6b05 	vadd.f64	d6, d6, d5
 801b140:	ee36 6b07 	vadd.f64	d6, d6, d7
 801b144:	ee36 6b03 	vadd.f64	d6, d6, d3
 801b148:	ee36 5b44 	vsub.f64	d5, d6, d4
 801b14c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 801b150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b154:	d101      	bne.n	801b15a <exp+0x15a>
 801b156:	ed9f 5b10 	vldr	d5, [pc, #64]	; 801b198 <exp+0x198>
 801b15a:	ed8d 0b00 	vstr	d0, [sp]
 801b15e:	ed9d 7b00 	vldr	d7, [sp]
 801b162:	ee27 7b00 	vmul.f64	d7, d7, d0
 801b166:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b16a:	ee25 0b00 	vmul.f64	d0, d5, d0
 801b16e:	b004      	add	sp, #16
 801b170:	bcf0      	pop	{r4, r5, r6, r7}
 801b172:	f000 b845 	b.w	801b200 <__math_check_uflow>
 801b176:	ec43 2b10 	vmov	d0, r2, r3
 801b17a:	eea6 0b00 	vfma.f64	d0, d6, d0
 801b17e:	e751      	b.n	801b024 <exp+0x24>
 801b180:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801b198 <exp+0x198>
 801b184:	e74e      	b.n	801b024 <exp+0x24>
 801b186:	bf00      	nop
 801b188:	00000000 	.word	0x00000000
 801b18c:	7f000000 	.word	0x7f000000
 801b190:	00000000 	.word	0x00000000
 801b194:	00100000 	.word	0x00100000
	...
 801b1a0:	0801d4a0 	.word	0x0801d4a0

0801b1a4 <with_errno>:
 801b1a4:	b513      	push	{r0, r1, r4, lr}
 801b1a6:	4604      	mov	r4, r0
 801b1a8:	ed8d 0b00 	vstr	d0, [sp]
 801b1ac:	f7fc fe7c 	bl	8017ea8 <__errno>
 801b1b0:	ed9d 0b00 	vldr	d0, [sp]
 801b1b4:	6004      	str	r4, [r0, #0]
 801b1b6:	b002      	add	sp, #8
 801b1b8:	bd10      	pop	{r4, pc}

0801b1ba <xflow>:
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	b158      	cbz	r0, 801b1d6 <xflow+0x1c>
 801b1be:	eeb1 7b40 	vneg.f64	d7, d0
 801b1c2:	ed8d 7b00 	vstr	d7, [sp]
 801b1c6:	ed9d 7b00 	vldr	d7, [sp]
 801b1ca:	2022      	movs	r0, #34	; 0x22
 801b1cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b1d0:	b002      	add	sp, #8
 801b1d2:	f7ff bfe7 	b.w	801b1a4 <with_errno>
 801b1d6:	eeb0 7b40 	vmov.f64	d7, d0
 801b1da:	e7f2      	b.n	801b1c2 <xflow+0x8>
 801b1dc:	0000      	movs	r0, r0
	...

0801b1e0 <__math_uflow>:
 801b1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b1e8 <__math_uflow+0x8>
 801b1e4:	f7ff bfe9 	b.w	801b1ba <xflow>
 801b1e8:	00000000 	.word	0x00000000
 801b1ec:	10000000 	.word	0x10000000

0801b1f0 <__math_oflow>:
 801b1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b1f8 <__math_oflow+0x8>
 801b1f4:	f7ff bfe1 	b.w	801b1ba <xflow>
 801b1f8:	00000000 	.word	0x00000000
 801b1fc:	70000000 	.word	0x70000000

0801b200 <__math_check_uflow>:
 801b200:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801b204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b208:	d102      	bne.n	801b210 <__math_check_uflow+0x10>
 801b20a:	2022      	movs	r0, #34	; 0x22
 801b20c:	f7ff bfca 	b.w	801b1a4 <with_errno>
 801b210:	4770      	bx	lr
 801b212:	0000      	movs	r0, r0
 801b214:	0000      	movs	r0, r0
	...

0801b218 <__math_check_oflow>:
 801b218:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801b238 <__math_check_oflow+0x20>
 801b21c:	eeb0 7bc0 	vabs.f64	d7, d0
 801b220:	eeb4 7b46 	vcmp.f64	d7, d6
 801b224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b228:	dd02      	ble.n	801b230 <__math_check_oflow+0x18>
 801b22a:	2022      	movs	r0, #34	; 0x22
 801b22c:	f7ff bfba 	b.w	801b1a4 <with_errno>
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	f3af 8000 	nop.w
 801b238:	ffffffff 	.word	0xffffffff
 801b23c:	7fefffff 	.word	0x7fefffff

0801b240 <__kernel_rem_pio2>:
 801b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b244:	ed2d 8b06 	vpush	{d8-d10}
 801b248:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801b24c:	460f      	mov	r7, r1
 801b24e:	9002      	str	r0, [sp, #8]
 801b250:	49c3      	ldr	r1, [pc, #780]	; (801b560 <__kernel_rem_pio2+0x320>)
 801b252:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801b254:	9301      	str	r3, [sp, #4]
 801b256:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801b25a:	9901      	ldr	r1, [sp, #4]
 801b25c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801b25e:	f112 0f14 	cmn.w	r2, #20
 801b262:	bfa8      	it	ge
 801b264:	1ed0      	subge	r0, r2, #3
 801b266:	f101 3aff 	add.w	sl, r1, #4294967295
 801b26a:	bfaa      	itet	ge
 801b26c:	2418      	movge	r4, #24
 801b26e:	2000      	movlt	r0, #0
 801b270:	fb90 f0f4 	sdivge	r0, r0, r4
 801b274:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801b548 <__kernel_rem_pio2+0x308>
 801b278:	f06f 0417 	mvn.w	r4, #23
 801b27c:	fb00 4404 	mla	r4, r0, r4, r4
 801b280:	eba0 060a 	sub.w	r6, r0, sl
 801b284:	4414      	add	r4, r2
 801b286:	eb09 0c0a 	add.w	ip, r9, sl
 801b28a:	ad1a      	add	r5, sp, #104	; 0x68
 801b28c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801b290:	2200      	movs	r2, #0
 801b292:	4562      	cmp	r2, ip
 801b294:	dd10      	ble.n	801b2b8 <__kernel_rem_pio2+0x78>
 801b296:	9a01      	ldr	r2, [sp, #4]
 801b298:	a91a      	add	r1, sp, #104	; 0x68
 801b29a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801b29e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801b2a2:	f04f 0c00 	mov.w	ip, #0
 801b2a6:	45cc      	cmp	ip, r9
 801b2a8:	dc26      	bgt.n	801b2f8 <__kernel_rem_pio2+0xb8>
 801b2aa:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801b548 <__kernel_rem_pio2+0x308>
 801b2ae:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b2b2:	4616      	mov	r6, r2
 801b2b4:	2500      	movs	r5, #0
 801b2b6:	e015      	b.n	801b2e4 <__kernel_rem_pio2+0xa4>
 801b2b8:	42d6      	cmn	r6, r2
 801b2ba:	d409      	bmi.n	801b2d0 <__kernel_rem_pio2+0x90>
 801b2bc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801b2c0:	ee07 1a90 	vmov	s15, r1
 801b2c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b2c8:	eca5 7b02 	vstmia	r5!, {d7}
 801b2cc:	3201      	adds	r2, #1
 801b2ce:	e7e0      	b.n	801b292 <__kernel_rem_pio2+0x52>
 801b2d0:	eeb0 7b46 	vmov.f64	d7, d6
 801b2d4:	e7f8      	b.n	801b2c8 <__kernel_rem_pio2+0x88>
 801b2d6:	ecbe 5b02 	vldmia	lr!, {d5}
 801b2da:	ed96 6b00 	vldr	d6, [r6]
 801b2de:	3501      	adds	r5, #1
 801b2e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b2e4:	4555      	cmp	r5, sl
 801b2e6:	f1a6 0608 	sub.w	r6, r6, #8
 801b2ea:	ddf4      	ble.n	801b2d6 <__kernel_rem_pio2+0x96>
 801b2ec:	eca8 7b02 	vstmia	r8!, {d7}
 801b2f0:	f10c 0c01 	add.w	ip, ip, #1
 801b2f4:	3208      	adds	r2, #8
 801b2f6:	e7d6      	b.n	801b2a6 <__kernel_rem_pio2+0x66>
 801b2f8:	aa06      	add	r2, sp, #24
 801b2fa:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801b550 <__kernel_rem_pio2+0x310>
 801b2fe:	ed9f ab96 	vldr	d10, [pc, #600]	; 801b558 <__kernel_rem_pio2+0x318>
 801b302:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801b306:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b30a:	9204      	str	r2, [sp, #16]
 801b30c:	9303      	str	r3, [sp, #12]
 801b30e:	464d      	mov	r5, r9
 801b310:	00eb      	lsls	r3, r5, #3
 801b312:	9305      	str	r3, [sp, #20]
 801b314:	ab92      	add	r3, sp, #584	; 0x248
 801b316:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801b31a:	f10d 0b18 	add.w	fp, sp, #24
 801b31e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801b320:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801b324:	465e      	mov	r6, fp
 801b326:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801b32a:	4628      	mov	r0, r5
 801b32c:	2800      	cmp	r0, #0
 801b32e:	f1a2 0208 	sub.w	r2, r2, #8
 801b332:	dc48      	bgt.n	801b3c6 <__kernel_rem_pio2+0x186>
 801b334:	4620      	mov	r0, r4
 801b336:	f000 fa17 	bl	801b768 <scalbn>
 801b33a:	eeb0 8b40 	vmov.f64	d8, d0
 801b33e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801b342:	ee28 0b00 	vmul.f64	d0, d8, d0
 801b346:	f000 fa8f 	bl	801b868 <floor>
 801b34a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801b34e:	eea0 8b47 	vfms.f64	d8, d0, d7
 801b352:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801b356:	2c00      	cmp	r4, #0
 801b358:	ee17 8a90 	vmov	r8, s15
 801b35c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b360:	ee38 8b47 	vsub.f64	d8, d8, d7
 801b364:	dd41      	ble.n	801b3ea <__kernel_rem_pio2+0x1aa>
 801b366:	1e68      	subs	r0, r5, #1
 801b368:	ab06      	add	r3, sp, #24
 801b36a:	f1c4 0c18 	rsb	ip, r4, #24
 801b36e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b372:	fa46 f20c 	asr.w	r2, r6, ip
 801b376:	4490      	add	r8, r2
 801b378:	fa02 f20c 	lsl.w	r2, r2, ip
 801b37c:	1ab6      	subs	r6, r6, r2
 801b37e:	f1c4 0217 	rsb	r2, r4, #23
 801b382:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801b386:	4116      	asrs	r6, r2
 801b388:	2e00      	cmp	r6, #0
 801b38a:	dd3d      	ble.n	801b408 <__kernel_rem_pio2+0x1c8>
 801b38c:	f04f 0c00 	mov.w	ip, #0
 801b390:	f108 0801 	add.w	r8, r8, #1
 801b394:	4660      	mov	r0, ip
 801b396:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801b39a:	4565      	cmp	r5, ip
 801b39c:	dc6a      	bgt.n	801b474 <__kernel_rem_pio2+0x234>
 801b39e:	2c00      	cmp	r4, #0
 801b3a0:	dd04      	ble.n	801b3ac <__kernel_rem_pio2+0x16c>
 801b3a2:	2c01      	cmp	r4, #1
 801b3a4:	d07b      	beq.n	801b49e <__kernel_rem_pio2+0x25e>
 801b3a6:	2c02      	cmp	r4, #2
 801b3a8:	f000 8083 	beq.w	801b4b2 <__kernel_rem_pio2+0x272>
 801b3ac:	2e02      	cmp	r6, #2
 801b3ae:	d12b      	bne.n	801b408 <__kernel_rem_pio2+0x1c8>
 801b3b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b3b4:	ee30 8b48 	vsub.f64	d8, d0, d8
 801b3b8:	b330      	cbz	r0, 801b408 <__kernel_rem_pio2+0x1c8>
 801b3ba:	4620      	mov	r0, r4
 801b3bc:	f000 f9d4 	bl	801b768 <scalbn>
 801b3c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 801b3c4:	e020      	b.n	801b408 <__kernel_rem_pio2+0x1c8>
 801b3c6:	ee20 7b09 	vmul.f64	d7, d0, d9
 801b3ca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801b3ce:	3801      	subs	r0, #1
 801b3d0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801b3d4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801b3d8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b3dc:	eca6 0a01 	vstmia	r6!, {s0}
 801b3e0:	ed92 0b00 	vldr	d0, [r2]
 801b3e4:	ee37 0b00 	vadd.f64	d0, d7, d0
 801b3e8:	e7a0      	b.n	801b32c <__kernel_rem_pio2+0xec>
 801b3ea:	d105      	bne.n	801b3f8 <__kernel_rem_pio2+0x1b8>
 801b3ec:	1e6a      	subs	r2, r5, #1
 801b3ee:	ab06      	add	r3, sp, #24
 801b3f0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b3f4:	15f6      	asrs	r6, r6, #23
 801b3f6:	e7c7      	b.n	801b388 <__kernel_rem_pio2+0x148>
 801b3f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801b3fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b404:	da34      	bge.n	801b470 <__kernel_rem_pio2+0x230>
 801b406:	2600      	movs	r6, #0
 801b408:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b410:	f040 80aa 	bne.w	801b568 <__kernel_rem_pio2+0x328>
 801b414:	f105 3bff 	add.w	fp, r5, #4294967295
 801b418:	4658      	mov	r0, fp
 801b41a:	2200      	movs	r2, #0
 801b41c:	4548      	cmp	r0, r9
 801b41e:	da50      	bge.n	801b4c2 <__kernel_rem_pio2+0x282>
 801b420:	2a00      	cmp	r2, #0
 801b422:	d06b      	beq.n	801b4fc <__kernel_rem_pio2+0x2bc>
 801b424:	ab06      	add	r3, sp, #24
 801b426:	3c18      	subs	r4, #24
 801b428:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	f000 8087 	beq.w	801b540 <__kernel_rem_pio2+0x300>
 801b432:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b436:	4620      	mov	r0, r4
 801b438:	f000 f996 	bl	801b768 <scalbn>
 801b43c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801b550 <__kernel_rem_pio2+0x310>
 801b440:	f10b 0201 	add.w	r2, fp, #1
 801b444:	a96a      	add	r1, sp, #424	; 0x1a8
 801b446:	00d3      	lsls	r3, r2, #3
 801b448:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b44c:	465a      	mov	r2, fp
 801b44e:	2a00      	cmp	r2, #0
 801b450:	f280 80b8 	bge.w	801b5c4 <__kernel_rem_pio2+0x384>
 801b454:	465a      	mov	r2, fp
 801b456:	2a00      	cmp	r2, #0
 801b458:	f2c0 80d6 	blt.w	801b608 <__kernel_rem_pio2+0x3c8>
 801b45c:	a96a      	add	r1, sp, #424	; 0x1a8
 801b45e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801b462:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801b548 <__kernel_rem_pio2+0x308>
 801b466:	4d3f      	ldr	r5, [pc, #252]	; (801b564 <__kernel_rem_pio2+0x324>)
 801b468:	2000      	movs	r0, #0
 801b46a:	ebab 0102 	sub.w	r1, fp, r2
 801b46e:	e0c0      	b.n	801b5f2 <__kernel_rem_pio2+0x3b2>
 801b470:	2602      	movs	r6, #2
 801b472:	e78b      	b.n	801b38c <__kernel_rem_pio2+0x14c>
 801b474:	f8db 2000 	ldr.w	r2, [fp]
 801b478:	b958      	cbnz	r0, 801b492 <__kernel_rem_pio2+0x252>
 801b47a:	b122      	cbz	r2, 801b486 <__kernel_rem_pio2+0x246>
 801b47c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801b480:	f8cb 2000 	str.w	r2, [fp]
 801b484:	2201      	movs	r2, #1
 801b486:	f10c 0c01 	add.w	ip, ip, #1
 801b48a:	f10b 0b04 	add.w	fp, fp, #4
 801b48e:	4610      	mov	r0, r2
 801b490:	e783      	b.n	801b39a <__kernel_rem_pio2+0x15a>
 801b492:	ebae 0202 	sub.w	r2, lr, r2
 801b496:	f8cb 2000 	str.w	r2, [fp]
 801b49a:	4602      	mov	r2, r0
 801b49c:	e7f3      	b.n	801b486 <__kernel_rem_pio2+0x246>
 801b49e:	f105 3cff 	add.w	ip, r5, #4294967295
 801b4a2:	ab06      	add	r3, sp, #24
 801b4a4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801b4a8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801b4ac:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801b4b0:	e77c      	b.n	801b3ac <__kernel_rem_pio2+0x16c>
 801b4b2:	f105 3cff 	add.w	ip, r5, #4294967295
 801b4b6:	ab06      	add	r3, sp, #24
 801b4b8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801b4bc:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801b4c0:	e7f4      	b.n	801b4ac <__kernel_rem_pio2+0x26c>
 801b4c2:	ab06      	add	r3, sp, #24
 801b4c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801b4c8:	3801      	subs	r0, #1
 801b4ca:	431a      	orrs	r2, r3
 801b4cc:	e7a6      	b.n	801b41c <__kernel_rem_pio2+0x1dc>
 801b4ce:	3201      	adds	r2, #1
 801b4d0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b4d4:	2e00      	cmp	r6, #0
 801b4d6:	d0fa      	beq.n	801b4ce <__kernel_rem_pio2+0x28e>
 801b4d8:	9b05      	ldr	r3, [sp, #20]
 801b4da:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801b4de:	eb0d 0003 	add.w	r0, sp, r3
 801b4e2:	9b01      	ldr	r3, [sp, #4]
 801b4e4:	18ee      	adds	r6, r5, r3
 801b4e6:	ab1a      	add	r3, sp, #104	; 0x68
 801b4e8:	f105 0c01 	add.w	ip, r5, #1
 801b4ec:	3898      	subs	r0, #152	; 0x98
 801b4ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b4f2:	442a      	add	r2, r5
 801b4f4:	4562      	cmp	r2, ip
 801b4f6:	da04      	bge.n	801b502 <__kernel_rem_pio2+0x2c2>
 801b4f8:	4615      	mov	r5, r2
 801b4fa:	e709      	b.n	801b310 <__kernel_rem_pio2+0xd0>
 801b4fc:	9804      	ldr	r0, [sp, #16]
 801b4fe:	2201      	movs	r2, #1
 801b500:	e7e6      	b.n	801b4d0 <__kernel_rem_pio2+0x290>
 801b502:	9b03      	ldr	r3, [sp, #12]
 801b504:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b508:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b50c:	9305      	str	r3, [sp, #20]
 801b50e:	ee07 3a90 	vmov	s15, r3
 801b512:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b516:	2500      	movs	r5, #0
 801b518:	eca6 7b02 	vstmia	r6!, {d7}
 801b51c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801b548 <__kernel_rem_pio2+0x308>
 801b520:	46b0      	mov	r8, r6
 801b522:	4555      	cmp	r5, sl
 801b524:	dd04      	ble.n	801b530 <__kernel_rem_pio2+0x2f0>
 801b526:	eca0 7b02 	vstmia	r0!, {d7}
 801b52a:	f10c 0c01 	add.w	ip, ip, #1
 801b52e:	e7e1      	b.n	801b4f4 <__kernel_rem_pio2+0x2b4>
 801b530:	ecbe 5b02 	vldmia	lr!, {d5}
 801b534:	ed38 6b02 	vldmdb	r8!, {d6}
 801b538:	3501      	adds	r5, #1
 801b53a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b53e:	e7f0      	b.n	801b522 <__kernel_rem_pio2+0x2e2>
 801b540:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b544:	e76e      	b.n	801b424 <__kernel_rem_pio2+0x1e4>
 801b546:	bf00      	nop
	...
 801b554:	3e700000 	.word	0x3e700000
 801b558:	00000000 	.word	0x00000000
 801b55c:	41700000 	.word	0x41700000
 801b560:	0801dd50 	.word	0x0801dd50
 801b564:	0801dd10 	.word	0x0801dd10
 801b568:	4260      	negs	r0, r4
 801b56a:	eeb0 0b48 	vmov.f64	d0, d8
 801b56e:	f000 f8fb 	bl	801b768 <scalbn>
 801b572:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801b750 <__kernel_rem_pio2+0x510>
 801b576:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801b57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b57e:	db18      	blt.n	801b5b2 <__kernel_rem_pio2+0x372>
 801b580:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801b758 <__kernel_rem_pio2+0x518>
 801b584:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b588:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801b58c:	aa06      	add	r2, sp, #24
 801b58e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801b592:	eea5 0b46 	vfms.f64	d0, d5, d6
 801b596:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b59a:	f105 0b01 	add.w	fp, r5, #1
 801b59e:	ee10 3a10 	vmov	r3, s0
 801b5a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801b5a6:	ee17 3a10 	vmov	r3, s14
 801b5aa:	3418      	adds	r4, #24
 801b5ac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801b5b0:	e73f      	b.n	801b432 <__kernel_rem_pio2+0x1f2>
 801b5b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b5b6:	aa06      	add	r2, sp, #24
 801b5b8:	ee10 3a10 	vmov	r3, s0
 801b5bc:	46ab      	mov	fp, r5
 801b5be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801b5c2:	e736      	b.n	801b432 <__kernel_rem_pio2+0x1f2>
 801b5c4:	a806      	add	r0, sp, #24
 801b5c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801b5ca:	9001      	str	r0, [sp, #4]
 801b5cc:	ee07 0a90 	vmov	s15, r0
 801b5d0:	3a01      	subs	r2, #1
 801b5d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b5d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 801b5da:	ee20 0b06 	vmul.f64	d0, d0, d6
 801b5de:	ed21 7b02 	vstmdb	r1!, {d7}
 801b5e2:	e734      	b.n	801b44e <__kernel_rem_pio2+0x20e>
 801b5e4:	ecb5 5b02 	vldmia	r5!, {d5}
 801b5e8:	ecb4 6b02 	vldmia	r4!, {d6}
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b5f2:	4548      	cmp	r0, r9
 801b5f4:	dc01      	bgt.n	801b5fa <__kernel_rem_pio2+0x3ba>
 801b5f6:	4288      	cmp	r0, r1
 801b5f8:	ddf4      	ble.n	801b5e4 <__kernel_rem_pio2+0x3a4>
 801b5fa:	a842      	add	r0, sp, #264	; 0x108
 801b5fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801b600:	ed81 7b00 	vstr	d7, [r1]
 801b604:	3a01      	subs	r2, #1
 801b606:	e726      	b.n	801b456 <__kernel_rem_pio2+0x216>
 801b608:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801b60a:	2a02      	cmp	r2, #2
 801b60c:	dc0a      	bgt.n	801b624 <__kernel_rem_pio2+0x3e4>
 801b60e:	2a00      	cmp	r2, #0
 801b610:	dc2e      	bgt.n	801b670 <__kernel_rem_pio2+0x430>
 801b612:	d047      	beq.n	801b6a4 <__kernel_rem_pio2+0x464>
 801b614:	f008 0007 	and.w	r0, r8, #7
 801b618:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801b61c:	ecbd 8b06 	vpop	{d8-d10}
 801b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b624:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801b626:	2a03      	cmp	r2, #3
 801b628:	d1f4      	bne.n	801b614 <__kernel_rem_pio2+0x3d4>
 801b62a:	a942      	add	r1, sp, #264	; 0x108
 801b62c:	f1a3 0208 	sub.w	r2, r3, #8
 801b630:	440a      	add	r2, r1
 801b632:	4611      	mov	r1, r2
 801b634:	4658      	mov	r0, fp
 801b636:	2800      	cmp	r0, #0
 801b638:	f1a1 0108 	sub.w	r1, r1, #8
 801b63c:	dc55      	bgt.n	801b6ea <__kernel_rem_pio2+0x4aa>
 801b63e:	4659      	mov	r1, fp
 801b640:	2901      	cmp	r1, #1
 801b642:	f1a2 0208 	sub.w	r2, r2, #8
 801b646:	dc60      	bgt.n	801b70a <__kernel_rem_pio2+0x4ca>
 801b648:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801b760 <__kernel_rem_pio2+0x520>
 801b64c:	aa42      	add	r2, sp, #264	; 0x108
 801b64e:	4413      	add	r3, r2
 801b650:	f1bb 0f01 	cmp.w	fp, #1
 801b654:	dc69      	bgt.n	801b72a <__kernel_rem_pio2+0x4ea>
 801b656:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801b65a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801b65e:	2e00      	cmp	r6, #0
 801b660:	d16a      	bne.n	801b738 <__kernel_rem_pio2+0x4f8>
 801b662:	ed87 5b00 	vstr	d5, [r7]
 801b666:	ed87 6b02 	vstr	d6, [r7, #8]
 801b66a:	ed87 7b04 	vstr	d7, [r7, #16]
 801b66e:	e7d1      	b.n	801b614 <__kernel_rem_pio2+0x3d4>
 801b670:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801b760 <__kernel_rem_pio2+0x520>
 801b674:	aa42      	add	r2, sp, #264	; 0x108
 801b676:	4413      	add	r3, r2
 801b678:	465a      	mov	r2, fp
 801b67a:	2a00      	cmp	r2, #0
 801b67c:	da26      	bge.n	801b6cc <__kernel_rem_pio2+0x48c>
 801b67e:	b35e      	cbz	r6, 801b6d8 <__kernel_rem_pio2+0x498>
 801b680:	eeb1 7b46 	vneg.f64	d7, d6
 801b684:	ed87 7b00 	vstr	d7, [r7]
 801b688:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801b68c:	aa44      	add	r2, sp, #272	; 0x110
 801b68e:	2301      	movs	r3, #1
 801b690:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b694:	459b      	cmp	fp, r3
 801b696:	da22      	bge.n	801b6de <__kernel_rem_pio2+0x49e>
 801b698:	b10e      	cbz	r6, 801b69e <__kernel_rem_pio2+0x45e>
 801b69a:	eeb1 7b47 	vneg.f64	d7, d7
 801b69e:	ed87 7b02 	vstr	d7, [r7, #8]
 801b6a2:	e7b7      	b.n	801b614 <__kernel_rem_pio2+0x3d4>
 801b6a4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b760 <__kernel_rem_pio2+0x520>
 801b6a8:	aa42      	add	r2, sp, #264	; 0x108
 801b6aa:	4413      	add	r3, r2
 801b6ac:	f1bb 0f00 	cmp.w	fp, #0
 801b6b0:	da05      	bge.n	801b6be <__kernel_rem_pio2+0x47e>
 801b6b2:	b10e      	cbz	r6, 801b6b8 <__kernel_rem_pio2+0x478>
 801b6b4:	eeb1 7b47 	vneg.f64	d7, d7
 801b6b8:	ed87 7b00 	vstr	d7, [r7]
 801b6bc:	e7aa      	b.n	801b614 <__kernel_rem_pio2+0x3d4>
 801b6be:	ed33 6b02 	vldmdb	r3!, {d6}
 801b6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b6c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b6ca:	e7ef      	b.n	801b6ac <__kernel_rem_pio2+0x46c>
 801b6cc:	ed33 7b02 	vldmdb	r3!, {d7}
 801b6d0:	3a01      	subs	r2, #1
 801b6d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801b6d6:	e7d0      	b.n	801b67a <__kernel_rem_pio2+0x43a>
 801b6d8:	eeb0 7b46 	vmov.f64	d7, d6
 801b6dc:	e7d2      	b.n	801b684 <__kernel_rem_pio2+0x444>
 801b6de:	ecb2 6b02 	vldmia	r2!, {d6}
 801b6e2:	3301      	adds	r3, #1
 801b6e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b6e8:	e7d4      	b.n	801b694 <__kernel_rem_pio2+0x454>
 801b6ea:	ed91 7b00 	vldr	d7, [r1]
 801b6ee:	ed91 5b02 	vldr	d5, [r1, #8]
 801b6f2:	3801      	subs	r0, #1
 801b6f4:	ee37 6b05 	vadd.f64	d6, d7, d5
 801b6f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b6fc:	ed81 6b00 	vstr	d6, [r1]
 801b700:	ee37 7b05 	vadd.f64	d7, d7, d5
 801b704:	ed81 7b02 	vstr	d7, [r1, #8]
 801b708:	e795      	b.n	801b636 <__kernel_rem_pio2+0x3f6>
 801b70a:	ed92 7b00 	vldr	d7, [r2]
 801b70e:	ed92 5b02 	vldr	d5, [r2, #8]
 801b712:	3901      	subs	r1, #1
 801b714:	ee37 6b05 	vadd.f64	d6, d7, d5
 801b718:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b71c:	ed82 6b00 	vstr	d6, [r2]
 801b720:	ee37 7b05 	vadd.f64	d7, d7, d5
 801b724:	ed82 7b02 	vstr	d7, [r2, #8]
 801b728:	e78a      	b.n	801b640 <__kernel_rem_pio2+0x400>
 801b72a:	ed33 6b02 	vldmdb	r3!, {d6}
 801b72e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b732:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b736:	e78b      	b.n	801b650 <__kernel_rem_pio2+0x410>
 801b738:	eeb1 5b45 	vneg.f64	d5, d5
 801b73c:	eeb1 6b46 	vneg.f64	d6, d6
 801b740:	ed87 5b00 	vstr	d5, [r7]
 801b744:	eeb1 7b47 	vneg.f64	d7, d7
 801b748:	ed87 6b02 	vstr	d6, [r7, #8]
 801b74c:	e78d      	b.n	801b66a <__kernel_rem_pio2+0x42a>
 801b74e:	bf00      	nop
 801b750:	00000000 	.word	0x00000000
 801b754:	41700000 	.word	0x41700000
 801b758:	00000000 	.word	0x00000000
 801b75c:	3e700000 	.word	0x3e700000
	...

0801b768 <scalbn>:
 801b768:	ee10 1a90 	vmov	r1, s1
 801b76c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b770:	b98b      	cbnz	r3, 801b796 <scalbn+0x2e>
 801b772:	ee10 3a10 	vmov	r3, s0
 801b776:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b77a:	4319      	orrs	r1, r3
 801b77c:	d00a      	beq.n	801b794 <scalbn+0x2c>
 801b77e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801b830 <scalbn+0xc8>
 801b782:	4b37      	ldr	r3, [pc, #220]	; (801b860 <scalbn+0xf8>)
 801b784:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b788:	4298      	cmp	r0, r3
 801b78a:	da0b      	bge.n	801b7a4 <scalbn+0x3c>
 801b78c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801b838 <scalbn+0xd0>
 801b790:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b794:	4770      	bx	lr
 801b796:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b79a:	4293      	cmp	r3, r2
 801b79c:	d107      	bne.n	801b7ae <scalbn+0x46>
 801b79e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b7a2:	4770      	bx	lr
 801b7a4:	ee10 1a90 	vmov	r1, s1
 801b7a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b7ac:	3b36      	subs	r3, #54	; 0x36
 801b7ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b7b2:	4290      	cmp	r0, r2
 801b7b4:	dd0d      	ble.n	801b7d2 <scalbn+0x6a>
 801b7b6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b840 <scalbn+0xd8>
 801b7ba:	ee10 3a90 	vmov	r3, s1
 801b7be:	eeb0 6b47 	vmov.f64	d6, d7
 801b7c2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801b848 <scalbn+0xe0>
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 801b7cc:	ee27 0b06 	vmul.f64	d0, d7, d6
 801b7d0:	4770      	bx	lr
 801b7d2:	4418      	add	r0, r3
 801b7d4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801b7d8:	4298      	cmp	r0, r3
 801b7da:	dcec      	bgt.n	801b7b6 <scalbn+0x4e>
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	dd0a      	ble.n	801b7f6 <scalbn+0x8e>
 801b7e0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b7e4:	ec53 2b10 	vmov	r2, r3, d0
 801b7e8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b7ec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801b7f0:	ec43 2b10 	vmov	d0, r2, r3
 801b7f4:	4770      	bx	lr
 801b7f6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801b7fa:	da09      	bge.n	801b810 <scalbn+0xa8>
 801b7fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801b838 <scalbn+0xd0>
 801b800:	ee10 3a90 	vmov	r3, s1
 801b804:	eeb0 6b47 	vmov.f64	d6, d7
 801b808:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801b850 <scalbn+0xe8>
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	e7db      	b.n	801b7c8 <scalbn+0x60>
 801b810:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b814:	ec53 2b10 	vmov	r2, r3, d0
 801b818:	3036      	adds	r0, #54	; 0x36
 801b81a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b81e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801b822:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801b858 <scalbn+0xf0>
 801b826:	ec43 2b10 	vmov	d0, r2, r3
 801b82a:	e7b1      	b.n	801b790 <scalbn+0x28>
 801b82c:	f3af 8000 	nop.w
 801b830:	00000000 	.word	0x00000000
 801b834:	43500000 	.word	0x43500000
 801b838:	c2f8f359 	.word	0xc2f8f359
 801b83c:	01a56e1f 	.word	0x01a56e1f
 801b840:	8800759c 	.word	0x8800759c
 801b844:	7e37e43c 	.word	0x7e37e43c
 801b848:	8800759c 	.word	0x8800759c
 801b84c:	fe37e43c 	.word	0xfe37e43c
 801b850:	c2f8f359 	.word	0xc2f8f359
 801b854:	81a56e1f 	.word	0x81a56e1f
 801b858:	00000000 	.word	0x00000000
 801b85c:	3c900000 	.word	0x3c900000
 801b860:	ffff3cb0 	.word	0xffff3cb0
 801b864:	00000000 	.word	0x00000000

0801b868 <floor>:
 801b868:	ee10 1a90 	vmov	r1, s1
 801b86c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b870:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801b874:	2b13      	cmp	r3, #19
 801b876:	b530      	push	{r4, r5, lr}
 801b878:	ee10 0a10 	vmov	r0, s0
 801b87c:	ee10 5a10 	vmov	r5, s0
 801b880:	dc31      	bgt.n	801b8e6 <floor+0x7e>
 801b882:	2b00      	cmp	r3, #0
 801b884:	da15      	bge.n	801b8b2 <floor+0x4a>
 801b886:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801b948 <floor+0xe0>
 801b88a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b88e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b896:	dd07      	ble.n	801b8a8 <floor+0x40>
 801b898:	2900      	cmp	r1, #0
 801b89a:	da4e      	bge.n	801b93a <floor+0xd2>
 801b89c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b8a0:	4308      	orrs	r0, r1
 801b8a2:	d04d      	beq.n	801b940 <floor+0xd8>
 801b8a4:	492a      	ldr	r1, [pc, #168]	; (801b950 <floor+0xe8>)
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	460b      	mov	r3, r1
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	ec43 2b10 	vmov	d0, r2, r3
 801b8b0:	e020      	b.n	801b8f4 <floor+0x8c>
 801b8b2:	4a28      	ldr	r2, [pc, #160]	; (801b954 <floor+0xec>)
 801b8b4:	411a      	asrs	r2, r3
 801b8b6:	ea01 0402 	and.w	r4, r1, r2
 801b8ba:	4304      	orrs	r4, r0
 801b8bc:	d01a      	beq.n	801b8f4 <floor+0x8c>
 801b8be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b948 <floor+0xe0>
 801b8c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b8c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ce:	ddeb      	ble.n	801b8a8 <floor+0x40>
 801b8d0:	2900      	cmp	r1, #0
 801b8d2:	bfbe      	ittt	lt
 801b8d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801b8d8:	fa40 f303 	asrlt.w	r3, r0, r3
 801b8dc:	18c9      	addlt	r1, r1, r3
 801b8de:	ea21 0102 	bic.w	r1, r1, r2
 801b8e2:	2000      	movs	r0, #0
 801b8e4:	e7e0      	b.n	801b8a8 <floor+0x40>
 801b8e6:	2b33      	cmp	r3, #51	; 0x33
 801b8e8:	dd05      	ble.n	801b8f6 <floor+0x8e>
 801b8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b8ee:	d101      	bne.n	801b8f4 <floor+0x8c>
 801b8f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b8f4:	bd30      	pop	{r4, r5, pc}
 801b8f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801b8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801b8fe:	40e2      	lsrs	r2, r4
 801b900:	4210      	tst	r0, r2
 801b902:	d0f7      	beq.n	801b8f4 <floor+0x8c>
 801b904:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801b948 <floor+0xe0>
 801b908:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b90c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b914:	ddc8      	ble.n	801b8a8 <floor+0x40>
 801b916:	2900      	cmp	r1, #0
 801b918:	da02      	bge.n	801b920 <floor+0xb8>
 801b91a:	2b14      	cmp	r3, #20
 801b91c:	d103      	bne.n	801b926 <floor+0xbe>
 801b91e:	3101      	adds	r1, #1
 801b920:	ea20 0002 	bic.w	r0, r0, r2
 801b924:	e7c0      	b.n	801b8a8 <floor+0x40>
 801b926:	2401      	movs	r4, #1
 801b928:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b92c:	fa04 f303 	lsl.w	r3, r4, r3
 801b930:	4418      	add	r0, r3
 801b932:	4285      	cmp	r5, r0
 801b934:	bf88      	it	hi
 801b936:	1909      	addhi	r1, r1, r4
 801b938:	e7f2      	b.n	801b920 <floor+0xb8>
 801b93a:	2000      	movs	r0, #0
 801b93c:	4601      	mov	r1, r0
 801b93e:	e7b3      	b.n	801b8a8 <floor+0x40>
 801b940:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b944:	e7b0      	b.n	801b8a8 <floor+0x40>
 801b946:	bf00      	nop
 801b948:	8800759c 	.word	0x8800759c
 801b94c:	7e37e43c 	.word	0x7e37e43c
 801b950:	bff00000 	.word	0xbff00000
 801b954:	000fffff 	.word	0x000fffff

0801b958 <_init>:
 801b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b95a:	bf00      	nop
 801b95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b95e:	bc08      	pop	{r3}
 801b960:	469e      	mov	lr, r3
 801b962:	4770      	bx	lr

0801b964 <_fini>:
 801b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b966:	bf00      	nop
 801b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b96a:	bc08      	pop	{r3}
 801b96c:	469e      	mov	lr, r3
 801b96e:	4770      	bx	lr
