
Audio Processor Firmware_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019fd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000174c  0801a270  0801a270  0002a270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9bc  0801b9bc  000303c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9bc  0801b9bc  0002b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9c4  0801b9c4  000303c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9c4  0801b9c4  0002b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b9c8  0801b9c8  0002b9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  24000000  0801b9cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0b4  240003c8  0801bd94  000303c8  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2400b47c  0801bd94  0003b47c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000303f6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033390  00000000  00000000  000304ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074cb  00000000  00000000  0006383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024e8  00000000  00000000  0006ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c09  00000000  00000000  0006d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000435e8  00000000  00000000  0006ee01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038b3c  00000000  00000000  000b23e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001967b1  00000000  00000000  000eaf25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a9b0  00000000  00000000  002816d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0028c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0028c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0028c1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003c8 	.word	0x240003c8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a258 	.word	0x0801a258

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003cc 	.word	0x240003cc
 80002dc:	0801a258 	.word	0x0801a258

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <SystemInit+0xfc>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <SystemInit+0xfc>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <SystemInit+0xfc>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <SystemInit+0xfc>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ab4:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <SystemInit+0x100>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 030f 	and.w	r3, r3, #15
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d807      	bhi.n	8000ad0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <SystemInit+0x100>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 030f 	bic.w	r3, r3, #15
 8000ac8:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <SystemInit+0x100>)
 8000aca:	f043 0307 	orr.w	r3, r3, #7
 8000ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <SystemInit+0x104>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <SystemInit+0x104>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <SystemInit+0x104>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <SystemInit+0x104>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	492c      	ldr	r1, [pc, #176]	; (8000b98 <SystemInit+0x104>)
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <SystemInit+0x108>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <SystemInit+0x100>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <SystemInit+0x100>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f023 030f 	bic.w	r3, r3, #15
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <SystemInit+0x100>)
 8000b04:	f043 0307 	orr.w	r3, r3, #7
 8000b08:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <SystemInit+0x104>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <SystemInit+0x104>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <SystemInit+0x104>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <SystemInit+0x104>)
 8000b1e:	4a20      	ldr	r2, [pc, #128]	; (8000ba0 <SystemInit+0x10c>)
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <SystemInit+0x104>)
 8000b24:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <SystemInit+0x110>)
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <SystemInit+0x104>)
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <SystemInit+0x114>)
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <SystemInit+0x104>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <SystemInit+0x104>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <SystemInit+0x114>)
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SystemInit+0x104>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <SystemInit+0x104>)
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <SystemInit+0x114>)
 8000b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <SystemInit+0x104>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <SystemInit+0x104>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <SystemInit+0x104>)
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <SystemInit+0x104>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <SystemInit+0x118>)
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <SystemInit+0x118>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <SystemInit+0x11c>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <SystemInit+0x120>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b76:	d202      	bcs.n	8000b7e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x124>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SystemInit+0x128>)
 8000b80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b84:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	52002000 	.word	0x52002000
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ba0:	02020200 	.word	0x02020200
 8000ba4:	01ff0000 	.word	0x01ff0000
 8000ba8:	01010280 	.word	0x01010280
 8000bac:	580000c0 	.word	0x580000c0
 8000bb0:	5c001000 	.word	0x5c001000
 8000bb4:	ffff0000 	.word	0xffff0000
 8000bb8:	51008108 	.word	0x51008108
 8000bbc:	52004000 	.word	0x52004000

08000bc0 <process_block>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
inline static void process_block()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	LOG_TIME_START(LOG_TIME_PRBLOCK_ID);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f003 fbc7 	bl	8004358 <logger_log_timer_start>

	LOG_TIME_START(LOG_TIME_USB_RD);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f003 fbc4 	bl	8004358 <logger_log_timer_start>
	usb_device->io_ops->read(usb_device, processing_buffers, SAMPLES_PER_BLOCK * 2);
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <process_block+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <process_block+0x68>)
 8000bda:	6810      	ldr	r0, [r2, #0]
 8000bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be0:	4912      	ldr	r1, [pc, #72]	; (8000c2c <process_block+0x6c>)
 8000be2:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_USB_RD);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f003 fbe3 	bl	80043b0 <logger_log_timer_stop>

	LOG_TIME_START(LOG_AUDENG_PROCESS);
 8000bea:	2004      	movs	r0, #4
 8000bec:	f003 fbb4 	bl	8004358 <logger_log_timer_start>
	audio_engine_process(processing_buffers, SAMPLES_PER_BLOCK);
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	480e      	ldr	r0, [pc, #56]	; (8000c2c <process_block+0x6c>)
 8000bf4:	f001 f970 	bl	8001ed8 <audio_engine_process>
	LOG_TIME_STOP(LOG_AUDENG_PROCESS);
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f003 fbd9 	bl	80043b0 <logger_log_timer_stop>

	LOG_TIME_START(LOG_TIME_AUDIO_WR);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f003 fbaa 	bl	8004358 <logger_log_timer_start>
	audio_device->io_ops->write(audio_device, processing_buffers, SAMPLES_PER_BLOCK);
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <process_block+0x70>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <process_block+0x70>)
 8000c0e:	6810      	ldr	r0, [r2, #0]
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	4906      	ldr	r1, [pc, #24]	; (8000c2c <process_block+0x6c>)
 8000c14:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_AUDIO_WR);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f003 fbca 	bl	80043b0 <logger_log_timer_stop>

	LOG_TIME_STOP(LOG_TIME_PRBLOCK_ID);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f003 fbc7 	bl	80043b0 <logger_log_timer_stop>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24006430 	.word	0x24006430
 8000c2c:	240007f8 	.word	0x240007f8
 8000c30:	24006428 	.word	0x24006428

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
	}*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3a:	f003 fcc3 	bl	80045c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3e:	f000 f921 	bl	8000e84 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <main+0x19c>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a61      	ldr	r2, [pc, #388]	; (8000dd0 <main+0x19c>)
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <main+0x19c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f007 fdcb 	bl	80087fc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f007 fde1 	bl	8008830 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 fb3d 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f000 fb03 	bl	800127c <MX_DMA_Init>
  MX_DAC1_Init();
 8000c76:	f000 f97f 	bl	8000f78 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8000c7a:	f000 fab3 	bl	80011e4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000c7e:	f000 fa7b 	bl	8001178 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000c82:	f014 fc9d 	bl	80155c0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000c86:	f000 f9b5 	bl	8000ff4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000c8a:	f000 f9f3 	bl	8001074 <MX_I2S2_Init>
  MX_TIM2_Init();
 8000c8e:	f000 fa25 	bl	80010dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
#ifdef ENABLE_LOGGING
  logger_init(&htim2);
 8000c92:	4850      	ldr	r0, [pc, #320]	; (8000dd4 <main+0x1a0>)
 8000c94:	f003 fabc 	bl	8004210 <logger_init>
  logger_timer_set_name(LOG_TIME_PRBLOCK_ID, "process_block");
 8000c98:	494f      	ldr	r1, [pc, #316]	; (8000dd8 <main+0x1a4>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f003 fb3e 	bl	800431c <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_USB_RD, "usb_driver_read");
 8000ca0:	494e      	ldr	r1, [pc, #312]	; (8000ddc <main+0x1a8>)
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f003 fb3a 	bl	800431c <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_USB_WR, "usb_driver_write");
 8000ca8:	494d      	ldr	r1, [pc, #308]	; (8000de0 <main+0x1ac>)
 8000caa:	2002      	movs	r0, #2
 8000cac:	f003 fb36 	bl	800431c <logger_timer_set_name>
  logger_timer_set_name(LOG_TIME_AUDIO_WR, "audio_driver_write");
 8000cb0:	494c      	ldr	r1, [pc, #304]	; (8000de4 <main+0x1b0>)
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f003 fb32 	bl	800431c <logger_timer_set_name>
  logger_timer_set_name(LOG_AUDENG_PROCESS, "audio_engine_process");
 8000cb8:	494b      	ldr	r1, [pc, #300]	; (8000de8 <main+0x1b4>)
 8000cba:	2004      	movs	r0, #4
 8000cbc:	f003 fb2e 	bl	800431c <logger_timer_set_name>
#endif
  HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	; 0x64
 8000cc2:	f003 fd11 	bl	80046e8 <HAL_Delay>
  drvman_init();
 8000cc6:	f003 f85d 	bl	8003d84 <drvman_init>
  drvman_register_driver(&uart_driver);
 8000cca:	4848      	ldr	r0, [pc, #288]	; (8000dec <main+0x1b8>)
 8000ccc:	f003 f888 	bl	8003de0 <drvman_register_driver>
  drvman_set_serial_driver(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f003 f8cf 	bl	8003e74 <drvman_set_serial_driver>
  console_init();
 8000cd6:	f001 fb19 	bl	800230c <console_init>

  for (size_t i = 0; i < 25; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	e005      	b.n	8000cec <main+0xb8>
	  console_println("");
 8000ce0:	4843      	ldr	r0, [pc, #268]	; (8000df0 <main+0x1bc>)
 8000ce2:	f001 fb59 	bl	8002398 <console_println>
  for (size_t i = 0; i < 25; i++)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b18      	cmp	r3, #24
 8000cf0:	d9f6      	bls.n	8000ce0 <main+0xac>

  console_println("=========================================");
 8000cf2:	4840      	ldr	r0, [pc, #256]	; (8000df4 <main+0x1c0>)
 8000cf4:	f001 fb50 	bl	8002398 <console_println>
  console_println("      Audio Processor Firmware v0.1      ");
 8000cf8:	483f      	ldr	r0, [pc, #252]	; (8000df8 <main+0x1c4>)
 8000cfa:	f001 fb4d 	bl	8002398 <console_println>
  console_println("=========================================");
 8000cfe:	483d      	ldr	r0, [pc, #244]	; (8000df4 <main+0x1c0>)
 8000d00:	f001 fb4a 	bl	8002398 <console_println>

  blocklist_init();
 8000d04:	f001 f93a 	bl	8001f7c <blocklist_init>

  console_register_command("help\0", help);
 8000d08:	493c      	ldr	r1, [pc, #240]	; (8000dfc <main+0x1c8>)
 8000d0a:	483d      	ldr	r0, [pc, #244]	; (8000e00 <main+0x1cc>)
 8000d0c:	f001 fb5c 	bl	80023c8 <console_register_command>
  console_register_command("stat\0", stat);
 8000d10:	493c      	ldr	r1, [pc, #240]	; (8000e04 <main+0x1d0>)
 8000d12:	483d      	ldr	r0, [pc, #244]	; (8000e08 <main+0x1d4>)
 8000d14:	f001 fb58 	bl	80023c8 <console_register_command>
  console_register_command("lsblk\0", lsblk);
 8000d18:	493c      	ldr	r1, [pc, #240]	; (8000e0c <main+0x1d8>)
 8000d1a:	483d      	ldr	r0, [pc, #244]	; (8000e10 <main+0x1dc>)
 8000d1c:	f001 fb54 	bl	80023c8 <console_register_command>
  console_register_command("delayline_create\0", mkdelay);
 8000d20:	493c      	ldr	r1, [pc, #240]	; (8000e14 <main+0x1e0>)
 8000d22:	483d      	ldr	r0, [pc, #244]	; (8000e18 <main+0x1e4>)
 8000d24:	f001 fb50 	bl	80023c8 <console_register_command>
  console_register_command("delayline_tap_delay\0", delayline_tap_delay);
 8000d28:	493c      	ldr	r1, [pc, #240]	; (8000e1c <main+0x1e8>)
 8000d2a:	483d      	ldr	r0, [pc, #244]	; (8000e20 <main+0x1ec>)
 8000d2c:	f001 fb4c 	bl	80023c8 <console_register_command>
  console_register_command("delayline_tap_volume\0", delayline_tap_volume);
 8000d30:	493c      	ldr	r1, [pc, #240]	; (8000e24 <main+0x1f0>)
 8000d32:	483d      	ldr	r0, [pc, #244]	; (8000e28 <main+0x1f4>)
 8000d34:	f001 fb48 	bl	80023c8 <console_register_command>
  console_register_command("delayline_fb_volume\0", delayline_fb_volume);
 8000d38:	493c      	ldr	r1, [pc, #240]	; (8000e2c <main+0x1f8>)
 8000d3a:	483d      	ldr	r0, [pc, #244]	; (8000e30 <main+0x1fc>)
 8000d3c:	f001 fb44 	bl	80023c8 <console_register_command>
  console_register_command("modulator_create\0", modulator_create);
 8000d40:	493c      	ldr	r1, [pc, #240]	; (8000e34 <main+0x200>)
 8000d42:	483d      	ldr	r0, [pc, #244]	; (8000e38 <main+0x204>)
 8000d44:	f001 fb40 	bl	80023c8 <console_register_command>
  console_register_command("insblk\0", insblk);
 8000d48:	493c      	ldr	r1, [pc, #240]	; (8000e3c <main+0x208>)
 8000d4a:	483d      	ldr	r0, [pc, #244]	; (8000e40 <main+0x20c>)
 8000d4c:	f001 fb3c 	bl	80023c8 <console_register_command>
  console_register_command("lsdrv\0", lsdrv);
 8000d50:	493c      	ldr	r1, [pc, #240]	; (8000e44 <main+0x210>)
 8000d52:	483d      	ldr	r0, [pc, #244]	; (8000e48 <main+0x214>)
 8000d54:	f001 fb38 	bl	80023c8 <console_register_command>

  channel_init(&channel_0, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	483c      	ldr	r0, [pc, #240]	; (8000e4c <main+0x218>)
 8000d5c:	f001 fa3e 	bl	80021dc <channel_init>
  temp123 = &channel_0;
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <main+0x21c>)
 8000d62:	4a3a      	ldr	r2, [pc, #232]	; (8000e4c <main+0x218>)
 8000d64:	601a      	str	r2, [r3, #0]

  console_exec("\r");
 8000d66:	483b      	ldr	r0, [pc, #236]	; (8000e54 <main+0x220>)
 8000d68:	f001 fc10 	bl	800258c <console_exec>
  console_exec("delayline_create dl_0 4 50000");
 8000d6c:	483a      	ldr	r0, [pc, #232]	; (8000e58 <main+0x224>)
 8000d6e:	f001 fc0d 	bl	800258c <console_exec>
  console_exec("delayline_tap_delay dl_0 0 24000");
 8000d72:	483a      	ldr	r0, [pc, #232]	; (8000e5c <main+0x228>)
 8000d74:	f001 fc0a 	bl	800258c <console_exec>
  console_exec("delayline_tap_volume dl_0 0 1.0");
 8000d78:	4839      	ldr	r0, [pc, #228]	; (8000e60 <main+0x22c>)
 8000d7a:	f001 fc07 	bl	800258c <console_exec>
  console_exec("delayline_fb_volume dl_0 0.5");
 8000d7e:	4839      	ldr	r0, [pc, #228]	; (8000e64 <main+0x230>)
 8000d80:	f001 fc04 	bl	800258c <console_exec>
  console_exec("insblk dl_0 0");
 8000d84:	4838      	ldr	r0, [pc, #224]	; (8000e68 <main+0x234>)
 8000d86:	f001 fc01 	bl	800258c <console_exec>
  console_exec("modulator_create mod_0");
 8000d8a:	4838      	ldr	r0, [pc, #224]	; (8000e6c <main+0x238>)
 8000d8c:	f001 fbfe 	bl	800258c <console_exec>
  console_exec("insblk mod_0 0");
 8000d90:	4837      	ldr	r0, [pc, #220]	; (8000e70 <main+0x23c>)
 8000d92:	f001 fbfb 	bl	800258c <console_exec>

  //while (audio_source_buffer->bytes_free * 100 / audio_source_buffer->size > AUDIO_USB_BUF_TRESHOLD_START);

  drvman_register_driver(&mcu_internal_driver);
 8000d96:	4837      	ldr	r0, [pc, #220]	; (8000e74 <main+0x240>)
 8000d98:	f003 f822 	bl	8003de0 <drvman_register_driver>
  drvman_register_driver(&cs4272_driver);
 8000d9c:	4836      	ldr	r0, [pc, #216]	; (8000e78 <main+0x244>)
 8000d9e:	f003 f81f 	bl	8003de0 <drvman_register_driver>
  drvman_set_audio_driver(2);
 8000da2:	2002      	movs	r0, #2
 8000da4:	f003 f8ba 	bl	8003f1c <drvman_set_audio_driver>

  drvman_register_driver(&usb_driver);
 8000da8:	4834      	ldr	r0, [pc, #208]	; (8000e7c <main+0x248>)
 8000daa:	f003 f819 	bl	8003de0 <drvman_register_driver>
  drvman_set_usb_driver(3);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f003 f90a 	bl	8003fc8 <drvman_set_usb_driver>

  audio_engine_init();
 8000db4:	f001 f874 	bl	8001ea0 <audio_engine_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		console_iteration();
 8000db8:	f001 fc22 	bl	8002600 <console_iteration>

		if (temp_next_block_ready)
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <main+0x24c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f9      	beq.n	8000db8 <main+0x184>
		{
			process_block();
 8000dc4:	f7ff fefc 	bl	8000bc0 <process_block>
			temp_next_block_ready = 0;
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <main+0x24c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
		console_iteration();
 8000dce:	e7f3      	b.n	8000db8 <main+0x184>
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	240006cc 	.word	0x240006cc
 8000dd8:	0801a2d8 	.word	0x0801a2d8
 8000ddc:	0801a2e8 	.word	0x0801a2e8
 8000de0:	0801a2f8 	.word	0x0801a2f8
 8000de4:	0801a30c 	.word	0x0801a30c
 8000de8:	0801a320 	.word	0x0801a320
 8000dec:	24000014 	.word	0x24000014
 8000df0:	0801a338 	.word	0x0801a338
 8000df4:	0801a33c 	.word	0x0801a33c
 8000df8:	0801a368 	.word	0x0801a368
 8000dfc:	080026c9 	.word	0x080026c9
 8000e00:	0801a394 	.word	0x0801a394
 8000e04:	08002d1d 	.word	0x08002d1d
 8000e08:	0801a39c 	.word	0x0801a39c
 8000e0c:	08002791 	.word	0x08002791
 8000e10:	0801a3a4 	.word	0x0801a3a4
 8000e14:	08002a3d 	.word	0x08002a3d
 8000e18:	0801a3ac 	.word	0x0801a3ac
 8000e1c:	08002b0d 	.word	0x08002b0d
 8000e20:	0801a3c0 	.word	0x0801a3c0
 8000e24:	08002bbd 	.word	0x08002bbd
 8000e28:	0801a3d8 	.word	0x0801a3d8
 8000e2c:	08002c7d 	.word	0x08002c7d
 8000e30:	0801a3f0 	.word	0x0801a3f0
 8000e34:	08002281 	.word	0x08002281
 8000e38:	0801a408 	.word	0x0801a408
 8000e3c:	0800270d 	.word	0x0800270d
 8000e40:	0801a41c 	.word	0x0801a41c
 8000e44:	08002949 	.word	0x08002949
 8000e48:	0801a424 	.word	0x0801a424
 8000e4c:	24000bf8 	.word	0x24000bf8
 8000e50:	24000c00 	.word	0x24000c00
 8000e54:	0801a42c 	.word	0x0801a42c
 8000e58:	0801a430 	.word	0x0801a430
 8000e5c:	0801a450 	.word	0x0801a450
 8000e60:	0801a474 	.word	0x0801a474
 8000e64:	0801a494 	.word	0x0801a494
 8000e68:	0801a4b4 	.word	0x0801a4b4
 8000e6c:	0801a4c4 	.word	0x0801a4c4
 8000e70:	0801a4dc 	.word	0x0801a4dc
 8000e74:	24000008 	.word	0x24000008
 8000e78:	24000028 	.word	0x24000028
 8000e7c:	24000034 	.word	0x24000034
 8000e80:	24000c04 	.word	0x24000c04

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b09c      	sub	sp, #112	; 0x70
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	224c      	movs	r2, #76	; 0x4c
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f016 fd7b 	bl	801798e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f016 fd75 	bl	801798e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f00a f91d 	bl	800b0e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <SystemClock_Config+0xec>)
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <SystemClock_Config+0xec>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <SystemClock_Config+0xec>)
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <SystemClock_Config+0xf0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <SystemClock_Config+0xf0>)
 8000eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xf0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000edc:	bf00      	nop
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xf0>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eea:	d1f8      	bne.n	8000ede <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000f0a:	230d      	movs	r3, #13
 8000f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f12:	230c      	movs	r3, #12
 8000f14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a f948 	bl	800b1b8 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f2e:	f000 fa4f 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	233f      	movs	r3, #63	; 0x3f
 8000f34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2303      	movs	r3, #3
 8000f38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f50:	2340      	movs	r3, #64	; 0x40
 8000f52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2102      	movs	r1, #2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00a fd87 	bl	800ba6c <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000f64:	f000 fa34 	bl	80013d0 <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3770      	adds	r7, #112	; 0x70
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58000400 	.word	0x58000400
 8000f74:	58024800 	.word	0x58024800

08000f78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f016 fd02 	bl	801798e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_DAC1_Init+0x74>)
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <MX_DAC1_Init+0x78>)
 8000f8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f90:	4816      	ldr	r0, [pc, #88]	; (8000fec <MX_DAC1_Init+0x74>)
 8000f92:	f003 fd1b 	bl	80049cc <HAL_DAC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f9c:	f000 fa18 	bl	80013d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000fa4:	2316      	movs	r3, #22
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_DAC1_Init+0x74>)
 8000fbc:	f003 fee8 	bl	8004d90 <HAL_DAC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 fa03 	bl	80013d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_DAC1_Init+0x74>)
 8000fd6:	f003 fedb 	bl	8004d90 <HAL_DAC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000fe0:	f000 f9f6 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240003e4 	.word	0x240003e4
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_I2C1_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <MX_I2C1_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xD01065FD;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_I2C1_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <MX_I2C1_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_I2C1_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <MX_I2C1_Init+0x74>)
 8001030:	f007 fc12 	bl	8008858 <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 f9c9 	bl	80013d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <MX_I2C1_Init+0x74>)
 8001042:	f007 ffd7 	bl	8008ff4 <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f9c0 	bl	80013d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_I2C1_Init+0x74>)
 8001054:	f008 f819 	bl	800908a <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f9b7 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	24000510 	.word	0x24000510
 800106c:	40005400 	.word	0x40005400
 8001070:	d01065fd 	.word	0xd01065fd

08001074 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_I2S2_Init+0x60>)
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_I2S2_Init+0x64>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2S2_Init+0x60>)
 8001080:	220a      	movs	r2, #10
 8001082:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2S2_Init+0x60>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2S2_Init+0x60>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2S2_Init+0x60>)
 8001094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001098:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2S2_Init+0x60>)
 800109c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2S2_Init+0x60>)
 80010c2:	f008 f82f 	bl	8009124 <HAL_I2S_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2S2_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f980 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	24000564 	.word	0x24000564
 80010d8:	40003800 	.word	0x40003800

080010dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_TIM2_Init+0x98>)
 80010fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001100:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM2_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM2_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_TIM2_Init+0x98>)
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM2_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM2_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM2_Init+0x98>)
 8001124:	f00d fd2c 	bl	800eb80 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800112e:	f000 f94f 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_TIM2_Init+0x98>)
 8001140:	f00d ff14 	bl	800ef6c <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800114a:	f000 f941 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM2_Init+0x98>)
 800115c:	f00e f974 	bl	800f448 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001166:	f000 f933 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	240006cc 	.word	0x240006cc

08001178 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_TIM6_Init+0x64>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_TIM6_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_TIM6_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_TIM6_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4150;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_TIM6_Init+0x64>)
 800119c:	f241 0236 	movw	r2, #4150	; 0x1036
 80011a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_TIM6_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_TIM6_Init+0x64>)
 80011aa:	f00d fce9 	bl	800eb80 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011b4:	f000 f90c 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011b8:	2320      	movs	r3, #32
 80011ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM6_Init+0x64>)
 80011c6:	f00e f93f 	bl	800f448 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 f8fe 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	24000718 	.word	0x24000718
 80011e0:	40001000 	.word	0x40001000

080011e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_USART3_UART_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_USART3_UART_Init+0x90>)
 800122e:	f00e f9b7 	bl	800f5a0 <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 f8ca 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001240:	f010 feb9 	bl	8011fb6 <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f8c1 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001252:	f010 feee 	bl	8012032 <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f8b8 	bl	80013d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_USART3_UART_Init+0x90>)
 8001262:	f010 fe6f 	bl	8011f44 <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f8b0 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	24000764 	.word	0x24000764
 8001278:	40004800 	.word	0x40004800

0800127c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_DMA_Init+0x6c>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <MX_DMA_Init+0x6c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_DMA_Init+0x6c>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	200b      	movs	r0, #11
 80012a6:	f003 fb4e 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012aa:	200b      	movs	r0, #11
 80012ac:	f003 fb65 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	200c      	movs	r0, #12
 80012b6:	f003 fb46 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012ba:	200c      	movs	r0, #12
 80012bc:	f003 fb5d 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	200d      	movs	r0, #13
 80012c6:	f003 fb3e 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012ca:	200d      	movs	r0, #13
 80012cc:	f003 fb55 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	200e      	movs	r0, #14
 80012d6:	f003 fb36 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80012da:	200e      	movs	r0, #14
 80012dc:	f003 fb4d 	bl	800497a <HAL_NVIC_EnableIRQ>

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	58024400 	.word	0x58024400

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001312:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	4a20      	ldr	r2, [pc, #128]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <MX_GPIO_Init+0xdc>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_RST_GPIO_Port, CODEC_RST_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2101      	movs	r1, #1
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <MX_GPIO_Init+0xe0>)
 800139e:	f007 fa13 	bl	80087c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_RST_Pin */
  GPIO_InitStruct.Pin = CODEC_RST_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_RST_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_GPIO_Init+0xe0>)
 80013ba:	f006 ff4b 	bl	8008254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58021000 	.word	0x58021000

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x30>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	58024400 	.word	0x58024400

08001410 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_DAC_MspInit+0x14c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	f040 808f 	bne.w	8001552 <HAL_DAC_MspInit+0x142>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001434:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_DAC_MspInit+0x150>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143a:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_DAC_MspInit+0x150>)
 800143c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001444:	4b46      	ldr	r3, [pc, #280]	; (8001560 <HAL_DAC_MspInit+0x150>)
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_DAC_MspInit+0x150>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	4a41      	ldr	r2, [pc, #260]	; (8001560 <HAL_DAC_MspInit+0x150>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_DAC_MspInit+0x150>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001470:	2330      	movs	r3, #48	; 0x30
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001474:	2303      	movs	r3, #3
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4838      	ldr	r0, [pc, #224]	; (8001564 <HAL_DAC_MspInit+0x154>)
 8001484:	f006 fee6 	bl	8008254 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_DAC_MspInit+0x158>)
 800148a:	4a38      	ldr	r2, [pc, #224]	; (800156c <HAL_DAC_MspInit+0x15c>)
 800148c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_DAC_MspInit+0x158>)
 8001490:	2243      	movs	r2, #67	; 0x43
 8001492:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <HAL_DAC_MspInit+0x158>)
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_DAC_MspInit+0x158>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014be:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80014cc:	4826      	ldr	r0, [pc, #152]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014ce:	f003 fecf 	bl	8005270 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80014d8:	f7ff ff7a 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <HAL_DAC_MspInit+0x158>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream3;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_DAC_MspInit+0x160>)
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_DAC_MspInit+0x164>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_DAC_MspInit+0x160>)
 80014f0:	2244      	movs	r2, #68	; 0x44
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_DAC_MspInit+0x160>)
 80014f6:	2240      	movs	r2, #64	; 0x40
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_DAC_MspInit+0x160>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_DAC_MspInit+0x160>)
 8001502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001506:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_DAC_MspInit+0x160>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_DAC_MspInit+0x160>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_DAC_MspInit+0x160>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_DAC_MspInit+0x160>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_DAC_MspInit+0x160>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <HAL_DAC_MspInit+0x160>)
 8001528:	f003 fea2 	bl	8005270 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_DAC_MspInit+0x126>
    {
      Error_Handler();
 8001532:	f7ff ff4d 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_DAC_MspInit+0x160>)
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <HAL_DAC_MspInit+0x160>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2102      	movs	r1, #2
 8001546:	2036      	movs	r0, #54	; 0x36
 8001548:	f003 f9fd 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154c:	2036      	movs	r0, #54	; 0x36
 800154e:	f003 fa14 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40007400 	.word	0x40007400
 8001560:	58024400 	.word	0x58024400
 8001564:	58020000 	.word	0x58020000
 8001568:	24000420 	.word	0x24000420
 800156c:	40020010 	.word	0x40020010
 8001570:	24000498 	.word	0x24000498
 8001574:	40020058 	.word	0x40020058

08001578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0ba      	sub	sp, #232	; 0xe8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	22c0      	movs	r2, #192	; 0xc0
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f016 f9f8 	bl	801798e <memset>
  if(hi2c->Instance==I2C1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_I2C_MspInit+0xc8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d146      	bne.n	8001636 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015a8:	f04f 0208 	mov.w	r2, #8
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f00a fde0 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015ca:	f7ff ff01 	bl	80013d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001606:	2304      	movs	r3, #4
 8001608:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	; (8001648 <HAL_I2C_MspInit+0xd0>)
 8001614:	f006 fe1e 	bl	8008254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_I2C_MspInit+0xcc>)
 800162a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	37e8      	adds	r7, #232	; 0xe8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	58024400 	.word	0x58024400
 8001648:	58020400 	.word	0x58020400

0800164c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0bc      	sub	sp, #240	; 0xf0
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	22c0      	movs	r2, #192	; 0xc0
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f016 f98e 	bl	801798e <memset>
  if(hi2s->Instance==SPI2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6d      	ldr	r2, [pc, #436]	; (800182c <HAL_I2S_MspInit+0x1e0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	f040 80d2 	bne.w	8001822 <HAL_I2S_MspInit+0x1d6>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800167e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800168a:	2300      	movs	r3, #0
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168e:	f107 0318 	add.w	r3, r7, #24
 8001692:	4618      	mov	r0, r3
 8001694:	f00a fd76 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 800169e:	f7ff fe97 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a8:	4a61      	ldr	r2, [pc, #388]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c0:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c6:	4a5a      	ldr	r2, [pc, #360]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	4b54      	ldr	r3, [pc, #336]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ee:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_I2S_MspInit+0x1e4>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80016fc:	2344      	movs	r3, #68	; 0x44
 80016fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001714:	2305      	movs	r3, #5
 8001716:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800171e:	4619      	mov	r1, r3
 8001720:	4844      	ldr	r0, [pc, #272]	; (8001834 <HAL_I2S_MspInit+0x1e8>)
 8001722:	f006 fd97 	bl	8008254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8001726:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 800172a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001740:	2305      	movs	r3, #5
 8001742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800174a:	4619      	mov	r1, r3
 800174c:	483a      	ldr	r0, [pc, #232]	; (8001838 <HAL_I2S_MspInit+0x1ec>)
 800174e:	f006 fd81 	bl	8008254 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001754:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <HAL_I2S_MspInit+0x1f4>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 800175a:	2228      	movs	r2, #40	; 0x28
 800175c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 800176c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001770:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001774:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001778:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 800177c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001780:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001796:	4829      	ldr	r0, [pc, #164]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 8001798:	f003 fd6a 	bl	8005270 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2S_MspInit+0x15a>
    {
      Error_Handler();
 80017a2:	f7ff fe15 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a24      	ldr	r2, [pc, #144]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
 80017ac:	4a23      	ldr	r2, [pc, #140]	; (800183c <HAL_I2S_MspInit+0x1f0>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream2;
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_I2S_MspInit+0x1fc>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017ba:	2227      	movs	r2, #39	; 0x27
 80017bc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 80017f8:	f003 fd3a 	bl	8005270 <HAL_DMA_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2S_MspInit+0x1ba>
    {
      Error_Handler();
 8001802:	f7ff fde5 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 800180a:	649a      	str	r2, [r3, #72]	; 0x48
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <HAL_I2S_MspInit+0x1f8>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2102      	movs	r1, #2
 8001816:	2024      	movs	r0, #36	; 0x24
 8001818:	f003 f895 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800181c:	2024      	movs	r0, #36	; 0x24
 800181e:	f003 f8ac 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	37f0      	adds	r7, #240	; 0xf0
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40003800 	.word	0x40003800
 8001830:	58024400 	.word	0x58024400
 8001834:	58020800 	.word	0x58020800
 8001838:	58020400 	.word	0x58020400
 800183c:	240005dc 	.word	0x240005dc
 8001840:	40020028 	.word	0x40020028
 8001844:	24000654 	.word	0x24000654
 8001848:	40020040 	.word	0x40020040

0800184c <HAL_I2S_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance==SPI2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_I2S_MspDeInit+0x58>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d11d      	bne.n	800189a <HAL_I2S_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_I2S_MspDeInit+0x5c>)
 8001860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001864:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_I2S_MspDeInit+0x5c>)
 8001866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800186a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SDO
    PC6     ------> I2S2_MCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_6);
 800186e:	2144      	movs	r1, #68	; 0x44
 8001870:	480e      	ldr	r0, [pc, #56]	; (80018ac <HAL_I2S_MspDeInit+0x60>)
 8001872:	f006 fe9f 	bl	80085b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15);
 8001876:	f44f 4114 	mov.w	r1, #37888	; 0x9400
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <HAL_I2S_MspDeInit+0x64>)
 800187c:	f006 fe9a 	bl	80085b4 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(hi2s->hdmatx);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	4618      	mov	r0, r3
 8001886:	f004 f84f 	bl	8005928 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2s->hdmarx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	4618      	mov	r0, r3
 8001890:	f004 f84a 	bl	8005928 <HAL_DMA_DeInit>

    /* I2S2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001894:	2024      	movs	r0, #36	; 0x24
 8001896:	f003 f87e 	bl	8004996 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40003800 	.word	0x40003800
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020800 	.word	0x58020800
 80018b0:	58020400 	.word	0x58020400

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d10f      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 80018c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018cc:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 80018d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80018e4:	e01b      	b.n	800191e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_TIM_Base_MspInit+0x78>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d116      	bne.n	800191e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 80018f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f6:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_TIM_Base_MspInit+0x74>)
 8001902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2102      	movs	r1, #2
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f003 f817 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001918:	2036      	movs	r0, #54	; 0x36
 800191a:	f003 f82e 	bl	800497a <HAL_NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	40001000 	.word	0x40001000

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ba      	sub	sp, #232	; 0xe8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	22c0      	movs	r2, #192	; 0xc0
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f016 f81c 	bl	801798e <memset>
  if(huart->Instance==USART3)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_UART_MspInit+0xd8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d14e      	bne.n	80019fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001960:	f04f 0202 	mov.w	r2, #2
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f00a fc04 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001982:	f7ff fd25 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 8001988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 800198e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 8001998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_UART_MspInit+0xdc>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019dc:	2307      	movs	r3, #7
 80019de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <HAL_UART_MspInit+0xe0>)
 80019ea:	f006 fc33 	bl	8008254 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2103      	movs	r1, #3
 80019f2:	2027      	movs	r0, #39	; 0x27
 80019f4:	f002 ffa7 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019f8:	2027      	movs	r0, #39	; 0x27
 80019fa:	f002 ffbe 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	37e8      	adds	r7, #232	; 0xe8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020c00 	.word	0x58020c00

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f002 fe22 	bl	80046a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <DMA1_Stream0_IRQHandler+0x10>)
 8001a6e:	f005 f8df 	bl	8006c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	24000420 	.word	0x24000420

08001a7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DMA1_Stream1_IRQHandler+0x10>)
 8001a82:	f005 f8d5 	bl	8006c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	240005dc 	.word	0x240005dc

08001a90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <DMA1_Stream2_IRQHandler+0x10>)
 8001a96:	f005 f8cb 	bl	8006c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	24000654 	.word	0x24000654

08001aa4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA1_Stream3_IRQHandler+0x10>)
 8001aaa:	f005 f8c1 	bl	8006c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	24000498 	.word	0x24000498

08001ab8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <SPI2_IRQHandler+0x10>)
 8001abe:	f007 fecd 	bl	800985c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24000564 	.word	0x24000564

08001acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <USART3_IRQHandler+0x10>)
 8001ad2:	f00d fe95 	bl	800f800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000764 	.word	0x24000764

08001ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <TIM6_DAC_IRQHandler+0x14>)
 8001ae6:	f003 f8d2 	bl	8004c8e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <TIM6_DAC_IRQHandler+0x18>)
 8001aec:	f00d f937 	bl	800ed5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	240003e4 	.word	0x240003e4
 8001af8:	24000718 	.word	0x24000718

08001afc <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001b02:	f008 f991 	bl	8009e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	240071fc 	.word	0x240071fc

08001b10 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001b16:	f008 f987 	bl	8009e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	240071fc 	.word	0x240071fc

08001b24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <OTG_FS_IRQHandler+0x10>)
 8001b2a:	f008 f97d 	bl	8009e28 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	240071fc 	.word	0x240071fc

08001b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_kill>:

int _kill(int pid, int sig)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b52:	f015 ff91 	bl	8017a78 <__errno>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2216      	movs	r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_exit>:

void _exit (int status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ffe7 	bl	8001b48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b7a:	e7fe      	b.n	8001b7a <_exit+0x12>

08001b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e00a      	b.n	8001ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b8e:	f3af 8000 	nop.w
 8001b92:	4601      	mov	r1, r0
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	60ba      	str	r2, [r7, #8]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf0      	blt.n	8001b8e <_read+0x12>
  }

  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e009      	b.n	8001bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbf1      	blt.n	8001bc8 <_write+0x12>
  }
  return len;
 8001be4:	687b      	ldr	r3, [r7, #4]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_close>:

int _close(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c16:	605a      	str	r2, [r3, #4]
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_isatty>:

int _isatty(int file)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f015 fef6 	bl	8017a78 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]

}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24080000 	.word	0x24080000
 8001cb8:	00000800 	.word	0x00000800
 8001cbc:	24000c08 	.word	0x24000c08
 8001cc0:	2400b480 	.word	0x2400b480

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc8:	f7fe fee4 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f015 fec7 	bl	8017a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7fe ff9d 	bl	8000c34 <main>
  bx  lr
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d04:	240003c8 	.word	0x240003c8
  ldr r2, =_sidata
 8001d08:	0801b9cc 	.word	0x0801b9cc
  ldr r2, =_sbss
 8001d0c:	240003c8 	.word	0x240003c8
  ldr r4, =_ebss
 8001d10:	2400b47c 	.word	0x2400b47c

08001d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC3_IRQHandler>

08001d16 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d104      	bne.n	8001d2e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
 8001d28:	f7ff fb52 	bl	80013d0 <Error_Handler>
 8001d2c:	e7fe      	b.n	8001d2c <stm32_lock_init+0x16>
  lock->flag = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	705a      	strb	r2, [r3, #1]
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001d4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d50:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5a:	b672      	cpsid	i
}
 8001d5c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5e:	f3bf 8f4f 	dsb	sy
}
 8001d62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d64:	f3bf 8f6f 	isb	sy
}
 8001d68:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d104      	bne.n	8001d7a <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
}
 8001d72:	bf00      	nop
 8001d74:	f7ff fb2c 	bl	80013d0 <Error_Handler>
 8001d78:	e7fe      	b.n	8001d78 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e008      	b.n	8001d9c <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d104      	bne.n	8001d9c <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d92:	b672      	cpsid	i
}
 8001d94:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001d96:	f7ff fb1b 	bl	80013d0 <Error_Handler>
 8001d9a:	e7fe      	b.n	8001d9a <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	705a      	strb	r2, [r3, #1]
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d104      	bne.n	8001dc8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbe:	b672      	cpsid	i
}
 8001dc0:	bf00      	nop
 8001dc2:	f7ff fb05 	bl	80013d0 <Error_Handler>
 8001dc6:	e7fe      	b.n	8001dc6 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001dd4:	f7ff fafc 	bl	80013d0 <Error_Handler>
 8001dd8:	e7fe      	b.n	8001dd8 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <stm32_lock_release+0x4a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001df6:	b662      	cpsie	i
}
 8001df8:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001e10:	f015 fe32 	bl	8017a78 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2216      	movs	r2, #22
 8001e18:	601a      	str	r2, [r3, #0]
    return;
 8001e1a:	e015      	b.n	8001e48 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f014 f935 	bl	801608c <malloc>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff6d 	bl	8001d16 <stm32_lock_init>
    return;
 8001e3c:	e004      	b.n	8001e48 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3e:	b672      	cpsid	i
}
 8001e40:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001e42:	f7ff fac5 	bl	80013d0 <Error_Handler>
 8001e46:	e7fe      	b.n	8001e46 <__retarget_lock_init_recursive+0x44>
}
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
 8001e60:	f7ff fab6 	bl	80013d0 <Error_Handler>
 8001e64:	e7fe      	b.n	8001e64 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff6a 	bl	8001d42 <stm32_lock_acquire>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
 8001e88:	f7ff faa2 	bl	80013d0 <Error_Handler>
 8001e8c:	e7fe      	b.n	8001e8c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff8d 	bl	8001db0 <stm32_lock_release>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <audio_engine_init>:
#define NUM_CHANNELS 2

static struct Channel channels[NUM_CHANNELS];

void audio_engine_init()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_CHANNELS; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	e00b      	b.n	8001ec4 <audio_engine_init+0x24>
	{
		channel_init(&channels[i], i);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <audio_engine_init+0x34>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 f98f 	bl	80021dc <channel_init>
	for (uint8_t i = 0; i < NUM_CHANNELS; i++)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	71fb      	strb	r3, [r7, #7]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d9f0      	bls.n	8001eac <audio_engine_init+0xc>
	}
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	24000c14 	.word	0x24000c14

08001ed8 <audio_engine_process>:

void audio_engine_process(float32_t* buf, int32_t block_size)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	for (uint8_t ch = 0; ch < NUM_CHANNELS; ch++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e018      	b.n	8001f1a <audio_engine_process+0x42>
	{
		struct Block* curr = channels[ch].head;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <audio_engine_process+0x54>)
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60bb      	str	r3, [r7, #8]
		while (curr)
 8001ef4:	e00b      	b.n	8001f0e <audio_engine_process+0x36>
		{
			curr->process(curr, &buf[ch * SAMPLES_PER_BLOCK], SAMPLES_PER_BLOCK);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	0252      	lsls	r2, r2, #9
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4411      	add	r1, r2
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	4798      	blx	r3
			curr = curr->next;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	60bb      	str	r3, [r7, #8]
		while (curr)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <audio_engine_process+0x1e>
	for (uint8_t ch = 0; ch < NUM_CHANNELS; ch++)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d9e3      	bls.n	8001ee8 <audio_engine_process+0x10>
		}
	}
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	24000c14 	.word	0x24000c14

08001f30 <audio_engine_insblk>:

void audio_engine_insblk(uint8_t ch_id, struct Block* block)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
	if (ch_id >= NUM_CHANNELS)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d903      	bls.n	8001f4a <audio_engine_insblk+0x1a>
	{
		console_println("[Audio Engine] Invalid channel ID");
 8001f42:	480b      	ldr	r0, [pc, #44]	; (8001f70 <audio_engine_insblk+0x40>)
 8001f44:	f000 fa28 	bl	8002398 <console_println>
		return;
 8001f48:	e00f      	b.n	8001f6a <audio_engine_insblk+0x3a>
	}

	if (!block)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <audio_engine_insblk+0x28>
	{
		console_println("[Audio Engine] Tried to insert a NULL block");
 8001f50:	4808      	ldr	r0, [pc, #32]	; (8001f74 <audio_engine_insblk+0x44>)
 8001f52:	f000 fa21 	bl	8002398 <console_println>
		return;
 8001f56:	e008      	b.n	8001f6a <audio_engine_insblk+0x3a>
	}

	channel_insert_block(&channels[ch_id], block, 100);
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4a06      	ldr	r2, [pc, #24]	; (8001f78 <audio_engine_insblk+0x48>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	2264      	movs	r2, #100	; 0x64
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f94b 	bl	8002200 <channel_insert_block>
}
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	0801a4ec 	.word	0x0801a4ec
 8001f74:	0801a510 	.word	0x0801a510
 8001f78:	24000c14 	.word	0x24000c14

08001f7c <blocklist_init>:
uint8_t blocklist_initialized = 0;
uint8_t block_status_bitmap[STATUS_BITMAP_SIZE];
struct Block block_list[MAX_DSP_BLOCKS];

int8_t blocklist_init()
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
	if (blocklist_initialized)
 8001f82:	4b28      	ldr	r3, [pc, #160]	; (8002024 <blocklist_init+0xa8>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <blocklist_init+0x14>
		return -EINVAL;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e043      	b.n	8002018 <blocklist_init+0x9c>

	for (uint8_t i = 0; i < STATUS_BITMAP_SIZE; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	e009      	b.n	8001faa <blocklist_init+0x2e>
	{
		block_status_bitmap[i >> 3] = 0xFF;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <blocklist_init+0xac>)
 8001fa0:	21ff      	movs	r1, #255	; 0xff
 8001fa2:	5499      	strb	r1, [r3, r2]
	for (uint8_t i = 0; i < STATUS_BITMAP_SIZE; i++)
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d9f2      	bls.n	8001f96 <blocklist_init+0x1a>
	}

	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71bb      	strb	r3, [r7, #6]
 8001fb4:	e029      	b.n	800200a <blocklist_init+0x8e>
	{
		block_list[i].next = NULL;
 8001fb6:	79ba      	ldrb	r2, [r7, #6]
 8001fb8:	491c      	ldr	r1, [pc, #112]	; (800202c <blocklist_init+0xb0>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	440b      	add	r3, r1
 8001fc4:	332c      	adds	r3, #44	; 0x2c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
		block_list[i].dsp_struct_ptr = NULL;
 8001fca:	79ba      	ldrb	r2, [r7, #6]
 8001fcc:	4917      	ldr	r1, [pc, #92]	; (800202c <blocklist_init+0xb0>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3328      	adds	r3, #40	; 0x28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
		block_list[i].process = NULL;
 8001fde:	79ba      	ldrb	r2, [r7, #6]
 8001fe0:	4912      	ldr	r1, [pc, #72]	; (800202c <blocklist_init+0xb0>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	440b      	add	r3, r1
 8001fec:	3324      	adds	r3, #36	; 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
		block_list[i].type = BLOCK_TYPE_UNKNOWN;
 8001ff2:	79ba      	ldrb	r2, [r7, #6]
 8001ff4:	490d      	ldr	r1, [pc, #52]	; (800202c <blocklist_init+0xb0>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	440b      	add	r3, r1
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	3301      	adds	r3, #1
 8002008:	71bb      	strb	r3, [r7, #6]
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d9d2      	bls.n	8001fb6 <blocklist_init+0x3a>
	}
	blocklist_initialized = 1;
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <blocklist_init+0xa8>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]

	return EOK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	24000c24 	.word	0x24000c24
 8002028:	24000c28 	.word	0x24000c28
 800202c:	24000c2c 	.word	0x24000c2c

08002030 <blocklist_insert>:

int8_t blocklist_insert(void* dsp_struct_ptr, char* name, void (*process)(void*, float*, size_t), uint8_t type)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	70fb      	strb	r3, [r7, #3]
	if (!blocklist_initialized)
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <blocklist_insert+0x134>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <blocklist_insert+0x1c>
		return -EINVAL;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e087      	b.n	800215c <blocklist_insert+0x12c>

	int16_t free_block_index = -1;
 800204c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002050:	82fb      	strh	r3, [r7, #22]
	uint8_t mask = 0x01;
 8002052:	2301      	movs	r3, #1
 8002054:	757b      	strb	r3, [r7, #21]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	753b      	strb	r3, [r7, #20]
 800205a:	e02e      	b.n	80020ba <blocklist_insert+0x8a>
	{
		if (block_status_bitmap[i >> 3] & mask)
 800205c:	7d3b      	ldrb	r3, [r7, #20]
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	4b40      	ldr	r3, [pc, #256]	; (8002168 <blocklist_insert+0x138>)
 8002066:	5c9a      	ldrb	r2, [r3, r2]
 8002068:	7d7b      	ldrb	r3, [r7, #21]
 800206a:	4013      	ands	r3, r2
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <blocklist_insert+0x70>
		{
			free_block_index = i;
 8002072:	7d3b      	ldrb	r3, [r7, #20]
 8002074:	82fb      	strh	r3, [r7, #22]
			block_status_bitmap[i >> 3] &= ~mask;
 8002076:	7d3b      	ldrb	r3, [r7, #20]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <blocklist_insert+0x138>)
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b25a      	sxtb	r2, r3
 8002084:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002088:	43db      	mvns	r3, r3
 800208a:	b25b      	sxtb	r3, r3
 800208c:	4013      	ands	r3, r2
 800208e:	b259      	sxtb	r1, r3
 8002090:	7d3b      	ldrb	r3, [r7, #20]
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	b2c9      	uxtb	r1, r1
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <blocklist_insert+0x138>)
 800209c:	5499      	strb	r1, [r3, r2]
			break;
 800209e:	e00f      	b.n	80020c0 <blocklist_insert+0x90>
		}
		uint8_t top_bit = (mask >> 7) & 0x01;
 80020a0:	7d7b      	ldrb	r3, [r7, #21]
 80020a2:	09db      	lsrs	r3, r3, #7
 80020a4:	74fb      	strb	r3, [r7, #19]
		mask <<= 1;
 80020a6:	7d7b      	ldrb	r3, [r7, #21]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	757b      	strb	r3, [r7, #21]
		mask |= top_bit;
 80020ac:	7d7a      	ldrb	r2, [r7, #21]
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	757b      	strb	r3, [r7, #21]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 80020b4:	7d3b      	ldrb	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	753b      	strb	r3, [r7, #20]
 80020ba:	7d3b      	ldrb	r3, [r7, #20]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d9cd      	bls.n	800205c <blocklist_insert+0x2c>
	}

	if (free_block_index == -1)
 80020c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d102      	bne.n	80020d0 <blocklist_insert+0xa0>
		return -EINVAL;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e045      	b.n	800215c <blocklist_insert+0x12c>

	uint8_t str_size = strlen(name);
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f7fe f965 	bl	80003a0 <strlen>
 80020d6:	4603      	mov	r3, r0
 80020d8:	74bb      	strb	r3, [r7, #18]
	str_size = str_size > BLOCK_NAME_SIZE ? BLOCK_NAME_SIZE : str_size;
 80020da:	7cbb      	ldrb	r3, [r7, #18]
 80020dc:	2b20      	cmp	r3, #32
 80020de:	bf28      	it	cs
 80020e0:	2320      	movcs	r3, #32
 80020e2:	74bb      	strb	r3, [r7, #18]
	memcpy(block_list[free_block_index].name, name, str_size);
 80020e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <blocklist_insert+0x13c>)
 80020f2:	4413      	add	r3, r2
 80020f4:	3301      	adds	r3, #1
 80020f6:	7cba      	ldrb	r2, [r7, #18]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f015 fcee 	bl	8017adc <memcpy>
	block_list[free_block_index].name[str_size] = '\0';
 8002100:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002104:	7cb9      	ldrb	r1, [r7, #18]
 8002106:	4819      	ldr	r0, [pc, #100]	; (800216c <blocklist_insert+0x13c>)
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4403      	add	r3, r0
 8002112:	440b      	add	r3, r1
 8002114:	3301      	adds	r3, #1
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
	block_list[free_block_index].dsp_struct_ptr = dsp_struct_ptr;
 800211a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800211e:	4913      	ldr	r1, [pc, #76]	; (800216c <blocklist_insert+0x13c>)
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	3328      	adds	r3, #40	; 0x28
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].process = process;
 8002130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002134:	490d      	ldr	r1, [pc, #52]	; (800216c <blocklist_insert+0x13c>)
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	440b      	add	r3, r1
 8002140:	3324      	adds	r3, #36	; 0x24
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
	block_list[free_block_index].type = type;
 8002146:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <blocklist_insert+0x13c>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	701a      	strb	r2, [r3, #0]
	return EOK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	24000c24 	.word	0x24000c24
 8002168:	24000c28 	.word	0x24000c28
 800216c:	24000c2c 	.word	0x24000c2c

08002170 <blocklist_get_by_name>:

struct Block* blocklist_get_by_name(char* name)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e023      	b.n	80021c6 <blocklist_get_by_name+0x56>
	{
		if (block_list[i].type != BLOCK_TYPE_UNKNOWN &&
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	4915      	ldr	r1, [pc, #84]	; (80021d8 <blocklist_get_by_name+0x68>)
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	440b      	add	r3, r1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d016      	beq.n	80021c0 <blocklist_get_by_name+0x50>
			!strcmp(block_list[i].name, name))
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <blocklist_get_by_name+0x68>)
 800219e:	4413      	add	r3, r2
 80021a0:	3301      	adds	r3, #1
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f89b 	bl	80002e0 <strcmp>
 80021aa:	4603      	mov	r3, r0
		if (block_list[i].type != BLOCK_TYPE_UNKNOWN &&
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <blocklist_get_by_name+0x50>
		{
			return &block_list[i];
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <blocklist_get_by_name+0x68>)
 80021bc:	4413      	add	r3, r2
 80021be:	e006      	b.n	80021ce <blocklist_get_by_name+0x5e>
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	3301      	adds	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d9d8      	bls.n	800217e <blocklist_get_by_name+0xe>
		}
	}
	return NULL;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	24000c2c 	.word	0x24000c2c

080021dc <channel_init>:
 */

#include "channel.h"

void channel_init(struct Channel* ch, uint8_t id)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
	ch->channel_id = id;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	701a      	strb	r2, [r3, #0]
	ch->head = NULL;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <channel_insert_block>:
	}
}

// TODO: ADD INSERTS AT SPECIFIC INDEXES
void channel_insert_block(struct Channel* ch, struct Block* block, uint8_t pos)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
	if (!ch->head)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <channel_insert_block+0x1e>
	{
		ch->head = block;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	605a      	str	r2, [r3, #4]
		return;
 800221c:	e02a      	b.n	8002274 <channel_insert_block+0x74>
	}

	struct Block* prev = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
	struct Block* curr = ch->head;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61fb      	str	r3, [r7, #28]

	// Insert at beginning
	if (pos == 0)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <channel_insert_block+0x3e>
	{
		block->next = ch->head;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
		ch->head = block;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	605a      	str	r2, [r3, #4]
		return;
 800223c:	e01a      	b.n	8002274 <channel_insert_block+0x74>
	}

	uint8_t curr_pos = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	76fb      	strb	r3, [r7, #27]
	while (curr_pos > pos && curr->next)
 8002242:	e007      	b.n	8002254 <channel_insert_block+0x54>
	{
		prev = curr;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	617b      	str	r3, [r7, #20]
		curr = curr->next;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	61fb      	str	r3, [r7, #28]
		curr_pos++;
 800224e:	7efb      	ldrb	r3, [r7, #27]
 8002250:	3301      	adds	r3, #1
 8002252:	76fb      	strb	r3, [r7, #27]
	while (curr_pos > pos && curr->next)
 8002254:	7efa      	ldrb	r2, [r7, #27]
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	429a      	cmp	r2, r3
 800225a:	d903      	bls.n	8002264 <channel_insert_block+0x64>
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ef      	bne.n	8002244 <channel_insert_block+0x44>
	}

	// Insert at end
	if (pos >= curr_pos)
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	7efb      	ldrb	r3, [r7, #27]
 8002268:	429a      	cmp	r2, r3
 800226a:	d303      	bcc.n	8002274 <channel_insert_block+0x74>
	{
		curr->next = block;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
		return;
 8002272:	bf00      	nop
	}
}
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <modulator_create>:
#include "block_list.h"

#include <stdlib.h>

void modulator_create(char** args, uint8_t argc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
	if (argc < 1)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <modulator_create+0x20>
	{
		console_println("modulator_create <name>");
 8002292:	4818      	ldr	r0, [pc, #96]	; (80022f4 <modulator_create+0x74>)
 8002294:	f000 f880 	bl	8002398 <console_println>
		console_println("name = string which will be used to reference this block");
 8002298:	4817      	ldr	r0, [pc, #92]	; (80022f8 <modulator_create+0x78>)
 800229a:	f000 f87d 	bl	8002398 <console_println>
		return;
 800229e:	e026      	b.n	80022ee <modulator_create+0x6e>
	}

	char* name = args[0];
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]

	struct Modulator* new_modulator = malloc(sizeof(struct Modulator));
 80022a6:	200c      	movs	r0, #12
 80022a8:	f013 fef0 	bl	801608c <malloc>
 80022ac:	4603      	mov	r3, r0
 80022ae:	60bb      	str	r3, [r7, #8]
	modulator_init(new_modulator);
 80022b0:	68b8      	ldr	r0, [r7, #8]
 80022b2:	f000 ffef 	bl	8003294 <modulator_init>

	if (!new_modulator)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <modulator_create+0x44>
	{
		console_println("Failed to create a modulator");
 80022bc:	480f      	ldr	r0, [pc, #60]	; (80022fc <modulator_create+0x7c>)
 80022be:	f000 f86b 	bl	8002398 <console_println>
		return;
 80022c2:	e014      	b.n	80022ee <modulator_create+0x6e>
	}

	if (blocklist_insert(new_modulator, args[0], modulator_process, BLOCK_TYPE_MODULATOR) == -1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <modulator_create+0x80>)
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f7ff feaf 	bl	8002030 <blocklist_insert>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d106      	bne.n	80022e8 <modulator_create+0x68>
	{
		console_println("Failed inserting the modulator block into the block list");
 80022da:	480a      	ldr	r0, [pc, #40]	; (8002304 <modulator_create+0x84>)
 80022dc:	f000 f85c 	bl	8002398 <console_println>
		modulator_destroy(new_modulator);
 80022e0:	68b8      	ldr	r0, [r7, #8]
 80022e2:	f000 ffef 	bl	80032c4 <modulator_destroy>
		return;
 80022e6:	e002      	b.n	80022ee <modulator_create+0x6e>
	}
	console_println("Modulator block created");
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <modulator_create+0x88>)
 80022ea:	f000 f855 	bl	8002398 <console_println>
}
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0801a53c 	.word	0x0801a53c
 80022f8:	0801a554 	.word	0x0801a554
 80022fc:	0801a590 	.word	0x0801a590
 8002300:	080032dd 	.word	0x080032dd
 8002304:	0801a5b0 	.word	0x0801a5b0
 8002308:	0801a5ec 	.word	0x0801a5ec

0800230c <console_init>:
struct Command* command_list_head;

static char* args[MAX_ARGS];

void console_init()
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	if (!serial_device)
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <console_init+0x38>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <console_init+0x2e>
		return;

	console_buffer_index = 0;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <console_init+0x3c>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
	console_buffer[CONSOLE_BUFFER_SIZE] = '\0';
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <console_init+0x40>)
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	registered_commands = 0;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <console_init+0x44>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
	command_list_head = NULL;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <console_init+0x48>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
	console_initialized = 1;
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <console_init+0x4c>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
 8002338:	e000      	b.n	800233c <console_init+0x30>
		return;
 800233a:	bf00      	nop
}
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	2400642c 	.word	0x2400642c
 8002348:	24000f6d 	.word	0x24000f6d
 800234c:	24000f2c 	.word	0x24000f2c
 8002350:	24000f6f 	.word	0x24000f6f
 8002354:	24000f70 	.word	0x24000f70
 8002358:	24000f6e 	.word	0x24000f6e

0800235c <console_print>:

void console_print(char* str)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	if (!console_initialized)
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <console_print+0x34>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <console_print+0x2c>
		return;

	size_t str_len = strlen(str);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe f817 	bl	80003a0 <strlen>
 8002372:	60f8      	str	r0, [r7, #12]
	serial_device->io_ops->write
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <console_print+0x38>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <console_print+0x38>)
 800237e:	6810      	ldr	r0, [r2, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e000      	b.n	800238a <console_print+0x2e>
		return;
 8002388:	bf00      	nop
		(serial_device, str, str_len);
}
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	24000f6e 	.word	0x24000f6e
 8002394:	2400642c 	.word	0x2400642c

08002398 <console_println>:

void console_println(char* str)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	if (!console_initialized)
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <console_println+0x28>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <console_println+0x1e>
			return;

	console_print(str);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffd7 	bl	800235c <console_print>
	console_print(STRING_NEWLINE);
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <console_println+0x2c>)
 80023b0:	f7ff ffd4 	bl	800235c <console_print>
 80023b4:	e000      	b.n	80023b8 <console_println+0x20>
			return;
 80023b6:	bf00      	nop
}
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	24000f6e 	.word	0x24000f6e
 80023c4:	24000054 	.word	0x24000054

080023c8 <console_register_command>:

void console_register_command(char* name, void (*func)())
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0a4      	sub	sp, #144	; 0x90
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	char print_buf[128];
	if (!console_initialized)
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <console_register_command+0x94>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d03b      	beq.n	8002452 <console_register_command+0x8a>
		return;

	struct Command* new_command = malloc(sizeof(struct Command));
 80023da:	200c      	movs	r0, #12
 80023dc:	f013 fe56 	bl	801608c <malloc>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	new_command->name = name;
 80023e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
	new_command->func = func;
 80023ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	605a      	str	r2, [r3, #4]
	new_command->next = NULL;
 80023f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
	if (!command_list_head)
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <console_register_command+0x98>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d104      	bne.n	8002410 <console_register_command+0x48>
	{
		command_list_head = new_command;
 8002406:	4a16      	ldr	r2, [pc, #88]	; (8002460 <console_register_command+0x98>)
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e013      	b.n	8002438 <console_register_command+0x70>
	}
	else
	{
		struct Command* curr = command_list_head;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <console_register_command+0x98>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		while (curr->next) curr = curr->next;
 8002418:	e004      	b.n	8002424 <console_register_command+0x5c>
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f5      	bne.n	800241a <console_register_command+0x52>
		curr->next = new_command;
 800242e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002432:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002436:	609a      	str	r2, [r3, #8]
	}
	sprintf(print_buf, "%s Registered command: %s", module_str, name);
 8002438:	f107 0008 	add.w	r0, r7, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <console_register_command+0x9c>)
 8002440:	4909      	ldr	r1, [pc, #36]	; (8002468 <console_register_command+0xa0>)
 8002442:	f015 fa41 	bl	80178c8 <siprintf>
	console_println(print_buf);
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ffa4 	bl	8002398 <console_println>
 8002450:	e000      	b.n	8002454 <console_register_command+0x8c>
		return;
 8002452:	bf00      	nop
}
 8002454:	3790      	adds	r7, #144	; 0x90
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	24000f6e 	.word	0x24000f6e
 8002460:	24000f70 	.word	0x24000f70
 8002464:	24000040 	.word	0x24000040
 8002468:	0801a604 	.word	0x0801a604

0800246c <console_parse>:

void console_parse()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
	if (!console_initialized)
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <console_parse+0x100>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d073      	beq.n	8002562 <console_parse+0xf6>
		return;

	if (console_buffer[0] == '\0' || console_buffer_index == 0)
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <console_parse+0x104>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <console_parse+0x1e>
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <console_parse+0x108>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <console_parse+0x2c>
	{
		console_print(STRING_NEWLINE);
 800248a:	483b      	ldr	r0, [pc, #236]	; (8002578 <console_parse+0x10c>)
 800248c:	f7ff ff66 	bl	800235c <console_print>
		console_print(STRING_PROMPT);
 8002490:	483a      	ldr	r0, [pc, #232]	; (800257c <console_parse+0x110>)
 8002492:	f7ff ff63 	bl	800235c <console_print>
		return;
 8002496:	e065      	b.n	8002564 <console_parse+0xf8>
	}

	uint8_t command_found = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
	struct Command* curr = command_list_head;
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <console_parse+0x114>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60bb      	str	r3, [r7, #8]
	while (curr)
 80024a2:	e04b      	b.n	800253c <console_parse+0xd0>
	{
		if (strcmp(curr->name, console_buffer) == 0)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4931      	ldr	r1, [pc, #196]	; (8002570 <console_parse+0x104>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fd ff18 	bl	80002e0 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d13f      	bne.n	8002536 <console_parse+0xca>
		{
			uint8_t arg_index = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	71fb      	strb	r3, [r7, #7]
			uint8_t arg_start_index = strlen(console_buffer) + 1;
 80024ba:	482d      	ldr	r0, [pc, #180]	; (8002570 <console_parse+0x104>)
 80024bc:	f7fd ff70 	bl	80003a0 <strlen>
 80024c0:	4603      	mov	r3, r0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	71bb      	strb	r3, [r7, #6]
			while (arg_start_index < console_buffer_index && console_buffer[arg_start_index] != '\0' && arg_index < MAX_ARGS)
 80024c8:	e016      	b.n	80024f8 <console_parse+0x8c>
			{
				args[arg_index++] = &console_buffer[arg_start_index];
 80024ca:	79ba      	ldrb	r2, [r7, #6]
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	1c59      	adds	r1, r3, #1
 80024d0:	71f9      	strb	r1, [r7, #7]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <console_parse+0x104>)
 80024d6:	4413      	add	r3, r2
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <console_parse+0x118>)
 80024da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				arg_start_index += strlen(&console_buffer[arg_start_index]) + 1;
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <console_parse+0x104>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ff5b 	bl	80003a0 <strlen>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	4413      	add	r3, r2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	71bb      	strb	r3, [r7, #6]
			while (arg_start_index < console_buffer_index && console_buffer[arg_start_index] != '\0' && arg_index < MAX_ARGS)
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <console_parse+0x108>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	79ba      	ldrb	r2, [r7, #6]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d207      	bcs.n	8002512 <console_parse+0xa6>
 8002502:	79bb      	ldrb	r3, [r7, #6]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <console_parse+0x104>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <console_parse+0xa6>
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b07      	cmp	r3, #7
 8002510:	d9db      	bls.n	80024ca <console_parse+0x5e>
			}

			console_print(STRING_NEWLINE);
 8002512:	4819      	ldr	r0, [pc, #100]	; (8002578 <console_parse+0x10c>)
 8002514:	f7ff ff22 	bl	800235c <console_print>
			curr->func(args, arg_index);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	4611      	mov	r1, r2
 8002520:	4818      	ldr	r0, [pc, #96]	; (8002584 <console_parse+0x118>)
 8002522:	4798      	blx	r3
			console_print(STRING_NEWLINE);
 8002524:	4814      	ldr	r0, [pc, #80]	; (8002578 <console_parse+0x10c>)
 8002526:	f7ff ff19 	bl	800235c <console_print>
			console_print(STRING_PROMPT);
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <console_parse+0x110>)
 800252c:	f7ff ff16 	bl	800235c <console_print>
			command_found = 1;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
			break;
 8002534:	e005      	b.n	8002542 <console_parse+0xd6>
		}
		curr = curr->next;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	60bb      	str	r3, [r7, #8]
	while (curr)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1b0      	bne.n	80024a4 <console_parse+0x38>
	}


	// This action is taken if no matching command was found
	if (command_found == 0)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10d      	bne.n	8002564 <console_parse+0xf8>
	{
		console_print(STRING_NEWLINE);
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <console_parse+0x10c>)
 800254a:	f7ff ff07 	bl	800235c <console_print>
		console_print("Unrecognized command!");
 800254e:	480e      	ldr	r0, [pc, #56]	; (8002588 <console_parse+0x11c>)
 8002550:	f7ff ff04 	bl	800235c <console_print>
		console_print(STRING_NEWLINE);
 8002554:	4808      	ldr	r0, [pc, #32]	; (8002578 <console_parse+0x10c>)
 8002556:	f7ff ff01 	bl	800235c <console_print>
		console_print(STRING_PROMPT);
 800255a:	4808      	ldr	r0, [pc, #32]	; (800257c <console_parse+0x110>)
 800255c:	f7ff fefe 	bl	800235c <console_print>
 8002560:	e000      	b.n	8002564 <console_parse+0xf8>
		return;
 8002562:	bf00      	nop
	}
}
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	24000f6e 	.word	0x24000f6e
 8002570:	24000f2c 	.word	0x24000f2c
 8002574:	24000f6d 	.word	0x24000f6d
 8002578:	24000054 	.word	0x24000054
 800257c:	2400004c 	.word	0x2400004c
 8002580:	24000f70 	.word	0x24000f70
 8002584:	24000f74 	.word	0x24000f74
 8002588:	0801a620 	.word	0x0801a620

0800258c <console_exec>:

void console_exec(char* str)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	console_print(str);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fee1 	bl	800235c <console_print>

	strcpy(console_buffer, str);
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4816      	ldr	r0, [pc, #88]	; (80025f8 <console_exec+0x6c>)
 800259e:	f015 fa95 	bl	8017acc <strcpy>
	console_buffer_index = strlen(str);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fd fefc 	bl	80003a0 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <console_exec+0x70>)
 80025ae:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < console_buffer_index; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e00b      	b.n	80025ce <console_exec+0x42>
	{
		if (console_buffer[i] == ' ')
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <console_exec+0x6c>)
 80025ba:	5cd3      	ldrb	r3, [r2, r3]
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d103      	bne.n	80025c8 <console_exec+0x3c>
			console_buffer[i] = '\0';
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <console_exec+0x6c>)
 80025c4:	2100      	movs	r1, #0
 80025c6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < console_buffer_index; i++)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	3301      	adds	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <console_exec+0x70>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3ee      	bcc.n	80025b6 <console_exec+0x2a>
	}
	console_buffer[console_buffer_index] = '\0';
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <console_exec+0x70>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <console_exec+0x6c>)
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]
	console_parse();
 80025e4:	f7ff ff42 	bl	800246c <console_parse>
	console_buffer_index = 0;
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <console_exec+0x70>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000f2c 	.word	0x24000f2c
 80025fc:	24000f6d 	.word	0x24000f6d

08002600 <console_iteration>:

void console_iteration()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	if (!console_initialized)
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <console_iteration+0xb4>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04d      	beq.n	80026aa <console_iteration+0xaa>
		return;

	uint8_t next_char;
	while (serial_device->io_ops->read(serial_device, &next_char, 1))
 800260e:	e03f      	b.n	8002690 <console_iteration+0x90>
	{
		switch (next_char)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	2b7e      	cmp	r3, #126	; 0x7e
 8002614:	dc3c      	bgt.n	8002690 <console_iteration+0x90>
 8002616:	2b20      	cmp	r3, #32
 8002618:	da1d      	bge.n	8002656 <console_iteration+0x56>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d00d      	beq.n	800263a <console_iteration+0x3a>
 800261e:	2b0d      	cmp	r3, #13
 8002620:	d136      	bne.n	8002690 <console_iteration+0x90>
		{
		case KEY_ENTER:
			console_buffer[console_buffer_index] = '\0';
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <console_iteration+0xb8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <console_iteration+0xbc>)
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]
			console_parse();
 800262e:	f7ff ff1d 	bl	800246c <console_parse>
			console_buffer_index = 0;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <console_iteration+0xb8>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
			break;
 8002638:	e02a      	b.n	8002690 <console_iteration+0x90>
		case KEY_BACKSPACE:
			if (console_buffer_index != 0)
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <console_iteration+0xb8>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d026      	beq.n	8002690 <console_iteration+0x90>
			{
				console_buffer_index--;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <console_iteration+0xb8>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	3b01      	subs	r3, #1
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <console_iteration+0xb8>)
 800264c:	701a      	strb	r2, [r3, #0]

				console_print(STRING_BACKSPACE);
 800264e:	481c      	ldr	r0, [pc, #112]	; (80026c0 <console_iteration+0xc0>)
 8002650:	f7ff fe84 	bl	800235c <console_print>
			}
			break;
 8002654:	e01c      	b.n	8002690 <console_iteration+0x90>
		case 32 ... 126:
			if (console_buffer_index < CONSOLE_BUFFER_SIZE)
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <console_iteration+0xb8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b3f      	cmp	r3, #63	; 0x3f
 800265c:	d817      	bhi.n	800268e <console_iteration+0x8e>
			{
				console_buffer[console_buffer_index++] = (next_char == ' ' ? '\0' : next_char);
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b20      	cmp	r3, #32
 8002662:	d001      	beq.n	8002668 <console_iteration+0x68>
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	e000      	b.n	800266a <console_iteration+0x6a>
 8002668:	2200      	movs	r2, #0
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <console_iteration+0xb8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	b2c8      	uxtb	r0, r1
 8002672:	4911      	ldr	r1, [pc, #68]	; (80026b8 <console_iteration+0xb8>)
 8002674:	7008      	strb	r0, [r1, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <console_iteration+0xbc>)
 800267a:	545a      	strb	r2, [r3, r1]
				serial_device->io_ops->write(serial_device, &next_char, 1);
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <console_iteration+0xc4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <console_iteration+0xc4>)
 8002686:	6810      	ldr	r0, [r2, #0]
 8002688:	1df9      	adds	r1, r7, #7
 800268a:	2201      	movs	r2, #1
 800268c:	4798      	blx	r3
			}
			break;
 800268e:	bf00      	nop
	while (serial_device->io_ops->read(serial_device, &next_char, 1))
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <console_iteration+0xc4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <console_iteration+0xc4>)
 800269a:	6810      	ldr	r0, [r2, #0]
 800269c:	1df9      	adds	r1, r7, #7
 800269e:	2201      	movs	r2, #1
 80026a0:	4798      	blx	r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1b3      	bne.n	8002610 <console_iteration+0x10>
 80026a8:	e000      	b.n	80026ac <console_iteration+0xac>
		return;
 80026aa:	bf00      	nop
		}
	}
}
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	24000f6e 	.word	0x24000f6e
 80026b8:	24000f6d 	.word	0x24000f6d
 80026bc:	24000f2c 	.word	0x24000f2c
 80026c0:	24000050 	.word	0x24000050
 80026c4:	2400642c 	.word	0x2400642c

080026c8 <help>:
 */

#include "help.h"

void help(char** args, uint8_t argc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
	struct Command* curr = command_list_head;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <help+0x3c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]

	while (curr)
 80026da:	e00a      	b.n	80026f2 <help+0x2a>
	{
		console_print(curr->name);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fe3b 	bl	800235c <console_print>
		console_print(STRING_NEWLINE);
 80026e6:	4808      	ldr	r0, [pc, #32]	; (8002708 <help+0x40>)
 80026e8:	f7ff fe38 	bl	800235c <console_print>
		curr = curr->next;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60fb      	str	r3, [r7, #12]
	while (curr)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <help+0x14>
	}
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	24000f70 	.word	0x24000f70
 8002708:	24000054 	.word	0x24000054

0800270c <insblk>:
#include "block_list.h"

#include <stdlib.h>

void insblk(char** args, uint8_t argc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d809      	bhi.n	8002732 <insblk+0x26>
	{
		console_println("insblk <name> <channel>");
 800271e:	4817      	ldr	r0, [pc, #92]	; (800277c <insblk+0x70>)
 8002720:	f7ff fe3a 	bl	8002398 <console_println>
		console_println("name = name of the block to insert into the processing chain");
 8002724:	4816      	ldr	r0, [pc, #88]	; (8002780 <insblk+0x74>)
 8002726:	f7ff fe37 	bl	8002398 <console_println>
		console_println("channel = into which channel will be block be put");
 800272a:	4816      	ldr	r0, [pc, #88]	; (8002784 <insblk+0x78>)
 800272c:	f7ff fe34 	bl	8002398 <console_println>
		return;
 8002730:	e020      	b.n	8002774 <insblk+0x68>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fd1a 	bl	8002170 <blocklist_get_by_name>
 800273c:	60f8      	str	r0, [r7, #12]

	if (!block || block->type == BLOCK_TYPE_UNKNOWN)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <insblk+0x40>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d103      	bne.n	8002754 <insblk+0x48>
	{
		console_println("Invalid block type");
 800274c:	480e      	ldr	r0, [pc, #56]	; (8002788 <insblk+0x7c>)
 800274e:	f7ff fe23 	bl	8002398 <console_println>
		return;
 8002752:	e00f      	b.n	8002774 <insblk+0x68>
	}

	uint8_t channel = atoi(args[1]);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f013 fc91 	bl	8016082 <atoi>
 8002760:	4603      	mov	r3, r0
 8002762:	72fb      	strb	r3, [r7, #11]

	audio_engine_insblk(channel, block);
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fbe1 	bl	8001f30 <audio_engine_insblk>
	console_println("Block inserted");
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <insblk+0x80>)
 8002770:	f7ff fe12 	bl	8002398 <console_println>
}
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	0801a638 	.word	0x0801a638
 8002780:	0801a650 	.word	0x0801a650
 8002784:	0801a690 	.word	0x0801a690
 8002788:	0801a6c4 	.word	0x0801a6c4
 800278c:	0801a6d8 	.word	0x0801a6d8

08002790 <lsblk>:
#include "delay_line.h"

#include <stdio.h>

void lsblk(char** args, uint8_t argc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0a6      	sub	sp, #152	; 0x98
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 800279c:	2300      	movs	r3, #0
 800279e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80027a2:	e0b3      	b.n	800290c <lsblk+0x17c>
	{
		sprintf(print_buf, "===== Block %u =====", i);
 80027a4:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	495c      	ldr	r1, [pc, #368]	; (8002920 <lsblk+0x190>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f015 f88a 	bl	80178c8 <siprintf>
		console_println(print_buf);
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fded 	bl	8002398 <console_println>
		if (block_list[i].type == BLOCK_TYPE_DELAYLINE)
 80027be:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80027c2:	4958      	ldr	r1, [pc, #352]	; (8002924 <lsblk+0x194>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	440b      	add	r3, r1
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 8084 	bne.w	80028de <lsblk+0x14e>
		{
			console_println("Type: DELAY_LINE");
 80027d6:	4854      	ldr	r0, [pc, #336]	; (8002928 <lsblk+0x198>)
 80027d8:	f7ff fdde 	bl	8002398 <console_println>
			sprintf(print_buf, "Name: %s", block_list[i].name);
 80027dc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <lsblk+0x194>)
 80027ea:	4413      	add	r3, r2
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	494e      	ldr	r1, [pc, #312]	; (800292c <lsblk+0x19c>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f015 f867 	bl	80178c8 <siprintf>
			console_println(print_buf);
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fdca 	bl	8002398 <console_println>
			struct DelayLine* delay_line = block_list[i].dsp_struct_ptr;
 8002804:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8002808:	4946      	ldr	r1, [pc, #280]	; (8002924 <lsblk+0x194>)
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	440b      	add	r3, r1
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			sprintf(print_buf, "Max Delay: %u", delay_line->max_delay);
 800281c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	4942      	ldr	r1, [pc, #264]	; (8002930 <lsblk+0x1a0>)
 8002828:	4618      	mov	r0, r3
 800282a:	f015 f84d 	bl	80178c8 <siprintf>
			console_println(print_buf);
 800282e:	f107 0308 	add.w	r3, r7, #8
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fdb0 	bl	8002398 <console_println>
			sprintf(print_buf, "Feedback Coeff: %f", delay_line->fb_coeff);
 8002838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800283c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002844:	f107 0008 	add.w	r0, r7, #8
 8002848:	ec53 2b17 	vmov	r2, r3, d7
 800284c:	4939      	ldr	r1, [pc, #228]	; (8002934 <lsblk+0x1a4>)
 800284e:	f015 f83b 	bl	80178c8 <siprintf>
			console_println(print_buf);
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fd9e 	bl	8002398 <console_println>

			for (uint8_t i = 0; i < delay_line->num_taps; i++)
 800285c:	2300      	movs	r3, #0
 800285e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8002862:	e034      	b.n	80028ce <lsblk+0x13e>
			{
				sprintf(print_buf, "Tap %u Delay: %i", i, delay_line->taps[i]);
 8002864:	f897 108e 	ldrb.w	r1, [r7, #142]	; 0x8e
 8002868:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800286c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f107 0008 	add.w	r0, r7, #8
 800287a:	460a      	mov	r2, r1
 800287c:	492e      	ldr	r1, [pc, #184]	; (8002938 <lsblk+0x1a8>)
 800287e:	f015 f823 	bl	80178c8 <siprintf>
				console_println(print_buf);
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fd86 	bl	8002398 <console_println>
				sprintf(print_buf, "Tap %u Coeff: %f", i, delay_line->coeffs[i]);
 800288c:	f897 108e 	ldrb.w	r1, [r7, #142]	; 0x8e
 8002890:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8002894:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002898:	3308      	adds	r3, #8
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	ed8d 7b00 	vstr	d7, [sp]
 80028b0:	460a      	mov	r2, r1
 80028b2:	4922      	ldr	r1, [pc, #136]	; (800293c <lsblk+0x1ac>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f015 f807 	bl	80178c8 <siprintf>
				console_println(print_buf);
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fd6a 	bl	8002398 <console_println>
			for (uint8_t i = 0; i < delay_line->num_taps; i++)
 80028c4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80028c8:	3301      	adds	r3, #1
 80028ca:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80028ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3c3      	bcc.n	8002864 <lsblk+0xd4>
 80028dc:	e011      	b.n	8002902 <lsblk+0x172>
			}
		}
		else if (block_list[i].type == BLOCK_TYPE_MODULATOR)
 80028de:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80028e2:	4910      	ldr	r1, [pc, #64]	; (8002924 <lsblk+0x194>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	440b      	add	r3, r1
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d103      	bne.n	80028fc <lsblk+0x16c>
		{
			console_println("Type: MODULATOR");
 80028f4:	4812      	ldr	r0, [pc, #72]	; (8002940 <lsblk+0x1b0>)
 80028f6:	f7ff fd4f 	bl	8002398 <console_println>
 80028fa:	e002      	b.n	8002902 <lsblk+0x172>
		}
		else
			console_println("Type: UNKNOWN");
 80028fc:	4811      	ldr	r0, [pc, #68]	; (8002944 <lsblk+0x1b4>)
 80028fe:	f7ff fd4b 	bl	8002398 <console_println>
	for (uint8_t i = 0; i < MAX_DSP_BLOCKS; i++)
 8002902:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002906:	3301      	adds	r3, #1
 8002908:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800290c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002910:	2b0f      	cmp	r3, #15
 8002912:	f67f af47 	bls.w	80027a4 <lsblk+0x14>
	}
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	3790      	adds	r7, #144	; 0x90
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0801a6e8 	.word	0x0801a6e8
 8002924:	24000c2c 	.word	0x24000c2c
 8002928:	0801a700 	.word	0x0801a700
 800292c:	0801a714 	.word	0x0801a714
 8002930:	0801a720 	.word	0x0801a720
 8002934:	0801a730 	.word	0x0801a730
 8002938:	0801a744 	.word	0x0801a744
 800293c:	0801a758 	.word	0x0801a758
 8002940:	0801a76c 	.word	0x0801a76c
 8002944:	0801a77c 	.word	0x0801a77c

08002948 <lsdrv>:

#include "driver_manager.h"
#include "console.h"

void lsdrv(char** args, uint8_t argc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0a4      	sub	sp, #144	; 0x90
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];

	for (uint8_t i = 0; i < registered_drivers; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800295a:	e022      	b.n	80029a2 <lsdrv+0x5a>
	{
		sprintf(print_buf, "===== DRIVER %u =====");
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	492b      	ldr	r1, [pc, #172]	; (8002a10 <lsdrv+0xc8>)
 8002962:	4618      	mov	r0, r3
 8002964:	f014 ffb0 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fd13 	bl	8002398 <console_println>
		sprintf(print_buf, "Name: %s", driver_list[i]->name);
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <lsdrv+0xcc>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4924      	ldr	r1, [pc, #144]	; (8002a18 <lsdrv+0xd0>)
 8002988:	4618      	mov	r0, r3
 800298a:	f014 ff9d 	bl	80178c8 <siprintf>
		console_println(print_buf);
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fd00 	bl	8002398 <console_println>
	for (uint8_t i = 0; i < registered_drivers; i++)
 8002998:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800299c:	3301      	adds	r3, #1
 800299e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80029a2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <lsdrv+0xd4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3d6      	bcc.n	800295c <lsdrv+0x14>
	}

	console_println("");
 80029ae:	481c      	ldr	r0, [pc, #112]	; (8002a20 <lsdrv+0xd8>)
 80029b0:	f7ff fcf2 	bl	8002398 <console_println>
	sprintf(print_buf, "Serial Driver: %s", serial_device->name);
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <lsdrv+0xdc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	491a      	ldr	r1, [pc, #104]	; (8002a28 <lsdrv+0xe0>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f014 ff81 	bl	80178c8 <siprintf>
	console_println(print_buf);
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fce4 	bl	8002398 <console_println>
	sprintf(print_buf, "Audio Driver: %s", audio_device->name);
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <lsdrv+0xe4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	4915      	ldr	r1, [pc, #84]	; (8002a30 <lsdrv+0xe8>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f014 ff73 	bl	80178c8 <siprintf>
	console_println(print_buf);
 80029e2:	f107 030c 	add.w	r3, r7, #12
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fcd6 	bl	8002398 <console_println>
	sprintf(print_buf, "USB Driver: %s", usb_device->name);
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <lsdrv+0xec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	4910      	ldr	r1, [pc, #64]	; (8002a38 <lsdrv+0xf0>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f014 ff65 	bl	80178c8 <siprintf>
	console_println(print_buf);
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fcc8 	bl	8002398 <console_println>
}
 8002a08:	bf00      	nop
 8002a0a:	3790      	adds	r7, #144	; 0x90
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0801a78c 	.word	0x0801a78c
 8002a14:	240000c0 	.word	0x240000c0
 8002a18:	0801a7a4 	.word	0x0801a7a4
 8002a1c:	24006404 	.word	0x24006404
 8002a20:	0801a7b0 	.word	0x0801a7b0
 8002a24:	2400642c 	.word	0x2400642c
 8002a28:	0801a7b4 	.word	0x0801a7b4
 8002a2c:	24006428 	.word	0x24006428
 8002a30:	0801a7c8 	.word	0x0801a7c8
 8002a34:	24006430 	.word	0x24006430
 8002a38:	0801a7dc 	.word	0x0801a7dc

08002a3c <mkdelay>:
#include "block_list.h"

#include <stdlib.h>

void mkdelay(char** args, uint8_t argc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d80c      	bhi.n	8002a68 <mkdelay+0x2c>
	{
		console_println("Usage: delayline_create <name> <num_taps> <max_delay>");
 8002a4e:	4827      	ldr	r0, [pc, #156]	; (8002aec <mkdelay+0xb0>)
 8002a50:	f7ff fca2 	bl	8002398 <console_println>
		console_println("name = string which is used to reference this block");
 8002a54:	4826      	ldr	r0, [pc, #152]	; (8002af0 <mkdelay+0xb4>)
 8002a56:	f7ff fc9f 	bl	8002398 <console_println>
		console_println("num_taps = maximum number of taps for this delay line");
 8002a5a:	4826      	ldr	r0, [pc, #152]	; (8002af4 <mkdelay+0xb8>)
 8002a5c:	f7ff fc9c 	bl	8002398 <console_println>
		console_println("max_delay = maximum possible delay in number of samples");
 8002a60:	4825      	ldr	r0, [pc, #148]	; (8002af8 <mkdelay+0xbc>)
 8002a62:	f7ff fc99 	bl	8002398 <console_println>
		return;
 8002a66:	e03d      	b.n	8002ae4 <mkdelay+0xa8>
	}

	uint8_t num_taps = atoi(args[1]);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f013 fb07 	bl	8016082 <atoi>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
	int32_t max_delay = atoi(args[2]);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f013 faff 	bl	8016082 <atoi>
 8002a84:	6138      	str	r0, [r7, #16]

	struct DelayLine* new_delayline = malloc(sizeof(struct DelayLine));
 8002a86:	2058      	movs	r0, #88	; 0x58
 8002a88:	f013 fb00 	bl	801608c <malloc>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]

	int8_t err = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	72fb      	strb	r3, [r7, #11]
	err = delayline_init(new_delayline,
 8002a94:	7df9      	ldrb	r1, [r7, #23]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa46 	bl	8002f2c <delayline_init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	72fb      	strb	r3, [r7, #11]
						 num_taps,
					 	 max_delay,
						 SAMPLES_PER_BLOCK);

	if (err)
 8002aa4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <mkdelay+0x7e>
	{
		delayline_destroy(new_delayline);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 faaa 	bl	8003006 <delayline_destroy>
		console_println("Failed to create DelayLine block");
 8002ab2:	4812      	ldr	r0, [pc, #72]	; (8002afc <mkdelay+0xc0>)
 8002ab4:	f7ff fc70 	bl	8002398 <console_println>
		return;
 8002ab8:	e014      	b.n	8002ae4 <mkdelay+0xa8>
	}

	if (blocklist_insert(new_delayline, args[0], delayline_process, BLOCK_TYPE_DELAYLINE) == -1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <mkdelay+0xc4>)
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fab4 	bl	8002030 <blocklist_insert>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d106      	bne.n	8002ade <mkdelay+0xa2>
	{
		console_println("Failed inserting the DelayLine block into the block list");
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <mkdelay+0xc8>)
 8002ad2:	f7ff fc61 	bl	8002398 <console_println>
		delayline_destroy(new_delayline);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa95 	bl	8003006 <delayline_destroy>
		return;
 8002adc:	e002      	b.n	8002ae4 <mkdelay+0xa8>
	}
	console_println("DelayLine block created");
 8002ade:	480a      	ldr	r0, [pc, #40]	; (8002b08 <mkdelay+0xcc>)
 8002ae0:	f7ff fc5a 	bl	8002398 <console_println>
}
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	0801a7ec 	.word	0x0801a7ec
 8002af0:	0801a824 	.word	0x0801a824
 8002af4:	0801a858 	.word	0x0801a858
 8002af8:	0801a890 	.word	0x0801a890
 8002afc:	0801a8c8 	.word	0x0801a8c8
 8002b00:	08003121 	.word	0x08003121
 8002b04:	0801a8ec 	.word	0x0801a8ec
 8002b08:	0801a928 	.word	0x0801a928

08002b0c <delayline_tap_delay>:

void delayline_tap_delay(char** args, uint8_t argc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
	if (argc < 3)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d80c      	bhi.n	8002b38 <delayline_tap_delay+0x2c>
	{
		console_println("Usage: delayline_tap_delay <name> <tap_index> <tap_delay>");
 8002b1e:	4821      	ldr	r0, [pc, #132]	; (8002ba4 <delayline_tap_delay+0x98>)
 8002b20:	f7ff fc3a 	bl	8002398 <console_println>
		console_println("name = string which is used to reference a block");
 8002b24:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <delayline_tap_delay+0x9c>)
 8002b26:	f7ff fc37 	bl	8002398 <console_println>
		console_println("tap_index = which tap will the command affect");
 8002b2a:	4820      	ldr	r0, [pc, #128]	; (8002bac <delayline_tap_delay+0xa0>)
 8002b2c:	f7ff fc34 	bl	8002398 <console_println>
		console_println("tap_delay = value to which the delay will be set");
 8002b30:	481f      	ldr	r0, [pc, #124]	; (8002bb0 <delayline_tap_delay+0xa4>)
 8002b32:	f7ff fc31 	bl	8002398 <console_println>
		return;
 8002b36:	e032      	b.n	8002b9e <delayline_tap_delay+0x92>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fb17 	bl	8002170 <blocklist_get_by_name>
 8002b42:	6178      	str	r0, [r7, #20]
	if (!block || block->type != BLOCK_TYPE_DELAYLINE)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <delayline_tap_delay+0x46>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <delayline_tap_delay+0x4e>
	{
		console_println("Invalid block type");
 8002b52:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <delayline_tap_delay+0xa8>)
 8002b54:	f7ff fc20 	bl	8002398 <console_println>
		return;
 8002b58:	e021      	b.n	8002b9e <delayline_tap_delay+0x92>
	}

	uint16_t tap_index = atoi(args[1]);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f013 fa8e 	bl	8016082 <atoi>
 8002b66:	4603      	mov	r3, r0
 8002b68:	827b      	strh	r3, [r7, #18]
	int32_t tap_delay = atoi(args[2]);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f013 fa86 	bl	8016082 <atoi>
 8002b76:	60f8      	str	r0, [r7, #12]

	int8_t err = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	72fb      	strb	r3, [r7, #11]
	err = delayline_set_tap_delay(block->dsp_struct_ptr, tap_index, tap_delay);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	8a7a      	ldrh	r2, [r7, #18]
 8002b82:	b2d1      	uxtb	r1, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fa4e 	bl	8003028 <delayline_set_tap_delay>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	72fb      	strb	r3, [r7, #11]

	if (err)
 8002b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <delayline_tap_delay+0x92>
	{
		console_println("Failed to set given tap delay");
 8002b98:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <delayline_tap_delay+0xac>)
 8002b9a:	f7ff fbfd 	bl	8002398 <console_println>
	}
}
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	0801a940 	.word	0x0801a940
 8002ba8:	0801a97c 	.word	0x0801a97c
 8002bac:	0801a9b0 	.word	0x0801a9b0
 8002bb0:	0801a9e0 	.word	0x0801a9e0
 8002bb4:	0801aa14 	.word	0x0801aa14
 8002bb8:	0801aa28 	.word	0x0801aa28

08002bbc <delayline_tap_volume>:

void delayline_tap_volume(char** args, uint8_t argc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
	if (argc < 3)
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d80c      	bhi.n	8002be8 <delayline_tap_volume+0x2c>
	{
		console_println("Usage: delayline_tap_volume <name> <tap_index> <volume>");
 8002bce:	4825      	ldr	r0, [pc, #148]	; (8002c64 <delayline_tap_volume+0xa8>)
 8002bd0:	f7ff fbe2 	bl	8002398 <console_println>
		console_println("name = string which is used to reference a block");
 8002bd4:	4824      	ldr	r0, [pc, #144]	; (8002c68 <delayline_tap_volume+0xac>)
 8002bd6:	f7ff fbdf 	bl	8002398 <console_println>
		console_println("tap_index = which tap will the command affect");
 8002bda:	4824      	ldr	r0, [pc, #144]	; (8002c6c <delayline_tap_volume+0xb0>)
 8002bdc:	f7ff fbdc 	bl	8002398 <console_println>
		console_println("volume = volume of the tap");
 8002be0:	4823      	ldr	r0, [pc, #140]	; (8002c70 <delayline_tap_volume+0xb4>)
 8002be2:	f7ff fbd9 	bl	8002398 <console_println>
		return;
 8002be6:	e039      	b.n	8002c5c <delayline_tap_volume+0xa0>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fabf 	bl	8002170 <blocklist_get_by_name>
 8002bf2:	6178      	str	r0, [r7, #20]
	if (!block || block->type != BLOCK_TYPE_DELAYLINE)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <delayline_tap_volume+0x46>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <delayline_tap_volume+0x4e>
	{
		console_println("Invalid block type");
 8002c02:	481c      	ldr	r0, [pc, #112]	; (8002c74 <delayline_tap_volume+0xb8>)
 8002c04:	f7ff fbc8 	bl	8002398 <console_println>
		return;
 8002c08:	e028      	b.n	8002c5c <delayline_tap_volume+0xa0>
	}

	uint16_t tap_index = atoi(args[1]);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f013 fa36 	bl	8016082 <atoi>
 8002c16:	4603      	mov	r3, r0
 8002c18:	827b      	strh	r3, [r7, #18]
	float32_t tap_volume = atof(args[2]);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f013 fa2b 	bl	801607c <atof>
 8002c26:	eeb0 7b40 	vmov.f64	d7, d0
 8002c2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c2e:	edc7 7a03 	vstr	s15, [r7, #12]

	int8_t err = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	72fb      	strb	r3, [r7, #11]
	err = delayline_set_tap_volume(block->dsp_struct_ptr, tap_index, tap_volume);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	8a7a      	ldrh	r2, [r7, #18]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fa16 	bl	8003076 <delayline_set_tap_volume>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	72fb      	strb	r3, [r7, #11]

	if (err)
 8002c4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <delayline_tap_volume+0xa0>
	{
		console_println("Failed to set given tap volume");
 8002c56:	4808      	ldr	r0, [pc, #32]	; (8002c78 <delayline_tap_volume+0xbc>)
 8002c58:	f7ff fb9e 	bl	8002398 <console_println>
	}
}
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	0801aa48 	.word	0x0801aa48
 8002c68:	0801a97c 	.word	0x0801a97c
 8002c6c:	0801a9b0 	.word	0x0801a9b0
 8002c70:	0801aa80 	.word	0x0801aa80
 8002c74:	0801aa14 	.word	0x0801aa14
 8002c78:	0801aa9c 	.word	0x0801aa9c

08002c7c <delayline_fb_volume>:

void delayline_fb_volume(char** args, uint8_t argc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
	if (argc < 2)
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d809      	bhi.n	8002ca2 <delayline_fb_volume+0x26>
	{
		console_println("Usage: delayline_tap_fb <name> <fb_volume>");
 8002c8e:	481e      	ldr	r0, [pc, #120]	; (8002d08 <delayline_fb_volume+0x8c>)
 8002c90:	f7ff fb82 	bl	8002398 <console_println>
		console_println("name = string which is used to reference a block");
 8002c94:	481d      	ldr	r0, [pc, #116]	; (8002d0c <delayline_fb_volume+0x90>)
 8002c96:	f7ff fb7f 	bl	8002398 <console_println>
		console_println("fb_volume = sets feedback volume");
 8002c9a:	481d      	ldr	r0, [pc, #116]	; (8002d10 <delayline_fb_volume+0x94>)
 8002c9c:	f7ff fb7c 	bl	8002398 <console_println>
		return;
 8002ca0:	e02e      	b.n	8002d00 <delayline_fb_volume+0x84>
	}

	struct Block* block = blocklist_get_by_name(args[0]);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fa62 	bl	8002170 <blocklist_get_by_name>
 8002cac:	6178      	str	r0, [r7, #20]
	if (!block || block->type != BLOCK_TYPE_DELAYLINE)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <delayline_fb_volume+0x40>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <delayline_fb_volume+0x48>
	{
		console_println("Invalid block type");
 8002cbc:	4815      	ldr	r0, [pc, #84]	; (8002d14 <delayline_fb_volume+0x98>)
 8002cbe:	f7ff fb6b 	bl	8002398 <console_println>
		return;
 8002cc2:	e01d      	b.n	8002d00 <delayline_fb_volume+0x84>
	}

	float32_t fb_volume = atof(args[1]);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f013 f9d6 	bl	801607c <atof>
 8002cd0:	eeb0 7b40 	vmov.f64	d7, d0
 8002cd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cd8:	edc7 7a04 	vstr	s15, [r7, #16]

	int8_t err = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
	err = delayline_set_fb_volume(block->dsp_struct_ptr, fb_volume);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 f9f6 	bl	80030da <delayline_set_fb_volume>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]

	if (err)
 8002cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <delayline_fb_volume+0x84>
	{
		console_println("Failed to set given feedback volume");
 8002cfa:	4807      	ldr	r0, [pc, #28]	; (8002d18 <delayline_fb_volume+0x9c>)
 8002cfc:	f7ff fb4c 	bl	8002398 <console_println>
	}
}
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	0801aabc 	.word	0x0801aabc
 8002d0c:	0801a97c 	.word	0x0801a97c
 8002d10:	0801aae8 	.word	0x0801aae8
 8002d14:	0801aa14 	.word	0x0801aa14
 8002d18:	0801ab0c 	.word	0x0801ab0c

08002d1c <stat>:
#include "console.h"
#include "logger.h"
#include "arm_math.h"

void stat(char** args, uint8_t argc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0a6      	sub	sp, #152	; 0x98
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	char print_buf[128];
	uint32_t avg_time_int;
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002d2e:	e09c      	b.n	8002e6a <stat+0x14e>
	{
		sprintf(print_buf, "===== TIMER %u =====", i);
 8002d30:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4971      	ldr	r1, [pc, #452]	; (8002f00 <stat+0x1e4>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f014 fdc4 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002d40:	f107 0310 	add.w	r3, r7, #16
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fb27 	bl	8002398 <console_println>

		sprintf(print_buf, "Name: %s", timer_list[i].name);
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <stat+0x1e8>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d52:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4969      	ldr	r1, [pc, #420]	; (8002f08 <stat+0x1ec>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f014 fdaf 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002d6a:	f107 0310 	add.w	r3, r7, #16
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fb12 	bl	8002398 <console_println>

		logger_log_timer_avg(i, &avg_time_int);
 8002d74:	f107 020c 	add.w	r2, r7, #12
 8002d78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fbc6 	bl	8004510 <logger_log_timer_avg>
		float32_t temp = avg_time_int * 5 / 1000.f;
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d94:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002f0c <stat+0x1f0>
 8002d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d9c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Avg: %f us", temp);
 8002da0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002da4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da8:	f107 0010 	add.w	r0, r7, #16
 8002dac:	ec53 2b17 	vmov	r2, r3, d7
 8002db0:	4957      	ldr	r1, [pc, #348]	; (8002f10 <stat+0x1f4>)
 8002db2:	f014 fd89 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff faec 	bl	8002398 <console_println>

		temp = timer_list[i].worst_time * 5 / 1000.f;
 8002dc0:	4b50      	ldr	r3, [pc, #320]	; (8002f04 <stat+0x1e8>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002dc8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de4:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002f0c <stat+0x1f0>
 8002de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dec:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Worst: %f us", temp);
 8002df0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002df4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002df8:	f107 0010 	add.w	r0, r7, #16
 8002dfc:	ec53 2b17 	vmov	r2, r3, d7
 8002e00:	4944      	ldr	r1, [pc, #272]	; (8002f14 <stat+0x1f8>)
 8002e02:	f014 fd61 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fac4 	bl	8002398 <console_println>

		temp = timer_list[i].best_time * 5 / 1000.f;
 8002e10:	4b3c      	ldr	r3, [pc, #240]	; (8002f04 <stat+0x1e8>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e18:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e34:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002f0c <stat+0x1f0>
 8002e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e3c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sprintf(print_buf, "Best: %f us", temp);
 8002e40:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e48:	f107 0010 	add.w	r0, r7, #16
 8002e4c:	ec53 2b17 	vmov	r2, r3, d7
 8002e50:	4931      	ldr	r1, [pc, #196]	; (8002f18 <stat+0x1fc>)
 8002e52:	f014 fd39 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002e56:	f107 0310 	add.w	r3, r7, #16
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fa9c 	bl	8002398 <console_println>
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 8002e60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e64:	3301      	adds	r3, #1
 8002e66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002e6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	f67f af5e 	bls.w	8002d30 <stat+0x14>
	}

	console_println("");
 8002e74:	4829      	ldr	r0, [pc, #164]	; (8002f1c <stat+0x200>)
 8002e76:	f7ff fa8f 	bl	8002398 <console_println>

	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002e80:	e035      	b.n	8002eee <stat+0x1d2>
	{
		sprintf(print_buf, "===== EVENTS %u =====", i);
 8002e82:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	4925      	ldr	r1, [pc, #148]	; (8002f20 <stat+0x204>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f014 fd1b 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fa7e 	bl	8002398 <console_println>

		sprintf(print_buf, "Name: %s", event_list[i].name);
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <stat+0x208>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4916      	ldr	r1, [pc, #88]	; (8002f08 <stat+0x1ec>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f014 fd09 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fa6c 	bl	8002398 <console_println>

		sprintf(print_buf, "Counter: %u", event_list[i].evnt_count);
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <stat+0x208>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4413      	add	r3, r2
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	4915      	ldr	r1, [pc, #84]	; (8002f28 <stat+0x20c>)
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f014 fcf7 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa5a 	bl	8002398 <console_println>
	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 8002ee4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002eee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002ef2:	2b07      	cmp	r3, #7
 8002ef4:	d9c5      	bls.n	8002e82 <stat+0x166>
	}
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	3798      	adds	r7, #152	; 0x98
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	0801ab30 	.word	0x0801ab30
 8002f04:	240000c8 	.word	0x240000c8
 8002f08:	0801ab48 	.word	0x0801ab48
 8002f0c:	447a0000 	.word	0x447a0000
 8002f10:	0801ab54 	.word	0x0801ab54
 8002f14:	0801ab60 	.word	0x0801ab60
 8002f18:	0801ab70 	.word	0x0801ab70
 8002f1c:	0801ab7c 	.word	0x0801ab7c
 8002f20:	0801ab80 	.word	0x0801ab80
 8002f24:	240000c4 	.word	0x240000c4
 8002f28:	0801ab98 	.word	0x0801ab98

08002f2c <delayline_init>:

int8_t delayline_init(struct DelayLine* delay_line,
					  uint8_t num_taps,
					  int32_t max_delay,
					  int32_t block_size)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	72fb      	strb	r3, [r7, #11]
	if (!delay_line)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <delayline_init+0x1c>
		return -EINVAL;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e05a      	b.n	8002ffe <delayline_init+0xd2>

	if (num_taps > MAX_TAPS)
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d902      	bls.n	8002f54 <delayline_init+0x28>
		return -EINVAL;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	e054      	b.n	8002ffe <delayline_init+0xd2>

	if (max_delay < 0 || max_delay > MAX_BUF_SIZE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db03      	blt.n	8002f62 <delayline_init+0x36>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f60:	dd02      	ble.n	8002f68 <delayline_init+0x3c>
		return -EINVAL;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	e04a      	b.n	8002ffe <delayline_init+0xd2>

	if (block_size < 0 || block_size > MAX_BUF_SIZE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db03      	blt.n	8002f76 <delayline_init+0x4a>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f74:	dd02      	ble.n	8002f7c <delayline_init+0x50>
		return -EINVAL;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e040      	b.n	8002ffe <delayline_init+0xd2>

	delay_line->num_taps = num_taps;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	7afa      	ldrb	r2, [r7, #11]
 8002f80:	701a      	strb	r2, [r3, #0]
	delay_line->max_delay = max_delay;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	64da      	str	r2, [r3, #76]	; 0x4c
	delay_line->buf_size = max_delay > block_size ? max_delay : max_delay + block_size;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dc03      	bgt.n	8002f98 <delayline_init+0x6c>
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	e000      	b.n	8002f9a <delayline_init+0x6e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6493      	str	r3, [r2, #72]	; 0x48
	delay_line->head_index = 0;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
	delay_line->fb_coeff = 0.f;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
	delay_line->buffer = malloc(delay_line->buf_size * sizeof(float32_t));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f013 f86a 	bl	801608c <malloc>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	651a      	str	r2, [r3, #80]	; 0x50

	if (!delay_line->buffer)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <delayline_init+0xa2>
	{
		return -ENOMEM;
 8002fc8:	f06f 0301 	mvn.w	r3, #1
 8002fcc:	e017      	b.n	8002ffe <delayline_init+0xd2>
	}

	memset(delay_line->buffer, 0, sizeof(float32_t) * delay_line->buf_size);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f014 fcd7 	bl	801798e <memset>
	memset(delay_line->coeffs, 0, sizeof(float32_t) * MAX_TAPS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f014 fcd0 	bl	801798e <memset>
	memset(delay_line->taps, 0, sizeof(int32_t) * MAX_TAPS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f014 fcc9 	bl	801798e <memset>

	return EOK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <delayline_destroy>:

int8_t delayline_destroy(struct DelayLine* delay_line)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
	free(delay_line->buffer);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	4618      	mov	r0, r3
 8003014:	f013 f842 	bl	801609c <free>
	free(delay_line);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f013 f83f 	bl	801609c <free>
}
 800301e:	bf00      	nop
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <delayline_set_tap_delay>:

int8_t delayline_set_tap_delay(struct DelayLine* delay_line, uint8_t tap_index, int32_t tap_delay)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	460b      	mov	r3, r1
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	72fb      	strb	r3, [r7, #11]
	if (tap_delay > delay_line->max_delay || tap_delay < 0)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dc02      	bgt.n	8003046 <delayline_set_tap_delay+0x1e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da02      	bge.n	800304c <delayline_set_tap_delay+0x24>
		return -EINVAL;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e00e      	b.n	800306a <delayline_set_tap_delay+0x42>

	if (tap_index >= delay_line->num_taps)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	7afa      	ldrb	r2, [r7, #11]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <delayline_set_tap_delay+0x34>
		return -EINVAL;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e006      	b.n	800306a <delayline_set_tap_delay+0x42>

	delay_line->taps[tap_index] = tap_delay;
 800305c:	7afb      	ldrb	r3, [r7, #11]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	605a      	str	r2, [r3, #4]
	return EOK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <delayline_set_tap_volume>:

int8_t delayline_set_tap_volume(struct DelayLine* delay_line, uint8_t tap_index, float tap_volume)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	460b      	mov	r3, r1
 8003080:	ed87 0a01 	vstr	s0, [r7, #4]
 8003084:	72fb      	strb	r3, [r7, #11]
	if (tap_index >= delay_line->num_taps)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	7afa      	ldrb	r2, [r7, #11]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <delayline_set_tap_volume+0x20>
		return -EINVAL;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	e01b      	b.n	80030ce <delayline_set_tap_volume+0x58>

	if (tap_volume > 1.f || tap_volume < 0.f)
 8003096:	edd7 7a01 	vldr	s15, [r7, #4]
 800309a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800309e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	dc06      	bgt.n	80030b6 <delayline_set_tap_volume+0x40>
 80030a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b4:	d502      	bpl.n	80030bc <delayline_set_tap_volume+0x46>
		return -EINVAL;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	e008      	b.n	80030ce <delayline_set_tap_volume+0x58>

	delay_line->coeffs[tap_index] = tap_volume;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	3308      	adds	r3, #8
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3304      	adds	r3, #4
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
	return EOK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <delayline_set_fb_volume>:

int8_t delayline_set_fb_volume(struct DelayLine* delay_line, float32_t fb_coeff)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	ed87 0a00 	vstr	s0, [r7]
	if (fb_coeff > 1.f || fb_coeff < 0.f)
 80030e6:	edd7 7a00 	vldr	s15, [r7]
 80030ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	dc06      	bgt.n	8003106 <delayline_set_fb_volume+0x2c>
 80030f8:	edd7 7a00 	vldr	s15, [r7]
 80030fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	d502      	bpl.n	800310c <delayline_set_fb_volume+0x32>
		return -EINVAL;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e003      	b.n	8003114 <delayline_set_fb_volume+0x3a>

	delay_line->fb_coeff = fb_coeff;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
	return EOK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <delayline_process>:

int8_t delayline_process(struct DelayLine* delay_line, float32_t* buf, int32_t block_size)
{
 8003120:	b480      	push	{r7}
 8003122:	b08b      	sub	sp, #44	; 0x2c
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	int32_t fb_index = -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
	if (delay_line->max_delay < delay_line->buf_size)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313a:	429a      	cmp	r2, r3
 800313c:	da0e      	bge.n	800315c <delayline_process+0x3c>
	{
		fb_index = delay_line->head_index - delay_line->max_delay;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
		if (fb_index < 0)
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	da08      	bge.n	8003162 <delayline_process+0x42>
			fb_index += delay_line->buf_size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003156:	4413      	add	r3, r2
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e002      	b.n	8003162 <delayline_process+0x42>
	}
	else
		fb_index = delay_line->head_index;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	627b      	str	r3, [r7, #36]	; 0x24


	for (int32_t i = 0; i < block_size; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	e03a      	b.n	80031de <delayline_process+0xbe>
	{
		delay_line->buffer[delay_line->head_index++] = buf[i] + delay_line->buffer[fb_index++] * delay_line->fb_coeff;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4413      	add	r3, r2
 8003170:	ed93 7a00 	vldr	s14, [r3]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	6279      	str	r1, [r7, #36]	; 0x24
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	edd3 6a00 	vldr	s13, [r3]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800318c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	1c58      	adds	r0, r3, #1
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	6548      	str	r0, [r1, #84]	; 0x54
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	edc3 7a00 	vstr	s15, [r3]
		buf[i] = 0.f;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

		if (delay_line->head_index == delay_line->buf_size)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d102      	bne.n	80031ca <delayline_process+0xaa>
			delay_line->head_index = 0;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
		if (fb_index == delay_line->buf_size)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d101      	bne.n	80031d8 <delayline_process+0xb8>
			fb_index = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int32_t i = 0; i < block_size; i++)
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	3301      	adds	r3, #1
 80031dc:	623b      	str	r3, [r7, #32]
 80031de:	6a3a      	ldr	r2, [r7, #32]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dbc0      	blt.n	8003168 <delayline_process+0x48>
	}

	for (uint8_t j = 0; j < delay_line->num_taps; j++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e047      	b.n	800327c <delayline_process+0x15c>
	{
		int32_t tap_index = delay_line->head_index - block_size - delay_line->taps[j];
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	61bb      	str	r3, [r7, #24]
		if (tap_index < 0)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da04      	bge.n	8003212 <delayline_process+0xf2>
			tap_index += delay_line->buf_size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4413      	add	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]

		for (int32_t i = 0; i < block_size; i++)
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e02a      	b.n	800326e <delayline_process+0x14e>
		{
			buf[i] += delay_line->buffer[tap_index++] * delay_line->coeffs[j];
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	61b9      	str	r1, [r7, #24]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	ed93 7a00 	vldr	s14, [r3]
 800322a:	7ffb      	ldrb	r3, [r7, #31]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	3308      	adds	r3, #8
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4413      	add	r3, r2
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4413      	add	r3, r2
 8003252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003256:	edc3 7a00 	vstr	s15, [r3]

			if (tap_index == delay_line->buf_size)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	429a      	cmp	r2, r3
 8003262:	d101      	bne.n	8003268 <delayline_process+0x148>
				tap_index = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
		for (int32_t i = 0; i < block_size; i++)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	dbd0      	blt.n	8003218 <delayline_process+0xf8>
	for (uint8_t j = 0; j < delay_line->num_taps; j++)
 8003276:	7ffb      	ldrb	r3, [r7, #31]
 8003278:	3301      	adds	r3, #1
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	7ffa      	ldrb	r2, [r7, #31]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3b2      	bcc.n	80031ec <delayline_process+0xcc>
		}
	}

	return EOK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	372c      	adds	r7, #44	; 0x2c
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <modulator_init>:

#include "modulator.h"
#include "audio_defs.h"

int8_t modulator_init(struct Modulator* modulator)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	modulator->phase = 0.f;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
	modulator->frequency = 500.f;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <modulator_init+0x2c>)
 80032a8:	605a      	str	r2, [r3, #4]
	modulator->modulation_strength = 0.5f;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80032b0:	609a      	str	r2, [r3, #8]

	return EOK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	43fa0000 	.word	0x43fa0000

080032c4 <modulator_destroy>:

int8_t modulator_destroy(struct Modulator* modulator)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	free(modulator);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f012 fee5 	bl	801609c <free>
	return EOK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <modulator_process>:

int8_t modulator_process(struct Modulator* modulator, float32_t* buf, int32_t block_size)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
	float32_t period_max = 6.2832;
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <modulator_process+0xb4>)
 80032ea:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < block_size; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e045      	b.n	800337e <modulator_process+0xa2>
	{
		buf[i] *= arm_sin_f32(modulator->phase) * modulator->modulation_strength;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	f012 fe78 	bl	8015ff0 <arm_sin_f32>
 8003300:	eeb0 7a40 	vmov.f32	s14, s0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	edd3 7a02 	vldr	s15, [r3, #8]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4413      	add	r3, r2
 8003322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003326:	edc3 7a00 	vstr	s15, [r3]

		modulator->phase += 2.f * 3.1416f * modulator->frequency / (float32_t) SAMPLE_RATE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	edd3 7a01 	vldr	s15, [r3, #4]
 8003336:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003394 <modulator_process+0xb8>
 800333a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800333e:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8003398 <modulator_process+0xbc>
 8003342:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edc3 7a00 	vstr	s15, [r3]
		if (modulator->phase >= period_max)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	ed97 7a04 	vldr	s14, [r7, #16]
 800335a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	d809      	bhi.n	8003378 <modulator_process+0x9c>
			modulator->phase -= period_max;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	ed93 7a00 	vldr	s14, [r3]
 800336a:	edd7 7a04 	vldr	s15, [r7, #16]
 800336e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	edc3 7a00 	vstr	s15, [r3]
	for (int32_t i = 0; i < block_size; i++)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	dbb5      	blt.n	80032f2 <modulator_process+0x16>
	}
	return EOK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40c90ff9 	.word	0x40c90ff9
 8003394:	40c90ff9 	.word	0x40c90ff9
 8003398:	473b8000 	.word	0x473b8000

0800339c <cs4272_dma_half_cmpl_callback>:
static int32_t* inactive_rx_buf = rx_buf;

static uint8_t is_running = 0;

void cs4272_dma_half_cmpl_callback()
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <cs4272_dma_half_cmpl_callback+0x1c>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[0];
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <cs4272_dma_half_cmpl_callback+0x20>)
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <cs4272_dma_half_cmpl_callback+0x24>)
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	24000c04 	.word	0x24000c04
 80033bc:	24000058 	.word	0x24000058
 80033c0:	24000f94 	.word	0x24000f94

080033c4 <cs4272_dma_cmpl_callback>:

void cs4272_dma_cmpl_callback()
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <cs4272_dma_cmpl_callback+0x1c>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[RXTX_BUFFER_SIZE / 2];
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <cs4272_dma_cmpl_callback+0x20>)
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <cs4272_dma_cmpl_callback+0x24>)
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	24000c04 	.word	0x24000c04
 80033e4:	24000058 	.word	0x24000058
 80033e8:	24001394 	.word	0x24001394

080033ec <cs4272_start>:

int8_t cs4272_start(struct Interface* intf)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
	if (is_running)
 80033f4:	4b5a      	ldr	r3, [pc, #360]	; (8003560 <cs4272_start+0x174>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <cs4272_start+0x16>
		return -EINVAL;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	e0aa      	b.n	8003558 <cs4272_start+0x16c>

	if (!intf->private_data)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <cs4272_start+0x24>
		return -EINVAL;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	e0a3      	b.n	8003558 <cs4272_start+0x16c>

	struct CS4272_PrivateData* pd = intf->private_data;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]

	if (!pd->i2c_hndl || !pd->i2s_hndl)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <cs4272_start+0x3a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <cs4272_start+0x40>
		return -EINVAL;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	e095      	b.n	8003558 <cs4272_start+0x16c>

	memset(tx_buf, 0, sizeof(uint32_t) * RXTX_BUFFER_SIZE);
 800342c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003430:	2100      	movs	r1, #0
 8003432:	484c      	ldr	r0, [pc, #304]	; (8003564 <cs4272_start+0x178>)
 8003434:	f014 faab 	bl	801798e <memset>
	memset(rx_buf, 0, sizeof(uint32_t) * RXTX_BUFFER_SIZE);
 8003438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800343c:	2100      	movs	r1, #0
 800343e:	484a      	ldr	r0, [pc, #296]	; (8003568 <cs4272_start+0x17c>)
 8003440:	f014 faa5 	bl	801798e <memset>

	HAL_I2S_RegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID, cs4272_dma_half_cmpl_callback);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a48      	ldr	r2, [pc, #288]	; (800356c <cs4272_start+0x180>)
 800344a:	2105      	movs	r1, #5
 800344c:	4618      	mov	r0, r3
 800344e:	f005 ffb7 	bl	80093c0 <HAL_I2S_RegisterCallback>
	HAL_I2S_RegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_COMPLETE_CB_ID, cs4272_dma_cmpl_callback);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a46      	ldr	r2, [pc, #280]	; (8003570 <cs4272_start+0x184>)
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f005 ffb0 	bl	80093c0 <HAL_I2S_RegisterCallback>

	HAL_I2SEx_TransmitReceive_DMA(pd->i2s_hndl, tx_buf, rx_buf, RXTX_BUFFER_SIZE);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6858      	ldr	r0, [r3, #4]
 8003464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003468:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <cs4272_start+0x17c>)
 800346a:	493e      	ldr	r1, [pc, #248]	; (8003564 <cs4272_start+0x178>)
 800346c:	f006 f8c6 	bl	80095fc <HAL_I2SEx_TransmitReceive_DMA>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8003470:	2201      	movs	r2, #1
 8003472:	2101      	movs	r1, #1
 8003474:	483f      	ldr	r0, [pc, #252]	; (8003574 <cs4272_start+0x188>)
 8003476:	f005 f9a7 	bl	80087c8 <HAL_GPIO_WritePin>

	uint16_t addr = 0x0022;
 800347a:	2322      	movs	r3, #34	; 0x22
 800347c:	817b      	strh	r3, [r7, #10]
	uint8_t wr_data[2];
	// Configure CODEC
	wr_data[0] = 0x07;
 800347e:	2307      	movs	r3, #7
 8003480:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x02;
 8003482:	2302      	movs	r3, #2
 8003484:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f107 0208 	add.w	r2, r7, #8
 800348e:	8979      	ldrh	r1, [r7, #10]
 8003490:	f242 7310 	movw	r3, #10000	; 0x2710
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2302      	movs	r3, #2
 8003498:	f005 fa7a 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x01;
 800349c:	2301      	movs	r3, #1
 800349e:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x01;
 80034a0:	2301      	movs	r3, #1
 80034a2:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2302      	movs	r3, #2
 80034b6:	f005 fa6b 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x02;
 80034ba:	2302      	movs	r3, #2
 80034bc:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	f107 0208 	add.w	r2, r7, #8
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2302      	movs	r3, #2
 80034d4:	f005 fa5c 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x03;
 80034d8:	2303      	movs	r3, #3
 80034da:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x29;
 80034dc:	2329      	movs	r3, #41	; 0x29
 80034de:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	f107 0208 	add.w	r2, r7, #8
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2302      	movs	r3, #2
 80034f2:	f005 fa4d 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x04;
 80034f6:	2304      	movs	r3, #4
 80034f8:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 80034fa:	2300      	movs	r3, #0
 80034fc:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	f242 7310 	movw	r3, #10000	; 0x2710
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2302      	movs	r3, #2
 8003510:	f005 fa3e 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x05;
 8003514:	2305      	movs	r3, #5
 8003516:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 8003518:	2300      	movs	r3, #0
 800351a:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	f107 0208 	add.w	r2, r7, #8
 8003524:	8979      	ldrh	r1, [r7, #10]
 8003526:	f242 7310 	movw	r3, #10000	; 0x2710
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2302      	movs	r3, #2
 800352e:	f005 fa2f 	bl	8008990 <HAL_I2C_Master_Transmit>

	wr_data[0] = 0x06;
 8003532:	2306      	movs	r3, #6
 8003534:	723b      	strb	r3, [r7, #8]
	wr_data[1] = 0x00;
 8003536:	2300      	movs	r3, #0
 8003538:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(pd->i2c_hndl, addr, wr_data, 2, 10000);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	f107 0208 	add.w	r2, r7, #8
 8003542:	8979      	ldrh	r1, [r7, #10]
 8003544:	f242 7310 	movw	r3, #10000	; 0x2710
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2302      	movs	r3, #2
 800354c:	f005 fa20 	bl	8008990 <HAL_I2C_Master_Transmit>

	is_running = 1;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <cs4272_start+0x174>)
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]

	return EOK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	24001f94 	.word	0x24001f94
 8003564:	24000f94 	.word	0x24000f94
 8003568:	24001794 	.word	0x24001794
 800356c:	0800339d 	.word	0x0800339d
 8003570:	080033c5 	.word	0x080033c5
 8003574:	58021000 	.word	0x58021000

08003578 <cs4272_stop>:

int8_t cs4272_stop(struct Interface* intf)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	if (!is_running)
 8003580:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <cs4272_stop+0x68>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <cs4272_stop+0x16>
		return -EINVAL;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	e024      	b.n	80035d8 <cs4272_stop+0x60>

	struct CS4272_PrivateData* pd = intf->private_data;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60fb      	str	r3, [r7, #12]

	if (!pd->i2c_hndl || !pd->i2s_hndl)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <cs4272_stop+0x2c>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <cs4272_stop+0x32>
		return -EINVAL;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	e016      	b.n	80035d8 <cs4272_stop+0x60>

	HAL_I2S_DMAStop(pd->i2s_hndl);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f006 f904 	bl	80097bc <HAL_I2S_DMAStop>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2101      	movs	r1, #1
 80035b8:	480a      	ldr	r0, [pc, #40]	; (80035e4 <cs4272_stop+0x6c>)
 80035ba:	f005 f905 	bl	80087c8 <HAL_GPIO_WritePin>
	HAL_I2S_UnRegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2105      	movs	r1, #5
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 ff87 	bl	80094d8 <HAL_I2S_UnRegisterCallback>
	HAL_I2S_UnRegisterCallback(pd->i2s_hndl, HAL_I2S_TX_RX_COMPLETE_CB_ID);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f005 ff81 	bl	80094d8 <HAL_I2S_UnRegisterCallback>

	return EOK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	24001f94 	.word	0x24001f94
 80035e4:	58021000 	.word	0x58021000

080035e8 <cs4272_read>:

int8_t cs4272_read(struct Interface* intf, void* buf, size_t len)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
	return EOK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <cs4272_write>:

int8_t cs4272_write(struct Interface* intf, void* buf, size_t len)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
	if (!is_running)
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <cs4272_write+0x10c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <cs4272_write+0x1a>
		return -EINVAL;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	e072      	b.n	8003704 <cs4272_write+0x100>
	if (len < SAMPLES_PER_BLOCK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b7f      	cmp	r3, #127	; 0x7f
 8003622:	d801      	bhi.n	8003628 <cs4272_write+0x24>
		return -ERBUFUDF;
 8003624:	2301      	movs	r3, #1
 8003626:	e06d      	b.n	8003704 <cs4272_write+0x100>
	if (len > SAMPLES_PER_BLOCK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b80      	cmp	r3, #128	; 0x80
 800362c:	d901      	bls.n	8003632 <cs4272_write+0x2e>
		return -ERBUFOVF;
 800362e:	2301      	movs	r3, #1
 8003630:	e068      	b.n	8003704 <cs4272_write+0x100>

	float32_t* chl_buf = &((float32_t*)buf)[0];
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	617b      	str	r3, [r7, #20]
	float32_t* chr_buf = &((float32_t*)buf)[SAMPLES_PER_BLOCK];
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800363c:	613b      	str	r3, [r7, #16]
	int32_t ch_buf_index = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
	int32_t tx_buf_index = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]

	while (tx_buf_index < RXTX_BUFFER_SIZE >> 1)
 8003646:	e05a      	b.n	80036fe <cs4272_write+0xfa>
	{
		inactive_tx_buf[tx_buf_index] = (int32_t)((chl_buf[ch_buf_index]) * 8388607);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4413      	add	r3, r2
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003714 <cs4272_write+0x110>
 8003658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800365c:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <cs4272_write+0x114>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800366a:	ee17 2a90 	vmov	r2, s15
 800366e:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 1] = (int32_t)((chr_buf[ch_buf_index]) * 8388607);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003714 <cs4272_write+0x110>
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <cs4272_write+0x114>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	3301      	adds	r3, #1
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003694:	ee17 2a90 	vmov	r2, s15
 8003698:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 2] = (int32_t)((chl_buf[ch_buf_index + 1]) * 8388607);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4413      	add	r3, r2
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003714 <cs4272_write+0x110>
 80036ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <cs4272_write+0x114>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3302      	adds	r3, #2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c0:	ee17 2a90 	vmov	r2, s15
 80036c4:	601a      	str	r2, [r3, #0]
		inactive_tx_buf[tx_buf_index + 3] = (int32_t)((chr_buf[ch_buf_index + 1]) * 8388607);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003714 <cs4272_write+0x110>
 80036d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <cs4272_write+0x114>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	3303      	adds	r3, #3
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ec:	ee17 2a90 	vmov	r2, s15
 80036f0:	601a      	str	r2, [r3, #0]

		tx_buf_index += 4;
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	3304      	adds	r3, #4
 80036f6:	61bb      	str	r3, [r7, #24]
		ch_buf_index += 2;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	3302      	adds	r3, #2
 80036fc:	61fb      	str	r3, [r7, #28]
	while (tx_buf_index < RXTX_BUFFER_SIZE >> 1)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2bff      	cmp	r3, #255	; 0xff
 8003702:	dda1      	ble.n	8003648 <cs4272_write+0x44>
	}
}
 8003704:	4618      	mov	r0, r3
 8003706:	3724      	adds	r7, #36	; 0x24
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	24001f94 	.word	0x24001f94
 8003714:	4afffffe 	.word	0x4afffffe
 8003718:	24000058 	.word	0x24000058

0800371c <cs4272_ioctl>:

int8_t cs4272_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	if (!is_running)
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <cs4272_ioctl+0x28>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <cs4272_ioctl+0x18>
		return -EINVAL;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	e000      	b.n	8003736 <cs4272_ioctl+0x1a>
	return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	24001f94 	.word	0x24001f94

08003748 <intper_dma_half_cmpl_callback>:

static uint16_t tx_buf[BUFFER_SIZE];
static uint16_t* inactive_tx_buf;

void intper_dma_half_cmpl_callback()
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <intper_dma_half_cmpl_callback+0x1c>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[0];
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <intper_dma_half_cmpl_callback+0x20>)
 8003754:	4a05      	ldr	r2, [pc, #20]	; (800376c <intper_dma_half_cmpl_callback+0x24>)
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	24000c04 	.word	0x24000c04
 8003768:	24002198 	.word	0x24002198
 800376c:	24001f98 	.word	0x24001f98

08003770 <intper_dma_cmpl_callback>:

void intper_dma_cmpl_callback()
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
	temp_next_block_ready = 1;
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <intper_dma_cmpl_callback+0x1c>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]

	inactive_tx_buf = &tx_buf[BUFFER_SIZE / 2];
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <intper_dma_cmpl_callback+0x20>)
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <intper_dma_cmpl_callback+0x24>)
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	24000c04 	.word	0x24000c04
 8003790:	24002198 	.word	0x24002198
 8003794:	24002098 	.word	0x24002098

08003798 <intper_start>:

int32_t intper_start(struct Interface* intf)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
	if (is_running)
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <intper_start+0x9c>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <intper_start+0x16>
		return -EINVAL;
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ac:	e03d      	b.n	800382a <intper_start+0x92>

	if (!intf->private_data)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <intper_start+0x24>
		return -EINVAL;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e036      	b.n	800382a <intper_start+0x92>
	struct IntPerDrvPrivateData* private_data = intf->private_data;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60fb      	str	r3, [r7, #12]

	if (!private_data->hdac || !private_data->htim)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <intper_start+0x3a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <intper_start+0x40>
		return -EINVAL;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e028      	b.n	800382a <intper_start+0x92>

	memset(tx_buf, 0, sizeof(uint16_t) * BUFFER_SIZE);
 80037d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037dc:	2100      	movs	r1, #0
 80037de:	4816      	ldr	r0, [pc, #88]	; (8003838 <intper_start+0xa0>)
 80037e0:	f014 f8d5 	bl	801798e <memset>
	inactive_tx_buf = &tx_buf[SAMPLES_PER_BLOCK];
 80037e4:	4b15      	ldr	r3, [pc, #84]	; (800383c <intper_start+0xa4>)
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <intper_start+0xa8>)
 80037e8:	601a      	str	r2, [r3, #0]

	HAL_DAC_RegisterCallback(private_data->hdac, HAL_DAC_CH1_HALF_COMPLETE_CB_ID, intper_dma_half_cmpl_callback);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <intper_start+0xac>)
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fc0e 	bl	8005014 <HAL_DAC_RegisterCallback>
	HAL_DAC_RegisterCallback(private_data->hdac, HAL_DAC_CH1_COMPLETE_CB_ID, intper_dma_cmpl_callback);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a12      	ldr	r2, [pc, #72]	; (8003848 <intper_start+0xb0>)
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fc07 	bl	8005014 <HAL_DAC_RegisterCallback>

	HAL_DAC_Start_DMA(private_data->hdac,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <intper_start+0xa0>)
 8003814:	2100      	movs	r1, #0
 8003816:	f001 f92d 	bl	8004a74 <HAL_DAC_Start_DMA>
		DAC_CHANNEL_1,
		tx_buf,
		SAMPLES_PER_BLOCK * 2, DAC_ALIGN_12B_R);

	HAL_TIM_Base_Start(private_data->htim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4618      	mov	r0, r3
 8003820:	f00b fa06 	bl	800ec30 <HAL_TIM_Base_Start>
	is_running = 1;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <intper_start+0x9c>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	24001f95 	.word	0x24001f95
 8003838:	24001f98 	.word	0x24001f98
 800383c:	24002198 	.word	0x24002198
 8003840:	24002098 	.word	0x24002098
 8003844:	08003749 	.word	0x08003749
 8003848:	08003771 	.word	0x08003771

0800384c <intper_stop>:

int8_t intper_stop(struct Interface* intf)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	if (!intf->private_data)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <intper_stop+0x16>
		return -EINVAL;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295
 8003860:	e01b      	b.n	800389a <intper_stop+0x4e>
	struct IntPerDrvPrivateData* private_data = intf->private_data;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60fb      	str	r3, [r7, #12]

	if (!private_data->hdac || !private_data->htim)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <intper_stop+0x2c>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <intper_stop+0x32>
		return -EINVAL;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	e00d      	b.n	800389a <intper_stop+0x4e>

	HAL_DAC_Stop_DMA(private_data->hdac, DAC_CHANNEL_1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f9b5 	bl	8004bf4 <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(private_data->htim);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4618      	mov	r0, r3
 8003890:	f00b fa3e 	bl	800ed10 <HAL_TIM_Base_Stop>

	is_running = 0;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <intper_stop+0x58>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	24001f95 	.word	0x24001f95

080038a8 <intper_read>:

int32_t intper_read(struct Interface* intf, void* buf, size_t len)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <intper_write>:

int32_t intper_write(struct Interface* intf, void* buf, size_t len)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	if (!is_running)
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <intper_write+0x8c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <intper_write+0x1a>
		return -EINVAL;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e031      	b.n	8003942 <intper_write+0x7e>
	if (len < SAMPLES_PER_BLOCK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b7f      	cmp	r3, #127	; 0x7f
 80038e2:	d802      	bhi.n	80038ea <intper_write+0x26>
		return -ERBUFUDF;
 80038e4:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 80038e8:	e02b      	b.n	8003942 <intper_write+0x7e>
	if (len > SAMPLES_PER_BLOCK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d902      	bls.n	80038f6 <intper_write+0x32>
		return -ERBUFOVF;
 80038f0:	f06f 03fe 	mvn.w	r3, #254	; 0xfe
 80038f4:	e025      	b.n	8003942 <intper_write+0x7e>
	float* buf_float = (float*) buf;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < SAMPLES_PER_BLOCK; i++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e01c      	b.n	800393a <intper_write+0x76>
	{
		uint16_t sample = (uint16_t)((buf_float[i] + 1.f) * 2048.f);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4413      	add	r3, r2
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003914:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003954 <intper_write+0x90>
 8003918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	82fb      	strh	r3, [r7, #22]
		inactive_tx_buf[i] = (uint16_t) sample;
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <intper_write+0x94>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	8afa      	ldrh	r2, [r7, #22]
 8003932:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < SAMPLES_PER_BLOCK; i++)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b7f      	cmp	r3, #127	; 0x7f
 800393e:	d9df      	bls.n	8003900 <intper_write+0x3c>
	}
	return 0;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	24001f95 	.word	0x24001f95
 8003954:	45000000 	.word	0x45000000
 8003958:	24002198 	.word	0x24002198

0800395c <intper_ioctl>:

int32_t intper_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	if (!is_running)
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <intper_ioctl+0x28>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <intper_ioctl+0x18>
		return -EINVAL;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e000      	b.n	8003976 <intper_ioctl+0x1a>
	return 0;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	24001f95 	.word	0x24001f95

08003988 <uart_start>:
static size_t rx_used;

static uint8_t recv;

int8_t uart_start(struct Interface* intf)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	if (is_init)
 8003990:	4b16      	ldr	r3, [pc, #88]	; (80039ec <uart_start+0x64>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <uart_start+0x16>
		return -EINVAL;
 8003998:	f04f 33ff 	mov.w	r3, #4294967295
 800399c:	e021      	b.n	80039e2 <uart_start+0x5a>

	if (intf->private_data == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <uart_start+0x24>
		return -EINVAL;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	e01a      	b.n	80039e2 <uart_start+0x5a>

	huart = intf->private_data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <uart_start+0x68>)
 80039b2:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &recv, 1);
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <uart_start+0x68>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2201      	movs	r2, #1
 80039ba:	490e      	ldr	r1, [pc, #56]	; (80039f4 <uart_start+0x6c>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f00b fed3 	bl	800f768 <HAL_UART_Receive_IT>

	rx_head = 0;
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <uart_start+0x70>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
	rx_tail = 0;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <uart_start+0x74>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
	rx_used = 0;
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <uart_start+0x78>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
	recv = 0;
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <uart_start+0x6c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]

	is_init = 1;
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <uart_start+0x64>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
	return 0;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	240021a0 	.word	0x240021a0
 80039f0:	2400219c 	.word	0x2400219c
 80039f4:	240021f0 	.word	0x240021f0
 80039f8:	240021e4 	.word	0x240021e4
 80039fc:	240021e8 	.word	0x240021e8
 8003a00:	240021ec 	.word	0x240021ec

08003a04 <uart_stop>:

int8_t uart_stop(struct Interface* intf)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	return 0;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <uart_read>:

int8_t uart_read(struct Interface* intf, void* buf, size_t len)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
	size_t to_copy = rx_used < len ? rx_used : len;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <uart_read+0x70>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	bf28      	it	cs
 8003a32:	4613      	movcs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
	uint8_t* char_buf = (uint8_t*) buf;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < to_copy; i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e019      	b.n	8003a74 <uart_read+0x58>
	{
		char_buf[i] = rx_buf[rx_head++];
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <uart_read+0x74>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	4912      	ldr	r1, [pc, #72]	; (8003a90 <uart_read+0x74>)
 8003a48:	600a      	str	r2, [r1, #0]
 8003a4a:	6979      	ldr	r1, [r7, #20]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	440a      	add	r2, r1
 8003a50:	4910      	ldr	r1, [pc, #64]	; (8003a94 <uart_read+0x78>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	7013      	strb	r3, [r2, #0]

		if (rx_head == UART_RECV_BUF_SIZE)
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <uart_read+0x74>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d102      	bne.n	8003a64 <uart_read+0x48>
			rx_head = 0;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <uart_read+0x74>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
		rx_used--;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <uart_read+0x70>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <uart_read+0x70>)
 8003a6c:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < to_copy; i++)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3301      	adds	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3e1      	bcc.n	8003a40 <uart_read+0x24>
	}
	return to_copy;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	b25b      	sxtb	r3, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3724      	adds	r7, #36	; 0x24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	240021ec 	.word	0x240021ec
 8003a90:	240021e4 	.word	0x240021e4
 8003a94:	240021a4 	.word	0x240021a4

08003a98 <uart_write>:

int8_t uart_write(struct Interface* intf, void* buf, size_t len)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
	while (HAL_UART_Transmit_IT(intf->private_data, buf, len) == HAL_BUSY);
 8003aa4:	bf00      	nop
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	b292      	uxth	r2, r2
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00b fdc5 	bl	800f640 <HAL_UART_Transmit_IT>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d0f4      	beq.n	8003aa6 <uart_write+0xe>
	return len;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	b25b      	sxtb	r3, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <uart_ioctl>:

int8_t uart_ioctl(struct Interface* intf, uint32_t ctlId)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]

}
 8003ad2:	bf00      	nop
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	if (rx_used < UART_RECV_BUF_SIZE)
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_UART_RxCpltCallback+0x4c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b3f      	cmp	r3, #63	; 0x3f
 8003aee:	d814      	bhi.n	8003b1a <HAL_UART_RxCpltCallback+0x3a>
	{
		rx_buf[rx_tail++] = recv;
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <HAL_UART_RxCpltCallback+0x50>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_UART_RxCpltCallback+0x50>)
 8003af8:	600a      	str	r2, [r1, #0]
 8003afa:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <HAL_UART_RxCpltCallback+0x54>)
 8003afc:	7811      	ldrb	r1, [r2, #0]
 8003afe:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <HAL_UART_RxCpltCallback+0x58>)
 8003b00:	54d1      	strb	r1, [r2, r3]

		if (rx_tail == UART_RECV_BUF_SIZE)
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_UART_RxCpltCallback+0x50>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d102      	bne.n	8003b10 <HAL_UART_RxCpltCallback+0x30>
			rx_tail = 0;
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_UART_RxCpltCallback+0x50>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		rx_used++;
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_UART_RxCpltCallback+0x4c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <HAL_UART_RxCpltCallback+0x4c>)
 8003b18:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT(huart, &recv, 1);
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4905      	ldr	r1, [pc, #20]	; (8003b34 <HAL_UART_RxCpltCallback+0x54>)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f00b fe22 	bl	800f768 <HAL_UART_Receive_IT>
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	240021ec 	.word	0x240021ec
 8003b30:	240021e8 	.word	0x240021e8
 8003b34:	240021f0 	.word	0x240021f0
 8003b38:	240021a4 	.word	0x240021a4

08003b3c <usb_start>:
static int32_t rx_head_block;
static int32_t rx_tail_block;
static int32_t rx_used_blocks;

int8_t usb_start(struct Interface* intf)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b44:	b672      	cpsid	i
}
 8003b46:	bf00      	nop
	__disable_irq();
	if (is_init)
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <usb_start+0x50>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <usb_start+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003b50:	b662      	cpsie	i
}
 8003b52:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	e011      	b.n	8003b7e <usb_start+0x42>
	}

	rx_head_block = 0;
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <usb_start+0x54>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
	rx_tail_block = 0;
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <usb_start+0x58>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
	rx_used_blocks = 0;
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <usb_start+0x5c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
	rx_accumulator_used = 0;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <usb_start+0x60>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

	is_init = 1;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <usb_start+0x50>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b78:	b662      	cpsie	i
}
 8003b7a:	bf00      	nop

	__enable_irq();
	return EOK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	240021f1 	.word	0x240021f1
 8003b90:	240063f8 	.word	0x240063f8
 8003b94:	240063fc 	.word	0x240063fc
 8003b98:	24006400 	.word	0x24006400
 8003b9c:	240023f4 	.word	0x240023f4

08003ba0 <usb_stop>:

int8_t usb_stop(struct Interface* intf)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba8:	b672      	cpsid	i
}
 8003baa:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <usb_stop+0x30>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <usb_stop+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb4:	b662      	cpsie	i
}
 8003bb6:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	e002      	b.n	8003bc4 <usb_stop+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8003bbe:	b662      	cpsie	i
}
 8003bc0:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	240021f1 	.word	0x240021f1

08003bd4 <usb_read>:


int8_t usb_read(struct Interface* intf, void* buf, size_t len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003be0:	b672      	cpsid	i
}
 8003be2:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <usb_read+0x78>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <usb_read+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8003bec:	b662      	cpsie	i
}
 8003bee:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	e025      	b.n	8003c42 <usb_read+0x6e>
	}

	if (len != SAMPLES_PER_BLOCK * 2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfc:	d004      	beq.n	8003c08 <usb_read+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfe:	b662      	cpsie	i
}
 8003c00:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
 8003c06:	e01c      	b.n	8003c42 <usb_read+0x6e>
	}

	float32_t* dst_buf = buf;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	617b      	str	r3, [r7, #20]
	memcpy(dst_buf, &rx_buffer[rx_head_block * SAMPLES_PER_BLOCK], sizeof(float32_t) * len);
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <usb_read+0x7c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <usb_read+0x80>)
 8003c16:	1899      	adds	r1, r3, r2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f013 ff5c 	bl	8017adc <memcpy>
	{
		__enable_irq();
		return -EINVAL;
	}*/

	rx_head_block += 2;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <usb_read+0x7c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3302      	adds	r3, #2
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <usb_read+0x7c>)
 8003c2c:	6013      	str	r3, [r2, #0]
	if (rx_head_block == USB_AUDIOCLASS_RXBUF_BLOCKS)
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <usb_read+0x7c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d102      	bne.n	8003c3c <usb_read+0x68>
		rx_head_block = 0;
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <usb_read+0x7c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c3c:	b662      	cpsie	i
}
 8003c3e:	bf00      	nop
	//rx_used_blocks -= 2;

	__enable_irq();
	return EOK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	240021f1 	.word	0x240021f1
 8003c50:	240063f8 	.word	0x240063f8
 8003c54:	240023f8 	.word	0x240023f8

08003c58 <usb_write>:

int8_t usb_write(struct Interface* intf, void* buf, size_t len)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c64:	b672      	cpsid	i
}
 8003c66:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8003c68:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <usb_write+0xe0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <usb_write+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c70:	b662      	cpsie	i
}
 8003c72:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e05a      	b.n	8003d30 <usb_write+0xd8>
	}

	uint8_t* buf_uint8p = buf;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	61fb      	str	r3, [r7, #28]
	int32_t rx_accumulator_free = ACCUMULATOR_BUFFER_SIZE - rx_accumulator_used;
 8003c7e:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <usb_write+0xe4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003c86:	61bb      	str	r3, [r7, #24]
	int32_t rx_accumulator_leftover = len - rx_accumulator_free;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
	if (rx_accumulator_free < len)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d937      	bls.n	8003d08 <usb_write+0xb0>
	{
		memcpy(&rx_accumulator[rx_accumulator_used], buf_uint8p, rx_accumulator_free);
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <usb_write+0xe4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <usb_write+0xe8>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	69f9      	ldr	r1, [r7, #28]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f013 ff19 	bl	8017adc <memcpy>
		rx_accumulator_used += rx_accumulator_free;
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <usb_write+0xe4>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <usb_write+0xe4>)
 8003cb4:	6013      	str	r3, [r2, #0]
			rx_accumulator_used = 0;
			memcpy(&rx_accumulator[0], buf_uint8p, rx_accumulator_leftover);
			__enable_irq();
			return -EINVAL;
		}*/
		encoder_decode_2ch_16b(&rx_buffer[rx_tail_block * SAMPLES_PER_BLOCK],
 8003cb6:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <usb_write+0xec>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <usb_write+0xf0>)
 8003cc0:	1898      	adds	r0, r3, r2
							   &rx_buffer[(rx_tail_block + 1) * SAMPLES_PER_BLOCK],
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <usb_write+0xec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	01db      	lsls	r3, r3, #7
		encoder_decode_2ch_16b(&rx_buffer[rx_tail_block * SAMPLES_PER_BLOCK],
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <usb_write+0xf0>)
 8003cce:	1899      	adds	r1, r3, r2
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <usb_write+0xe8>)
 8003cd4:	f000 f9ce 	bl	8004074 <encoder_decode_2ch_16b>
							   rx_accumulator,
							   SAMPLES_PER_BLOCK);
		//rx_used_blocks += 2;
		rx_tail_block += 2;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <usb_write+0xec>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <usb_write+0xec>)
 8003ce0:	6013      	str	r3, [r2, #0]
		if (rx_tail_block == USB_AUDIOCLASS_RXBUF_BLOCKS)
 8003ce2:	4b18      	ldr	r3, [pc, #96]	; (8003d44 <usb_write+0xec>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d102      	bne.n	8003cf0 <usb_write+0x98>
			rx_tail_block = 0;
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <usb_write+0xec>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

		memcpy(&rx_accumulator[0], &buf_uint8p[rx_accumulator_free], rx_accumulator_leftover);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4811      	ldr	r0, [pc, #68]	; (8003d40 <usb_write+0xe8>)
 8003cfc:	f013 feee 	bl	8017adc <memcpy>
		rx_accumulator_used = rx_accumulator_leftover;
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <usb_write+0xe4>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e010      	b.n	8003d2a <usb_write+0xd2>
	}
	else
	{
		memcpy(&rx_accumulator[rx_accumulator_used], buf, len);
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <usb_write+0xe4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <usb_write+0xe8>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f013 fee1 	bl	8017adc <memcpy>
		rx_accumulator_used += len;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <usb_write+0xe4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <usb_write+0xe4>)
 8003d28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d2a:	b662      	cpsie	i
}
 8003d2c:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	240021f1 	.word	0x240021f1
 8003d3c:	240023f4 	.word	0x240023f4
 8003d40:	240021f4 	.word	0x240021f4
 8003d44:	240063fc 	.word	0x240063fc
 8003d48:	240023f8 	.word	0x240023f8

08003d4c <usb_ioctl>:

int8_t usb_ioctl(struct Interface* intf, uint32_t ctl_id)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d56:	b672      	cpsid	i
}
 8003d58:	bf00      	nop
	__disable_irq();
	if (!is_init)
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <usb_ioctl+0x34>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <usb_ioctl+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
 8003d62:	b662      	cpsie	i
}
 8003d64:	bf00      	nop
	{
		__enable_irq();
		return -EINVAL;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	e002      	b.n	8003d72 <usb_ioctl+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 8003d6c:	b662      	cpsie	i
}
 8003d6e:	bf00      	nop
	}

	__enable_irq();
	return EOK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	240021f1 	.word	0x240021f1

08003d84 <drvman_init>:
struct Interface* audio_device = NULL;
struct Interface* serial_device = NULL;
struct Interface* usb_device = NULL;

void drvman_init()
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
	registered_drivers = 0;
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <drvman_init+0x48>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

	for (size_t i = registered_drivers; i < MAX_DRIVERS; i++)
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <drvman_init+0x48>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	e007      	b.n	8003da8 <drvman_init+0x24>
		drivers[i] = NULL;
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <drvman_init+0x4c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (size_t i = registered_drivers; i < MAX_DRIVERS; i++)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3301      	adds	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b07      	cmp	r3, #7
 8003dac:	d9f4      	bls.n	8003d98 <drvman_init+0x14>

	audio_device = NULL;
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <drvman_init+0x50>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
	serial_device = NULL;
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <drvman_init+0x54>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
	usb_device = NULL;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <drvman_init+0x58>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	24006404 	.word	0x24006404
 8003dd0:	24006408 	.word	0x24006408
 8003dd4:	24006428 	.word	0x24006428
 8003dd8:	2400642c 	.word	0x2400642c
 8003ddc:	24006430 	.word	0x24006430

08003de0 <drvman_register_driver>:

void drvman_register_driver(struct Interface* driver)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b0a2      	sub	sp, #136	; 0x88
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	char print_buf[128];
	if (!driver)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <drvman_register_driver+0x28>
	{
		sprintf(print_buf, "%s Tried to register a NULL driver", module_str);
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <drvman_register_driver+0x7c>)
 8003df4:	491a      	ldr	r1, [pc, #104]	; (8003e60 <drvman_register_driver+0x80>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f013 fd66 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fac9 	bl	8002398 <console_println>
 8003e06:	e026      	b.n	8003e56 <drvman_register_driver+0x76>
		return;
	}

	if (registered_drivers < MAX_DRIVERS)
 8003e08:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <drvman_register_driver+0x84>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b07      	cmp	r3, #7
 8003e0e:	d816      	bhi.n	8003e3e <drvman_register_driver+0x5e>
	{
		drivers[registered_drivers++] = driver;
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <drvman_register_driver+0x84>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	4913      	ldr	r1, [pc, #76]	; (8003e64 <drvman_register_driver+0x84>)
 8003e18:	600a      	str	r2, [r1, #0]
 8003e1a:	4913      	ldr	r1, [pc, #76]	; (8003e68 <drvman_register_driver+0x88>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		sprintf(print_buf, "%s Registered driver: %s", module_str, driver->name);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f107 0008 	add.w	r0, r7, #8
 8003e2a:	4a0c      	ldr	r2, [pc, #48]	; (8003e5c <drvman_register_driver+0x7c>)
 8003e2c:	490f      	ldr	r1, [pc, #60]	; (8003e6c <drvman_register_driver+0x8c>)
 8003e2e:	f013 fd4b 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe faae 	bl	8002398 <console_println>
 8003e3c:	e00b      	b.n	8003e56 <drvman_register_driver+0x76>
	}
	else
	{
		sprintf(print_buf, "%s No free driver slots", module_str);
 8003e3e:	f107 0308 	add.w	r3, r7, #8
 8003e42:	4a06      	ldr	r2, [pc, #24]	; (8003e5c <drvman_register_driver+0x7c>)
 8003e44:	490a      	ldr	r1, [pc, #40]	; (8003e70 <drvman_register_driver+0x90>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f013 fd3e 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe faa1 	bl	8002398 <console_println>
	}
}
 8003e56:	3788      	adds	r7, #136	; 0x88
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	240000ac 	.word	0x240000ac
 8003e60:	0801aba4 	.word	0x0801aba4
 8003e64:	24006404 	.word	0x24006404
 8003e68:	24006408 	.word	0x24006408
 8003e6c:	0801abc8 	.word	0x0801abc8
 8003e70:	0801abe4 	.word	0x0801abe4

08003e74 <drvman_set_serial_driver>:

void drvman_set_serial_driver(uint8_t driver_id)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b0a2      	sub	sp, #136	; 0x88
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d90c      	bls.n	8003e9e <drvman_set_serial_driver+0x2a>
	{
		sprintf(print_buf, "%s Serial driver ID out of range", module_str);
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <drvman_set_serial_driver+0x90>)
 8003e8a:	491f      	ldr	r1, [pc, #124]	; (8003f08 <drvman_set_serial_driver+0x94>)
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f013 fd1b 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fa7e 	bl	8002398 <console_println>
		return;
 8003e9c:	e02e      	b.n	8003efc <drvman_set_serial_driver+0x88>
	}

	if (!drivers[driver_id])
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <drvman_set_serial_driver+0x98>)
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <drvman_set_serial_driver+0x50>
	{
		sprintf(print_buf, "%s Target serial driver is NULL", module_str);
 8003eaa:	f107 0308 	add.w	r3, r7, #8
 8003eae:	4a15      	ldr	r2, [pc, #84]	; (8003f04 <drvman_set_serial_driver+0x90>)
 8003eb0:	4917      	ldr	r1, [pc, #92]	; (8003f10 <drvman_set_serial_driver+0x9c>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f013 fd08 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003eb8:	f107 0308 	add.w	r3, r7, #8
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fa6b 	bl	8002398 <console_println>
		return;
 8003ec2:	e01b      	b.n	8003efc <drvman_set_serial_driver+0x88>
	}

	serial_device = drivers[driver_id];
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <drvman_set_serial_driver+0x98>)
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <drvman_set_serial_driver+0xa0>)
 8003ece:	6013      	str	r3, [r2, #0]
	serial_device->io_ops->start(serial_device);
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <drvman_set_serial_driver+0xa0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <drvman_set_serial_driver+0xa0>)
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4610      	mov	r0, r2
 8003ede:	4798      	blx	r3

	sprintf(print_buf, "%s Set serial driver: %s", module_str, serial_device->name);
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <drvman_set_serial_driver+0xa0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f107 0008 	add.w	r0, r7, #8
 8003eea:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <drvman_set_serial_driver+0x90>)
 8003eec:	490a      	ldr	r1, [pc, #40]	; (8003f18 <drvman_set_serial_driver+0xa4>)
 8003eee:	f013 fceb 	bl	80178c8 <siprintf>
	console_println(print_buf);
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fa4e 	bl	8002398 <console_println>
}
 8003efc:	3788      	adds	r7, #136	; 0x88
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	240000ac 	.word	0x240000ac
 8003f08:	0801abfc 	.word	0x0801abfc
 8003f0c:	24006408 	.word	0x24006408
 8003f10:	0801ac20 	.word	0x0801ac20
 8003f14:	2400642c 	.word	0x2400642c
 8003f18:	0801ac40 	.word	0x0801ac40

08003f1c <drvman_set_audio_driver>:

void drvman_set_audio_driver(uint8_t driver_id)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b0a2      	sub	sp, #136	; 0x88
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b07      	cmp	r3, #7
 8003f2a:	d90c      	bls.n	8003f46 <drvman_set_audio_driver+0x2a>
	{
		sprintf(print_buf, "%s Audio driver ID out of range", module_str);
 8003f2c:	f107 0308 	add.w	r3, r7, #8
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <drvman_set_audio_driver+0x94>)
 8003f32:	4920      	ldr	r1, [pc, #128]	; (8003fb4 <drvman_set_audio_driver+0x98>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f013 fcc7 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fa2a 	bl	8002398 <console_println>
		return;
 8003f44:	e030      	b.n	8003fa8 <drvman_set_audio_driver+0x8c>
	}

	if (!drivers[driver_id])
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <drvman_set_audio_driver+0x9c>)
 8003f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10c      	bne.n	8003f6c <drvman_set_audio_driver+0x50>
	{
		sprintf(print_buf, "%s Target audio driver is NULL", module_str);
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <drvman_set_audio_driver+0x94>)
 8003f58:	4918      	ldr	r1, [pc, #96]	; (8003fbc <drvman_set_audio_driver+0xa0>)
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f013 fcb4 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fa17 	bl	8002398 <console_println>
		return;
 8003f6a:	e01d      	b.n	8003fa8 <drvman_set_audio_driver+0x8c>
	}

	audio_device = drivers[driver_id];
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <drvman_set_audio_driver+0x9c>)
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <drvman_set_audio_driver+0xa4>)
 8003f76:	6013      	str	r3, [r2, #0]
	audio_device->io_ops->start(audio_device);
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <drvman_set_audio_driver+0xa4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <drvman_set_audio_driver+0xa4>)
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	4610      	mov	r0, r2
 8003f86:	4798      	blx	r3

	sprintf(print_buf, "%s Set audio driver: %s", module_str, drivers[driver_id]->name);
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <drvman_set_audio_driver+0x9c>)
 8003f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f107 0008 	add.w	r0, r7, #8
 8003f96:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <drvman_set_audio_driver+0x94>)
 8003f98:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <drvman_set_audio_driver+0xa8>)
 8003f9a:	f013 fc95 	bl	80178c8 <siprintf>
	console_println(print_buf);
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe f9f8 	bl	8002398 <console_println>
}
 8003fa8:	3788      	adds	r7, #136	; 0x88
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	240000ac 	.word	0x240000ac
 8003fb4:	0801ac5c 	.word	0x0801ac5c
 8003fb8:	24006408 	.word	0x24006408
 8003fbc:	0801ac7c 	.word	0x0801ac7c
 8003fc0:	24006428 	.word	0x24006428
 8003fc4:	0801ac9c 	.word	0x0801ac9c

08003fc8 <drvman_set_usb_driver>:

void drvman_set_usb_driver(uint8_t driver_id)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0a2      	sub	sp, #136	; 0x88
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
	char print_buf[128];
	if (driver_id >= MAX_DRIVERS)
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	2b07      	cmp	r3, #7
 8003fd6:	d90c      	bls.n	8003ff2 <drvman_set_usb_driver+0x2a>
	{
		sprintf(print_buf, "%s USB ID out of range", module_str);
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <drvman_set_usb_driver+0x94>)
 8003fde:	4920      	ldr	r1, [pc, #128]	; (8004060 <drvman_set_usb_driver+0x98>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f013 fc71 	bl	80178c8 <siprintf>
		console_println(print_buf);
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f9d4 	bl	8002398 <console_println>
		return;
 8003ff0:	e030      	b.n	8004054 <drvman_set_usb_driver+0x8c>
	}

	if (!drivers[driver_id])
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <drvman_set_usb_driver+0x9c>)
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <drvman_set_usb_driver+0x50>
	{
		sprintf(print_buf, "%s Target USB driver is NULL", module_str);
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4a16      	ldr	r2, [pc, #88]	; (800405c <drvman_set_usb_driver+0x94>)
 8004004:	4918      	ldr	r1, [pc, #96]	; (8004068 <drvman_set_usb_driver+0xa0>)
 8004006:	4618      	mov	r0, r3
 8004008:	f013 fc5e 	bl	80178c8 <siprintf>
		console_println(print_buf);
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe f9c1 	bl	8002398 <console_println>
		return;
 8004016:	e01d      	b.n	8004054 <drvman_set_usb_driver+0x8c>
	}

	usb_device = drivers[driver_id];
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	4a12      	ldr	r2, [pc, #72]	; (8004064 <drvman_set_usb_driver+0x9c>)
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	4a12      	ldr	r2, [pc, #72]	; (800406c <drvman_set_usb_driver+0xa4>)
 8004022:	6013      	str	r3, [r2, #0]
	usb_device->io_ops->start(usb_device);
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <drvman_set_usb_driver+0xa4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <drvman_set_usb_driver+0xa4>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	4610      	mov	r0, r2
 8004032:	4798      	blx	r3

	sprintf(print_buf, "%s Set USB driver: %s", module_str, drivers[driver_id]->name);
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <drvman_set_usb_driver+0x9c>)
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f107 0008 	add.w	r0, r7, #8
 8004042:	4a06      	ldr	r2, [pc, #24]	; (800405c <drvman_set_usb_driver+0x94>)
 8004044:	490a      	ldr	r1, [pc, #40]	; (8004070 <drvman_set_usb_driver+0xa8>)
 8004046:	f013 fc3f 	bl	80178c8 <siprintf>
	console_println(print_buf);
 800404a:	f107 0308 	add.w	r3, r7, #8
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe f9a2 	bl	8002398 <console_println>
}
 8004054:	3788      	adds	r7, #136	; 0x88
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	240000ac 	.word	0x240000ac
 8004060:	0801acb4 	.word	0x0801acb4
 8004064:	24006408 	.word	0x24006408
 8004068:	0801accc 	.word	0x0801accc
 800406c:	24006430 	.word	0x24006430
 8004070:	0801acec 	.word	0x0801acec

08004074 <encoder_decode_2ch_16b>:
// Loop unroll by a factor of 4

// This function seems to run about 2x faster then the generic decoder implementation
// (108 us vs 210 us) in debug mode
int8_t encoder_decode_2ch_16b(float32_t* dst_ch1, float32_t* dst_ch2, uint8_t* src, int32_t block_size)
{
 8004074:	b480      	push	{r7}
 8004076:	b08b      	sub	sp, #44	; 0x2c
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
	if (block_size & 0x7)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <encoder_decode_2ch_16b+0x1e>
		return -EINVBLKSIZE;
 800408c:	f06f 0302 	mvn.w	r3, #2
 8004090:	e0b8      	b.n	8004204 <encoder_decode_2ch_16b+0x190>

	int32_t dst_index = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t src_index = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	623b      	str	r3, [r7, #32]
	float32_t normalization_factor = 1.f / 32768.f;
 800409a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800409e:	61fb      	str	r3, [r7, #28]

	int16_t samples[4];
	while (dst_index < block_size)
 80040a0:	e0aa      	b.n	80041f8 <encoder_decode_2ch_16b+0x184>
	{
		samples[0] = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	82bb      	strh	r3, [r7, #20]
		samples[1] = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	82fb      	strh	r3, [r7, #22]
		samples[2] = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	833b      	strh	r3, [r7, #24]
		samples[3] = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	837b      	strh	r3, [r7, #26]

		samples[0] = src[src_index + 1];
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	3301      	adds	r3, #1
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b21b      	sxth	r3, r3
 80040be:	82bb      	strh	r3, [r7, #20]
		samples[1] = src[src_index + 3];
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	3303      	adds	r3, #3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	b21b      	sxth	r3, r3
 80040cc:	82fb      	strh	r3, [r7, #22]
		samples[2] = src[src_index + 5];
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	3305      	adds	r3, #5
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b21b      	sxth	r3, r3
 80040da:	833b      	strh	r3, [r7, #24]
		samples[3] = src[src_index + 7];
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	3307      	adds	r3, #7
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	837b      	strh	r3, [r7, #26]

		samples[0] <<= 8;
 80040ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	b21b      	sxth	r3, r3
 80040f2:	82bb      	strh	r3, [r7, #20]
		samples[1] <<= 8;
 80040f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	b21b      	sxth	r3, r3
 80040fc:	82fb      	strh	r3, [r7, #22]
		samples[2] <<= 8;
 80040fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	b21b      	sxth	r3, r3
 8004106:	833b      	strh	r3, [r7, #24]
		samples[3] <<= 8;
 8004108:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	b21b      	sxth	r3, r3
 8004110:	837b      	strh	r3, [r7, #26]

		samples[0] |= src[src_index];
 8004112:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	440b      	add	r3, r1
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b21b      	sxth	r3, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	b21b      	sxth	r3, r3
 8004124:	82bb      	strh	r3, [r7, #20]
		samples[1] |= src[src_index + 2];
 8004126:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	3302      	adds	r3, #2
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	440b      	add	r3, r1
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b21b      	sxth	r3, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	b21b      	sxth	r3, r3
 800413a:	82fb      	strh	r3, [r7, #22]
		samples[2] |= src[src_index + 4];
 800413c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	3304      	adds	r3, #4
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	440b      	add	r3, r1
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	4313      	orrs	r3, r2
 800414e:	b21b      	sxth	r3, r3
 8004150:	833b      	strh	r3, [r7, #24]
		samples[3] |= src[src_index + 6];
 8004152:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	3306      	adds	r3, #6
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	440b      	add	r3, r1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	b21b      	sxth	r3, r3
 8004166:	837b      	strh	r3, [r7, #26]

		dst_ch1[dst_index] = (float32_t) samples[0] * normalization_factor;
 8004168:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004184:	edc3 7a00 	vstr	s15, [r3]
		dst_ch2[dst_index] = (float32_t) samples[1] * normalization_factor;
 8004188:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4413      	add	r3, r2
 800419c:	edd7 7a07 	vldr	s15, [r7, #28]
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	edc3 7a00 	vstr	s15, [r3]
		dst_ch1[dst_index + 1] = (float32_t) samples[2] * normalization_factor;
 80041a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc3 7a00 	vstr	s15, [r3]
		dst_ch2[dst_index + 1] = (float32_t) samples[3] * normalization_factor;
 80041ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	3301      	adds	r3, #1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	4413      	add	r3, r2
 80041e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80041e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e8:	edc3 7a00 	vstr	s15, [r3]

		src_index += 8;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	3308      	adds	r3, #8
 80041f0:	623b      	str	r3, [r7, #32]
		dst_index += 2;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	3302      	adds	r3, #2
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
	while (dst_index < block_size)
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f6ff af50 	blt.w	80040a2 <encoder_decode_2ch_16b+0x2e>
	}
	return EOK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	372c      	adds	r7, #44	; 0x2c
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <logger_init>:
struct LogTimer* timer_list = timers;

TIM_HandleTypeDef* tim_hndl = NULL;

int8_t logger_init(TIM_HandleTypeDef* htim)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	if (!htim)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <logger_init+0x14>
		return -EINVAL;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e06f      	b.n	8004304 <logger_init+0xf4>

	tim_hndl = htim;
 8004224:	4a39      	ldr	r2, [pc, #228]	; (800430c <logger_init+0xfc>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6013      	str	r3, [r2, #0]

	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e04d      	b.n	80042cc <logger_init+0xbc>
	{
		timers[i].head = 0;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <logger_init+0x100>)
 8004234:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
		timers[i].last_start = 0;
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	4a32      	ldr	r2, [pc, #200]	; (8004310 <logger_init+0x100>)
 8004248:	f44f 718a 	mov.w	r1, #276	; 0x114
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

		for (uint8_t j = 0; j < MEASUREMENTS_PER_TIMER; j++)
 800425a:	2300      	movs	r3, #0
 800425c:	73bb      	strb	r3, [r7, #14]
 800425e:	e00f      	b.n	8004280 <logger_init+0x70>
			timers[i].measurements[j] = 0;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	7bb9      	ldrb	r1, [r7, #14]
 8004264:	482a      	ldr	r0, [pc, #168]	; (8004310 <logger_init+0x100>)
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	440b      	add	r3, r1
 8004272:	3302      	adds	r3, #2
 8004274:	2200      	movs	r2, #0
 8004276:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (uint8_t j = 0; j < MEASUREMENTS_PER_TIMER; j++)
 800427a:	7bbb      	ldrb	r3, [r7, #14]
 800427c:	3301      	adds	r3, #1
 800427e:	73bb      	strb	r3, [r7, #14]
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b3f      	cmp	r3, #63	; 0x3f
 8004284:	d9ec      	bls.n	8004260 <logger_init+0x50>

		timers[i].name = "";
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	4a21      	ldr	r2, [pc, #132]	; (8004310 <logger_init+0x100>)
 800428a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <logger_init+0x104>)
 8004296:	601a      	str	r2, [r3, #0]
		timers[i].worst_time = 0;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <logger_init+0x100>)
 800429c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
		timers[i].best_time = 0xFFFFFFFF;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <logger_init+0x100>)
 80042b2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295
 80042c4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_TIMERS; i++)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	3301      	adds	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b07      	cmp	r3, #7
 80042d0:	d9ae      	bls.n	8004230 <logger_init+0x20>
	}

	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	737b      	strb	r3, [r7, #13]
 80042d6:	e00d      	b.n	80042f4 <logger_init+0xe4>
	{
		events[i].name = "";
 80042d8:	7b7b      	ldrb	r3, [r7, #13]
 80042da:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <logger_init+0x108>)
 80042dc:	490d      	ldr	r1, [pc, #52]	; (8004314 <logger_init+0x104>)
 80042de:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		events[i].evnt_count = 0;
 80042e2:	7b7b      	ldrb	r3, [r7, #13]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <logger_init+0x108>)
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	2200      	movs	r2, #0
 80042ec:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < NUM_EVENTCNTRS; i++)
 80042ee:	7b7b      	ldrb	r3, [r7, #13]
 80042f0:	3301      	adds	r3, #1
 80042f2:	737b      	strb	r3, [r7, #13]
 80042f4:	7b7b      	ldrb	r3, [r7, #13]
 80042f6:	2b07      	cmp	r3, #7
 80042f8:	d9ee      	bls.n	80042d8 <logger_init+0xc8>
	}
	HAL_TIM_Base_Start(tim_hndl);
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <logger_init+0xfc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f00a fc96 	bl	800ec30 <HAL_TIM_Base_Start>
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	24006d14 	.word	0x24006d14
 8004310:	24006474 	.word	0x24006474
 8004314:	0801ad04 	.word	0x0801ad04
 8004318:	24006434 	.word	0x24006434

0800431c <logger_timer_set_name>:

int8_t logger_timer_set_name(uint8_t timer_id, char* name)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b07      	cmp	r3, #7
 800432c:	d902      	bls.n	8004334 <logger_timer_set_name+0x18>
		return -EINVAL;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e009      	b.n	8004348 <logger_timer_set_name+0x2c>

	timers[timer_id].name = name;
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <logger_timer_set_name+0x38>)
 8004338:	f44f 718a 	mov.w	r1, #276	; 0x114
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	601a      	str	r2, [r3, #0]
	return EOK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	24006474 	.word	0x24006474

08004358 <logger_log_timer_start>:

int8_t logger_log_timer_start(uint8_t timer_id)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b07      	cmp	r3, #7
 8004366:	d902      	bls.n	800436e <logger_log_timer_start+0x16>
		return -EINVAL;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	e015      	b.n	800439a <logger_log_timer_start+0x42>

	if (!tim_hndl)
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <logger_log_timer_start+0x50>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <logger_log_timer_start+0x24>
		return -EINVAL;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e00e      	b.n	800439a <logger_log_timer_start+0x42>

	timers[timer_id].last_start = tim_hndl->Instance->CNT;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <logger_log_timer_start+0x50>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004386:	4909      	ldr	r1, [pc, #36]	; (80043ac <logger_log_timer_start+0x54>)
 8004388:	f44f 708a 	mov.w	r0, #276	; 0x114
 800438c:	fb00 f303 	mul.w	r3, r0, r3
 8004390:	440b      	add	r3, r1
 8004392:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004396:	601a      	str	r2, [r3, #0]

	return EOK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	24006d14 	.word	0x24006d14
 80043ac:	24006474 	.word	0x24006474

080043b0 <logger_log_timer_stop>:

int8_t logger_log_timer_stop(uint8_t timer_id)
{
 80043b0:	b4b0      	push	{r4, r5, r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	2b07      	cmp	r3, #7
 80043be:	d902      	bls.n	80043c6 <logger_log_timer_stop+0x16>
		return -EINVAL;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	e09b      	b.n	80044fe <logger_log_timer_stop+0x14e>

	if (!tim_hndl)
 80043c6:	4b50      	ldr	r3, [pc, #320]	; (8004508 <logger_log_timer_stop+0x158>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <logger_log_timer_stop+0x24>
		return -EINVAL;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	e094      	b.n	80044fe <logger_log_timer_stop+0x14e>

	uint32_t time_stop = tim_hndl->Instance->CNT;
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <logger_log_timer_stop+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	60bb      	str	r3, [r7, #8]
	uint32_t measured_time;
	if (time_stop < timers[timer_id].last_start)
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	4a4a      	ldr	r2, [pc, #296]	; (800450c <logger_log_timer_stop+0x15c>)
 80043e2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d20e      	bcs.n	8004416 <logger_log_timer_stop+0x66>
		measured_time = 0xFFFFFFFF - timers[timer_id].last_start + time_stop;
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4a44      	ldr	r2, [pc, #272]	; (800450c <logger_log_timer_stop+0x15c>)
 80043fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e00c      	b.n	8004430 <logger_log_timer_stop+0x80>
	else
		measured_time = time_stop - timers[timer_id].last_start;
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4a3c      	ldr	r2, [pc, #240]	; (800450c <logger_log_timer_stop+0x15c>)
 800441a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	60fb      	str	r3, [r7, #12]

	timers[timer_id].measurements[timers[timer_id].head++] = measured_time;
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	4835      	ldr	r0, [pc, #212]	; (800450c <logger_log_timer_stop+0x15c>)
 8004436:	f44f 718a 	mov.w	r1, #276	; 0x114
 800443a:	fb03 f101 	mul.w	r1, r3, r1
 800443e:	4401      	add	r1, r0
 8004440:	3104      	adds	r1, #4
 8004442:	7809      	ldrb	r1, [r1, #0]
 8004444:	1c48      	adds	r0, r1, #1
 8004446:	b2c5      	uxtb	r5, r0
 8004448:	4830      	ldr	r0, [pc, #192]	; (800450c <logger_log_timer_stop+0x15c>)
 800444a:	f44f 748a 	mov.w	r4, #276	; 0x114
 800444e:	fb04 f303 	mul.w	r3, r4, r3
 8004452:	4403      	add	r3, r0
 8004454:	3304      	adds	r3, #4
 8004456:	4628      	mov	r0, r5
 8004458:	7018      	strb	r0, [r3, #0]
 800445a:	4608      	mov	r0, r1
 800445c:	492b      	ldr	r1, [pc, #172]	; (800450c <logger_log_timer_stop+0x15c>)
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	4403      	add	r3, r0
 800446a:	3302      	adds	r3, #2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (timers[timer_id].head >= MEASUREMENTS_PER_TIMER)
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	4a25      	ldr	r2, [pc, #148]	; (800450c <logger_log_timer_stop+0x15c>)
 8004476:	f44f 718a 	mov.w	r1, #276	; 0x114
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3304      	adds	r3, #4
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b3f      	cmp	r3, #63	; 0x3f
 8004486:	d909      	bls.n	800449c <logger_log_timer_stop+0xec>
		timers[timer_id].head = 0;
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4a20      	ldr	r2, [pc, #128]	; (800450c <logger_log_timer_stop+0x15c>)
 800448c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]

	if (measured_time > timers[timer_id].worst_time)
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	4a1b      	ldr	r2, [pc, #108]	; (800450c <logger_log_timer_stop+0x15c>)
 80044a0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d90a      	bls.n	80044cc <logger_log_timer_stop+0x11c>
		timers[timer_id].worst_time = measured_time;
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <logger_log_timer_stop+0x15c>)
 80044ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	601a      	str	r2, [r3, #0]

	if (measured_time < timers[timer_id].best_time)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4a0f      	ldr	r2, [pc, #60]	; (800450c <logger_log_timer_stop+0x15c>)
 80044d0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20a      	bcs.n	80044fc <logger_log_timer_stop+0x14c>
		timers[timer_id].best_time = measured_time;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <logger_log_timer_stop+0x15c>)
 80044ea:	f44f 718a 	mov.w	r1, #276	; 0x114
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

	return EOK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bcb0      	pop	{r4, r5, r7}
 8004506:	4770      	bx	lr
 8004508:	24006d14 	.word	0x24006d14
 800450c:	24006474 	.word	0x24006474

08004510 <logger_log_timer_avg>:

int8_t logger_log_timer_avg(uint8_t timer_id, uint32_t* avg_time)
{
 8004510:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	6039      	str	r1, [r7, #0]
 800451c:	71fb      	strb	r3, [r7, #7]
	if (timer_id >= NUM_TIMERS)
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	2b07      	cmp	r3, #7
 8004522:	d902      	bls.n	800452a <logger_log_timer_avg+0x1a>
		return -EINVAL;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e042      	b.n	80045b0 <logger_log_timer_avg+0xa0>

	if (!tim_hndl)
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <logger_log_timer_avg+0xac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <logger_log_timer_avg+0x28>
		return -EINVAL;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	e03b      	b.n	80045b0 <logger_log_timer_avg+0xa0>

	if (!avg_time)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <logger_log_timer_avg+0x34>
		return -EINVAL;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	e035      	b.n	80045b0 <logger_log_timer_avg+0xa0>

	*avg_time = 0;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

	uint64_t avg_sum = 0;
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < MEASUREMENTS_PER_TIMER; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e019      	b.n	8004590 <logger_log_timer_avg+0x80>
	{
		avg_sum += timers[timer_id].measurements[i];
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	7bf9      	ldrb	r1, [r7, #15]
 8004560:	4817      	ldr	r0, [pc, #92]	; (80045c0 <logger_log_timer_avg+0xb0>)
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	440b      	add	r3, r1
 800456e:	3302      	adds	r3, #2
 8004570:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004574:	2200      	movs	r2, #0
 8004576:	461c      	mov	r4, r3
 8004578:	4615      	mov	r5, r2
 800457a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800457e:	eb12 0804 	adds.w	r8, r2, r4
 8004582:	eb43 0905 	adc.w	r9, r3, r5
 8004586:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < MEASUREMENTS_PER_TIMER; i++)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	3301      	adds	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b3f      	cmp	r3, #63	; 0x3f
 8004594:	d9e2      	bls.n	800455c <logger_log_timer_avg+0x4c>
	}
	*avg_time = avg_sum / MEASUREMENTS_PER_TIMER;
 8004596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	0982      	lsrs	r2, r0, #6
 80045a4:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 80045a8:	098b      	lsrs	r3, r1, #6
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	601a      	str	r2, [r3, #0]

	return EOK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	371c      	adds	r7, #28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80045ba:	4770      	bx	lr
 80045bc:	24006d14 	.word	0x24006d14
 80045c0:	24006474 	.word	0x24006474

080045c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ca:	2003      	movs	r0, #3
 80045cc:	f000 f9b0 	bl	8004930 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045d0:	f007 fc02 	bl	800bdd8 <HAL_RCC_GetSysClockFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_Init+0x68>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	4913      	ldr	r1, [pc, #76]	; (8004630 <HAL_Init+0x6c>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_Init+0x68>)
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_Init+0x6c>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <HAL_Init+0x70>)
 8004606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004608:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <HAL_Init+0x74>)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800460e:	200f      	movs	r0, #15
 8004610:	f000 f814 	bl	800463c <HAL_InitTick>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e002      	b.n	8004624 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800461e:	f7fc fedd 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	58024400 	.word	0x58024400
 8004630:	0801ad50 	.word	0x0801ad50
 8004634:	24000004 	.word	0x24000004
 8004638:	24000000 	.word	0x24000000

0800463c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_InitTick+0x60>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e021      	b.n	8004694 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_InitTick+0x64>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_InitTick+0x60>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800465e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f9a3 	bl	80049b2 <HAL_SYSTICK_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e00e      	b.n	8004694 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d80a      	bhi.n	8004692 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800467c:	2200      	movs	r2, #0
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	f000 f95f 	bl	8004946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004688:	4a06      	ldr	r2, [pc, #24]	; (80046a4 <HAL_InitTick+0x68>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	240000d0 	.word	0x240000d0
 80046a0:	24000000 	.word	0x24000000
 80046a4:	240000cc 	.word	0x240000cc

080046a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_IncTick+0x20>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_IncTick+0x24>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_IncTick+0x24>)
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	240000d0 	.word	0x240000d0
 80046cc:	24006d18 	.word	0x24006d18

080046d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return uwTick;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_GetTick+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	24006d18 	.word	0x24006d18

080046e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7ff ffee 	bl	80046d0 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d005      	beq.n	800470e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_Delay+0x44>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800470e:	bf00      	nop
 8004710:	f7ff ffde 	bl	80046d0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	429a      	cmp	r2, r3
 800471e:	d8f7      	bhi.n	8004710 <HAL_Delay+0x28>
  {
  }
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	240000d0 	.word	0x240000d0

08004730 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_GetREVID+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0c1b      	lsrs	r3, r3, #16
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	5c001000 	.word	0x5c001000

08004748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <__NVIC_SetPriorityGrouping+0x40>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	4313      	orrs	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <__NVIC_SetPriorityGrouping+0x40>)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	60d3      	str	r3, [r2, #12]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00
 800478c:	05fa0000 	.word	0x05fa0000

08004790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0307 	and.w	r3, r3, #7
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db0b      	blt.n	80047d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f003 021f 	and.w	r2, r3, #31
 80047c4:	4907      	ldr	r1, [pc, #28]	; (80047e4 <__NVIC_EnableIRQ+0x38>)
 80047c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2001      	movs	r0, #1
 80047ce:	fa00 f202 	lsl.w	r2, r0, r2
 80047d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e100 	.word	0xe000e100

080047e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db12      	blt.n	8004820 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	490a      	ldr	r1, [pc, #40]	; (800482c <__NVIC_DisableIRQ+0x44>)
 8004802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2001      	movs	r0, #1
 800480a:	fa00 f202 	lsl.w	r2, r0, r2
 800480e:	3320      	adds	r3, #32
 8004810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004814:	f3bf 8f4f 	dsb	sy
}
 8004818:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800481a:	f3bf 8f6f 	isb	sy
}
 800481e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000e100 	.word	0xe000e100

08004830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800483c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004840:	2b00      	cmp	r3, #0
 8004842:	db0a      	blt.n	800485a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <__NVIC_SetPriority+0x4c>)
 800484a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	440b      	add	r3, r1
 8004854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004858:	e00a      	b.n	8004870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4908      	ldr	r1, [pc, #32]	; (8004880 <__NVIC_SetPriority+0x50>)
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3b04      	subs	r3, #4
 8004868:	0112      	lsls	r2, r2, #4
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	440b      	add	r3, r1
 800486e:	761a      	strb	r2, [r3, #24]
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000e100 	.word	0xe000e100
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f1c3 0307 	rsb	r3, r3, #7
 800489e:	2b04      	cmp	r3, #4
 80048a0:	bf28      	it	cs
 80048a2:	2304      	movcs	r3, #4
 80048a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d902      	bls.n	80048b4 <NVIC_EncodePriority+0x30>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3b03      	subs	r3, #3
 80048b2:	e000      	b.n	80048b6 <NVIC_EncodePriority+0x32>
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	401a      	ands	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048cc:	f04f 31ff 	mov.w	r1, #4294967295
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	43d9      	mvns	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	4313      	orrs	r3, r2
         );
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048fc:	d301      	bcc.n	8004902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048fe:	2301      	movs	r3, #1
 8004900:	e00f      	b.n	8004922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <SysTick_Config+0x40>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490a:	210f      	movs	r1, #15
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	f7ff ff8e 	bl	8004830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <SysTick_Config+0x40>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <SysTick_Config+0x40>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010

08004930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff05 	bl	8004748 <__NVIC_SetPriorityGrouping>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004954:	f7ff ff1c 	bl	8004790 <__NVIC_GetPriorityGrouping>
 8004958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7ff ff90 	bl	8004884 <NVIC_EncodePriority>
 8004964:	4602      	mov	r2, r0
 8004966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff5f 	bl	8004830 <__NVIC_SetPriority>
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff0f 	bl	80047ac <__NVIC_EnableIRQ>
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	4603      	mov	r3, r0
 800499e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff ff1f 	bl	80047e8 <__NVIC_DisableIRQ>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff ff96 	bl	80048ec <SysTick_Config>
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e034      	b.n	8004a48 <HAL_DAC_Init+0x7c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	791b      	ldrb	r3, [r3, #4]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d125      	bne.n	8004a34 <HAL_DAC_Init+0x68>
  {
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the DAC Callback settings */
    hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <HAL_DAC_Init+0x84>)
 80049ec:	615a      	str	r2, [r3, #20]
    hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_DAC_Init+0x88>)
 80049f2:	619a      	str	r2, [r3, #24]
    hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_DAC_Init+0x8c>)
 80049f8:	61da      	str	r2, [r3, #28]
    hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_DAC_Init+0x90>)
 80049fe:	621a      	str	r2, [r3, #32]

    hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <HAL_DAC_Init+0x94>)
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
    hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <HAL_DAC_Init+0x98>)
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_DAC_Init+0x9c>)
 8004a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_DAC_Init+0xa0>)
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30

    if (hdac->MspInitCallback == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_DAC_Init+0x5a>
    {
      hdac->MspInitCallback             = HAL_DAC_MspInit;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_DAC_Init+0xa4>)
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08004d3f 	.word	0x08004d3f
 8004a54:	08004d53 	.word	0x08004d53
 8004a58:	08004d67 	.word	0x08004d67
 8004a5c:	08004d7b 	.word	0x08004d7b
 8004a60:	080051af 	.word	0x080051af
 8004a64:	080051c3 	.word	0x080051c3
 8004a68:	080051d7 	.word	0x080051d7
 8004a6c:	080051eb 	.word	0x080051eb
 8004a70:	08001411 	.word	0x08001411

08004a74 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0a2      	b.n	8004bd2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	795b      	ldrb	r3, [r3, #5]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_DAC_Start_DMA+0x24>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e09c      	b.n	8004bd2 <HAL_DAC_Start_DMA+0x15e>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d129      	bne.n	8004afe <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a4b      	ldr	r2, [pc, #300]	; (8004bdc <HAL_DAC_Start_DMA+0x168>)
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <HAL_DAC_Start_DMA+0x16c>)
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4a49      	ldr	r2, [pc, #292]	; (8004be4 <HAL_DAC_Start_DMA+0x170>)
 8004ac0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_DAC_Start_DMA+0x6c>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d005      	beq.n	8004aea <HAL_DAC_Start_DMA+0x76>
 8004ade:	e009      	b.n	8004af4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	613b      	str	r3, [r7, #16]
        break;
 8004ae8:	e033      	b.n	8004b52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	613b      	str	r3, [r7, #16]
        break;
 8004af2:	e02e      	b.n	8004b52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3310      	adds	r3, #16
 8004afa:	613b      	str	r3, [r7, #16]
        break;
 8004afc:	e029      	b.n	8004b52 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a39      	ldr	r2, [pc, #228]	; (8004be8 <HAL_DAC_Start_DMA+0x174>)
 8004b04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_DAC_Start_DMA+0x178>)
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4a37      	ldr	r2, [pc, #220]	; (8004bf0 <HAL_DAC_Start_DMA+0x17c>)
 8004b14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_DAC_Start_DMA+0xc0>
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d005      	beq.n	8004b3e <HAL_DAC_Start_DMA+0xca>
 8004b32:	e009      	b.n	8004b48 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	613b      	str	r3, [r7, #16]
        break;
 8004b3c:	e009      	b.n	8004b52 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3318      	adds	r3, #24
 8004b44:	613b      	str	r3, [r7, #16]
        break;
 8004b46:	e004      	b.n	8004b52 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	331c      	adds	r3, #28
 8004b4e:	613b      	str	r3, [r7, #16]
        break;
 8004b50:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d111      	bne.n	8004b7c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6898      	ldr	r0, [r3, #8]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	f001 f88f 	bl	8005c94 <HAL_DMA_Start_IT>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
 8004b7a:	e010      	b.n	8004b9e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68d8      	ldr	r0, [r3, #12]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	f001 f87d 	bl	8005c94 <HAL_DMA_Start_IT>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e005      	b.n	8004bd0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800513d 	.word	0x0800513d
 8004be0:	08005161 	.word	0x08005161
 8004be4:	0800517f 	.word	0x0800517f
 8004be8:	080051ff 	.word	0x080051ff
 8004bec:	08005223 	.word	0x08005223
 8004bf0:	08005241 	.word	0x08005241

08004bf4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e03e      	b.n	8004c86 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43da      	mvns	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	400a      	ands	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2201      	movs	r2, #1
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	400a      	ands	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fa8b 	bl	8006168 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e00c      	b.n	8004c7e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fa7d 	bl	8006168 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004c7c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01e      	beq.n	8004cee <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d019      	beq.n	8004cee <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f043 0201 	orr.w	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ce4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f043 0202 	orr.w	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_DAC_ConfigChannel+0x1e>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e12a      	b.n	8005008 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	795b      	ldrb	r3, [r3, #5]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_DAC_ConfigChannel+0x2e>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e124      	b.n	8005008 <HAL_DAC_ConfigChannel+0x278>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d17a      	bne.n	8004ec8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004dd2:	f7ff fc7d 	bl	80046d0 <HAL_GetTick>
 8004dd6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d13d      	bne.n	8004e5a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dde:	e018      	b.n	8004e12 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004de0:	f7ff fc76 	bl	80046d0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d911      	bls.n	8004e12 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df4:	4b86      	ldr	r3, [pc, #536]	; (8005010 <HAL_DAC_ConfigChannel+0x280>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f043 0208 	orr.w	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0fa      	b.n	8005008 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e18:	4b7d      	ldr	r3, [pc, #500]	; (8005010 <HAL_DAC_ConfigChannel+0x280>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1df      	bne.n	8004de0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	6992      	ldr	r2, [r2, #24]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
 8004e2a:	e020      	b.n	8004e6e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e2c:	f7ff fc50 	bl	80046d0 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d90f      	bls.n	8004e5a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da0a      	bge.n	8004e5a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f043 0208 	orr.w	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2203      	movs	r2, #3
 8004e54:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0d6      	b.n	8005008 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	dbe3      	blt.n	8004e2c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	6992      	ldr	r2, [r2, #24]
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	ea02 0103 	and.w	r1, r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	409a      	lsls	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	21ff      	movs	r1, #255	; 0xff
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	ea02 0103 	and.w	r1, r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d11d      	bne.n	8004f0c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	221f      	movs	r2, #31
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2207      	movs	r2, #7
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	e00f      	b.n	8004f56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d102      	bne.n	8004f44 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e008      	b.n	8004f56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f50:	e001      	b.n	8004f56 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43da      	mvns	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	22c0      	movs	r2, #192	; 0xc0
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005008:	4618      	mov	r0, r3
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20008000 	.word	0x20008000

08005014 <HAL_DAC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval status
  */
HAL_StatusTypeDef HAL_DAC_RegisterCallback(DAC_HandleTypeDef *hdac, HAL_DAC_CallbackIDTypeDef CallbackID,
                                           pDAC_CallbackTypeDef pCallback)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	460b      	mov	r3, r1
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_DAC_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e07f      	b.n	8005130 <HAL_DAC_RegisterCallback+0x11c>
  }

  if (pCallback == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d107      	bne.n	8005046 <HAL_DAC_RegisterCallback+0x32>
  {
    /* Update the error code */
    hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f043 0210 	orr.w	r2, r3, #16
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e074      	b.n	8005130 <HAL_DAC_RegisterCallback+0x11c>
  }

  if (hdac->State == HAL_DAC_STATE_READY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	791b      	ldrb	r3, [r3, #4]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d14a      	bne.n	80050e6 <HAL_DAC_RegisterCallback+0xd2>
  {
    switch (CallbackID)
 8005050:	7afb      	ldrb	r3, [r7, #11]
 8005052:	2b09      	cmp	r3, #9
 8005054:	d83e      	bhi.n	80050d4 <HAL_DAC_RegisterCallback+0xc0>
 8005056:	a201      	add	r2, pc, #4	; (adr r2, 800505c <HAL_DAC_RegisterCallback+0x48>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	08005095 	.word	0x08005095
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080050a5 	.word	0x080050a5
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050c5 	.word	0x080050c5
 8005080:	080050cd 	.word	0x080050cd
    {
      case HAL_DAC_CH1_COMPLETE_CB_ID :
        hdac->ConvCpltCallbackCh1 = pCallback;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	615a      	str	r2, [r3, #20]
        break;
 800508a:	e050      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_HALF_COMPLETE_CB_ID :
        hdac->ConvHalfCpltCallbackCh1 = pCallback;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
        break;
 8005092:	e04c      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_ERROR_ID :
        hdac->ErrorCallbackCh1 = pCallback;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	61da      	str	r2, [r3, #28]
        break;
 800509a:	e048      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH1_UNDERRUN_CB_ID :
        hdac->DMAUnderrunCallbackCh1 = pCallback;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]
        break;
 80050a2:	e044      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>

      case HAL_DAC_CH2_COMPLETE_CB_ID :
        hdac->ConvCpltCallbackCh2 = pCallback;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80050aa:	e040      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_HALF_COMPLETE_CB_ID :
        hdac->ConvHalfCpltCallbackCh2 = pCallback;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80050b2:	e03c      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_ERROR_ID :
        hdac->ErrorCallbackCh2 = pCallback;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80050ba:	e038      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_CH2_UNDERRUN_CB_ID :
        hdac->DMAUnderrunCallbackCh2 = pCallback;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80050c2:	e034      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>

      case HAL_DAC_MSPINIT_CB_ID :
        hdac->MspInitCallback = pCallback;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80050ca:	e030      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_MSPDEINIT_CB_ID :
        hdac->MspDeInitCallback = pCallback;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80050d2:	e02c      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      default :
        /* Update the error code */
        hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	611a      	str	r2, [r3, #16]
        /* update return status */
        status =  HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
        break;
 80050e4:	e023      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
    }
  }
  else if (hdac->State == HAL_DAC_STATE_RESET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	791b      	ldrb	r3, [r3, #4]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d116      	bne.n	800511e <HAL_DAC_RegisterCallback+0x10a>
  {
    switch (CallbackID)
 80050f0:	7afb      	ldrb	r3, [r7, #11]
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d002      	beq.n	80050fc <HAL_DAC_RegisterCallback+0xe8>
 80050f6:	2b09      	cmp	r3, #9
 80050f8:	d004      	beq.n	8005104 <HAL_DAC_RegisterCallback+0xf0>
 80050fa:	e007      	b.n	800510c <HAL_DAC_RegisterCallback+0xf8>
    {
      case HAL_DAC_MSPINIT_CB_ID :
        hdac->MspInitCallback = pCallback;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8005102:	e014      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      case HAL_DAC_MSPDEINIT_CB_ID :
        hdac->MspDeInitCallback = pCallback;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800510a:	e010      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
      default :
        /* Update the error code */
        hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f043 0210 	orr.w	r2, r3, #16
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	611a      	str	r2, [r3, #16]
        /* update return status */
        status =  HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
        break;
 800511c:	e007      	b.n	800512e <HAL_DAC_RegisterCallback+0x11a>
    }
  }
  else
  {
    /* Update the error code */
    hdac->ErrorCode |= HAL_DAC_ERROR_INVALID_CALLBACK;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	611a      	str	r2, [r3, #16]
    /* update return status */
    status =  HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	4798      	blx	r3
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	711a      	strb	r2, [r3, #4]
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	4798      	blx	r3
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f043 0204 	orr.w	r2, r3, #4
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	4798      	blx	r3
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	711a      	strb	r2, [r3, #4]
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	4798      	blx	r3
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	711a      	strb	r2, [r3, #4]
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	4798      	blx	r3
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	4798      	blx	r3
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	711a      	strb	r2, [r3, #4]
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005278:	f7ff fa2a 	bl	80046d0 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e316      	b.n	80058b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a66      	ldr	r2, [pc, #408]	; (8005428 <HAL_DMA_Init+0x1b8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04a      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a65      	ldr	r2, [pc, #404]	; (800542c <HAL_DMA_Init+0x1bc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d045      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a63      	ldr	r2, [pc, #396]	; (8005430 <HAL_DMA_Init+0x1c0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d040      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a62      	ldr	r2, [pc, #392]	; (8005434 <HAL_DMA_Init+0x1c4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d03b      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a60      	ldr	r2, [pc, #384]	; (8005438 <HAL_DMA_Init+0x1c8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d036      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5f      	ldr	r2, [pc, #380]	; (800543c <HAL_DMA_Init+0x1cc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d031      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_DMA_Init+0x1d0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02c      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5c      	ldr	r2, [pc, #368]	; (8005444 <HAL_DMA_Init+0x1d4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d027      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5a      	ldr	r2, [pc, #360]	; (8005448 <HAL_DMA_Init+0x1d8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a59      	ldr	r2, [pc, #356]	; (800544c <HAL_DMA_Init+0x1dc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d01d      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a57      	ldr	r2, [pc, #348]	; (8005450 <HAL_DMA_Init+0x1e0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a56      	ldr	r2, [pc, #344]	; (8005454 <HAL_DMA_Init+0x1e4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a54      	ldr	r2, [pc, #336]	; (8005458 <HAL_DMA_Init+0x1e8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a53      	ldr	r2, [pc, #332]	; (800545c <HAL_DMA_Init+0x1ec>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a51      	ldr	r2, [pc, #324]	; (8005460 <HAL_DMA_Init+0x1f0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_DMA_Init+0xb8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a50      	ldr	r2, [pc, #320]	; (8005464 <HAL_DMA_Init+0x1f4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d101      	bne.n	800532c <HAL_DMA_Init+0xbc>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_DMA_Init+0xbe>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 813b 	beq.w	80055aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a37      	ldr	r2, [pc, #220]	; (8005428 <HAL_DMA_Init+0x1b8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d04a      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a36      	ldr	r2, [pc, #216]	; (800542c <HAL_DMA_Init+0x1bc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d045      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a34      	ldr	r2, [pc, #208]	; (8005430 <HAL_DMA_Init+0x1c0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d040      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a33      	ldr	r2, [pc, #204]	; (8005434 <HAL_DMA_Init+0x1c4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d03b      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a31      	ldr	r2, [pc, #196]	; (8005438 <HAL_DMA_Init+0x1c8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d036      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a30      	ldr	r2, [pc, #192]	; (800543c <HAL_DMA_Init+0x1cc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d031      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2e      	ldr	r2, [pc, #184]	; (8005440 <HAL_DMA_Init+0x1d0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d02c      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2d      	ldr	r2, [pc, #180]	; (8005444 <HAL_DMA_Init+0x1d4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d027      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2b      	ldr	r2, [pc, #172]	; (8005448 <HAL_DMA_Init+0x1d8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2a      	ldr	r2, [pc, #168]	; (800544c <HAL_DMA_Init+0x1dc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d01d      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a28      	ldr	r2, [pc, #160]	; (8005450 <HAL_DMA_Init+0x1e0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d018      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a27      	ldr	r2, [pc, #156]	; (8005454 <HAL_DMA_Init+0x1e4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a25      	ldr	r2, [pc, #148]	; (8005458 <HAL_DMA_Init+0x1e8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a24      	ldr	r2, [pc, #144]	; (800545c <HAL_DMA_Init+0x1ec>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <HAL_DMA_Init+0x1f0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_DMA_Init+0x174>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a21      	ldr	r2, [pc, #132]	; (8005464 <HAL_DMA_Init+0x1f4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <HAL_DMA_Init+0x186>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0201 	bic.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e007      	b.n	8005406 <HAL_DMA_Init+0x196>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005406:	e02f      	b.n	8005468 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005408:	f7ff f962 	bl	80046d0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b05      	cmp	r3, #5
 8005414:	d928      	bls.n	8005468 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2203      	movs	r2, #3
 8005420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e246      	b.n	80058b6 <HAL_DMA_Init+0x646>
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	40020040 	.word	0x40020040
 8005434:	40020058 	.word	0x40020058
 8005438:	40020070 	.word	0x40020070
 800543c:	40020088 	.word	0x40020088
 8005440:	400200a0 	.word	0x400200a0
 8005444:	400200b8 	.word	0x400200b8
 8005448:	40020410 	.word	0x40020410
 800544c:	40020428 	.word	0x40020428
 8005450:	40020440 	.word	0x40020440
 8005454:	40020458 	.word	0x40020458
 8005458:	40020470 	.word	0x40020470
 800545c:	40020488 	.word	0x40020488
 8005460:	400204a0 	.word	0x400204a0
 8005464:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1c8      	bne.n	8005408 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4b83      	ldr	r3, [pc, #524]	; (8005690 <HAL_DMA_Init+0x420>)
 8005482:	4013      	ands	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800548e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800549a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d107      	bne.n	80054cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	4313      	orrs	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80054cc:	4b71      	ldr	r3, [pc, #452]	; (8005694 <HAL_DMA_Init+0x424>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b71      	ldr	r3, [pc, #452]	; (8005698 <HAL_DMA_Init+0x428>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d8:	d328      	bcc.n	800552c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b28      	cmp	r3, #40	; 0x28
 80054e0:	d903      	bls.n	80054ea <HAL_DMA_Init+0x27a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b2e      	cmp	r3, #46	; 0x2e
 80054e8:	d917      	bls.n	800551a <HAL_DMA_Init+0x2aa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b3e      	cmp	r3, #62	; 0x3e
 80054f0:	d903      	bls.n	80054fa <HAL_DMA_Init+0x28a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b42      	cmp	r3, #66	; 0x42
 80054f8:	d90f      	bls.n	800551a <HAL_DMA_Init+0x2aa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b46      	cmp	r3, #70	; 0x46
 8005500:	d903      	bls.n	800550a <HAL_DMA_Init+0x29a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b48      	cmp	r3, #72	; 0x48
 8005508:	d907      	bls.n	800551a <HAL_DMA_Init+0x2aa>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b4e      	cmp	r3, #78	; 0x4e
 8005510:	d905      	bls.n	800551e <HAL_DMA_Init+0x2ae>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b52      	cmp	r3, #82	; 0x52
 8005518:	d801      	bhi.n	800551e <HAL_DMA_Init+0x2ae>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_DMA_Init+0x2b0>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2b04      	cmp	r3, #4
 8005554:	d117      	bne.n	8005586 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00e      	beq.n	8005586 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fce9 	bl	8007f40 <DMA_CheckFifoParam>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2240      	movs	r2, #64	; 0x40
 8005578:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e197      	b.n	80058b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f002 fc24 	bl	8007ddc <DMA_CalcBaseAndBitshift>
 8005594:	4603      	mov	r3, r0
 8005596:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	223f      	movs	r2, #63	; 0x3f
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	e0cd      	b.n	8005746 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a3b      	ldr	r2, [pc, #236]	; (800569c <HAL_DMA_Init+0x42c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a39      	ldr	r2, [pc, #228]	; (80056a0 <HAL_DMA_Init+0x430>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01d      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <HAL_DMA_Init+0x434>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a36      	ldr	r2, [pc, #216]	; (80056a8 <HAL_DMA_Init+0x438>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a35      	ldr	r2, [pc, #212]	; (80056ac <HAL_DMA_Init+0x43c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a33      	ldr	r2, [pc, #204]	; (80056b0 <HAL_DMA_Init+0x440>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a32      	ldr	r2, [pc, #200]	; (80056b4 <HAL_DMA_Init+0x444>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_DMA_Init+0x38a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a30      	ldr	r2, [pc, #192]	; (80056b8 <HAL_DMA_Init+0x448>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d101      	bne.n	80055fe <HAL_DMA_Init+0x38e>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_DMA_Init+0x390>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8097 	beq.w	8005734 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a24      	ldr	r2, [pc, #144]	; (800569c <HAL_DMA_Init+0x42c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d021      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a22      	ldr	r2, [pc, #136]	; (80056a0 <HAL_DMA_Init+0x430>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01c      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <HAL_DMA_Init+0x434>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d017      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_DMA_Init+0x438>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d012      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_DMA_Init+0x43c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00d      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <HAL_DMA_Init+0x440>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d008      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_DMA_Init+0x444>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <HAL_DMA_Init+0x3e4>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_DMA_Init+0x448>)
 8005652:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <HAL_DMA_Init+0x44c>)
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d021      	beq.n	80056c0 <HAL_DMA_Init+0x450>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d102      	bne.n	800568a <HAL_DMA_Init+0x41a>
 8005684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005688:	e01b      	b.n	80056c2 <HAL_DMA_Init+0x452>
 800568a:	2300      	movs	r3, #0
 800568c:	e019      	b.n	80056c2 <HAL_DMA_Init+0x452>
 800568e:	bf00      	nop
 8005690:	fe10803f 	.word	0xfe10803f
 8005694:	5c001000 	.word	0x5c001000
 8005698:	ffff0000 	.word	0xffff0000
 800569c:	58025408 	.word	0x58025408
 80056a0:	5802541c 	.word	0x5802541c
 80056a4:	58025430 	.word	0x58025430
 80056a8:	58025444 	.word	0x58025444
 80056ac:	58025458 	.word	0x58025458
 80056b0:	5802546c 	.word	0x5802546c
 80056b4:	58025480 	.word	0x58025480
 80056b8:	58025494 	.word	0x58025494
 80056bc:	fffe000f 	.word	0xfffe000f
 80056c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68d2      	ldr	r2, [r2, #12]
 80056c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80056d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80056d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80056e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80056e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80056f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	4b6e      	ldr	r3, [pc, #440]	; (80058c0 <HAL_DMA_Init+0x650>)
 8005708:	4413      	add	r3, r2
 800570a:	4a6e      	ldr	r2, [pc, #440]	; (80058c4 <HAL_DMA_Init+0x654>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 fb5f 	bl	8007ddc <DMA_CalcBaseAndBitshift>
 800571e:	4603      	mov	r3, r0
 8005720:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	e008      	b.n	8005746 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0b7      	b.n	80058b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5f      	ldr	r2, [pc, #380]	; (80058c8 <HAL_DMA_Init+0x658>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d072      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a5d      	ldr	r2, [pc, #372]	; (80058cc <HAL_DMA_Init+0x65c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d06d      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5c      	ldr	r2, [pc, #368]	; (80058d0 <HAL_DMA_Init+0x660>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d068      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a5a      	ldr	r2, [pc, #360]	; (80058d4 <HAL_DMA_Init+0x664>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d063      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a59      	ldr	r2, [pc, #356]	; (80058d8 <HAL_DMA_Init+0x668>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d05e      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a57      	ldr	r2, [pc, #348]	; (80058dc <HAL_DMA_Init+0x66c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d059      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a56      	ldr	r2, [pc, #344]	; (80058e0 <HAL_DMA_Init+0x670>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d054      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a54      	ldr	r2, [pc, #336]	; (80058e4 <HAL_DMA_Init+0x674>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d04f      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a53      	ldr	r2, [pc, #332]	; (80058e8 <HAL_DMA_Init+0x678>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a51      	ldr	r2, [pc, #324]	; (80058ec <HAL_DMA_Init+0x67c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a50      	ldr	r2, [pc, #320]	; (80058f0 <HAL_DMA_Init+0x680>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <HAL_DMA_Init+0x684>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a4d      	ldr	r2, [pc, #308]	; (80058f8 <HAL_DMA_Init+0x688>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4b      	ldr	r2, [pc, #300]	; (80058fc <HAL_DMA_Init+0x68c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_DMA_Init+0x690>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_DMA_Init+0x694>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a47      	ldr	r2, [pc, #284]	; (8005908 <HAL_DMA_Init+0x698>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a45      	ldr	r2, [pc, #276]	; (800590c <HAL_DMA_Init+0x69c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a44      	ldr	r2, [pc, #272]	; (8005910 <HAL_DMA_Init+0x6a0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a42      	ldr	r2, [pc, #264]	; (8005914 <HAL_DMA_Init+0x6a4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a41      	ldr	r2, [pc, #260]	; (8005918 <HAL_DMA_Init+0x6a8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a3f      	ldr	r2, [pc, #252]	; (800591c <HAL_DMA_Init+0x6ac>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a3e      	ldr	r2, [pc, #248]	; (8005920 <HAL_DMA_Init+0x6b0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_Init+0x5c6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <HAL_DMA_Init+0x6b4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_DMA_Init+0x5ca>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_DMA_Init+0x5cc>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d032      	beq.n	80058a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 fbf9 	bl	8008038 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d102      	bne.n	8005854 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005868:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <HAL_DMA_Init+0x624>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b08      	cmp	r3, #8
 8005878:	d80c      	bhi.n	8005894 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f002 fc76 	bl	800816c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	e008      	b.n	80058a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	a7fdabf8 	.word	0xa7fdabf8
 80058c4:	cccccccd 	.word	0xcccccccd
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
 8005908:	58025408 	.word	0x58025408
 800590c:	5802541c 	.word	0x5802541c
 8005910:	58025430 	.word	0x58025430
 8005914:	58025444 	.word	0x58025444
 8005918:	58025458 	.word	0x58025458
 800591c:	5802546c 	.word	0x5802546c
 8005920:	58025480 	.word	0x58025480
 8005924:	58025494 	.word	0x58025494

08005928 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e1a8      	b.n	8005c8c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a82      	ldr	r2, [pc, #520]	; (8005b48 <HAL_DMA_DeInit+0x220>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d04a      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a80      	ldr	r2, [pc, #512]	; (8005b4c <HAL_DMA_DeInit+0x224>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d045      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7f      	ldr	r2, [pc, #508]	; (8005b50 <HAL_DMA_DeInit+0x228>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d040      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_DMA_DeInit+0x22c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d03b      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a7c      	ldr	r2, [pc, #496]	; (8005b58 <HAL_DMA_DeInit+0x230>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d036      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a7a      	ldr	r2, [pc, #488]	; (8005b5c <HAL_DMA_DeInit+0x234>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d031      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a79      	ldr	r2, [pc, #484]	; (8005b60 <HAL_DMA_DeInit+0x238>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d02c      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a77      	ldr	r2, [pc, #476]	; (8005b64 <HAL_DMA_DeInit+0x23c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d027      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a76      	ldr	r2, [pc, #472]	; (8005b68 <HAL_DMA_DeInit+0x240>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a74      	ldr	r2, [pc, #464]	; (8005b6c <HAL_DMA_DeInit+0x244>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01d      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a73      	ldr	r2, [pc, #460]	; (8005b70 <HAL_DMA_DeInit+0x248>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d018      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a71      	ldr	r2, [pc, #452]	; (8005b74 <HAL_DMA_DeInit+0x24c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_DMA_DeInit+0x250>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6e      	ldr	r2, [pc, #440]	; (8005b7c <HAL_DMA_DeInit+0x254>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a6d      	ldr	r2, [pc, #436]	; (8005b80 <HAL_DMA_DeInit+0x258>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_DMA_DeInit+0xb2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6b      	ldr	r2, [pc, #428]	; (8005b84 <HAL_DMA_DeInit+0x25c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d108      	bne.n	80059ec <HAL_DMA_DeInit+0xc4>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e007      	b.n	80059fc <HAL_DMA_DeInit+0xd4>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a51      	ldr	r2, [pc, #324]	; (8005b48 <HAL_DMA_DeInit+0x220>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04a      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a50      	ldr	r2, [pc, #320]	; (8005b4c <HAL_DMA_DeInit+0x224>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d045      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4e      	ldr	r2, [pc, #312]	; (8005b50 <HAL_DMA_DeInit+0x228>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d040      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4d      	ldr	r2, [pc, #308]	; (8005b54 <HAL_DMA_DeInit+0x22c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d03b      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4b      	ldr	r2, [pc, #300]	; (8005b58 <HAL_DMA_DeInit+0x230>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d036      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4a      	ldr	r2, [pc, #296]	; (8005b5c <HAL_DMA_DeInit+0x234>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d031      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a48      	ldr	r2, [pc, #288]	; (8005b60 <HAL_DMA_DeInit+0x238>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02c      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a47      	ldr	r2, [pc, #284]	; (8005b64 <HAL_DMA_DeInit+0x23c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d027      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a45      	ldr	r2, [pc, #276]	; (8005b68 <HAL_DMA_DeInit+0x240>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <HAL_DMA_DeInit+0x244>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01d      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a42      	ldr	r2, [pc, #264]	; (8005b70 <HAL_DMA_DeInit+0x248>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a41      	ldr	r2, [pc, #260]	; (8005b74 <HAL_DMA_DeInit+0x24c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3f      	ldr	r2, [pc, #252]	; (8005b78 <HAL_DMA_DeInit+0x250>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3e      	ldr	r2, [pc, #248]	; (8005b7c <HAL_DMA_DeInit+0x254>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3c      	ldr	r2, [pc, #240]	; (8005b80 <HAL_DMA_DeInit+0x258>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_DeInit+0x174>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	; (8005b84 <HAL_DMA_DeInit+0x25c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d101      	bne.n	8005aa0 <HAL_DMA_DeInit+0x178>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_DMA_DeInit+0x17a>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d025      	beq.n	8005af2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2221      	movs	r2, #33	; 0x21
 8005ad4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 f980 	bl	8007ddc <DMA_CalcBaseAndBitshift>
 8005adc:	4603      	mov	r3, r0
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	223f      	movs	r2, #63	; 0x3f
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	e081      	b.n	8005bf6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a24      	ldr	r2, [pc, #144]	; (8005b88 <HAL_DMA_DeInit+0x260>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a22      	ldr	r2, [pc, #136]	; (8005b8c <HAL_DMA_DeInit+0x264>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <HAL_DMA_DeInit+0x268>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <HAL_DMA_DeInit+0x26c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <HAL_DMA_DeInit+0x270>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_DMA_DeInit+0x274>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_DMA_DeInit+0x278>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_DMA_DeInit+0x21a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_DMA_DeInit+0x27c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d132      	bne.n	8005ba8 <HAL_DMA_DeInit+0x280>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e031      	b.n	8005baa <HAL_DMA_DeInit+0x282>
 8005b46:	bf00      	nop
 8005b48:	40020010 	.word	0x40020010
 8005b4c:	40020028 	.word	0x40020028
 8005b50:	40020040 	.word	0x40020040
 8005b54:	40020058 	.word	0x40020058
 8005b58:	40020070 	.word	0x40020070
 8005b5c:	40020088 	.word	0x40020088
 8005b60:	400200a0 	.word	0x400200a0
 8005b64:	400200b8 	.word	0x400200b8
 8005b68:	40020410 	.word	0x40020410
 8005b6c:	40020428 	.word	0x40020428
 8005b70:	40020440 	.word	0x40020440
 8005b74:	40020458 	.word	0x40020458
 8005b78:	40020470 	.word	0x40020470
 8005b7c:	40020488 	.word	0x40020488
 8005b80:	400204a0 	.word	0x400204a0
 8005b84:	400204b8 	.word	0x400204b8
 8005b88:	58025408 	.word	0x58025408
 8005b8c:	5802541c 	.word	0x5802541c
 8005b90:	58025430 	.word	0x58025430
 8005b94:	58025444 	.word	0x58025444
 8005b98:	58025458 	.word	0x58025458
 8005b9c:	5802546c 	.word	0x5802546c
 8005ba0:	58025480 	.word	0x58025480
 8005ba4:	58025494 	.word	0x58025494
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d021      	beq.n	8005bf2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f002 f900 	bl	8007ddc <DMA_CalcBaseAndBitshift>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2201      	movs	r2, #1
 8005bea:	409a      	lsls	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e001      	b.n	8005bf6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e04a      	b.n	8005c8c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fa1e 	bl	8008038 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c14:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00f      	beq.n	8005c3e <HAL_DMA_DeInit+0x316>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d80b      	bhi.n	8005c3e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 faa0 	bl	800816c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c3c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e226      	b.n	80060fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_DMA_Start_IT+0x2a>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e21f      	b.n	80060fe <HAL_DMA_Start_IT+0x46a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	f040 820a 	bne.w	80060e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a68      	ldr	r2, [pc, #416]	; (8005e88 <HAL_DMA_Start_IT+0x1f4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04a      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a66      	ldr	r2, [pc, #408]	; (8005e8c <HAL_DMA_Start_IT+0x1f8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d045      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a65      	ldr	r2, [pc, #404]	; (8005e90 <HAL_DMA_Start_IT+0x1fc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a63      	ldr	r2, [pc, #396]	; (8005e94 <HAL_DMA_Start_IT+0x200>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03b      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a62      	ldr	r2, [pc, #392]	; (8005e98 <HAL_DMA_Start_IT+0x204>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d036      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a60      	ldr	r2, [pc, #384]	; (8005e9c <HAL_DMA_Start_IT+0x208>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a5f      	ldr	r2, [pc, #380]	; (8005ea0 <HAL_DMA_Start_IT+0x20c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02c      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5d      	ldr	r2, [pc, #372]	; (8005ea4 <HAL_DMA_Start_IT+0x210>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d027      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a5c      	ldr	r2, [pc, #368]	; (8005ea8 <HAL_DMA_Start_IT+0x214>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5a      	ldr	r2, [pc, #360]	; (8005eac <HAL_DMA_Start_IT+0x218>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01d      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a59      	ldr	r2, [pc, #356]	; (8005eb0 <HAL_DMA_Start_IT+0x21c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a57      	ldr	r2, [pc, #348]	; (8005eb4 <HAL_DMA_Start_IT+0x220>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a56      	ldr	r2, [pc, #344]	; (8005eb8 <HAL_DMA_Start_IT+0x224>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a54      	ldr	r2, [pc, #336]	; (8005ebc <HAL_DMA_Start_IT+0x228>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <HAL_DMA_Start_IT+0x22c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_DMA_Start_IT+0xee>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <HAL_DMA_Start_IT+0x230>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <HAL_DMA_Start_IT+0x100>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e007      	b.n	8005da4 <HAL_DMA_Start_IT+0x110>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 fe6a 	bl	8007a84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <HAL_DMA_Start_IT+0x1f4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d04a      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a33      	ldr	r2, [pc, #204]	; (8005e8c <HAL_DMA_Start_IT+0x1f8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d045      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	; (8005e90 <HAL_DMA_Start_IT+0x1fc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d040      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_DMA_Start_IT+0x200>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d03b      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2e      	ldr	r2, [pc, #184]	; (8005e98 <HAL_DMA_Start_IT+0x204>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d036      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <HAL_DMA_Start_IT+0x208>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d031      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_DMA_Start_IT+0x20c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d02c      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <HAL_DMA_Start_IT+0x210>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d027      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_DMA_Start_IT+0x214>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d022      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <HAL_DMA_Start_IT+0x218>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01d      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <HAL_DMA_Start_IT+0x21c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <HAL_DMA_Start_IT+0x220>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <HAL_DMA_Start_IT+0x224>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_DMA_Start_IT+0x228>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1f      	ldr	r2, [pc, #124]	; (8005ec0 <HAL_DMA_Start_IT+0x22c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_DMA_Start_IT+0x1bc>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <HAL_DMA_Start_IT+0x230>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d101      	bne.n	8005e54 <HAL_DMA_Start_IT+0x1c0>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_DMA_Start_IT+0x1c2>
 8005e54:	2300      	movs	r3, #0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d036      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 021e 	bic.w	r2, r3, #30
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0216 	orr.w	r2, r2, #22
 8005e6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d03e      	beq.n	8005ef4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0208 	orr.w	r2, r2, #8
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e035      	b.n	8005ef4 <HAL_DMA_Start_IT+0x260>
 8005e88:	40020010 	.word	0x40020010
 8005e8c:	40020028 	.word	0x40020028
 8005e90:	40020040 	.word	0x40020040
 8005e94:	40020058 	.word	0x40020058
 8005e98:	40020070 	.word	0x40020070
 8005e9c:	40020088 	.word	0x40020088
 8005ea0:	400200a0 	.word	0x400200a0
 8005ea4:	400200b8 	.word	0x400200b8
 8005ea8:	40020410 	.word	0x40020410
 8005eac:	40020428 	.word	0x40020428
 8005eb0:	40020440 	.word	0x40020440
 8005eb4:	40020458 	.word	0x40020458
 8005eb8:	40020470 	.word	0x40020470
 8005ebc:	40020488 	.word	0x40020488
 8005ec0:	400204a0 	.word	0x400204a0
 8005ec4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 020e 	bic.w	r2, r3, #14
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 020a 	orr.w	r2, r2, #10
 8005eda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0204 	orr.w	r2, r2, #4
 8005ef2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a83      	ldr	r2, [pc, #524]	; (8006108 <HAL_DMA_Start_IT+0x474>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d072      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a82      	ldr	r2, [pc, #520]	; (800610c <HAL_DMA_Start_IT+0x478>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d06d      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a80      	ldr	r2, [pc, #512]	; (8006110 <HAL_DMA_Start_IT+0x47c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d068      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7f      	ldr	r2, [pc, #508]	; (8006114 <HAL_DMA_Start_IT+0x480>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d063      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a7d      	ldr	r2, [pc, #500]	; (8006118 <HAL_DMA_Start_IT+0x484>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d05e      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7c      	ldr	r2, [pc, #496]	; (800611c <HAL_DMA_Start_IT+0x488>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d059      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7a      	ldr	r2, [pc, #488]	; (8006120 <HAL_DMA_Start_IT+0x48c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d054      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a79      	ldr	r2, [pc, #484]	; (8006124 <HAL_DMA_Start_IT+0x490>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d04f      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a77      	ldr	r2, [pc, #476]	; (8006128 <HAL_DMA_Start_IT+0x494>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a76      	ldr	r2, [pc, #472]	; (800612c <HAL_DMA_Start_IT+0x498>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a74      	ldr	r2, [pc, #464]	; (8006130 <HAL_DMA_Start_IT+0x49c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a73      	ldr	r2, [pc, #460]	; (8006134 <HAL_DMA_Start_IT+0x4a0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a71      	ldr	r2, [pc, #452]	; (8006138 <HAL_DMA_Start_IT+0x4a4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a70      	ldr	r2, [pc, #448]	; (800613c <HAL_DMA_Start_IT+0x4a8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6e      	ldr	r2, [pc, #440]	; (8006140 <HAL_DMA_Start_IT+0x4ac>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6d      	ldr	r2, [pc, #436]	; (8006144 <HAL_DMA_Start_IT+0x4b0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a6b      	ldr	r2, [pc, #428]	; (8006148 <HAL_DMA_Start_IT+0x4b4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a6a      	ldr	r2, [pc, #424]	; (800614c <HAL_DMA_Start_IT+0x4b8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a68      	ldr	r2, [pc, #416]	; (8006150 <HAL_DMA_Start_IT+0x4bc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a67      	ldr	r2, [pc, #412]	; (8006154 <HAL_DMA_Start_IT+0x4c0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a65      	ldr	r2, [pc, #404]	; (8006158 <HAL_DMA_Start_IT+0x4c4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a64      	ldr	r2, [pc, #400]	; (800615c <HAL_DMA_Start_IT+0x4c8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a62      	ldr	r2, [pc, #392]	; (8006160 <HAL_DMA_Start_IT+0x4cc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x350>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a61      	ldr	r2, [pc, #388]	; (8006164 <HAL_DMA_Start_IT+0x4d0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <HAL_DMA_Start_IT+0x354>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <HAL_DMA_Start_IT+0x356>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006022:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a37      	ldr	r2, [pc, #220]	; (8006108 <HAL_DMA_Start_IT+0x474>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d04a      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a36      	ldr	r2, [pc, #216]	; (800610c <HAL_DMA_Start_IT+0x478>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d045      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a34      	ldr	r2, [pc, #208]	; (8006110 <HAL_DMA_Start_IT+0x47c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d040      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a33      	ldr	r2, [pc, #204]	; (8006114 <HAL_DMA_Start_IT+0x480>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d03b      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_DMA_Start_IT+0x484>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d036      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a30      	ldr	r2, [pc, #192]	; (800611c <HAL_DMA_Start_IT+0x488>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d031      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2e      	ldr	r2, [pc, #184]	; (8006120 <HAL_DMA_Start_IT+0x48c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d02c      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a2d      	ldr	r2, [pc, #180]	; (8006124 <HAL_DMA_Start_IT+0x490>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d027      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_DMA_Start_IT+0x494>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d022      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2a      	ldr	r2, [pc, #168]	; (800612c <HAL_DMA_Start_IT+0x498>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d01d      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a28      	ldr	r2, [pc, #160]	; (8006130 <HAL_DMA_Start_IT+0x49c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d018      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_DMA_Start_IT+0x4a0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <HAL_DMA_Start_IT+0x4a4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00e      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a24      	ldr	r2, [pc, #144]	; (800613c <HAL_DMA_Start_IT+0x4a8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_DMA_Start_IT+0x4ac>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_Start_IT+0x430>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_DMA_Start_IT+0x4b0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <HAL_DMA_Start_IT+0x442>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e012      	b.n	80060fc <HAL_DMA_Start_IT+0x468>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e009      	b.n	80060fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40020010 	.word	0x40020010
 800610c:	40020028 	.word	0x40020028
 8006110:	40020040 	.word	0x40020040
 8006114:	40020058 	.word	0x40020058
 8006118:	40020070 	.word	0x40020070
 800611c:	40020088 	.word	0x40020088
 8006120:	400200a0 	.word	0x400200a0
 8006124:	400200b8 	.word	0x400200b8
 8006128:	40020410 	.word	0x40020410
 800612c:	40020428 	.word	0x40020428
 8006130:	40020440 	.word	0x40020440
 8006134:	40020458 	.word	0x40020458
 8006138:	40020470 	.word	0x40020470
 800613c:	40020488 	.word	0x40020488
 8006140:	400204a0 	.word	0x400204a0
 8006144:	400204b8 	.word	0x400204b8
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494

08006168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006170:	f7fe faae 	bl	80046d0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e2dc      	b.n	800673a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d008      	beq.n	800619e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e2cd      	b.n	800673a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a76      	ldr	r2, [pc, #472]	; (800637c <HAL_DMA_Abort+0x214>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d04a      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a74      	ldr	r2, [pc, #464]	; (8006380 <HAL_DMA_Abort+0x218>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d045      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a73      	ldr	r2, [pc, #460]	; (8006384 <HAL_DMA_Abort+0x21c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d040      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a71      	ldr	r2, [pc, #452]	; (8006388 <HAL_DMA_Abort+0x220>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d03b      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a70      	ldr	r2, [pc, #448]	; (800638c <HAL_DMA_Abort+0x224>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d036      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a6e      	ldr	r2, [pc, #440]	; (8006390 <HAL_DMA_Abort+0x228>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d031      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a6d      	ldr	r2, [pc, #436]	; (8006394 <HAL_DMA_Abort+0x22c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d02c      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a6b      	ldr	r2, [pc, #428]	; (8006398 <HAL_DMA_Abort+0x230>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d027      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6a      	ldr	r2, [pc, #424]	; (800639c <HAL_DMA_Abort+0x234>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d022      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a68      	ldr	r2, [pc, #416]	; (80063a0 <HAL_DMA_Abort+0x238>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01d      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_DMA_Abort+0x23c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d018      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a65      	ldr	r2, [pc, #404]	; (80063a8 <HAL_DMA_Abort+0x240>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a64      	ldr	r2, [pc, #400]	; (80063ac <HAL_DMA_Abort+0x244>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00e      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a62      	ldr	r2, [pc, #392]	; (80063b0 <HAL_DMA_Abort+0x248>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d009      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a61      	ldr	r2, [pc, #388]	; (80063b4 <HAL_DMA_Abort+0x24c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d004      	beq.n	800623e <HAL_DMA_Abort+0xd6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a5f      	ldr	r2, [pc, #380]	; (80063b8 <HAL_DMA_Abort+0x250>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <HAL_DMA_Abort+0xda>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_DMA_Abort+0xdc>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 021e 	bic.w	r2, r2, #30
 8006256:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006266:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e00a      	b.n	8006286 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 020e 	bic.w	r2, r2, #14
 800627e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3c      	ldr	r2, [pc, #240]	; (800637c <HAL_DMA_Abort+0x214>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d072      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <HAL_DMA_Abort+0x218>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d06d      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a39      	ldr	r2, [pc, #228]	; (8006384 <HAL_DMA_Abort+0x21c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d068      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_DMA_Abort+0x220>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d063      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a36      	ldr	r2, [pc, #216]	; (800638c <HAL_DMA_Abort+0x224>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d05e      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a34      	ldr	r2, [pc, #208]	; (8006390 <HAL_DMA_Abort+0x228>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d059      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a33      	ldr	r2, [pc, #204]	; (8006394 <HAL_DMA_Abort+0x22c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d054      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a31      	ldr	r2, [pc, #196]	; (8006398 <HAL_DMA_Abort+0x230>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d04f      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a30      	ldr	r2, [pc, #192]	; (800639c <HAL_DMA_Abort+0x234>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2e      	ldr	r2, [pc, #184]	; (80063a0 <HAL_DMA_Abort+0x238>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_DMA_Abort+0x23c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <HAL_DMA_Abort+0x240>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <HAL_DMA_Abort+0x244>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_Abort+0x248>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <HAL_DMA_Abort+0x24c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_Abort+0x250>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_DMA_Abort+0x254>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_Abort+0x258>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_DMA_Abort+0x25c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_DMA_Abort+0x260>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_DMA_Abort+0x264>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_DMA_Abort+0x268>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_DMA_Abort+0x26c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_Abort+0x20e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a19      	ldr	r2, [pc, #100]	; (80063d8 <HAL_DMA_Abort+0x270>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d132      	bne.n	80063dc <HAL_DMA_Abort+0x274>
 8006376:	2301      	movs	r3, #1
 8006378:	e031      	b.n	80063de <HAL_DMA_Abort+0x276>
 800637a:	bf00      	nop
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	58025408 	.word	0x58025408
 80063c0:	5802541c 	.word	0x5802541c
 80063c4:	58025430 	.word	0x58025430
 80063c8:	58025444 	.word	0x58025444
 80063cc:	58025458 	.word	0x58025458
 80063d0:	5802546c 	.word	0x5802546c
 80063d4:	58025480 	.word	0x58025480
 80063d8:	58025494 	.word	0x58025494
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6d      	ldr	r2, [pc, #436]	; (80065ac <HAL_DMA_Abort+0x444>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6b      	ldr	r2, [pc, #428]	; (80065b0 <HAL_DMA_Abort+0x448>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6a      	ldr	r2, [pc, #424]	; (80065b4 <HAL_DMA_Abort+0x44c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a68      	ldr	r2, [pc, #416]	; (80065b8 <HAL_DMA_Abort+0x450>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a67      	ldr	r2, [pc, #412]	; (80065bc <HAL_DMA_Abort+0x454>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <HAL_DMA_Abort+0x458>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a64      	ldr	r2, [pc, #400]	; (80065c4 <HAL_DMA_Abort+0x45c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a62      	ldr	r2, [pc, #392]	; (80065c8 <HAL_DMA_Abort+0x460>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a61      	ldr	r2, [pc, #388]	; (80065cc <HAL_DMA_Abort+0x464>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5f      	ldr	r2, [pc, #380]	; (80065d0 <HAL_DMA_Abort+0x468>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5e      	ldr	r2, [pc, #376]	; (80065d4 <HAL_DMA_Abort+0x46c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a5c      	ldr	r2, [pc, #368]	; (80065d8 <HAL_DMA_Abort+0x470>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5b      	ldr	r2, [pc, #364]	; (80065dc <HAL_DMA_Abort+0x474>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a59      	ldr	r2, [pc, #356]	; (80065e0 <HAL_DMA_Abort+0x478>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a58      	ldr	r2, [pc, #352]	; (80065e4 <HAL_DMA_Abort+0x47c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_Abort+0x32a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a56      	ldr	r2, [pc, #344]	; (80065e8 <HAL_DMA_Abort+0x480>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <HAL_DMA_Abort+0x33c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e007      	b.n	80064b4 <HAL_DMA_Abort+0x34c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064b4:	e013      	b.n	80064de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064b6:	f7fe f90b 	bl	80046d0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d90c      	bls.n	80064de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2203      	movs	r2, #3
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e12d      	b.n	800673a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e5      	bne.n	80064b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_DMA_Abort+0x444>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d04a      	beq.n	800658a <HAL_DMA_Abort+0x422>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Abort+0x448>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d045      	beq.n	800658a <HAL_DMA_Abort+0x422>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <HAL_DMA_Abort+0x44c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d040      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Abort+0x450>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d03b      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <HAL_DMA_Abort+0x454>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Abort+0x458>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d031      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <HAL_DMA_Abort+0x45c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Abort+0x460>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_DMA_Abort+0x464>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Abort+0x468>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <HAL_DMA_Abort+0x46c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <HAL_DMA_Abort+0x470>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_DMA_Abort+0x474>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Abort+0x422>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a1b      	ldr	r2, [pc, #108]	; (80065e0 <HAL_DMA_Abort+0x478>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <HAL_DMA_Abort+0x47c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_Abort+0x422>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <HAL_DMA_Abort+0x480>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_DMA_Abort+0x426>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_DMA_Abort+0x428>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d02b      	beq.n	80065ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006598:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	223f      	movs	r2, #63	; 0x3f
 80065a4:	409a      	lsls	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	e02a      	b.n	8006602 <HAL_DMA_Abort+0x49a>
 80065ac:	40020010 	.word	0x40020010
 80065b0:	40020028 	.word	0x40020028
 80065b4:	40020040 	.word	0x40020040
 80065b8:	40020058 	.word	0x40020058
 80065bc:	40020070 	.word	0x40020070
 80065c0:	40020088 	.word	0x40020088
 80065c4:	400200a0 	.word	0x400200a0
 80065c8:	400200b8 	.word	0x400200b8
 80065cc:	40020410 	.word	0x40020410
 80065d0:	40020428 	.word	0x40020428
 80065d4:	40020440 	.word	0x40020440
 80065d8:	40020458 	.word	0x40020458
 80065dc:	40020470 	.word	0x40020470
 80065e0:	40020488 	.word	0x40020488
 80065e4:	400204a0 	.word	0x400204a0
 80065e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2201      	movs	r2, #1
 80065fc:	409a      	lsls	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a4f      	ldr	r2, [pc, #316]	; (8006744 <HAL_DMA_Abort+0x5dc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d072      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <HAL_DMA_Abort+0x5e0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d06d      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4c      	ldr	r2, [pc, #304]	; (800674c <HAL_DMA_Abort+0x5e4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d068      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4a      	ldr	r2, [pc, #296]	; (8006750 <HAL_DMA_Abort+0x5e8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d063      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a49      	ldr	r2, [pc, #292]	; (8006754 <HAL_DMA_Abort+0x5ec>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d05e      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a47      	ldr	r2, [pc, #284]	; (8006758 <HAL_DMA_Abort+0x5f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d059      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a46      	ldr	r2, [pc, #280]	; (800675c <HAL_DMA_Abort+0x5f4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d054      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a44      	ldr	r2, [pc, #272]	; (8006760 <HAL_DMA_Abort+0x5f8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d04f      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a43      	ldr	r2, [pc, #268]	; (8006764 <HAL_DMA_Abort+0x5fc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a41      	ldr	r2, [pc, #260]	; (8006768 <HAL_DMA_Abort+0x600>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a40      	ldr	r2, [pc, #256]	; (800676c <HAL_DMA_Abort+0x604>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <HAL_DMA_Abort+0x608>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3d      	ldr	r2, [pc, #244]	; (8006774 <HAL_DMA_Abort+0x60c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3b      	ldr	r2, [pc, #236]	; (8006778 <HAL_DMA_Abort+0x610>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a3a      	ldr	r2, [pc, #232]	; (800677c <HAL_DMA_Abort+0x614>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a38      	ldr	r2, [pc, #224]	; (8006780 <HAL_DMA_Abort+0x618>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a37      	ldr	r2, [pc, #220]	; (8006784 <HAL_DMA_Abort+0x61c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a35      	ldr	r2, [pc, #212]	; (8006788 <HAL_DMA_Abort+0x620>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a34      	ldr	r2, [pc, #208]	; (800678c <HAL_DMA_Abort+0x624>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a32      	ldr	r2, [pc, #200]	; (8006790 <HAL_DMA_Abort+0x628>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a31      	ldr	r2, [pc, #196]	; (8006794 <HAL_DMA_Abort+0x62c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2f      	ldr	r2, [pc, #188]	; (8006798 <HAL_DMA_Abort+0x630>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2e      	ldr	r2, [pc, #184]	; (800679c <HAL_DMA_Abort+0x634>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_Abort+0x58a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2c      	ldr	r2, [pc, #176]	; (80067a0 <HAL_DMA_Abort+0x638>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_DMA_Abort+0x58e>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_DMA_Abort+0x590>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d015      	beq.n	8006728 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006704:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006726:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40020010 	.word	0x40020010
 8006748:	40020028 	.word	0x40020028
 800674c:	40020040 	.word	0x40020040
 8006750:	40020058 	.word	0x40020058
 8006754:	40020070 	.word	0x40020070
 8006758:	40020088 	.word	0x40020088
 800675c:	400200a0 	.word	0x400200a0
 8006760:	400200b8 	.word	0x400200b8
 8006764:	40020410 	.word	0x40020410
 8006768:	40020428 	.word	0x40020428
 800676c:	40020440 	.word	0x40020440
 8006770:	40020458 	.word	0x40020458
 8006774:	40020470 	.word	0x40020470
 8006778:	40020488 	.word	0x40020488
 800677c:	400204a0 	.word	0x400204a0
 8006780:	400204b8 	.word	0x400204b8
 8006784:	58025408 	.word	0x58025408
 8006788:	5802541c 	.word	0x5802541c
 800678c:	58025430 	.word	0x58025430
 8006790:	58025444 	.word	0x58025444
 8006794:	58025458 	.word	0x58025458
 8006798:	5802546c 	.word	0x5802546c
 800679c:	58025480 	.word	0x58025480
 80067a0:	58025494 	.word	0x58025494

080067a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e237      	b.n	8006c26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d004      	beq.n	80067cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2280      	movs	r2, #128	; 0x80
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e22c      	b.n	8006c26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5c      	ldr	r2, [pc, #368]	; (8006944 <HAL_DMA_Abort_IT+0x1a0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d04a      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a5b      	ldr	r2, [pc, #364]	; (8006948 <HAL_DMA_Abort_IT+0x1a4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d045      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a59      	ldr	r2, [pc, #356]	; (800694c <HAL_DMA_Abort_IT+0x1a8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d040      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a58      	ldr	r2, [pc, #352]	; (8006950 <HAL_DMA_Abort_IT+0x1ac>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d03b      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a56      	ldr	r2, [pc, #344]	; (8006954 <HAL_DMA_Abort_IT+0x1b0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d036      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a55      	ldr	r2, [pc, #340]	; (8006958 <HAL_DMA_Abort_IT+0x1b4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d031      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a53      	ldr	r2, [pc, #332]	; (800695c <HAL_DMA_Abort_IT+0x1b8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d02c      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a52      	ldr	r2, [pc, #328]	; (8006960 <HAL_DMA_Abort_IT+0x1bc>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d027      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a50      	ldr	r2, [pc, #320]	; (8006964 <HAL_DMA_Abort_IT+0x1c0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d022      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a4f      	ldr	r2, [pc, #316]	; (8006968 <HAL_DMA_Abort_IT+0x1c4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d01d      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a4d      	ldr	r2, [pc, #308]	; (800696c <HAL_DMA_Abort_IT+0x1c8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d018      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a4c      	ldr	r2, [pc, #304]	; (8006970 <HAL_DMA_Abort_IT+0x1cc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a4a      	ldr	r2, [pc, #296]	; (8006974 <HAL_DMA_Abort_IT+0x1d0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a49      	ldr	r2, [pc, #292]	; (8006978 <HAL_DMA_Abort_IT+0x1d4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a47      	ldr	r2, [pc, #284]	; (800697c <HAL_DMA_Abort_IT+0x1d8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_DMA_Abort_IT+0xc8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a46      	ldr	r2, [pc, #280]	; (8006980 <HAL_DMA_Abort_IT+0x1dc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_DMA_Abort_IT+0xcc>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_DMA_Abort_IT+0xce>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8086 	beq.w	8006984 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <HAL_DMA_Abort_IT+0x1a0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d04a      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a2e      	ldr	r2, [pc, #184]	; (8006948 <HAL_DMA_Abort_IT+0x1a4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d045      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a2c      	ldr	r2, [pc, #176]	; (800694c <HAL_DMA_Abort_IT+0x1a8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d040      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <HAL_DMA_Abort_IT+0x1ac>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d03b      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a29      	ldr	r2, [pc, #164]	; (8006954 <HAL_DMA_Abort_IT+0x1b0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d036      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a28      	ldr	r2, [pc, #160]	; (8006958 <HAL_DMA_Abort_IT+0x1b4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d031      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a26      	ldr	r2, [pc, #152]	; (800695c <HAL_DMA_Abort_IT+0x1b8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d02c      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a25      	ldr	r2, [pc, #148]	; (8006960 <HAL_DMA_Abort_IT+0x1bc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d027      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a23      	ldr	r2, [pc, #140]	; (8006964 <HAL_DMA_Abort_IT+0x1c0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d022      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a22      	ldr	r2, [pc, #136]	; (8006968 <HAL_DMA_Abort_IT+0x1c4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01d      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a20      	ldr	r2, [pc, #128]	; (800696c <HAL_DMA_Abort_IT+0x1c8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <HAL_DMA_Abort_IT+0x1cc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <HAL_DMA_Abort_IT+0x1d0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_DMA_Abort_IT+0x1d4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1a      	ldr	r2, [pc, #104]	; (800697c <HAL_DMA_Abort_IT+0x1d8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_DMA_Abort_IT+0x17c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_DMA_Abort_IT+0x1dc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d108      	bne.n	8006932 <HAL_DMA_Abort_IT+0x18e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0201 	bic.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	e178      	b.n	8006c24 <HAL_DMA_Abort_IT+0x480>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e16f      	b.n	8006c24 <HAL_DMA_Abort_IT+0x480>
 8006944:	40020010 	.word	0x40020010
 8006948:	40020028 	.word	0x40020028
 800694c:	40020040 	.word	0x40020040
 8006950:	40020058 	.word	0x40020058
 8006954:	40020070 	.word	0x40020070
 8006958:	40020088 	.word	0x40020088
 800695c:	400200a0 	.word	0x400200a0
 8006960:	400200b8 	.word	0x400200b8
 8006964:	40020410 	.word	0x40020410
 8006968:	40020428 	.word	0x40020428
 800696c:	40020440 	.word	0x40020440
 8006970:	40020458 	.word	0x40020458
 8006974:	40020470 	.word	0x40020470
 8006978:	40020488 	.word	0x40020488
 800697c:	400204a0 	.word	0x400204a0
 8006980:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 020e 	bic.w	r2, r2, #14
 8006992:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6c      	ldr	r2, [pc, #432]	; (8006b4c <HAL_DMA_Abort_IT+0x3a8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d04a      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6b      	ldr	r2, [pc, #428]	; (8006b50 <HAL_DMA_Abort_IT+0x3ac>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d045      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a69      	ldr	r2, [pc, #420]	; (8006b54 <HAL_DMA_Abort_IT+0x3b0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d040      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a68      	ldr	r2, [pc, #416]	; (8006b58 <HAL_DMA_Abort_IT+0x3b4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d03b      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a66      	ldr	r2, [pc, #408]	; (8006b5c <HAL_DMA_Abort_IT+0x3b8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d036      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a65      	ldr	r2, [pc, #404]	; (8006b60 <HAL_DMA_Abort_IT+0x3bc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d031      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a63      	ldr	r2, [pc, #396]	; (8006b64 <HAL_DMA_Abort_IT+0x3c0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d02c      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a62      	ldr	r2, [pc, #392]	; (8006b68 <HAL_DMA_Abort_IT+0x3c4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d027      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a60      	ldr	r2, [pc, #384]	; (8006b6c <HAL_DMA_Abort_IT+0x3c8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d022      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a5f      	ldr	r2, [pc, #380]	; (8006b70 <HAL_DMA_Abort_IT+0x3cc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d01d      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a5d      	ldr	r2, [pc, #372]	; (8006b74 <HAL_DMA_Abort_IT+0x3d0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d018      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a5c      	ldr	r2, [pc, #368]	; (8006b78 <HAL_DMA_Abort_IT+0x3d4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a5a      	ldr	r2, [pc, #360]	; (8006b7c <HAL_DMA_Abort_IT+0x3d8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00e      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a59      	ldr	r2, [pc, #356]	; (8006b80 <HAL_DMA_Abort_IT+0x3dc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d009      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a57      	ldr	r2, [pc, #348]	; (8006b84 <HAL_DMA_Abort_IT+0x3e0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_DMA_Abort_IT+0x290>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a56      	ldr	r2, [pc, #344]	; (8006b88 <HAL_DMA_Abort_IT+0x3e4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <HAL_DMA_Abort_IT+0x2a2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e007      	b.n	8006a56 <HAL_DMA_Abort_IT+0x2b2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <HAL_DMA_Abort_IT+0x3a8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d072      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a3a      	ldr	r2, [pc, #232]	; (8006b50 <HAL_DMA_Abort_IT+0x3ac>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d06d      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a39      	ldr	r2, [pc, #228]	; (8006b54 <HAL_DMA_Abort_IT+0x3b0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d068      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a37      	ldr	r2, [pc, #220]	; (8006b58 <HAL_DMA_Abort_IT+0x3b4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d063      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <HAL_DMA_Abort_IT+0x3b8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d05e      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <HAL_DMA_Abort_IT+0x3bc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d059      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a33      	ldr	r2, [pc, #204]	; (8006b64 <HAL_DMA_Abort_IT+0x3c0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d054      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a31      	ldr	r2, [pc, #196]	; (8006b68 <HAL_DMA_Abort_IT+0x3c4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d04f      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a30      	ldr	r2, [pc, #192]	; (8006b6c <HAL_DMA_Abort_IT+0x3c8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d04a      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <HAL_DMA_Abort_IT+0x3cc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d045      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <HAL_DMA_Abort_IT+0x3d0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d040      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <HAL_DMA_Abort_IT+0x3d4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d03b      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <HAL_DMA_Abort_IT+0x3d8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d036      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <HAL_DMA_Abort_IT+0x3dc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d031      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a27      	ldr	r2, [pc, #156]	; (8006b84 <HAL_DMA_Abort_IT+0x3e0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d02c      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <HAL_DMA_Abort_IT+0x3e4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d027      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <HAL_DMA_Abort_IT+0x3e8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <HAL_DMA_Abort_IT+0x3ec>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <HAL_DMA_Abort_IT+0x3f0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <HAL_DMA_Abort_IT+0x3f4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <HAL_DMA_Abort_IT+0x3f8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <HAL_DMA_Abort_IT+0x3fc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_DMA_Abort_IT+0x400>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_DMA_Abort_IT+0x3a2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_DMA_Abort_IT+0x404>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d132      	bne.n	8006bac <HAL_DMA_Abort_IT+0x408>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e031      	b.n	8006bae <HAL_DMA_Abort_IT+0x40a>
 8006b4a:	bf00      	nop
 8006b4c:	40020010 	.word	0x40020010
 8006b50:	40020028 	.word	0x40020028
 8006b54:	40020040 	.word	0x40020040
 8006b58:	40020058 	.word	0x40020058
 8006b5c:	40020070 	.word	0x40020070
 8006b60:	40020088 	.word	0x40020088
 8006b64:	400200a0 	.word	0x400200a0
 8006b68:	400200b8 	.word	0x400200b8
 8006b6c:	40020410 	.word	0x40020410
 8006b70:	40020428 	.word	0x40020428
 8006b74:	40020440 	.word	0x40020440
 8006b78:	40020458 	.word	0x40020458
 8006b7c:	40020470 	.word	0x40020470
 8006b80:	40020488 	.word	0x40020488
 8006b84:	400204a0 	.word	0x400204a0
 8006b88:	400204b8 	.word	0x400204b8
 8006b8c:	58025408 	.word	0x58025408
 8006b90:	5802541c 	.word	0x5802541c
 8006b94:	58025430 	.word	0x58025430
 8006b98:	58025444 	.word	0x58025444
 8006b9c:	58025458 	.word	0x58025458
 8006ba0:	5802546c 	.word	0x5802546c
 8006ba4:	58025480 	.word	0x58025480
 8006ba8:	58025494 	.word	0x58025494
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d028      	beq.n	8006c04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006be0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bf8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c3c:	4b67      	ldr	r3, [pc, #412]	; (8006ddc <HAL_DMA_IRQHandler+0x1ac>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a67      	ldr	r2, [pc, #412]	; (8006de0 <HAL_DMA_IRQHandler+0x1b0>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	0a9b      	lsrs	r3, r3, #10
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a5f      	ldr	r2, [pc, #380]	; (8006de4 <HAL_DMA_IRQHandler+0x1b4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5d      	ldr	r2, [pc, #372]	; (8006de8 <HAL_DMA_IRQHandler+0x1b8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5c      	ldr	r2, [pc, #368]	; (8006dec <HAL_DMA_IRQHandler+0x1bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a5a      	ldr	r2, [pc, #360]	; (8006df0 <HAL_DMA_IRQHandler+0x1c0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a59      	ldr	r2, [pc, #356]	; (8006df4 <HAL_DMA_IRQHandler+0x1c4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a57      	ldr	r2, [pc, #348]	; (8006df8 <HAL_DMA_IRQHandler+0x1c8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a56      	ldr	r2, [pc, #344]	; (8006dfc <HAL_DMA_IRQHandler+0x1cc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a54      	ldr	r2, [pc, #336]	; (8006e00 <HAL_DMA_IRQHandler+0x1d0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a53      	ldr	r2, [pc, #332]	; (8006e04 <HAL_DMA_IRQHandler+0x1d4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a51      	ldr	r2, [pc, #324]	; (8006e08 <HAL_DMA_IRQHandler+0x1d8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a50      	ldr	r2, [pc, #320]	; (8006e0c <HAL_DMA_IRQHandler+0x1dc>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a4e      	ldr	r2, [pc, #312]	; (8006e10 <HAL_DMA_IRQHandler+0x1e0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a4d      	ldr	r2, [pc, #308]	; (8006e14 <HAL_DMA_IRQHandler+0x1e4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a4b      	ldr	r2, [pc, #300]	; (8006e18 <HAL_DMA_IRQHandler+0x1e8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	; (8006e1c <HAL_DMA_IRQHandler+0x1ec>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_IRQHandler+0xd2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a48      	ldr	r2, [pc, #288]	; (8006e20 <HAL_DMA_IRQHandler+0x1f0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <HAL_DMA_IRQHandler+0xd6>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <HAL_DMA_IRQHandler+0xd8>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 842b 	beq.w	8007564 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2208      	movs	r2, #8
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80a2 	beq.w	8006e68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2e      	ldr	r2, [pc, #184]	; (8006de4 <HAL_DMA_IRQHandler+0x1b4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2d      	ldr	r2, [pc, #180]	; (8006de8 <HAL_DMA_IRQHandler+0x1b8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <HAL_DMA_IRQHandler+0x1bc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <HAL_DMA_IRQHandler+0x1c0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <HAL_DMA_IRQHandler+0x1c4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a27      	ldr	r2, [pc, #156]	; (8006df8 <HAL_DMA_IRQHandler+0x1c8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <HAL_DMA_IRQHandler+0x1cc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a24      	ldr	r2, [pc, #144]	; (8006e00 <HAL_DMA_IRQHandler+0x1d0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <HAL_DMA_IRQHandler+0x1d4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a21      	ldr	r2, [pc, #132]	; (8006e08 <HAL_DMA_IRQHandler+0x1d8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_DMA_IRQHandler+0x1dc>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <HAL_DMA_IRQHandler+0x1e0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <HAL_DMA_IRQHandler+0x1e4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1b      	ldr	r2, [pc, #108]	; (8006e18 <HAL_DMA_IRQHandler+0x1e8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_DMA_IRQHandler+0x1ec>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x194>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <HAL_DMA_IRQHandler+0x1f0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d12f      	bne.n	8006e24 <HAL_DMA_IRQHandler+0x1f4>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf14      	ite	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	2300      	moveq	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	e02e      	b.n	8006e38 <HAL_DMA_IRQHandler+0x208>
 8006dda:	bf00      	nop
 8006ddc:	24000000 	.word	0x24000000
 8006de0:	1b4e81b5 	.word	0x1b4e81b5
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bf14      	ite	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	2300      	moveq	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d015      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0204 	bic.w	r2, r2, #4
 8006e4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2208      	movs	r2, #8
 8006e56:	409a      	lsls	r2, r3
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f043 0201 	orr.w	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	fa22 f303 	lsr.w	r3, r2, r3
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d06e      	beq.n	8006f5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a69      	ldr	r2, [pc, #420]	; (8007028 <HAL_DMA_IRQHandler+0x3f8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d04a      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a67      	ldr	r2, [pc, #412]	; (800702c <HAL_DMA_IRQHandler+0x3fc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d045      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a66      	ldr	r2, [pc, #408]	; (8007030 <HAL_DMA_IRQHandler+0x400>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d040      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a64      	ldr	r2, [pc, #400]	; (8007034 <HAL_DMA_IRQHandler+0x404>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d03b      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a63      	ldr	r2, [pc, #396]	; (8007038 <HAL_DMA_IRQHandler+0x408>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d036      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a61      	ldr	r2, [pc, #388]	; (800703c <HAL_DMA_IRQHandler+0x40c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d031      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a60      	ldr	r2, [pc, #384]	; (8007040 <HAL_DMA_IRQHandler+0x410>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d02c      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a5e      	ldr	r2, [pc, #376]	; (8007044 <HAL_DMA_IRQHandler+0x414>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d027      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a5d      	ldr	r2, [pc, #372]	; (8007048 <HAL_DMA_IRQHandler+0x418>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d022      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5b      	ldr	r2, [pc, #364]	; (800704c <HAL_DMA_IRQHandler+0x41c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01d      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a5a      	ldr	r2, [pc, #360]	; (8007050 <HAL_DMA_IRQHandler+0x420>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a58      	ldr	r2, [pc, #352]	; (8007054 <HAL_DMA_IRQHandler+0x424>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d013      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a57      	ldr	r2, [pc, #348]	; (8007058 <HAL_DMA_IRQHandler+0x428>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a55      	ldr	r2, [pc, #340]	; (800705c <HAL_DMA_IRQHandler+0x42c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a54      	ldr	r2, [pc, #336]	; (8007060 <HAL_DMA_IRQHandler+0x430>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x2ee>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a52      	ldr	r2, [pc, #328]	; (8007064 <HAL_DMA_IRQHandler+0x434>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10a      	bne.n	8006f34 <HAL_DMA_IRQHandler+0x304>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	e003      	b.n	8006f3c <HAL_DMA_IRQHandler+0x30c>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f043 0202 	orr.w	r2, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	2204      	movs	r2, #4
 8006f66:	409a      	lsls	r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 808f 	beq.w	8007090 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2c      	ldr	r2, [pc, #176]	; (8007028 <HAL_DMA_IRQHandler+0x3f8>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d04a      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2a      	ldr	r2, [pc, #168]	; (800702c <HAL_DMA_IRQHandler+0x3fc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d045      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a29      	ldr	r2, [pc, #164]	; (8007030 <HAL_DMA_IRQHandler+0x400>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d040      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a27      	ldr	r2, [pc, #156]	; (8007034 <HAL_DMA_IRQHandler+0x404>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d03b      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a26      	ldr	r2, [pc, #152]	; (8007038 <HAL_DMA_IRQHandler+0x408>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d036      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a24      	ldr	r2, [pc, #144]	; (800703c <HAL_DMA_IRQHandler+0x40c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d031      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a23      	ldr	r2, [pc, #140]	; (8007040 <HAL_DMA_IRQHandler+0x410>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d02c      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a21      	ldr	r2, [pc, #132]	; (8007044 <HAL_DMA_IRQHandler+0x414>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d027      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <HAL_DMA_IRQHandler+0x418>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1e      	ldr	r2, [pc, #120]	; (800704c <HAL_DMA_IRQHandler+0x41c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01d      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_DMA_IRQHandler+0x420>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_DMA_IRQHandler+0x424>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_DMA_IRQHandler+0x428>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_DMA_IRQHandler+0x42c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	; (8007060 <HAL_DMA_IRQHandler+0x430>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_DMA_IRQHandler+0x3e2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a15      	ldr	r2, [pc, #84]	; (8007064 <HAL_DMA_IRQHandler+0x434>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d12a      	bne.n	8007068 <HAL_DMA_IRQHandler+0x438>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e023      	b.n	8007070 <HAL_DMA_IRQHandler+0x440>
 8007028:	40020010 	.word	0x40020010
 800702c:	40020028 	.word	0x40020028
 8007030:	40020040 	.word	0x40020040
 8007034:	40020058 	.word	0x40020058
 8007038:	40020070 	.word	0x40020070
 800703c:	40020088 	.word	0x40020088
 8007040:	400200a0 	.word	0x400200a0
 8007044:	400200b8 	.word	0x400200b8
 8007048:	40020410 	.word	0x40020410
 800704c:	40020428 	.word	0x40020428
 8007050:	40020440 	.word	0x40020440
 8007054:	40020458 	.word	0x40020458
 8007058:	40020470 	.word	0x40020470
 800705c:	40020488 	.word	0x40020488
 8007060:	400204a0 	.word	0x400204a0
 8007064:	400204b8 	.word	0x400204b8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2204      	movs	r2, #4
 800707e:	409a      	lsls	r2, r3
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007088:	f043 0204 	orr.w	r2, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007094:	f003 031f 	and.w	r3, r3, #31
 8007098:	2210      	movs	r2, #16
 800709a:	409a      	lsls	r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 80a6 	beq.w	80071f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a85      	ldr	r2, [pc, #532]	; (80072c0 <HAL_DMA_IRQHandler+0x690>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d04a      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a83      	ldr	r2, [pc, #524]	; (80072c4 <HAL_DMA_IRQHandler+0x694>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d045      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a82      	ldr	r2, [pc, #520]	; (80072c8 <HAL_DMA_IRQHandler+0x698>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d040      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a80      	ldr	r2, [pc, #512]	; (80072cc <HAL_DMA_IRQHandler+0x69c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d03b      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a7f      	ldr	r2, [pc, #508]	; (80072d0 <HAL_DMA_IRQHandler+0x6a0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d036      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a7d      	ldr	r2, [pc, #500]	; (80072d4 <HAL_DMA_IRQHandler+0x6a4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d031      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7c      	ldr	r2, [pc, #496]	; (80072d8 <HAL_DMA_IRQHandler+0x6a8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d02c      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a7a      	ldr	r2, [pc, #488]	; (80072dc <HAL_DMA_IRQHandler+0x6ac>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d027      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a79      	ldr	r2, [pc, #484]	; (80072e0 <HAL_DMA_IRQHandler+0x6b0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a77      	ldr	r2, [pc, #476]	; (80072e4 <HAL_DMA_IRQHandler+0x6b4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01d      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a76      	ldr	r2, [pc, #472]	; (80072e8 <HAL_DMA_IRQHandler+0x6b8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d018      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a74      	ldr	r2, [pc, #464]	; (80072ec <HAL_DMA_IRQHandler+0x6bc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a73      	ldr	r2, [pc, #460]	; (80072f0 <HAL_DMA_IRQHandler+0x6c0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00e      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a71      	ldr	r2, [pc, #452]	; (80072f4 <HAL_DMA_IRQHandler+0x6c4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d009      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a70      	ldr	r2, [pc, #448]	; (80072f8 <HAL_DMA_IRQHandler+0x6c8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d004      	beq.n	8007146 <HAL_DMA_IRQHandler+0x516>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a6e      	ldr	r2, [pc, #440]	; (80072fc <HAL_DMA_IRQHandler+0x6cc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d10a      	bne.n	800715c <HAL_DMA_IRQHandler+0x52c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b00      	cmp	r3, #0
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e009      	b.n	8007170 <HAL_DMA_IRQHandler+0x540>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	bf14      	ite	ne
 800716a:	2301      	movne	r3, #1
 800716c:	2300      	moveq	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d03e      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2210      	movs	r2, #16
 800717e:	409a      	lsls	r2, r3
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d018      	beq.n	80071c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d024      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
 80071b0:	e01f      	b.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01b      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	e016      	b.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d107      	bne.n	80071e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0208 	bic.w	r2, r2, #8
 80071e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2220      	movs	r2, #32
 80071fc:	409a      	lsls	r2, r3
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8110 	beq.w	8007428 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2c      	ldr	r2, [pc, #176]	; (80072c0 <HAL_DMA_IRQHandler+0x690>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d04a      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <HAL_DMA_IRQHandler+0x694>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d045      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <HAL_DMA_IRQHandler+0x698>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d040      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a28      	ldr	r2, [pc, #160]	; (80072cc <HAL_DMA_IRQHandler+0x69c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d03b      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <HAL_DMA_IRQHandler+0x6a0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d036      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a25      	ldr	r2, [pc, #148]	; (80072d4 <HAL_DMA_IRQHandler+0x6a4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d031      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a23      	ldr	r2, [pc, #140]	; (80072d8 <HAL_DMA_IRQHandler+0x6a8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d02c      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a22      	ldr	r2, [pc, #136]	; (80072dc <HAL_DMA_IRQHandler+0x6ac>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d027      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a20      	ldr	r2, [pc, #128]	; (80072e0 <HAL_DMA_IRQHandler+0x6b0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d022      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <HAL_DMA_IRQHandler+0x6b4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d01d      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1d      	ldr	r2, [pc, #116]	; (80072e8 <HAL_DMA_IRQHandler+0x6b8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d018      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1c      	ldr	r2, [pc, #112]	; (80072ec <HAL_DMA_IRQHandler+0x6bc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d013      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_DMA_IRQHandler+0x6c0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00e      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <HAL_DMA_IRQHandler+0x6c4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d009      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <HAL_DMA_IRQHandler+0x6c8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <HAL_DMA_IRQHandler+0x678>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a16      	ldr	r2, [pc, #88]	; (80072fc <HAL_DMA_IRQHandler+0x6cc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d12b      	bne.n	8007300 <HAL_DMA_IRQHandler+0x6d0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	e02a      	b.n	8007314 <HAL_DMA_IRQHandler+0x6e4>
 80072be:	bf00      	nop
 80072c0:	40020010 	.word	0x40020010
 80072c4:	40020028 	.word	0x40020028
 80072c8:	40020040 	.word	0x40020040
 80072cc:	40020058 	.word	0x40020058
 80072d0:	40020070 	.word	0x40020070
 80072d4:	40020088 	.word	0x40020088
 80072d8:	400200a0 	.word	0x400200a0
 80072dc:	400200b8 	.word	0x400200b8
 80072e0:	40020410 	.word	0x40020410
 80072e4:	40020428 	.word	0x40020428
 80072e8:	40020440 	.word	0x40020440
 80072ec:	40020458 	.word	0x40020458
 80072f0:	40020470 	.word	0x40020470
 80072f4:	40020488 	.word	0x40020488
 80072f8:	400204a0 	.word	0x400204a0
 80072fc:	400204b8 	.word	0x400204b8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf14      	ite	ne
 800730e:	2301      	movne	r3, #1
 8007310:	2300      	moveq	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8087 	beq.w	8007428 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731e:	f003 031f 	and.w	r3, r3, #31
 8007322:	2220      	movs	r2, #32
 8007324:	409a      	lsls	r2, r3
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b04      	cmp	r3, #4
 8007334:	d139      	bne.n	80073aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0216 	bic.w	r2, r2, #22
 8007344:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	695a      	ldr	r2, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007354:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <HAL_DMA_IRQHandler+0x736>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0208 	bic.w	r2, r2, #8
 8007374:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	223f      	movs	r2, #63	; 0x3f
 8007380:	409a      	lsls	r2, r3
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 834a 	beq.w	8007a34 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
          }
          return;
 80073a8:	e344      	b.n	8007a34 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d108      	bne.n	80073d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d02c      	beq.n	8007428 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
 80073d6:	e027      	b.n	8007428 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d023      	beq.n	8007428 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	e01e      	b.n	8007428 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10f      	bne.n	8007418 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0210 	bic.w	r2, r2, #16
 8007406:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8306 	beq.w	8007a3e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8088 	beq.w	8007550 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2204      	movs	r2, #4
 8007444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a7a      	ldr	r2, [pc, #488]	; (8007638 <HAL_DMA_IRQHandler+0xa08>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a79      	ldr	r2, [pc, #484]	; (800763c <HAL_DMA_IRQHandler+0xa0c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a77      	ldr	r2, [pc, #476]	; (8007640 <HAL_DMA_IRQHandler+0xa10>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a76      	ldr	r2, [pc, #472]	; (8007644 <HAL_DMA_IRQHandler+0xa14>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a74      	ldr	r2, [pc, #464]	; (8007648 <HAL_DMA_IRQHandler+0xa18>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a73      	ldr	r2, [pc, #460]	; (800764c <HAL_DMA_IRQHandler+0xa1c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a71      	ldr	r2, [pc, #452]	; (8007650 <HAL_DMA_IRQHandler+0xa20>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a70      	ldr	r2, [pc, #448]	; (8007654 <HAL_DMA_IRQHandler+0xa24>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a6e      	ldr	r2, [pc, #440]	; (8007658 <HAL_DMA_IRQHandler+0xa28>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a6d      	ldr	r2, [pc, #436]	; (800765c <HAL_DMA_IRQHandler+0xa2c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a6b      	ldr	r2, [pc, #428]	; (8007660 <HAL_DMA_IRQHandler+0xa30>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a6a      	ldr	r2, [pc, #424]	; (8007664 <HAL_DMA_IRQHandler+0xa34>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a68      	ldr	r2, [pc, #416]	; (8007668 <HAL_DMA_IRQHandler+0xa38>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a67      	ldr	r2, [pc, #412]	; (800766c <HAL_DMA_IRQHandler+0xa3c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a65      	ldr	r2, [pc, #404]	; (8007670 <HAL_DMA_IRQHandler+0xa40>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x8b8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a64      	ldr	r2, [pc, #400]	; (8007674 <HAL_DMA_IRQHandler+0xa44>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_IRQHandler+0x8ca>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_DMA_IRQHandler+0x8da>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007512:	429a      	cmp	r2, r3
 8007514:	d307      	bcc.n	8007526 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1f2      	bne.n	800750a <HAL_DMA_IRQHandler+0x8da>
 8007524:	e000      	b.n	8007528 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007526:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2203      	movs	r2, #3
 800753a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800753e:	e003      	b.n	8007548 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8272 	beq.w	8007a3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
 8007562:	e26c      	b.n	8007a3e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a43      	ldr	r2, [pc, #268]	; (8007678 <HAL_DMA_IRQHandler+0xa48>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d022      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a42      	ldr	r2, [pc, #264]	; (800767c <HAL_DMA_IRQHandler+0xa4c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d01d      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a40      	ldr	r2, [pc, #256]	; (8007680 <HAL_DMA_IRQHandler+0xa50>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d018      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a3f      	ldr	r2, [pc, #252]	; (8007684 <HAL_DMA_IRQHandler+0xa54>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a3d      	ldr	r2, [pc, #244]	; (8007688 <HAL_DMA_IRQHandler+0xa58>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00e      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3c      	ldr	r2, [pc, #240]	; (800768c <HAL_DMA_IRQHandler+0xa5c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d009      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3a      	ldr	r2, [pc, #232]	; (8007690 <HAL_DMA_IRQHandler+0xa60>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d004      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x984>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a39      	ldr	r2, [pc, #228]	; (8007694 <HAL_DMA_IRQHandler+0xa64>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d101      	bne.n	80075b8 <HAL_DMA_IRQHandler+0x988>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <HAL_DMA_IRQHandler+0x98a>
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 823f 	beq.w	8007a3e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	2204      	movs	r2, #4
 80075d2:	409a      	lsls	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80cd 	beq.w	8007778 <HAL_DMA_IRQHandler+0xb48>
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80c7 	beq.w	8007778 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2204      	movs	r2, #4
 80075f4:	409a      	lsls	r2, r3
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d049      	beq.n	8007698 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 8210 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007620:	e20a      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8206 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007634:	e200      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe08>
 8007636:	bf00      	nop
 8007638:	40020010 	.word	0x40020010
 800763c:	40020028 	.word	0x40020028
 8007640:	40020040 	.word	0x40020040
 8007644:	40020058 	.word	0x40020058
 8007648:	40020070 	.word	0x40020070
 800764c:	40020088 	.word	0x40020088
 8007650:	400200a0 	.word	0x400200a0
 8007654:	400200b8 	.word	0x400200b8
 8007658:	40020410 	.word	0x40020410
 800765c:	40020428 	.word	0x40020428
 8007660:	40020440 	.word	0x40020440
 8007664:	40020458 	.word	0x40020458
 8007668:	40020470 	.word	0x40020470
 800766c:	40020488 	.word	0x40020488
 8007670:	400204a0 	.word	0x400204a0
 8007674:	400204b8 	.word	0x400204b8
 8007678:	58025408 	.word	0x58025408
 800767c:	5802541c 	.word	0x5802541c
 8007680:	58025430 	.word	0x58025430
 8007684:	58025444 	.word	0x58025444
 8007688:	58025458 	.word	0x58025458
 800768c:	5802546c 	.word	0x5802546c
 8007690:	58025480 	.word	0x58025480
 8007694:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d160      	bne.n	8007764 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7f      	ldr	r2, [pc, #508]	; (80078a4 <HAL_DMA_IRQHandler+0xc74>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d04a      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a7d      	ldr	r2, [pc, #500]	; (80078a8 <HAL_DMA_IRQHandler+0xc78>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d045      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a7c      	ldr	r2, [pc, #496]	; (80078ac <HAL_DMA_IRQHandler+0xc7c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d040      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a7a      	ldr	r2, [pc, #488]	; (80078b0 <HAL_DMA_IRQHandler+0xc80>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d03b      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a79      	ldr	r2, [pc, #484]	; (80078b4 <HAL_DMA_IRQHandler+0xc84>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d036      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a77      	ldr	r2, [pc, #476]	; (80078b8 <HAL_DMA_IRQHandler+0xc88>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d031      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a76      	ldr	r2, [pc, #472]	; (80078bc <HAL_DMA_IRQHandler+0xc8c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d02c      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a74      	ldr	r2, [pc, #464]	; (80078c0 <HAL_DMA_IRQHandler+0xc90>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d027      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a73      	ldr	r2, [pc, #460]	; (80078c4 <HAL_DMA_IRQHandler+0xc94>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a71      	ldr	r2, [pc, #452]	; (80078c8 <HAL_DMA_IRQHandler+0xc98>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d01d      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a70      	ldr	r2, [pc, #448]	; (80078cc <HAL_DMA_IRQHandler+0xc9c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a6e      	ldr	r2, [pc, #440]	; (80078d0 <HAL_DMA_IRQHandler+0xca0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a6d      	ldr	r2, [pc, #436]	; (80078d4 <HAL_DMA_IRQHandler+0xca4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a6b      	ldr	r2, [pc, #428]	; (80078d8 <HAL_DMA_IRQHandler+0xca8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a6a      	ldr	r2, [pc, #424]	; (80078dc <HAL_DMA_IRQHandler+0xcac>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_DMA_IRQHandler+0xb12>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a68      	ldr	r2, [pc, #416]	; (80078e0 <HAL_DMA_IRQHandler+0xcb0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d108      	bne.n	8007754 <HAL_DMA_IRQHandler+0xb24>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0208 	bic.w	r2, r2, #8
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e007      	b.n	8007764 <HAL_DMA_IRQHandler+0xb34>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0204 	bic.w	r2, r2, #4
 8007762:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8165 	beq.w	8007a38 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007776:	e15f      	b.n	8007a38 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	2202      	movs	r2, #2
 8007782:	409a      	lsls	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4013      	ands	r3, r2
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80c5 	beq.w	8007918 <HAL_DMA_IRQHandler+0xce8>
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80bf 	beq.w	8007918 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2202      	movs	r2, #2
 80077a4:	409a      	lsls	r2, r3
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d018      	beq.n	80077e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 813a 	beq.w	8007a3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077d0:	e134      	b.n	8007a3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8130 	beq.w	8007a3c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077e4:	e12a      	b.n	8007a3c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 8089 	bne.w	8007904 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2b      	ldr	r2, [pc, #172]	; (80078a4 <HAL_DMA_IRQHandler+0xc74>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d04a      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a29      	ldr	r2, [pc, #164]	; (80078a8 <HAL_DMA_IRQHandler+0xc78>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d045      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a28      	ldr	r2, [pc, #160]	; (80078ac <HAL_DMA_IRQHandler+0xc7c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d040      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a26      	ldr	r2, [pc, #152]	; (80078b0 <HAL_DMA_IRQHandler+0xc80>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a25      	ldr	r2, [pc, #148]	; (80078b4 <HAL_DMA_IRQHandler+0xc84>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d036      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a23      	ldr	r2, [pc, #140]	; (80078b8 <HAL_DMA_IRQHandler+0xc88>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d031      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_DMA_IRQHandler+0xc8c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d02c      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <HAL_DMA_IRQHandler+0xc90>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d027      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <HAL_DMA_IRQHandler+0xc94>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <HAL_DMA_IRQHandler+0xc98>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01d      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <HAL_DMA_IRQHandler+0xc9c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1a      	ldr	r2, [pc, #104]	; (80078d0 <HAL_DMA_IRQHandler+0xca0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <HAL_DMA_IRQHandler+0xca4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <HAL_DMA_IRQHandler+0xca8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a16      	ldr	r2, [pc, #88]	; (80078dc <HAL_DMA_IRQHandler+0xcac>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_DMA_IRQHandler+0xc62>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <HAL_DMA_IRQHandler+0xcb0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d128      	bne.n	80078e4 <HAL_DMA_IRQHandler+0xcb4>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0214 	bic.w	r2, r2, #20
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e027      	b.n	80078f4 <HAL_DMA_IRQHandler+0xcc4>
 80078a4:	40020010 	.word	0x40020010
 80078a8:	40020028 	.word	0x40020028
 80078ac:	40020040 	.word	0x40020040
 80078b0:	40020058 	.word	0x40020058
 80078b4:	40020070 	.word	0x40020070
 80078b8:	40020088 	.word	0x40020088
 80078bc:	400200a0 	.word	0x400200a0
 80078c0:	400200b8 	.word	0x400200b8
 80078c4:	40020410 	.word	0x40020410
 80078c8:	40020428 	.word	0x40020428
 80078cc:	40020440 	.word	0x40020440
 80078d0:	40020458 	.word	0x40020458
 80078d4:	40020470 	.word	0x40020470
 80078d8:	40020488 	.word	0x40020488
 80078dc:	400204a0 	.word	0x400204a0
 80078e0:	400204b8 	.word	0x400204b8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 020a 	bic.w	r2, r2, #10
 80078f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8097 	beq.w	8007a3c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007916:	e091      	b.n	8007a3c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2208      	movs	r2, #8
 8007922:	409a      	lsls	r2, r3
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8088 	beq.w	8007a3e <HAL_DMA_IRQHandler+0xe0e>
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8082 	beq.w	8007a3e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a41      	ldr	r2, [pc, #260]	; (8007a44 <HAL_DMA_IRQHandler+0xe14>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <HAL_DMA_IRQHandler+0xe18>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a3e      	ldr	r2, [pc, #248]	; (8007a4c <HAL_DMA_IRQHandler+0xe1c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a3c      	ldr	r2, [pc, #240]	; (8007a50 <HAL_DMA_IRQHandler+0xe20>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a3b      	ldr	r2, [pc, #236]	; (8007a54 <HAL_DMA_IRQHandler+0xe24>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a39      	ldr	r2, [pc, #228]	; (8007a58 <HAL_DMA_IRQHandler+0xe28>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a38      	ldr	r2, [pc, #224]	; (8007a5c <HAL_DMA_IRQHandler+0xe2c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a36      	ldr	r2, [pc, #216]	; (8007a60 <HAL_DMA_IRQHandler+0xe30>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a35      	ldr	r2, [pc, #212]	; (8007a64 <HAL_DMA_IRQHandler+0xe34>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a33      	ldr	r2, [pc, #204]	; (8007a68 <HAL_DMA_IRQHandler+0xe38>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a32      	ldr	r2, [pc, #200]	; (8007a6c <HAL_DMA_IRQHandler+0xe3c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a30      	ldr	r2, [pc, #192]	; (8007a70 <HAL_DMA_IRQHandler+0xe40>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2f      	ldr	r2, [pc, #188]	; (8007a74 <HAL_DMA_IRQHandler+0xe44>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a2d      	ldr	r2, [pc, #180]	; (8007a78 <HAL_DMA_IRQHandler+0xe48>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a2c      	ldr	r2, [pc, #176]	; (8007a7c <HAL_DMA_IRQHandler+0xe4c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_IRQHandler+0xdaa>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2a      	ldr	r2, [pc, #168]	; (8007a80 <HAL_DMA_IRQHandler+0xe50>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d108      	bne.n	80079ec <HAL_DMA_IRQHandler+0xdbc>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 021c 	bic.w	r2, r2, #28
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e007      	b.n	80079fc <HAL_DMA_IRQHandler+0xdcc>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 020e 	bic.w	r2, r2, #14
 80079fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2201      	movs	r2, #1
 8007a06:	409a      	lsls	r2, r3
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
 8007a32:	e004      	b.n	8007a3e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a34:	bf00      	nop
 8007a36:	e002      	b.n	8007a3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a38:	bf00      	nop
 8007a3a:	e000      	b.n	8007a3e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a3c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40020010 	.word	0x40020010
 8007a48:	40020028 	.word	0x40020028
 8007a4c:	40020040 	.word	0x40020040
 8007a50:	40020058 	.word	0x40020058
 8007a54:	40020070 	.word	0x40020070
 8007a58:	40020088 	.word	0x40020088
 8007a5c:	400200a0 	.word	0x400200a0
 8007a60:	400200b8 	.word	0x400200b8
 8007a64:	40020410 	.word	0x40020410
 8007a68:	40020428 	.word	0x40020428
 8007a6c:	40020440 	.word	0x40020440
 8007a70:	40020458 	.word	0x40020458
 8007a74:	40020470 	.word	0x40020470
 8007a78:	40020488 	.word	0x40020488
 8007a7c:	400204a0 	.word	0x400204a0
 8007a80:	400204b8 	.word	0x400204b8

08007a84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a7f      	ldr	r2, [pc, #508]	; (8007ca0 <DMA_SetConfig+0x21c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d072      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a7d      	ldr	r2, [pc, #500]	; (8007ca4 <DMA_SetConfig+0x220>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d06d      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7c      	ldr	r2, [pc, #496]	; (8007ca8 <DMA_SetConfig+0x224>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d068      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a7a      	ldr	r2, [pc, #488]	; (8007cac <DMA_SetConfig+0x228>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d063      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a79      	ldr	r2, [pc, #484]	; (8007cb0 <DMA_SetConfig+0x22c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d05e      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a77      	ldr	r2, [pc, #476]	; (8007cb4 <DMA_SetConfig+0x230>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d059      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a76      	ldr	r2, [pc, #472]	; (8007cb8 <DMA_SetConfig+0x234>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d054      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a74      	ldr	r2, [pc, #464]	; (8007cbc <DMA_SetConfig+0x238>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d04f      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a73      	ldr	r2, [pc, #460]	; (8007cc0 <DMA_SetConfig+0x23c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d04a      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a71      	ldr	r2, [pc, #452]	; (8007cc4 <DMA_SetConfig+0x240>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d045      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a70      	ldr	r2, [pc, #448]	; (8007cc8 <DMA_SetConfig+0x244>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d040      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a6e      	ldr	r2, [pc, #440]	; (8007ccc <DMA_SetConfig+0x248>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d03b      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a6d      	ldr	r2, [pc, #436]	; (8007cd0 <DMA_SetConfig+0x24c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d036      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a6b      	ldr	r2, [pc, #428]	; (8007cd4 <DMA_SetConfig+0x250>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d031      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a6a      	ldr	r2, [pc, #424]	; (8007cd8 <DMA_SetConfig+0x254>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d02c      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a68      	ldr	r2, [pc, #416]	; (8007cdc <DMA_SetConfig+0x258>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d027      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a67      	ldr	r2, [pc, #412]	; (8007ce0 <DMA_SetConfig+0x25c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d022      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a65      	ldr	r2, [pc, #404]	; (8007ce4 <DMA_SetConfig+0x260>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01d      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a64      	ldr	r2, [pc, #400]	; (8007ce8 <DMA_SetConfig+0x264>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a62      	ldr	r2, [pc, #392]	; (8007cec <DMA_SetConfig+0x268>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a61      	ldr	r2, [pc, #388]	; (8007cf0 <DMA_SetConfig+0x26c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a5f      	ldr	r2, [pc, #380]	; (8007cf4 <DMA_SetConfig+0x270>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a5e      	ldr	r2, [pc, #376]	; (8007cf8 <DMA_SetConfig+0x274>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <DMA_SetConfig+0x10a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5c      	ldr	r2, [pc, #368]	; (8007cfc <DMA_SetConfig+0x278>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <DMA_SetConfig+0x10e>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <DMA_SetConfig+0x110>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ba0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <DMA_SetConfig+0x21c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <DMA_SetConfig+0x220>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d045      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a36      	ldr	r2, [pc, #216]	; (8007ca8 <DMA_SetConfig+0x224>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d040      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a35      	ldr	r2, [pc, #212]	; (8007cac <DMA_SetConfig+0x228>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03b      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <DMA_SetConfig+0x22c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d036      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a32      	ldr	r2, [pc, #200]	; (8007cb4 <DMA_SetConfig+0x230>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d031      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a30      	ldr	r2, [pc, #192]	; (8007cb8 <DMA_SetConfig+0x234>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2f      	ldr	r2, [pc, #188]	; (8007cbc <DMA_SetConfig+0x238>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d027      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2d      	ldr	r2, [pc, #180]	; (8007cc0 <DMA_SetConfig+0x23c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2c      	ldr	r2, [pc, #176]	; (8007cc4 <DMA_SetConfig+0x240>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <DMA_SetConfig+0x244>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <DMA_SetConfig+0x248>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a27      	ldr	r2, [pc, #156]	; (8007cd0 <DMA_SetConfig+0x24c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a26      	ldr	r2, [pc, #152]	; (8007cd4 <DMA_SetConfig+0x250>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a24      	ldr	r2, [pc, #144]	; (8007cd8 <DMA_SetConfig+0x254>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <DMA_SetConfig+0x1d0>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a23      	ldr	r2, [pc, #140]	; (8007cdc <DMA_SetConfig+0x258>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <DMA_SetConfig+0x1d4>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <DMA_SetConfig+0x1d6>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d059      	beq.n	8007d12 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c62:	f003 031f 	and.w	r3, r3, #31
 8007c66:	223f      	movs	r2, #63	; 0x3f
 8007c68:	409a      	lsls	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c7c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d138      	bne.n	8007d00 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c9e:	e086      	b.n	8007dae <DMA_SetConfig+0x32a>
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8
 8007ce0:	58025408 	.word	0x58025408
 8007ce4:	5802541c 	.word	0x5802541c
 8007ce8:	58025430 	.word	0x58025430
 8007cec:	58025444 	.word	0x58025444
 8007cf0:	58025458 	.word	0x58025458
 8007cf4:	5802546c 	.word	0x5802546c
 8007cf8:	58025480 	.word	0x58025480
 8007cfc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]
}
 8007d10:	e04d      	b.n	8007dae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <DMA_SetConfig+0x338>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d022      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a27      	ldr	r2, [pc, #156]	; (8007dc0 <DMA_SetConfig+0x33c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01d      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a26      	ldr	r2, [pc, #152]	; (8007dc4 <DMA_SetConfig+0x340>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d018      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <DMA_SetConfig+0x344>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <DMA_SetConfig+0x348>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00e      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a21      	ldr	r2, [pc, #132]	; (8007dd0 <DMA_SetConfig+0x34c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <DMA_SetConfig+0x350>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <DMA_SetConfig+0x2de>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1e      	ldr	r2, [pc, #120]	; (8007dd8 <DMA_SetConfig+0x354>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d101      	bne.n	8007d66 <DMA_SetConfig+0x2e2>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <DMA_SetConfig+0x2e4>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d020      	beq.n	8007dae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	2201      	movs	r2, #1
 8007d76:	409a      	lsls	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d108      	bne.n	8007d9e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	60da      	str	r2, [r3, #12]
}
 8007d9c:	e007      	b.n	8007dae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	60da      	str	r2, [r3, #12]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	58025408 	.word	0x58025408
 8007dc0:	5802541c 	.word	0x5802541c
 8007dc4:	58025430 	.word	0x58025430
 8007dc8:	58025444 	.word	0x58025444
 8007dcc:	58025458 	.word	0x58025458
 8007dd0:	5802546c 	.word	0x5802546c
 8007dd4:	58025480 	.word	0x58025480
 8007dd8:	58025494 	.word	0x58025494

08007ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a42      	ldr	r2, [pc, #264]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x118>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d04a      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a41      	ldr	r2, [pc, #260]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x11c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d045      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a3f      	ldr	r2, [pc, #252]	; (8007efc <DMA_CalcBaseAndBitshift+0x120>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d040      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a3e      	ldr	r2, [pc, #248]	; (8007f00 <DMA_CalcBaseAndBitshift+0x124>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d03b      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a3c      	ldr	r2, [pc, #240]	; (8007f04 <DMA_CalcBaseAndBitshift+0x128>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d036      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a3b      	ldr	r2, [pc, #236]	; (8007f08 <DMA_CalcBaseAndBitshift+0x12c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d031      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a39      	ldr	r2, [pc, #228]	; (8007f0c <DMA_CalcBaseAndBitshift+0x130>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02c      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a38      	ldr	r2, [pc, #224]	; (8007f10 <DMA_CalcBaseAndBitshift+0x134>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d027      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a36      	ldr	r2, [pc, #216]	; (8007f14 <DMA_CalcBaseAndBitshift+0x138>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a35      	ldr	r2, [pc, #212]	; (8007f18 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a33      	ldr	r2, [pc, #204]	; (8007f1c <DMA_CalcBaseAndBitshift+0x140>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a32      	ldr	r2, [pc, #200]	; (8007f20 <DMA_CalcBaseAndBitshift+0x144>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a30      	ldr	r2, [pc, #192]	; (8007f24 <DMA_CalcBaseAndBitshift+0x148>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a2f      	ldr	r2, [pc, #188]	; (8007f28 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <DMA_CalcBaseAndBitshift+0x150>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <DMA_CalcBaseAndBitshift+0xa8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a2c      	ldr	r2, [pc, #176]	; (8007f30 <DMA_CalcBaseAndBitshift+0x154>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d101      	bne.n	8007e88 <DMA_CalcBaseAndBitshift+0xac>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <DMA_CalcBaseAndBitshift+0xae>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d024      	beq.n	8007ed8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	3b10      	subs	r3, #16
 8007e96:	4a27      	ldr	r2, [pc, #156]	; (8007f34 <DMA_CalcBaseAndBitshift+0x158>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	091b      	lsrs	r3, r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	4a24      	ldr	r2, [pc, #144]	; (8007f38 <DMA_CalcBaseAndBitshift+0x15c>)
 8007ea8:	5cd3      	ldrb	r3, [r2, r3]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d908      	bls.n	8007ec8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4b1f      	ldr	r3, [pc, #124]	; (8007f3c <DMA_CalcBaseAndBitshift+0x160>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	659a      	str	r2, [r3, #88]	; 0x58
 8007ec6:	e00d      	b.n	8007ee4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <DMA_CalcBaseAndBitshift+0x160>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ed6:	e005      	b.n	8007ee4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	40020010 	.word	0x40020010
 8007ef8:	40020028 	.word	0x40020028
 8007efc:	40020040 	.word	0x40020040
 8007f00:	40020058 	.word	0x40020058
 8007f04:	40020070 	.word	0x40020070
 8007f08:	40020088 	.word	0x40020088
 8007f0c:	400200a0 	.word	0x400200a0
 8007f10:	400200b8 	.word	0x400200b8
 8007f14:	40020410 	.word	0x40020410
 8007f18:	40020428 	.word	0x40020428
 8007f1c:	40020440 	.word	0x40020440
 8007f20:	40020458 	.word	0x40020458
 8007f24:	40020470 	.word	0x40020470
 8007f28:	40020488 	.word	0x40020488
 8007f2c:	400204a0 	.word	0x400204a0
 8007f30:	400204b8 	.word	0x400204b8
 8007f34:	aaaaaaab 	.word	0xaaaaaaab
 8007f38:	0801ad60 	.word	0x0801ad60
 8007f3c:	fffffc00 	.word	0xfffffc00

08007f40 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d120      	bne.n	8007f96 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d858      	bhi.n	800800e <DMA_CheckFifoParam+0xce>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <DMA_CheckFifoParam+0x24>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f87 	.word	0x08007f87
 8007f6c:	08007f75 	.word	0x08007f75
 8007f70:	0800800f 	.word	0x0800800f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d048      	beq.n	8008012 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f84:	e045      	b.n	8008012 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f8e:	d142      	bne.n	8008016 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f94:	e03f      	b.n	8008016 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f9e:	d123      	bne.n	8007fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d838      	bhi.n	800801a <DMA_CheckFifoParam+0xda>
 8007fa8:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <DMA_CheckFifoParam+0x70>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08007fc1 	.word	0x08007fc1
 8007fb4:	08007fc7 	.word	0x08007fc7
 8007fb8:	08007fc1 	.word	0x08007fc1
 8007fbc:	08007fd9 	.word	0x08007fd9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
        break;
 8007fc4:	e030      	b.n	8008028 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d025      	beq.n	800801e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fd6:	e022      	b.n	800801e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fe0:	d11f      	bne.n	8008022 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fe6:	e01c      	b.n	8008022 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d902      	bls.n	8007ff6 <DMA_CheckFifoParam+0xb6>
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d003      	beq.n	8007ffc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ff4:	e018      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8007ffa:	e015      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	e00b      	b.n	8008026 <DMA_CheckFifoParam+0xe6>
        break;
 800800e:	bf00      	nop
 8008010:	e00a      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        break;
 8008012:	bf00      	nop
 8008014:	e008      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        break;
 8008016:	bf00      	nop
 8008018:	e006      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        break;
 800801a:	bf00      	nop
 800801c:	e004      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        break;
 800801e:	bf00      	nop
 8008020:	e002      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
        break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <DMA_CheckFifoParam+0xe8>
    break;
 8008026:	bf00      	nop
    }
  }

  return status;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop

08008038 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a38      	ldr	r2, [pc, #224]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d022      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a36      	ldr	r2, [pc, #216]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d01d      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a35      	ldr	r2, [pc, #212]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d018      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a33      	ldr	r2, [pc, #204]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d013      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a32      	ldr	r2, [pc, #200]	; (800813c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00e      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a30      	ldr	r2, [pc, #192]	; (8008140 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d009      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a2f      	ldr	r2, [pc, #188]	; (8008144 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d004      	beq.n	8008096 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a2d      	ldr	r2, [pc, #180]	; (8008148 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d101      	bne.n	800809a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800809a:	2300      	movs	r3, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01a      	beq.n	80080d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	3b08      	subs	r3, #8
 80080a8:	4a28      	ldr	r2, [pc, #160]	; (800814c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	091b      	lsrs	r3, r3, #4
 80080b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4b26      	ldr	r3, [pc, #152]	; (8008150 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80080b6:	4413      	add	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a24      	ldr	r2, [pc, #144]	; (8008154 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80080c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	2201      	movs	r2, #1
 80080ce:	409a      	lsls	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080d4:	e024      	b.n	8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	3b10      	subs	r3, #16
 80080de:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4a1c      	ldr	r2, [pc, #112]	; (800815c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d806      	bhi.n	80080fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d902      	bls.n	80080fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3308      	adds	r3, #8
 80080fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4b18      	ldr	r3, [pc, #96]	; (8008164 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008110:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	2201      	movs	r2, #1
 800811a:	409a      	lsls	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	58025408 	.word	0x58025408
 8008130:	5802541c 	.word	0x5802541c
 8008134:	58025430 	.word	0x58025430
 8008138:	58025444 	.word	0x58025444
 800813c:	58025458 	.word	0x58025458
 8008140:	5802546c 	.word	0x5802546c
 8008144:	58025480 	.word	0x58025480
 8008148:	58025494 	.word	0x58025494
 800814c:	cccccccd 	.word	0xcccccccd
 8008150:	16009600 	.word	0x16009600
 8008154:	58025880 	.word	0x58025880
 8008158:	aaaaaaab 	.word	0xaaaaaaab
 800815c:	400204b8 	.word	0x400204b8
 8008160:	4002040f 	.word	0x4002040f
 8008164:	10008200 	.word	0x10008200
 8008168:	40020880 	.word	0x40020880

0800816c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d04a      	beq.n	8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d847      	bhi.n	8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a25      	ldr	r2, [pc, #148]	; (8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d022      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a24      	ldr	r2, [pc, #144]	; (8008228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d01d      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a22      	ldr	r2, [pc, #136]	; (800822c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d018      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d013      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1f      	ldr	r2, [pc, #124]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00e      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d009      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1c      	ldr	r2, [pc, #112]	; (800823c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a1b      	ldr	r2, [pc, #108]	; (8008240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d101      	bne.n	80081dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081dc:	2300      	movs	r3, #0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00a      	beq.n	80081f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4b17      	ldr	r3, [pc, #92]	; (8008244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a15      	ldr	r2, [pc, #84]	; (8008248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081f4:	671a      	str	r2, [r3, #112]	; 0x70
 80081f6:	e009      	b.n	800820c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a11      	ldr	r2, [pc, #68]	; (8008250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800820a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3b01      	subs	r3, #1
 8008210:	2201      	movs	r2, #1
 8008212:	409a      	lsls	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008218:	bf00      	nop
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	58025408 	.word	0x58025408
 8008228:	5802541c 	.word	0x5802541c
 800822c:	58025430 	.word	0x58025430
 8008230:	58025444 	.word	0x58025444
 8008234:	58025458 	.word	0x58025458
 8008238:	5802546c 	.word	0x5802546c
 800823c:	58025480 	.word	0x58025480
 8008240:	58025494 	.word	0x58025494
 8008244:	1600963f 	.word	0x1600963f
 8008248:	58025940 	.word	0x58025940
 800824c:	1000823f 	.word	0x1000823f
 8008250:	40020940 	.word	0x40020940

08008254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008254:	b480      	push	{r7}
 8008256:	b089      	sub	sp, #36	; 0x24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800825e:	2300      	movs	r3, #0
 8008260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008262:	4b89      	ldr	r3, [pc, #548]	; (8008488 <HAL_GPIO_Init+0x234>)
 8008264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008266:	e194      	b.n	8008592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	2101      	movs	r1, #1
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	4013      	ands	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8186 	beq.w	800858c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	2b01      	cmp	r3, #1
 800828a:	d005      	beq.n	8008298 <HAL_GPIO_Init+0x44>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d130      	bne.n	80082fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	2203      	movs	r2, #3
 80082a4:	fa02 f303 	lsl.w	r3, r2, r3
 80082a8:	43db      	mvns	r3, r3
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	4013      	ands	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	4313      	orrs	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082ce:	2201      	movs	r2, #1
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	4013      	ands	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	091b      	lsrs	r3, r3, #4
 80082e4:	f003 0201 	and.w	r2, r3, #1
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b03      	cmp	r3, #3
 8008304:	d017      	beq.n	8008336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	2203      	movs	r2, #3
 8008312:	fa02 f303 	lsl.w	r3, r2, r3
 8008316:	43db      	mvns	r3, r3
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	4013      	ands	r3, r2
 800831c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4313      	orrs	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d123      	bne.n	800838a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	08da      	lsrs	r2, r3, #3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3208      	adds	r2, #8
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	220f      	movs	r2, #15
 800835a:	fa02 f303 	lsl.w	r3, r2, r3
 800835e:	43db      	mvns	r3, r3
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	4013      	ands	r3, r2
 8008364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4313      	orrs	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	08da      	lsrs	r2, r3, #3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3208      	adds	r2, #8
 8008384:	69b9      	ldr	r1, [r7, #24]
 8008386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	2203      	movs	r2, #3
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	43db      	mvns	r3, r3
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	4013      	ands	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f003 0203 	and.w	r2, r3, #3
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80e0 	beq.w	800858c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083cc:	4b2f      	ldr	r3, [pc, #188]	; (800848c <HAL_GPIO_Init+0x238>)
 80083ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083d2:	4a2e      	ldr	r2, [pc, #184]	; (800848c <HAL_GPIO_Init+0x238>)
 80083d4:	f043 0302 	orr.w	r3, r3, #2
 80083d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80083dc:	4b2b      	ldr	r3, [pc, #172]	; (800848c <HAL_GPIO_Init+0x238>)
 80083de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083ea:	4a29      	ldr	r2, [pc, #164]	; (8008490 <HAL_GPIO_Init+0x23c>)
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	3302      	adds	r3, #2
 80083f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	220f      	movs	r2, #15
 8008402:	fa02 f303 	lsl.w	r3, r2, r3
 8008406:	43db      	mvns	r3, r3
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	4013      	ands	r3, r2
 800840c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <HAL_GPIO_Init+0x240>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d052      	beq.n	80084bc <HAL_GPIO_Init+0x268>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <HAL_GPIO_Init+0x244>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d031      	beq.n	8008482 <HAL_GPIO_Init+0x22e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1e      	ldr	r2, [pc, #120]	; (800849c <HAL_GPIO_Init+0x248>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d02b      	beq.n	800847e <HAL_GPIO_Init+0x22a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <HAL_GPIO_Init+0x24c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d025      	beq.n	800847a <HAL_GPIO_Init+0x226>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a1c      	ldr	r2, [pc, #112]	; (80084a4 <HAL_GPIO_Init+0x250>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01f      	beq.n	8008476 <HAL_GPIO_Init+0x222>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a1b      	ldr	r2, [pc, #108]	; (80084a8 <HAL_GPIO_Init+0x254>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d019      	beq.n	8008472 <HAL_GPIO_Init+0x21e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <HAL_GPIO_Init+0x258>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <HAL_GPIO_Init+0x21a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <HAL_GPIO_Init+0x25c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00d      	beq.n	800846a <HAL_GPIO_Init+0x216>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <HAL_GPIO_Init+0x260>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d007      	beq.n	8008466 <HAL_GPIO_Init+0x212>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <HAL_GPIO_Init+0x264>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <HAL_GPIO_Init+0x20e>
 800845e:	2309      	movs	r3, #9
 8008460:	e02d      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008462:	230a      	movs	r3, #10
 8008464:	e02b      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008466:	2308      	movs	r3, #8
 8008468:	e029      	b.n	80084be <HAL_GPIO_Init+0x26a>
 800846a:	2307      	movs	r3, #7
 800846c:	e027      	b.n	80084be <HAL_GPIO_Init+0x26a>
 800846e:	2306      	movs	r3, #6
 8008470:	e025      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008472:	2305      	movs	r3, #5
 8008474:	e023      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008476:	2304      	movs	r3, #4
 8008478:	e021      	b.n	80084be <HAL_GPIO_Init+0x26a>
 800847a:	2303      	movs	r3, #3
 800847c:	e01f      	b.n	80084be <HAL_GPIO_Init+0x26a>
 800847e:	2302      	movs	r3, #2
 8008480:	e01d      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008482:	2301      	movs	r3, #1
 8008484:	e01b      	b.n	80084be <HAL_GPIO_Init+0x26a>
 8008486:	bf00      	nop
 8008488:	58000080 	.word	0x58000080
 800848c:	58024400 	.word	0x58024400
 8008490:	58000400 	.word	0x58000400
 8008494:	58020000 	.word	0x58020000
 8008498:	58020400 	.word	0x58020400
 800849c:	58020800 	.word	0x58020800
 80084a0:	58020c00 	.word	0x58020c00
 80084a4:	58021000 	.word	0x58021000
 80084a8:	58021400 	.word	0x58021400
 80084ac:	58021800 	.word	0x58021800
 80084b0:	58021c00 	.word	0x58021c00
 80084b4:	58022000 	.word	0x58022000
 80084b8:	58022400 	.word	0x58022400
 80084bc:	2300      	movs	r3, #0
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	f002 0203 	and.w	r2, r2, #3
 80084c4:	0092      	lsls	r2, r2, #2
 80084c6:	4093      	lsls	r3, r2
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084ce:	4938      	ldr	r1, [pc, #224]	; (80085b0 <HAL_GPIO_Init+0x35c>)
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	089b      	lsrs	r3, r3, #2
 80084d4:	3302      	adds	r3, #2
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	43db      	mvns	r3, r3
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	4013      	ands	r3, r2
 80084ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	43db      	mvns	r3, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4013      	ands	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	43db      	mvns	r3, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4013      	ands	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	43db      	mvns	r3, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	4013      	ands	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	fa22 f303 	lsr.w	r3, r2, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f47f ae63 	bne.w	8008268 <HAL_GPIO_Init+0x14>
  }
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	3724      	adds	r7, #36	; 0x24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	58000400 	.word	0x58000400

080085b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085c2:	4b75      	ldr	r3, [pc, #468]	; (8008798 <HAL_GPIO_DeInit+0x1e4>)
 80085c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80085c6:	e0d9      	b.n	800877c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80085c8:	2201      	movs	r2, #1
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	4013      	ands	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80cc 	beq.w	8008776 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80085de:	4a6f      	ldr	r2, [pc, #444]	; (800879c <HAL_GPIO_DeInit+0x1e8>)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	089b      	lsrs	r3, r3, #2
 80085e4:	3302      	adds	r3, #2
 80085e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ea:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	220f      	movs	r2, #15
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4013      	ands	r3, r2
 80085fe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a67      	ldr	r2, [pc, #412]	; (80087a0 <HAL_GPIO_DeInit+0x1ec>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d037      	beq.n	8008678 <HAL_GPIO_DeInit+0xc4>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a66      	ldr	r2, [pc, #408]	; (80087a4 <HAL_GPIO_DeInit+0x1f0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d031      	beq.n	8008674 <HAL_GPIO_DeInit+0xc0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a65      	ldr	r2, [pc, #404]	; (80087a8 <HAL_GPIO_DeInit+0x1f4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d02b      	beq.n	8008670 <HAL_GPIO_DeInit+0xbc>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a64      	ldr	r2, [pc, #400]	; (80087ac <HAL_GPIO_DeInit+0x1f8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d025      	beq.n	800866c <HAL_GPIO_DeInit+0xb8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a63      	ldr	r2, [pc, #396]	; (80087b0 <HAL_GPIO_DeInit+0x1fc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d01f      	beq.n	8008668 <HAL_GPIO_DeInit+0xb4>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a62      	ldr	r2, [pc, #392]	; (80087b4 <HAL_GPIO_DeInit+0x200>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d019      	beq.n	8008664 <HAL_GPIO_DeInit+0xb0>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a61      	ldr	r2, [pc, #388]	; (80087b8 <HAL_GPIO_DeInit+0x204>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d013      	beq.n	8008660 <HAL_GPIO_DeInit+0xac>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a60      	ldr	r2, [pc, #384]	; (80087bc <HAL_GPIO_DeInit+0x208>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00d      	beq.n	800865c <HAL_GPIO_DeInit+0xa8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a5f      	ldr	r2, [pc, #380]	; (80087c0 <HAL_GPIO_DeInit+0x20c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d007      	beq.n	8008658 <HAL_GPIO_DeInit+0xa4>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a5e      	ldr	r2, [pc, #376]	; (80087c4 <HAL_GPIO_DeInit+0x210>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d101      	bne.n	8008654 <HAL_GPIO_DeInit+0xa0>
 8008650:	2309      	movs	r3, #9
 8008652:	e012      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008654:	230a      	movs	r3, #10
 8008656:	e010      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008658:	2308      	movs	r3, #8
 800865a:	e00e      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 800865c:	2307      	movs	r3, #7
 800865e:	e00c      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008660:	2306      	movs	r3, #6
 8008662:	e00a      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008664:	2305      	movs	r3, #5
 8008666:	e008      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008668:	2304      	movs	r3, #4
 800866a:	e006      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 800866c:	2303      	movs	r3, #3
 800866e:	e004      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008670:	2302      	movs	r3, #2
 8008672:	e002      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <HAL_GPIO_DeInit+0xc6>
 8008678:	2300      	movs	r3, #0
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	f002 0203 	and.w	r2, r2, #3
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	4093      	lsls	r3, r2
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	429a      	cmp	r2, r3
 8008688:	d136      	bne.n	80086f8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	43db      	mvns	r3, r3
 8008692:	401a      	ands	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	43db      	mvns	r3, r3
 80086a0:	401a      	ands	r2, r3
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80086a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	43db      	mvns	r3, r3
 80086b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086b4:	4013      	ands	r3, r2
 80086b6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80086b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086c6:	4013      	ands	r3, r2
 80086c8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	220f      	movs	r2, #15
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80086da:	4a30      	ldr	r2, [pc, #192]	; (800879c <HAL_GPIO_DeInit+0x1e8>)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	089b      	lsrs	r3, r3, #2
 80086e0:	3302      	adds	r3, #2
 80086e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	43da      	mvns	r2, r3
 80086ea:	482c      	ldr	r0, [pc, #176]	; (800879c <HAL_GPIO_DeInit+0x1e8>)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	089b      	lsrs	r3, r3, #2
 80086f0:	400a      	ands	r2, r1
 80086f2:	3302      	adds	r3, #2
 80086f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	2103      	movs	r1, #3
 8008702:	fa01 f303 	lsl.w	r3, r1, r3
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	08da      	lsrs	r2, r3, #3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3208      	adds	r2, #8
 8008714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	220f      	movs	r2, #15
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	43db      	mvns	r3, r3
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	08d2      	lsrs	r2, r2, #3
 800872c:	4019      	ands	r1, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3208      	adds	r2, #8
 8008732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	2103      	movs	r1, #3
 8008740:	fa01 f303 	lsl.w	r3, r1, r3
 8008744:	43db      	mvns	r3, r3
 8008746:	401a      	ands	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	2101      	movs	r1, #1
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	fa01 f303 	lsl.w	r3, r1, r3
 8008758:	43db      	mvns	r3, r3
 800875a:	401a      	ands	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	2103      	movs	r1, #3
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	43db      	mvns	r3, r3
 8008770:	401a      	ands	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	3301      	adds	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	f47f af1f 	bne.w	80085c8 <HAL_GPIO_DeInit+0x14>
  }
}
 800878a:	bf00      	nop
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	58000080 	.word	0x58000080
 800879c:	58000400 	.word	0x58000400
 80087a0:	58020000 	.word	0x58020000
 80087a4:	58020400 	.word	0x58020400
 80087a8:	58020800 	.word	0x58020800
 80087ac:	58020c00 	.word	0x58020c00
 80087b0:	58021000 	.word	0x58021000
 80087b4:	58021400 	.word	0x58021400
 80087b8:	58021800 	.word	0x58021800
 80087bc:	58021c00 	.word	0x58021c00
 80087c0:	58022000 	.word	0x58022000
 80087c4:	58022400 	.word	0x58022400

080087c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
 80087d4:	4613      	mov	r3, r2
 80087d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087d8:	787b      	ldrb	r3, [r7, #1]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087de:	887a      	ldrh	r2, [r7, #2]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80087e4:	e003      	b.n	80087ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80087e6:	887b      	ldrh	r3, [r7, #2]
 80087e8:	041a      	lsls	r2, r3, #16
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	619a      	str	r2, [r3, #24]
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008804:	4a08      	ldr	r2, [pc, #32]	; (8008828 <HAL_HSEM_FastTake+0x2c>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3320      	adds	r3, #32
 800880a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800880e:	4a07      	ldr	r2, [pc, #28]	; (800882c <HAL_HSEM_FastTake+0x30>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d101      	bne.n	8008818 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	e000      	b.n	800881a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	58026400 	.word	0x58026400
 800882c:	80000300 	.word	0x80000300

08008830 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800883a:	4906      	ldr	r1, [pc, #24]	; (8008854 <HAL_HSEM_Release+0x24>)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	58026400 	.word	0x58026400

08008858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e08b      	b.n	8008982 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7f8 fe7a 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	; 0x24
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0201 	bic.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80088a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d107      	bne.n	80088d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	e006      	b.n	80088e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80088de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d108      	bne.n	80088fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f6:	605a      	str	r2, [r3, #4]
 80088f8:	e007      	b.n	800890a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6859      	ldr	r1, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b1d      	ldr	r3, [pc, #116]	; (800898c <HAL_I2C_Init+0x134>)
 8008916:	430b      	orrs	r3, r1
 8008918:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008928:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691a      	ldr	r2, [r3, #16]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	69d9      	ldr	r1, [r3, #28]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0201 	orr.w	r2, r2, #1
 8008962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	02008000 	.word	0x02008000

08008990 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	461a      	mov	r2, r3
 800899c:	460b      	mov	r3, r1
 800899e:	817b      	strh	r3, [r7, #10]
 80089a0:	4613      	mov	r3, r2
 80089a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	f040 80fd 	bne.w	8008bac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_I2C_Master_Transmit+0x30>
 80089bc:	2302      	movs	r3, #2
 80089be:	e0f6      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089c8:	f7fb fe82 	bl	80046d0 <HAL_GetTick>
 80089cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2319      	movs	r3, #25
 80089d4:	2201      	movs	r2, #1
 80089d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 f914 	bl	8008c08 <I2C_WaitOnFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e0e1      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2221      	movs	r2, #33	; 0x21
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2210      	movs	r2, #16
 80089f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	893a      	ldrh	r2, [r7, #8]
 8008a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2bff      	cmp	r3, #255	; 0xff
 8008a1a:	d906      	bls.n	8008a2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	22ff      	movs	r2, #255	; 0xff
 8008a20:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e007      	b.n	8008a3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d024      	beq.n	8008a8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	8979      	ldrh	r1, [r7, #10]
 8008a7e:	4b4e      	ldr	r3, [pc, #312]	; (8008bb8 <HAL_I2C_Master_Transmit+0x228>)
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fa83 	bl	8008f90 <I2C_TransferConfig>
 8008a8a:	e066      	b.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	8979      	ldrh	r1, [r7, #10]
 8008a94:	4b48      	ldr	r3, [pc, #288]	; (8008bb8 <HAL_I2C_Master_Transmit+0x228>)
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 fa78 	bl	8008f90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008aa0:	e05b      	b.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	6a39      	ldr	r1, [r7, #32]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f907 	bl	8008cba <I2C_WaitOnTXISFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e07b      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d034      	beq.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d130      	bne.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	2200      	movs	r2, #0
 8008b00:	2180      	movs	r1, #128	; 0x80
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f880 	bl	8008c08 <I2C_WaitOnFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e04d      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	2bff      	cmp	r3, #255	; 0xff
 8008b1a:	d90e      	bls.n	8008b3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	22ff      	movs	r2, #255	; 0xff
 8008b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	8979      	ldrh	r1, [r7, #10]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fa2c 	bl	8008f90 <I2C_TransferConfig>
 8008b38:	e00f      	b.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	8979      	ldrh	r1, [r7, #10]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fa1b 	bl	8008f90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d19e      	bne.n	8008aa2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	6a39      	ldr	r1, [r7, #32]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f8ed 	bl	8008d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e01a      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6859      	ldr	r1, [r3, #4]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <HAL_I2C_Master_Transmit+0x22c>)
 8008b8c:	400b      	ands	r3, r1
 8008b8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e000      	b.n	8008bae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	80002000 	.word	0x80002000
 8008bbc:	fe00e800 	.word	0xfe00e800

08008bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d103      	bne.n	8008bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d007      	beq.n	8008bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f042 0201 	orr.w	r2, r2, #1
 8008bfa:	619a      	str	r2, [r3, #24]
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c18:	e03b      	b.n	8008c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f8d6 	bl	8008dd0 <I2C_IsErrorOccurred>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e041      	b.n	8008cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d02d      	beq.n	8008c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c36:	f7fb fd4b 	bl	80046d0 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d122      	bne.n	8008c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4013      	ands	r3, r2
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d113      	bne.n	8008c92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e00f      	b.n	8008cb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	699a      	ldr	r2, [r3, #24]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	bf0c      	ite	eq
 8008ca2:	2301      	moveq	r3, #1
 8008ca4:	2300      	movne	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d0b4      	beq.n	8008c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cc6:	e033      	b.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f87f 	bl	8008dd0 <I2C_IsErrorOccurred>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e031      	b.n	8008d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d025      	beq.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ce4:	f7fb fcf4 	bl	80046d0 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d11a      	bne.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d013      	beq.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0c:	f043 0220 	orr.w	r2, r3, #32
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e007      	b.n	8008d40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d1c4      	bne.n	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d54:	e02f      	b.n	8008db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f838 	bl	8008dd0 <I2C_IsErrorOccurred>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e02d      	b.n	8008dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7fb fcb1 	bl	80046d0 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11a      	bne.n	8008db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d013      	beq.n	8008db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	f043 0220 	orr.w	r2, r3, #32
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e007      	b.n	8008dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d1c8      	bne.n	8008d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d068      	beq.n	8008ece <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2210      	movs	r2, #16
 8008e02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e04:	e049      	b.n	8008e9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d045      	beq.n	8008e9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008e0e:	f7fb fc5f 	bl	80046d0 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <I2C_IsErrorOccurred+0x54>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d13a      	bne.n	8008e9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e46:	d121      	bne.n	8008e8c <I2C_IsErrorOccurred+0xbc>
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e4e:	d01d      	beq.n	8008e8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e50:	7cfb      	ldrb	r3, [r7, #19]
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d01a      	beq.n	8008e8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e66:	f7fb fc33 	bl	80046d0 <HAL_GetTick>
 8008e6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e6c:	e00e      	b.n	8008e8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e6e:	f7fb fc2f 	bl	80046d0 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b19      	cmp	r3, #25
 8008e7a:	d907      	bls.n	8008e8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	f043 0320 	orr.w	r3, r3, #32
 8008e82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008e8a:	e006      	b.n	8008e9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d1e9      	bne.n	8008e6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d003      	beq.n	8008eb0 <I2C_IsErrorOccurred+0xe0>
 8008ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0aa      	beq.n	8008e06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	f043 0304 	orr.w	r3, r3, #4
 8008ec6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	f043 0308 	orr.w	r3, r3, #8
 8008f08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	f043 0302 	orr.w	r3, r3, #2
 8008f2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01c      	beq.n	8008f7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fe3b 	bl	8008bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6859      	ldr	r1, [r3, #4]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <I2C_IsErrorOccurred+0x1bc>)
 8008f56:	400b      	ands	r3, r1
 8008f58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3728      	adds	r7, #40	; 0x28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	fe00e800 	.word	0xfe00e800

08008f90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	817b      	strh	r3, [r7, #10]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fa8:	7a7b      	ldrb	r3, [r7, #9]
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	0d5b      	lsrs	r3, r3, #21
 8008fca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008fce:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <I2C_TransferConfig+0x60>)
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	ea02 0103 	and.w	r1, r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	03ff63ff 	.word	0x03ff63ff

08008ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b20      	cmp	r3, #32
 8009008:	d138      	bne.n	800907c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009014:	2302      	movs	r3, #2
 8009016:	e032      	b.n	800907e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2224      	movs	r2, #36	; 0x24
 8009024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	e000      	b.n	800907e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800907c:	2302      	movs	r3, #2
  }
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b20      	cmp	r3, #32
 800909e:	d139      	bne.n	8009114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e033      	b.n	8009116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2224      	movs	r2, #36	; 0x24
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0201 	bic.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80090dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e000      	b.n	8009116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e12a      	b.n	800938c <HAL_I2S_Init+0x268>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d123      	bne.n	800918a <HAL_I2S_Init+0x66>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
    /* Init the I2S Callback settings */
    hi2s->TxCpltCallback       = HAL_I2S_TxCpltCallback;          /* Legacy weak TxCpltCallback       */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a91      	ldr	r2, [pc, #580]	; (8009394 <HAL_I2S_Init+0x270>)
 800914e:	655a      	str	r2, [r3, #84]	; 0x54
    hi2s->RxCpltCallback       = HAL_I2S_RxCpltCallback;          /* Legacy weak RxCpltCallback       */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a91      	ldr	r2, [pc, #580]	; (8009398 <HAL_I2S_Init+0x274>)
 8009154:	659a      	str	r2, [r3, #88]	; 0x58
    hi2s->TxRxCpltCallback     = HAL_I2SEx_TxRxCpltCallback;      /* Legacy weak TxRxCpltCallback     */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a90      	ldr	r2, [pc, #576]	; (800939c <HAL_I2S_Init+0x278>)
 800915a:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2s->TxHalfCpltCallback   = HAL_I2S_TxHalfCpltCallback;      /* Legacy weak TxHalfCpltCallback   */
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a90      	ldr	r2, [pc, #576]	; (80093a0 <HAL_I2S_Init+0x27c>)
 8009160:	661a      	str	r2, [r3, #96]	; 0x60
    hi2s->RxHalfCpltCallback   = HAL_I2S_RxHalfCpltCallback;      /* Legacy weak RxHalfCpltCallback   */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a8f      	ldr	r2, [pc, #572]	; (80093a4 <HAL_I2S_Init+0x280>)
 8009166:	665a      	str	r2, [r3, #100]	; 0x64
    hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a8f      	ldr	r2, [pc, #572]	; (80093a8 <HAL_I2S_Init+0x284>)
 800916c:	669a      	str	r2, [r3, #104]	; 0x68
    hi2s->ErrorCallback        = HAL_I2S_ErrorCallback;           /* Legacy weak ErrorCallback        */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a8e      	ldr	r2, [pc, #568]	; (80093ac <HAL_I2S_Init+0x288>)
 8009172:	66da      	str	r2, [r3, #108]	; 0x6c

    if (hi2s->MspInitCallback == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <HAL_I2S_Init+0x5e>
    {
      hi2s->MspInitCallback = HAL_I2S_MspInit; /* Legacy weak MspInit  */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a8c      	ldr	r2, [pc, #560]	; (80093b0 <HAL_I2S_Init+0x28c>)
 8009180:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b01      	cmp	r3, #1
 800919e:	d107      	bne.n	80091b0 <HAL_I2S_Init+0x8c>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0201 	bic.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2200      	movs	r2, #0
 80091b6:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d008      	beq.n	80091d2 <HAL_I2S_Init+0xae>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d004      	beq.n	80091d2 <HAL_I2S_Init+0xae>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	f040 8087 	bne.w	80092e0 <HAL_I2S_Init+0x1bc>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d05a      	beq.n	8009290 <HAL_I2S_Init+0x16c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <HAL_I2S_Init+0xc4>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80091e2:	2302      	movs	r3, #2
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e001      	b.n	80091ec <HAL_I2S_Init+0xc8>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80091e8:	2301      	movs	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	d003      	beq.n	80091fc <HAL_I2S_Init+0xd8>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80091f8:	2bb0      	cmp	r3, #176	; 0xb0
 80091fa:	d102      	bne.n	8009202 <HAL_I2S_Init+0xde>
      {
        ispcm = 1UL;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e001      	b.n	8009206 <HAL_I2S_Init+0xe2>
      }
      else
      {
        ispcm = 0UL;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8009206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800920a:	f04f 0100 	mov.w	r1, #0
 800920e:	f004 f9c3 	bl	800d598 <HAL_RCCEx_GetPeriphCLKFreq>
 8009212:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921c:	d113      	bne.n	8009246 <HAL_I2S_Init+0x122>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800921e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	fbb2 f2f3 	udiv	r2, r2, r3
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009240:	3305      	adds	r3, #5
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e014      	b.n	8009270 <HAL_I2S_Init+0x14c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8009246:	2220      	movs	r2, #32
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	fa22 f303 	lsr.w	r3, r2, r3
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	fbb2 f2f3 	udiv	r2, r2, r3
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	fbb2 f3f3 	udiv	r3, r2, r3
 800926c:	3305      	adds	r3, #5
 800926e:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	4a50      	ldr	r2, [pc, #320]	; (80093b4 <HAL_I2S_Init+0x290>)
 8009274:	fba2 2303 	umull	r2, r3, r2, r3
 8009278:	08db      	lsrs	r3, r3, #3
 800927a:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	085b      	lsrs	r3, r3, #1
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	e003      	b.n	8009298 <HAL_I2S_Init+0x174>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8009290:	2302      	movs	r3, #2
 8009292:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8009294:	2300      	movs	r3, #0
 8009296:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d102      	bne.n	80092a4 <HAL_I2S_Init+0x180>
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d002      	beq.n	80092aa <HAL_I2S_Init+0x186>
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	2bff      	cmp	r3, #255	; 0xff
 80092a8:	d907      	bls.n	80092ba <HAL_I2S_Init+0x196>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ae:	f043 0210 	orr.w	r2, r3, #16
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e068      	b.n	800938c <HAL_I2S_Init+0x268>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <HAL_I2S_Init+0x1a0>
    {
      i2sodd = 1UL;
 80092c0:	2301      	movs	r3, #1
 80092c2:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092ca:	4b3b      	ldr	r3, [pc, #236]	; (80093b8 <HAL_I2S_Init+0x294>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	0411      	lsls	r1, r2, #16
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	0612      	lsls	r2, r2, #24
 80092d6:	4311      	orrs	r1, r2
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6812      	ldr	r2, [r2, #0]
 80092dc:	430b      	orrs	r3, r1
 80092de:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092e6:	4b35      	ldr	r3, [pc, #212]	; (80093bc <HAL_I2S_Init+0x298>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6851      	ldr	r1, [r2, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6892      	ldr	r2, [r2, #8]
 80092f2:	4311      	orrs	r1, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	68d2      	ldr	r2, [r2, #12]
 80092f8:	4311      	orrs	r1, r2
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6992      	ldr	r2, [r2, #24]
 80092fe:	4311      	orrs	r1, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6a12      	ldr	r2, [r2, #32]
 8009304:	4311      	orrs	r1, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800930a:	4311      	orrs	r1, r2
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6912      	ldr	r2, [r2, #16]
 8009310:	430a      	orrs	r2, r1
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f042 0201 	orr.w	r2, r2, #1
 800931c:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f640 72f8 	movw	r2, #4088	; 0xff8
 8009326:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009336:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69da      	ldr	r2, [r3, #28]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d007      	beq.n	8009366 <HAL_I2S_Init+0x242>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b06      	cmp	r3, #6
 800935c:	d003      	beq.n	8009366 <HAL_I2S_Init+0x242>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b0a      	cmp	r3, #10
 8009364:	d10a      	bne.n	800937c <HAL_I2S_Init+0x258>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3720      	adds	r7, #32
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	08009a69 	.word	0x08009a69
 8009398:	08009a91 	.word	0x08009a91
 800939c:	08009ab9 	.word	0x08009ab9
 80093a0:	08009a55 	.word	0x08009a55
 80093a4:	08009a7d 	.word	0x08009a7d
 80093a8:	08009aa5 	.word	0x08009aa5
 80093ac:	08009acd 	.word	0x08009acd
 80093b0:	0800164d 	.word	0x0800164d
 80093b4:	cccccccd 	.word	0xcccccccd
 80093b8:	fe00ffff 	.word	0xfe00ffff
 80093bc:	fdff9040 	.word	0xfdff9040

080093c0 <HAL_I2S_RegisterCallback>:
  *         to register callbacks for HAL_I2S_MSPINIT_CB_ID and HAL_I2S_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_RegisterCallback(I2S_HandleTypeDef *hi2s, HAL_I2S_CallbackIDTypeDef CallbackID,
                                           pI2S_CallbackTypeDef pCallback)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	460b      	mov	r3, r1
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d107      	bne.n	80093e8 <HAL_I2S_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2s->ErrorCode |= HAL_I2S_ERROR_INVALID_CALLBACK;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e070      	b.n	80094ca <HAL_I2S_RegisterCallback+0x10a>
  }

  if (HAL_I2S_STATE_READY == hi2s->State)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d144      	bne.n	800947e <HAL_I2S_RegisterCallback+0xbe>
  {
    switch (CallbackID)
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	2b08      	cmp	r3, #8
 80093f8:	d838      	bhi.n	800946c <HAL_I2S_RegisterCallback+0xac>
 80093fa:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <HAL_I2S_RegisterCallback+0x40>)
 80093fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009400:	08009425 	.word	0x08009425
 8009404:	0800942d 	.word	0x0800942d
 8009408:	08009435 	.word	0x08009435
 800940c:	0800943d 	.word	0x0800943d
 8009410:	08009445 	.word	0x08009445
 8009414:	0800944d 	.word	0x0800944d
 8009418:	08009455 	.word	0x08009455
 800941c:	0800945d 	.word	0x0800945d
 8009420:	08009465 	.word	0x08009465
    {
      case HAL_I2S_TX_COMPLETE_CB_ID :
        hi2s->TxCpltCallback = pCallback;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800942a:	e04d      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_RX_COMPLETE_CB_ID :
        hi2s->RxCpltCallback = pCallback;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009432:	e049      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_TX_RX_COMPLETE_CB_ID :
        hi2s->TxRxCpltCallback = pCallback;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800943a:	e045      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_TX_HALF_COMPLETE_CB_ID :
        hi2s->TxHalfCpltCallback = pCallback;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009442:	e041      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_RX_HALF_COMPLETE_CB_ID :
        hi2s->RxHalfCpltCallback = pCallback;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800944a:	e03d      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>


      case HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID :
        hi2s->TxRxHalfCpltCallback = pCallback;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009452:	e039      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_ERROR_CB_ID :
        hi2s->ErrorCallback = pCallback;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800945a:	e035      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = pCallback;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009462:	e031      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = pCallback;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800946a:	e02d      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009470:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
        break;
 800947c:	e024      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>
    }
  }
  else if (HAL_I2S_STATE_RESET == hi2s->State)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d116      	bne.n	80094b8 <HAL_I2S_RegisterCallback+0xf8>
  {
    switch (CallbackID)
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	2b07      	cmp	r3, #7
 800948e:	d002      	beq.n	8009496 <HAL_I2S_RegisterCallback+0xd6>
 8009490:	2b08      	cmp	r3, #8
 8009492:	d004      	beq.n	800949e <HAL_I2S_RegisterCallback+0xde>
 8009494:	e007      	b.n	80094a6 <HAL_I2S_RegisterCallback+0xe6>
    {
      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = pCallback;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800949c:	e014      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = pCallback;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80094a4:	e010      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]
        break;
 80094b6:	e007      	b.n	80094c8 <HAL_I2S_RegisterCallback+0x108>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Return error status */
    status =  HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop

080094d8 <HAL_I2S_UnRegisterCallback>:
  * @note   The HAL_I2S_UnRegisterCallback() may be called before HAL_I2S_Init() in HAL_I2S_STATE_RESET
  *         to un-register callbacks for HAL_I2S_MSPINIT_CB_ID and HAL_I2S_MSPDEINIT_CB_ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_UnRegisterCallback(I2S_HandleTypeDef *hi2s, HAL_I2S_CallbackIDTypeDef CallbackID)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_I2S_STATE_READY == hi2s->State)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d144      	bne.n	800957e <HAL_I2S_UnRegisterCallback+0xa6>
  {
    switch (CallbackID)
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d838      	bhi.n	800956c <HAL_I2S_UnRegisterCallback+0x94>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <HAL_I2S_UnRegisterCallback+0x28>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	08009525 	.word	0x08009525
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009535 	.word	0x08009535
 800950c:	0800953d 	.word	0x0800953d
 8009510:	08009545 	.word	0x08009545
 8009514:	0800954d 	.word	0x0800954d
 8009518:	08009555 	.word	0x08009555
 800951c:	0800955d 	.word	0x0800955d
 8009520:	08009565 	.word	0x08009565
    {
      case HAL_I2S_TX_COMPLETE_CB_ID :
        hi2s->TxCpltCallback = HAL_I2S_TxCpltCallback;                /* Legacy weak TxCpltCallback       */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a2c      	ldr	r2, [pc, #176]	; (80095d8 <HAL_I2S_UnRegisterCallback+0x100>)
 8009528:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800952a:	e04d      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_RX_COMPLETE_CB_ID :
        hi2s->RxCpltCallback = HAL_I2S_RxCpltCallback;                /* Legacy weak RxCpltCallback       */
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a2b      	ldr	r2, [pc, #172]	; (80095dc <HAL_I2S_UnRegisterCallback+0x104>)
 8009530:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009532:	e049      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_RX_COMPLETE_CB_ID :
        hi2s->TxRxCpltCallback = HAL_I2SEx_TxRxCpltCallback;          /* Legacy weak TxRxCpltCallback     */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a2a      	ldr	r2, [pc, #168]	; (80095e0 <HAL_I2S_UnRegisterCallback+0x108>)
 8009538:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800953a:	e045      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_HALF_COMPLETE_CB_ID :
        hi2s->TxHalfCpltCallback = HAL_I2S_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback   */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a29      	ldr	r2, [pc, #164]	; (80095e4 <HAL_I2S_UnRegisterCallback+0x10c>)
 8009540:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009542:	e041      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_RX_HALF_COMPLETE_CB_ID :
        hi2s->RxHalfCpltCallback = HAL_I2S_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback   */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a28      	ldr	r2, [pc, #160]	; (80095e8 <HAL_I2S_UnRegisterCallback+0x110>)
 8009548:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800954a:	e03d      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_TX_RX_HALF_COMPLETE_CB_ID :
        hi2s->TxRxHalfCpltCallback = HAL_I2SEx_TxRxHalfCpltCallback;  /* Legacy weak TxRxHalfCpltCallback */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a27      	ldr	r2, [pc, #156]	; (80095ec <HAL_I2S_UnRegisterCallback+0x114>)
 8009550:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009552:	e039      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_ERROR_CB_ID :
        hi2s->ErrorCallback = HAL_I2S_ErrorCallback;                  /* Legacy weak ErrorCallback        */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a26      	ldr	r2, [pc, #152]	; (80095f0 <HAL_I2S_UnRegisterCallback+0x118>)
 8009558:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800955a:	e035      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = HAL_I2S_MspInit;                      /* Legacy weak MspInit              */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a25      	ldr	r2, [pc, #148]	; (80095f4 <HAL_I2S_UnRegisterCallback+0x11c>)
 8009560:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009562:	e031      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = HAL_I2S_MspDeInit;                  /* Legacy weak MspDeInit            */
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a24      	ldr	r2, [pc, #144]	; (80095f8 <HAL_I2S_UnRegisterCallback+0x120>)
 8009568:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800956a:	e02d      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	73fb      	strb	r3, [r7, #15]
        break;
 800957c:	e024      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>
    }
  }
  else if (HAL_I2S_STATE_RESET == hi2s->State)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d116      	bne.n	80095b8 <HAL_I2S_UnRegisterCallback+0xe0>
  {
    switch (CallbackID)
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	2b07      	cmp	r3, #7
 800958e:	d002      	beq.n	8009596 <HAL_I2S_UnRegisterCallback+0xbe>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d004      	beq.n	800959e <HAL_I2S_UnRegisterCallback+0xc6>
 8009594:	e007      	b.n	80095a6 <HAL_I2S_UnRegisterCallback+0xce>
    {
      case HAL_I2S_MSPINIT_CB_ID :
        hi2s->MspInitCallback = HAL_I2S_MspInit;                      /* Legacy weak MspInit              */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <HAL_I2S_UnRegisterCallback+0x11c>)
 800959a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800959c:	e014      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      case HAL_I2S_MSPDEINIT_CB_ID :
        hi2s->MspDeInitCallback = HAL_I2S_MspDeInit;                  /* Legacy weak MspDeInit            */
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a15      	ldr	r2, [pc, #84]	; (80095f8 <HAL_I2S_UnRegisterCallback+0x120>)
 80095a2:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80095a4:	e010      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>

      default :
        /* Update the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Return error status */
        status =  HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	73fb      	strb	r3, [r7, #15]
        break;
 80095b6:	e007      	b.n	80095c8 <HAL_I2S_UnRegisterCallback+0xf0>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_INVALID_CALLBACK);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Return error status */
    status =  HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	08009a69 	.word	0x08009a69
 80095dc:	08009a91 	.word	0x08009a91
 80095e0:	08009ab9 	.word	0x08009ab9
 80095e4:	08009a55 	.word	0x08009a55
 80095e8:	08009a7d 	.word	0x08009a7d
 80095ec:	08009aa5 	.word	0x08009aa5
 80095f0:	08009acd 	.word	0x08009acd
 80095f4:	0800164d 	.word	0x0800164d
 80095f8:	0800184d 	.word	0x0800184d

080095fc <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	75fb      	strb	r3, [r7, #23]


  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <HAL_I2SEx_TransmitReceive_DMA+0x24>
 800961a:	887b      	ldrh	r3, [r7, #2]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <HAL_I2SEx_TransmitReceive_DMA+0x28>
  {
    return  HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e0c0      	b.n	80097a6 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d001      	beq.n	8009634 <HAL_I2SEx_TransmitReceive_DMA+0x38>
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
 8009632:	e0b8      	b.n	80097a6 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <HAL_I2SEx_TransmitReceive_DMA+0x48>
 8009640:	2302      	movs	r3, #2
 8009642:	e0b0      	b.n	80097a6 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hi2s->pTxBuffPtr = (const uint16_t *)pTxData;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->pRxBuffPtr = pRxData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	635a      	str	r2, [r3, #52]	; 0x34

  hi2s->TxXferSize  = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	887a      	ldrh	r2, [r7, #2]
 800965c:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	887a      	ldrh	r2, [r7, #2]
 8009662:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferSize  = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	887a      	ldrh	r2, [r7, #2]
 8009668:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	887a      	ldrh	r2, [r7, #2]
 800966e:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State       = HAL_I2S_STATE_BUSY_TX_RX;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2205      	movs	r2, #5
 800967a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800968c:	609a      	str	r2, [r3, #8]

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_DMATxRxHalfCplt;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009692:	4a47      	ldr	r2, [pc, #284]	; (80097b0 <HAL_I2SEx_TransmitReceive_DMA+0x1b4>)
 8009694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_DMATxRxCplt;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800969a:	4a46      	ldr	r2, [pc, #280]	; (80097b4 <HAL_I2SEx_TransmitReceive_DMA+0x1b8>)
 800969c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a2:	4a45      	ldr	r2, [pc, #276]	; (80097b8 <HAL_I2SEx_TransmitReceive_DMA+0x1bc>)
 80096a4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	4619      	mov	r1, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3320      	adds	r3, #32
 80096b6:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 80096be:	f7fc fae9 	bl	8005c94 <HAL_DMA_Start_IT>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d011      	beq.n	80096ec <HAL_I2SEx_TransmitReceive_DMA+0xf0>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096cc:	f043 0208 	orr.w	r2, r3, #8
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	e05c      	b.n	80097a6 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d107      	bne.n	800970a <HAL_I2SEx_TransmitReceive_DMA+0x10e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009708:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3330      	adds	r3, #48	; 0x30
 8009714:	4619      	mov	r1, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009720:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8009722:	f7fc fab7 	bl	8005c94 <HAL_DMA_Start_IT>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d011      	beq.n	8009750 <HAL_I2SEx_TransmitReceive_DMA+0x154>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009730:	f043 0208 	orr.w	r2, r3, #8
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    errorcode = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return errorcode;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	e02a      	b.n	80097a6 <HAL_I2SEx_TransmitReceive_DMA+0x1aa>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <HAL_I2SEx_TransmitReceive_DMA+0x172>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800976c:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d107      	bne.n	800978c <HAL_I2SEx_TransmitReceive_DMA+0x190>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800979a:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	08009b3b 	.word	0x08009b3b
 80097b4:	08009ae1 	.word	0x08009ae1
 80097b8:	08009b59 	.word	0x08009b59

080097bc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097d6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097e6:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fc fcb7 	bl	8006168 <HAL_DMA_Abort>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009804:	f043 0208 	orr.w	r2, r3, #8
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00f      	beq.n	8009838 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981c:	4618      	mov	r0, r3
 800981e:	f7fc fca3 	bl	8006168 <HAL_DMA_Abort>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d007      	beq.n	8009838 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982c:	f043 0208 	orr.w	r2, r3, #8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0201 	bic.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	4013      	ands	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b04      	cmp	r3, #4
 8009886:	d130      	bne.n	80098ea <HAL_I2S_IRQHandler+0x8e>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d008      	beq.n	80098a4 <HAL_I2S_IRQHandler+0x48>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d01d      	beq.n	80098ea <HAL_I2S_IRQHandler+0x8e>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6919      	ldr	r1, [r3, #16]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4b64      	ldr	r3, [pc, #400]	; (8009a4c <HAL_I2S_IRQHandler+0x1f0>)
 80098ba:	400b      	ands	r3, r1
 80098bc:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098cc:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098da:	f043 0202 	orr.w	r2, r3, #2
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	4798      	blx	r3
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d130      	bne.n	8009958 <HAL_I2S_IRQHandler+0xfc>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d008      	beq.n	8009912 <HAL_I2S_IRQHandler+0xb6>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <HAL_I2S_IRQHandler+0xb6>
    {
      hi2s->TxISR(hi2s);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01d      	beq.n	8009958 <HAL_I2S_IRQHandler+0xfc>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 72b1 	bic.w	r2, r2, #354	; 0x162
 800992a:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699a      	ldr	r2, [r3, #24]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0220 	orr.w	r2, r2, #32
 800993a:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009948:	f043 0204 	orr.w	r2, r3, #4
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	4798      	blx	r3
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b05      	cmp	r3, #5
 8009962:	d16e      	bne.n	8009a42 <HAL_I2S_IRQHandler+0x1e6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <HAL_I2S_IRQHandler+0x122>
    {
      hi2s->TxISR(hi2s);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d008      	beq.n	800999a <HAL_I2S_IRQHandler+0x13e>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <HAL_I2S_IRQHandler+0x13e>
    {
      hi2s->RxISR(hi2s);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d008      	beq.n	80099b6 <HAL_I2S_IRQHandler+0x15a>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f003 0304 	and.w	r3, r3, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d103      	bne.n	80099b6 <HAL_I2S_IRQHandler+0x15a>
    {
      hi2s->TxISR(hi2s);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01d      	beq.n	80099fc <HAL_I2S_IRQHandler+0x1a0>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6919      	ldr	r1, [r3, #16]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	4b21      	ldr	r3, [pc, #132]	; (8009a50 <HAL_I2S_IRQHandler+0x1f4>)
 80099cc:	400b      	ands	r3, r1
 80099ce:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0220 	orr.w	r2, r2, #32
 80099de:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ec:	f043 0204 	orr.w	r2, r3, #4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	651a      	str	r2, [r3, #80]	; 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01d      	beq.n	8009a42 <HAL_I2S_IRQHandler+0x1e6>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6919      	ldr	r1, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	4b0f      	ldr	r3, [pc, #60]	; (8009a50 <HAL_I2S_IRQHandler+0x1f4>)
 8009a12:	400b      	ands	r3, r1
 8009a14:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699a      	ldr	r2, [r3, #24]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a24:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a32:	f043 0202 	orr.w	r2, r3, #2
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	651a      	str	r2, [r3, #80]	; 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	4798      	blx	r3
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009a42:	bf00      	nop
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	fffffe9e 	.word	0xfffffe9e
 8009a50:	fffffe9c 	.word	0xfffffe9c

08009a54 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_I2SEx_TxRxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <I2SEx_DMATxRxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxCplt(DMA_HandleTypeDef *hdma)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d119      	bne.n	8009b2a <I2SEx_DMATxRxCplt+0x4a>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b04:	609a      	str	r2, [r3, #8]
    hi2s->TxXferCount = (uint16_t) 0UL;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b1a:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	875a      	strh	r2, [r3, #58]	; 0x3a

    /* Updated HAL State */
    hi2s->State = HAL_I2S_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	4798      	blx	r3
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <I2SEx_DMATxRxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_DMATxRxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	4798      	blx	r3
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	689a      	ldr	r2, [r3, #8]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009b74:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	f043 0208 	orr.w	r2, r3, #8
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	4798      	blx	r3
#else
  HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af02      	add	r7, sp, #8
 8009bac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e0fe      	b.n	8009db6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f00b fea7 	bl	8015920 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f008 fbd9 	bl	8012396 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7c1a      	ldrb	r2, [r3, #16]
 8009bec:	f88d 2000 	strb.w	r2, [sp]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bf4:	f008 faaa 	bl	801214c <USB_CoreInit>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2202      	movs	r2, #2
 8009c02:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e0d5      	b.n	8009db6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f008 fbd1 	bl	80123b8 <USB_SetCurrentMode>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e0c6      	b.n	8009db6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
 8009c2c:	e04a      	b.n	8009cc4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009c2e:	7bfa      	ldrb	r2, [r7, #15]
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	4613      	mov	r3, r2
 8009c34:	00db      	lsls	r3, r3, #3
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3315      	adds	r3, #21
 8009c3e:	2201      	movs	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009c42:	7bfa      	ldrb	r2, [r7, #15]
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3314      	adds	r3, #20
 8009c52:	7bfa      	ldrb	r2, [r7, #15]
 8009c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009c56:	7bfa      	ldrb	r2, [r7, #15]
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	b298      	uxth	r0, r3
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	00db      	lsls	r3, r3, #3
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	332e      	adds	r3, #46	; 0x2e
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009c6e:	7bfa      	ldrb	r2, [r7, #15]
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3318      	adds	r3, #24
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009c82:	7bfa      	ldrb	r2, [r7, #15]
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	331c      	adds	r3, #28
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009c96:	7bfa      	ldrb	r2, [r7, #15]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3320      	adds	r3, #32
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009caa:	7bfa      	ldrb	r2, [r7, #15]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3324      	adds	r3, #36	; 0x24
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	73fb      	strb	r3, [r7, #15]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	791b      	ldrb	r3, [r3, #4]
 8009cc8:	7bfa      	ldrb	r2, [r7, #15]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d3af      	bcc.n	8009c2e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
 8009cd2:	e044      	b.n	8009d5e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009cd4:	7bfa      	ldrb	r2, [r7, #15]
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009cea:	7bfa      	ldrb	r2, [r7, #15]
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	00db      	lsls	r3, r3, #3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8009cfc:	7bfa      	ldrb	r2, [r7, #15]
 8009cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009d00:	7bfa      	ldrb	r2, [r7, #15]
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009d16:	7bfa      	ldrb	r2, [r7, #15]
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009d2c:	7bfa      	ldrb	r2, [r7, #15]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009d42:	7bfa      	ldrb	r2, [r7, #15]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	791b      	ldrb	r3, [r3, #4]
 8009d62:	7bfa      	ldrb	r2, [r7, #15]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d3b5      	bcc.n	8009cd4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	7c1a      	ldrb	r2, [r3, #16]
 8009d70:	f88d 2000 	strb.w	r2, [sp]
 8009d74:	3304      	adds	r3, #4
 8009d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d78:	f008 fb6a 	bl	8012450 <USB_DevInit>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2202      	movs	r2, #2
 8009d86:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e013      	b.n	8009db6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7b1b      	ldrb	r3, [r3, #12]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d102      	bne.n	8009daa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f96d 	bl	800b084 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f009 fba9 	bl	8013506 <USB_DevDisconnect>

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_PCD_Start+0x1c>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e022      	b.n	8009e20 <HAL_PCD_Start+0x62>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d105      	bne.n	8009e02 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f008 fab4 	bl	8012374 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f009 fb57 	bl	80134c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b08d      	sub	sp, #52	; 0x34
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f009 fc15 	bl	801366e <USB_GetMode>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f040 84b9 	bne.w	800a7be <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f009 fb79 	bl	8013548 <USB_ReadInterrupts>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 84af 	beq.w	800a7bc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	0a1b      	lsrs	r3, r3, #8
 8009e68:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f009 fb66 	bl	8013548 <USB_ReadInterrupts>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d107      	bne.n	8009e96 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	695a      	ldr	r2, [r3, #20]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f002 0202 	and.w	r2, r2, #2
 8009e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f009 fb54 	bl	8013548 <USB_ReadInterrupts>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b10      	cmp	r3, #16
 8009ea8:	d161      	bne.n	8009f6e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	699a      	ldr	r2, [r3, #24]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0210 	bic.w	r2, r2, #16
 8009eb8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	f003 020f 	and.w	r2, r3, #15
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	0c5b      	lsrs	r3, r3, #17
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d124      	bne.n	8009f30 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009eec:	4013      	ands	r3, r2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d035      	beq.n	8009f5e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	091b      	lsrs	r3, r3, #4
 8009efa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	6a38      	ldr	r0, [r7, #32]
 8009f06:	f009 f98b 	bl	8013220 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	091b      	lsrs	r3, r3, #4
 8009f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f16:	441a      	add	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	695a      	ldr	r2, [r3, #20]
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	091b      	lsrs	r3, r3, #4
 8009f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f28:	441a      	add	r2, r3
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	615a      	str	r2, [r3, #20]
 8009f2e:	e016      	b.n	8009f5e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	0c5b      	lsrs	r3, r3, #17
 8009f34:	f003 030f 	and.w	r3, r3, #15
 8009f38:	2b06      	cmp	r3, #6
 8009f3a:	d110      	bne.n	8009f5e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009f42:	2208      	movs	r2, #8
 8009f44:	4619      	mov	r1, r3
 8009f46:	6a38      	ldr	r0, [r7, #32]
 8009f48:	f009 f96a 	bl	8013220 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	695a      	ldr	r2, [r3, #20]
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	091b      	lsrs	r3, r3, #4
 8009f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f58:	441a      	add	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	699a      	ldr	r2, [r3, #24]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f042 0210 	orr.w	r2, r2, #16
 8009f6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f009 fae8 	bl	8013548 <USB_ReadInterrupts>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f82:	f040 80a7 	bne.w	800a0d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f009 faed 	bl	801356e <USB_ReadDevAllOutEpInterrupt>
 8009f94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009f96:	e099      	b.n	800a0cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 808e 	beq.w	800a0c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f009 fb11 	bl	80135d6 <USB_ReadDevOutEPInterrupt>
 8009fb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00c      	beq.n	8009fda <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fcc:	461a      	mov	r2, r3
 8009fce:	2301      	movs	r3, #1
 8009fd0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fecf 	bl	800ad78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f003 0308 	and.w	r3, r3, #8
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00c      	beq.n	8009ffe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	2308      	movs	r3, #8
 8009ff4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 ffa5 	bl	800af48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f003 0310 	and.w	r3, r3, #16
 800a004:	2b00      	cmp	r3, #0
 800a006:	d008      	beq.n	800a01a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a014:	461a      	mov	r2, r3
 800a016:	2310      	movs	r3, #16
 800a018:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d030      	beq.n	800a086 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02c:	2b80      	cmp	r3, #128	; 0x80
 800a02e:	d109      	bne.n	800a044 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	69fa      	ldr	r2, [r7, #28]
 800a03a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a03e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a042:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a046:	4613      	mov	r3, r2
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	3304      	adds	r3, #4
 800a058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	78db      	ldrb	r3, [r3, #3]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d108      	bne.n	800a074 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2200      	movs	r2, #0
 800a066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f00b fdac 	bl	8015bcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a080:	461a      	mov	r2, r3
 800a082:	2302      	movs	r3, #2
 800a084:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09c:	461a      	mov	r2, r3
 800a09e:	2320      	movs	r3, #32
 800a0a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d009      	beq.n	800a0c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	085b      	lsrs	r3, r3, #1
 800a0ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f47f af62 	bne.w	8009f98 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f009 fa35 	bl	8013548 <USB_ReadInterrupts>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0e8:	f040 80db 	bne.w	800a2a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f009 fa56 	bl	80135a2 <USB_ReadDevAllInEpInterrupt>
 800a0f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a0fc:	e0cd      	b.n	800a29a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80c2 	beq.w	800a28e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f009 fa7c 	bl	8013612 <USB_ReadDevInEPInterrupt>
 800a11a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d057      	beq.n	800a1d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	2201      	movs	r2, #1
 800a12e:	fa02 f303 	lsl.w	r3, r2, r3
 800a132:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	43db      	mvns	r3, r3
 800a140:	69f9      	ldr	r1, [r7, #28]
 800a142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a146:	4013      	ands	r3, r2
 800a148:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	461a      	mov	r2, r3
 800a158:	2301      	movs	r3, #1
 800a15a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	799b      	ldrb	r3, [r3, #6]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d132      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	4613      	mov	r3, r2
 800a16a:	00db      	lsls	r3, r3, #3
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	3320      	adds	r3, #32
 800a174:	6819      	ldr	r1, [r3, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17a:	4613      	mov	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4403      	add	r3, r0
 800a184:	331c      	adds	r3, #28
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4419      	add	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18e:	4613      	mov	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4403      	add	r3, r0
 800a198:	3320      	adds	r3, #32
 800a19a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d113      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x3a2>
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	440b      	add	r3, r1
 800a1b0:	3324      	adds	r3, #36	; 0x24
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d108      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6818      	ldr	r0, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	f009 fa85 	bl	80136d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f00b fc76 	bl	8015ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	2308      	movs	r3, #8
 800a1f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d008      	beq.n	800a20e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a208:	461a      	mov	r2, r3
 800a20a:	2310      	movs	r3, #16
 800a20c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d008      	beq.n	800a22a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a224:	461a      	mov	r2, r3
 800a226:	2340      	movs	r3, #64	; 0x40
 800a228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f003 0302 	and.w	r3, r3, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d023      	beq.n	800a27c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a236:	6a38      	ldr	r0, [r7, #32]
 800a238:	f008 fa68 	bl	801270c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23e:	4613      	mov	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	3310      	adds	r3, #16
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	4413      	add	r3, r2
 800a24c:	3304      	adds	r3, #4
 800a24e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	78db      	ldrb	r3, [r3, #3]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d108      	bne.n	800a26a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2200      	movs	r2, #0
 800a25c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	b2db      	uxtb	r3, r3
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f00b fcc3 	bl	8015bf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a276:	461a      	mov	r2, r3
 800a278:	2302      	movs	r3, #2
 800a27a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fce8 	bl	800ac5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	3301      	adds	r3, #1
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f47f af2e 	bne.w	800a0fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f009 f94e 	bl	8013548 <USB_ReadInterrupts>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2b6:	d122      	bne.n	800a2fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	69fa      	ldr	r2, [r7, #28]
 800a2c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2c6:	f023 0301 	bic.w	r3, r3, #1
 800a2ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d108      	bne.n	800a2e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a2de:	2100      	movs	r1, #0
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fef3 	bl	800b0cc <HAL_PCDEx_LPM_Callback>
 800a2e6:	e002      	b.n	800a2ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f00b fc61 	bl	8015bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	695a      	ldr	r2, [r3, #20]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a2fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f009 f920 	bl	8013548 <USB_ReadInterrupts>
 800a308:	4603      	mov	r3, r0
 800a30a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a30e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a312:	d112      	bne.n	800a33a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b01      	cmp	r3, #1
 800a322:	d102      	bne.n	800a32a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f00b fc1d 	bl	8015b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	695a      	ldr	r2, [r3, #20]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a338:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f009 f902 	bl	8013548 <USB_ReadInterrupts>
 800a344:	4603      	mov	r3, r0
 800a346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a34a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a34e:	d121      	bne.n	800a394 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695a      	ldr	r2, [r3, #20]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a35e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800a366:	2b00      	cmp	r3, #0
 800a368:	d111      	bne.n	800a38e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a378:	089b      	lsrs	r3, r3, #2
 800a37a:	f003 020f 	and.w	r2, r3, #15
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a384:	2101      	movs	r1, #1
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fea0 	bl	800b0cc <HAL_PCDEx_LPM_Callback>
 800a38c:	e002      	b.n	800a394 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f00b fbe8 	bl	8015b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f009 f8d5 	bl	8013548 <USB_ReadInterrupts>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a8:	f040 80b7 	bne.w	800a51a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ba:	f023 0301 	bic.w	r3, r3, #1
 800a3be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2110      	movs	r1, #16
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f008 f9a0 	bl	801270c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3d0:	e046      	b.n	800a460 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a3e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a404:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	461a      	mov	r2, r3
 800a414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a418:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a438:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a454:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a458:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	3301      	adds	r3, #1
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	461a      	mov	r2, r3
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	4293      	cmp	r3, r2
 800a46a:	d3b2      	bcc.n	800a3d2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	69fa      	ldr	r2, [r7, #28]
 800a476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a47a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a47e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	7bdb      	ldrb	r3, [r3, #15]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d016      	beq.n	800a4b6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a498:	f043 030b 	orr.w	r3, r3, #11
 800a49c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4a8:	69fa      	ldr	r2, [r7, #28]
 800a4aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ae:	f043 030b 	orr.w	r3, r3, #11
 800a4b2:	6453      	str	r3, [r2, #68]	; 0x44
 800a4b4:	e015      	b.n	800a4e2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4bc:	695a      	ldr	r2, [r3, #20]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	f242 032b 	movw	r3, #8235	; 0x202b
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4dc:	f043 030b 	orr.w	r3, r3, #11
 800a4e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69fa      	ldr	r2, [r7, #28]
 800a4ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a504:	461a      	mov	r2, r3
 800a506:	f009 f8e5 	bl	80136d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4618      	mov	r0, r3
 800a520:	f009 f812 	bl	8013548 <USB_ReadInterrupts>
 800a524:	4603      	mov	r3, r0
 800a526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a52e:	d123      	bne.n	800a578 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f009 f8a9 	bl	801368c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f008 f95d 	bl	80127fe <USB_GetDevSpeed>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681c      	ldr	r4, [r3, #0]
 800a550:	f001 fdbc 	bl	800c0cc <HAL_RCC_GetHCLKFreq>
 800a554:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a55a:	461a      	mov	r2, r3
 800a55c:	4620      	mov	r0, r4
 800a55e:	f007 fe67 	bl	8012230 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f00b fad5 	bl	8015b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a576:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f008 ffe3 	bl	8013548 <USB_ReadInterrupts>
 800a582:	4603      	mov	r3, r0
 800a584:	f003 0308 	and.w	r3, r3, #8
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d10a      	bne.n	800a5a2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f00b fab2 	bl	8015af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f002 0208 	and.w	r2, r2, #8
 800a5a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f008 ffce 	bl	8013548 <USB_ReadInterrupts>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5b2:	2b80      	cmp	r3, #128	; 0x80
 800a5b4:	d123      	bne.n	800a5fe <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c6:	e014      	b.n	800a5f2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	440b      	add	r3, r1
 800a5d6:	f203 2357 	addw	r3, r3, #599	; 0x257
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d105      	bne.n	800a5ec <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fb08 	bl	800abfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	791b      	ldrb	r3, [r3, #4]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d3e4      	bcc.n	800a5c8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f008 ffa0 	bl	8013548 <USB_ReadInterrupts>
 800a608:	4603      	mov	r3, r0
 800a60a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a60e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a612:	d13c      	bne.n	800a68e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a614:	2301      	movs	r3, #1
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
 800a618:	e02b      	b.n	800a672 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62e:	4613      	mov	r3, r2
 800a630:	00db      	lsls	r3, r3, #3
 800a632:	4413      	add	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	440b      	add	r3, r1
 800a638:	3318      	adds	r3, #24
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d115      	bne.n	800a66c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a640:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a642:	2b00      	cmp	r3, #0
 800a644:	da12      	bge.n	800a66c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a646:	6879      	ldr	r1, [r7, #4]
 800a648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64a:	4613      	mov	r3, r2
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	3317      	adds	r3, #23
 800a656:	2201      	movs	r2, #1
 800a658:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a662:	b2db      	uxtb	r3, r3
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fac8 	bl	800abfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	3301      	adds	r3, #1
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	791b      	ldrb	r3, [r3, #4]
 800a676:	461a      	mov	r2, r3
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d3cd      	bcc.n	800a61a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a68c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4618      	mov	r0, r3
 800a694:	f008 ff58 	bl	8013548 <USB_ReadInterrupts>
 800a698:	4603      	mov	r3, r0
 800a69a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a69e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6a2:	d156      	bne.n	800a752 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a6a8:	e045      	b.n	800a736 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6be:	4613      	mov	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d12e      	bne.n	800a730 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a6d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da2b      	bge.n	800a730 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800a6e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d121      	bne.n	800a730 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a6ec:	6879      	ldr	r1, [r7, #4]
 800a6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	f203 2357 	addw	r3, r3, #599	; 0x257
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a72c:	6053      	str	r3, [r2, #4]
            break;
 800a72e:	e008      	b.n	800a742 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	3301      	adds	r3, #1
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	791b      	ldrb	r3, [r3, #4]
 800a73a:	461a      	mov	r2, r3
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	4293      	cmp	r3, r2
 800a740:	d3b3      	bcc.n	800a6aa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695a      	ldr	r2, [r3, #20]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4618      	mov	r0, r3
 800a758:	f008 fef6 	bl	8013548 <USB_ReadInterrupts>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a766:	d10a      	bne.n	800a77e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f00b fa53 	bl	8015c14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695a      	ldr	r2, [r3, #20]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a77c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f008 fee0 	bl	8013548 <USB_ReadInterrupts>
 800a788:	4603      	mov	r3, r0
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d115      	bne.n	800a7be <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f00b fa43 	bl	8015c30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6859      	ldr	r1, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	e000      	b.n	800a7be <HAL_PCD_IRQHandler+0x996>
      return;
 800a7bc:	bf00      	nop
    }
  }
}
 800a7be:	3734      	adds	r7, #52	; 0x34
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd90      	pop	{r4, r7, pc}

0800a7c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d101      	bne.n	800a7de <HAL_PCD_SetAddress+0x1a>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e012      	b.n	800a804 <HAL_PCD_SetAddress+0x40>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	78fa      	ldrb	r2, [r7, #3]
 800a7ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f008 fe3f 	bl	8013478 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	4608      	mov	r0, r1
 800a816:	4611      	mov	r1, r2
 800a818:	461a      	mov	r2, r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	70fb      	strb	r3, [r7, #3]
 800a81e:	460b      	mov	r3, r1
 800a820:	803b      	strh	r3, [r7, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da0f      	bge.n	800a852 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	f003 020f 	and.w	r2, r3, #15
 800a838:	4613      	mov	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	3310      	adds	r3, #16
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	4413      	add	r3, r2
 800a846:	3304      	adds	r3, #4
 800a848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	705a      	strb	r2, [r3, #1]
 800a850:	e00f      	b.n	800a872 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a852:	78fb      	ldrb	r3, [r7, #3]
 800a854:	f003 020f 	and.w	r2, r3, #15
 800a858:	4613      	mov	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	4413      	add	r3, r2
 800a868:	3304      	adds	r3, #4
 800a86a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	f003 030f 	and.w	r3, r3, #15
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a87e:	883a      	ldrh	r2, [r7, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	78ba      	ldrb	r2, [r7, #2]
 800a888:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	b29a      	uxth	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a89c:	78bb      	ldrb	r3, [r7, #2]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d102      	bne.n	800a8a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_PCD_EP_Open+0xaa>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e00e      	b.n	800a8d4 <HAL_PCD_EP_Open+0xc8>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68f9      	ldr	r1, [r7, #12]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f007 ffbf 	bl	8012848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a8e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	da0f      	bge.n	800a910 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	f003 020f 	and.w	r2, r3, #15
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	3310      	adds	r3, #16
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	4413      	add	r3, r2
 800a904:	3304      	adds	r3, #4
 800a906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2201      	movs	r2, #1
 800a90c:	705a      	strb	r2, [r3, #1]
 800a90e:	e00f      	b.n	800a930 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	f003 020f 	and.w	r2, r3, #15
 800a916:	4613      	mov	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4413      	add	r3, r2
 800a926:	3304      	adds	r3, #4
 800a928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	f003 030f 	and.w	r3, r3, #15
 800a936:	b2da      	uxtb	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a942:	2b01      	cmp	r3, #1
 800a944:	d101      	bne.n	800a94a <HAL_PCD_EP_Close+0x6e>
 800a946:	2302      	movs	r3, #2
 800a948:	e00e      	b.n	800a968 <HAL_PCD_EP_Close+0x8c>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	4618      	mov	r0, r3
 800a95a:	f007 fffd 	bl	8012958 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	607a      	str	r2, [r7, #4]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	460b      	mov	r3, r1
 800a97e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	f003 020f 	and.w	r2, r3, #15
 800a986:	4613      	mov	r3, r2
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	3304      	adds	r3, #4
 800a998:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	f003 030f 	and.w	r3, r3, #15
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	799b      	ldrb	r3, [r3, #6]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d102      	bne.n	800a9cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	799b      	ldrb	r3, [r3, #6]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6979      	ldr	r1, [r7, #20]
 800a9d8:	f008 f89a 	bl	8012b10 <USB_EPStartXfer>

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	f003 020f 	and.w	r2, r3, #15
 800a9f8:	6879      	ldr	r1, [r7, #4]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	440b      	add	r3, r1
 800aa04:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800aa08:	681b      	ldr	r3, [r3, #0]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b086      	sub	sp, #24
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]
 800aa22:	460b      	mov	r3, r1
 800aa24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	3310      	adds	r3, #16
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2201      	movs	r2, #1
 800aa54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	799b      	ldrb	r3, [r3, #6]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d102      	bne.n	800aa70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	799b      	ldrb	r3, [r3, #6]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6979      	ldr	r1, [r7, #20]
 800aa7c:	f008 f848 	bl	8012b10 <USB_EPStartXfer>

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800aa96:	78fb      	ldrb	r3, [r7, #3]
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	7912      	ldrb	r2, [r2, #4]
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e04f      	b.n	800ab48 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800aaa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da0f      	bge.n	800aad0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	f003 020f 	and.w	r2, r3, #15
 800aab6:	4613      	mov	r3, r2
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	3310      	adds	r3, #16
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	4413      	add	r3, r2
 800aac4:	3304      	adds	r3, #4
 800aac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	705a      	strb	r2, [r3, #1]
 800aace:	e00d      	b.n	800aaec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	4613      	mov	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	3304      	adds	r3, #4
 800aae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	f003 030f 	and.w	r3, r3, #15
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_PCD_EP_SetStall+0x82>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e01d      	b.n	800ab48 <HAL_PCD_EP_SetStall+0xbe>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f008 fbd8 	bl	80132d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	f003 030f 	and.w	r3, r3, #15
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d109      	bne.n	800ab3e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7999      	ldrb	r1, [r3, #6]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f008 fdcb 	bl	80136d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	7912      	ldrb	r2, [r2, #4]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d901      	bls.n	800ab6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e042      	b.n	800abf4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	da0f      	bge.n	800ab96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	f003 020f 	and.w	r2, r3, #15
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	3310      	adds	r3, #16
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2201      	movs	r2, #1
 800ab92:	705a      	strb	r2, [r3, #1]
 800ab94:	e00f      	b.n	800abb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	f003 020f 	and.w	r2, r3, #15
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	4413      	add	r3, r2
 800abac:	3304      	adds	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	f003 030f 	and.w	r3, r3, #15
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_PCD_EP_ClrStall+0x86>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e00e      	b.n	800abf4 <HAL_PCD_EP_ClrStall+0xa4>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f008 fbe1 	bl	80133ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ac08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	da0c      	bge.n	800ac2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	f003 020f 	and.w	r2, r3, #15
 800ac16:	4613      	mov	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	4413      	add	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	3310      	adds	r3, #16
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	3304      	adds	r3, #4
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	e00c      	b.n	800ac44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	f003 020f 	and.w	r2, r3, #15
 800ac30:	4613      	mov	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	4413      	add	r3, r2
 800ac40:	3304      	adds	r3, #4
 800ac42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68f9      	ldr	r1, [r7, #12]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f008 fa00 	bl	8013050 <USB_EPStopXfer>
 800ac50:	4603      	mov	r3, r0
 800ac52:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ac54:	7afb      	ldrb	r3, [r7, #11]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b08a      	sub	sp, #40	; 0x28
 800ac62:	af02      	add	r7, sp, #8
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	4613      	mov	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	3310      	adds	r3, #16
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4413      	add	r3, r2
 800ac82:	3304      	adds	r3, #4
 800ac84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	695a      	ldr	r2, [r3, #20]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d901      	bls.n	800ac96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e06b      	b.n	800ad6e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	691a      	ldr	r2, [r3, #16]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d902      	bls.n	800acb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	3303      	adds	r3, #3
 800acb6:	089b      	lsrs	r3, r3, #2
 800acb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800acba:	e02a      	b.n	800ad12 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d902      	bls.n	800acd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	3303      	adds	r3, #3
 800acdc:	089b      	lsrs	r3, r3, #2
 800acde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68d9      	ldr	r1, [r3, #12]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	4603      	mov	r3, r0
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f008 fa55 	bl	80131a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	441a      	add	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	695a      	ldr	r2, [r3, #20]
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	441a      	add	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d809      	bhi.n	800ad3c <PCD_WriteEmptyTxFifo+0xde>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	695a      	ldr	r2, [r3, #20]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d203      	bcs.n	800ad3c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1bf      	bne.n	800acbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	691a      	ldr	r2, [r3, #16]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d811      	bhi.n	800ad6c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	2201      	movs	r2, #1
 800ad50:	fa02 f303 	lsl.w	r3, r2, r3
 800ad54:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	43db      	mvns	r3, r3
 800ad62:	6939      	ldr	r1, [r7, #16]
 800ad64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad68:	4013      	ands	r3, r2
 800ad6a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3720      	adds	r7, #32
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	333c      	adds	r3, #60	; 0x3c
 800ad90:	3304      	adds	r3, #4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	799b      	ldrb	r3, [r3, #6]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d17b      	bne.n	800aea6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d015      	beq.n	800ade4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	4a61      	ldr	r2, [pc, #388]	; (800af40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	f240 80b9 	bls.w	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 80b3 	beq.w	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adda:	461a      	mov	r2, r3
 800addc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ade0:	6093      	str	r3, [r2, #8]
 800ade2:	e0a7      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	d009      	beq.n	800ae02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfa:	461a      	mov	r2, r3
 800adfc:	2320      	movs	r3, #32
 800adfe:	6093      	str	r3, [r2, #8]
 800ae00:	e098      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f040 8093 	bne.w	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	4a4b      	ldr	r2, [pc, #300]	; (800af40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d90f      	bls.n	800ae36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00a      	beq.n	800ae36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae32:	6093      	str	r3, [r2, #8]
 800ae34:	e07e      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	4413      	add	r3, r2
 800ae48:	3304      	adds	r3, #4
 800ae4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a1a      	ldr	r2, [r3, #32]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	0159      	lsls	r1, r3, #5
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	440b      	add	r3, r1
 800ae58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae62:	1ad2      	subs	r2, r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d114      	bne.n	800ae98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d109      	bne.n	800ae8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ae80:	461a      	mov	r2, r3
 800ae82:	2101      	movs	r1, #1
 800ae84:	f008 fc26 	bl	80136d4 <USB_EP0_OutStart>
 800ae88:	e006      	b.n	800ae98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	441a      	add	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f00a fdf4 	bl	8015a8c <HAL_PCD_DataOutStageCallback>
 800aea4:	e046      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4a26      	ldr	r2, [pc, #152]	; (800af44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d124      	bne.n	800aef8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00a      	beq.n	800aece <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec4:	461a      	mov	r2, r3
 800aec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aeca:	6093      	str	r3, [r2, #8]
 800aecc:	e032      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d008      	beq.n	800aeea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee4:	461a      	mov	r2, r3
 800aee6:	2320      	movs	r3, #32
 800aee8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f00a fdcb 	bl	8015a8c <HAL_PCD_DataOutStageCallback>
 800aef6:	e01d      	b.n	800af34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d114      	bne.n	800af28 <PCD_EP_OutXfrComplete_int+0x1b0>
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	4613      	mov	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	440b      	add	r3, r1
 800af0c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d108      	bne.n	800af28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6818      	ldr	r0, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800af20:	461a      	mov	r2, r3
 800af22:	2100      	movs	r1, #0
 800af24:	f008 fbd6 	bl	80136d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f00a fdac 	bl	8015a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3720      	adds	r7, #32
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	4f54300a 	.word	0x4f54300a
 800af44:	4f54310a 	.word	0x4f54310a

0800af48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	333c      	adds	r3, #60	; 0x3c
 800af60:	3304      	adds	r3, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4a15      	ldr	r2, [pc, #84]	; (800afd0 <PCD_EP_OutSetupPacket_int+0x88>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d90e      	bls.n	800af9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800af84:	2b00      	cmp	r3, #0
 800af86:	d009      	beq.n	800af9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af94:	461a      	mov	r2, r3
 800af96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f00a fd63 	bl	8015a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <PCD_EP_OutSetupPacket_int+0x88>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d90c      	bls.n	800afc4 <PCD_EP_OutSetupPacket_int+0x7c>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	799b      	ldrb	r3, [r3, #6]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d108      	bne.n	800afc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800afbc:	461a      	mov	r2, r3
 800afbe:	2101      	movs	r1, #1
 800afc0:	f008 fb88 	bl	80136d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	4f54300a 	.word	0x4f54300a

0800afd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
 800afe0:	4613      	mov	r3, r2
 800afe2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d107      	bne.n	800b002 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aff2:	883b      	ldrh	r3, [r7, #0]
 800aff4:	0419      	lsls	r1, r3, #16
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	430a      	orrs	r2, r1
 800affe:	629a      	str	r2, [r3, #40]	; 0x28
 800b000:	e028      	b.n	800b054 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b008:	0c1b      	lsrs	r3, r3, #16
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	4413      	add	r3, r2
 800b00e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
 800b014:	e00d      	b.n	800b032 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	3340      	adds	r3, #64	; 0x40
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	0c1b      	lsrs	r3, r3, #16
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	4413      	add	r3, r2
 800b02a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	3301      	adds	r3, #1
 800b030:	73fb      	strb	r3, [r7, #15]
 800b032:	7bfa      	ldrb	r2, [r7, #15]
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	3b01      	subs	r3, #1
 800b038:	429a      	cmp	r2, r3
 800b03a:	d3ec      	bcc.n	800b016 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b03c:	883b      	ldrh	r3, [r7, #0]
 800b03e:	0418      	lsls	r0, r3, #16
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6819      	ldr	r1, [r3, #0]
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	3b01      	subs	r3, #1
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	4302      	orrs	r2, r0
 800b04c:	3340      	adds	r3, #64	; 0x40
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	460b      	mov	r3, r1
 800b06c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	887a      	ldrh	r2, [r7, #2]
 800b074:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <HAL_PCDEx_ActivateLPM+0x44>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	10000003 	.word	0x10000003

0800b0cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b0ec:	4b29      	ldr	r3, [pc, #164]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f003 0307 	and.w	r3, r3, #7
 800b0f4:	2b06      	cmp	r3, #6
 800b0f6:	d00a      	beq.n	800b10e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b0f8:	4b26      	ldr	r3, [pc, #152]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d001      	beq.n	800b10a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e040      	b.n	800b18c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	e03e      	b.n	800b18c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b10e:	4b21      	ldr	r3, [pc, #132]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b116:	491f      	ldr	r1, [pc, #124]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b11e:	f7f9 fad7 	bl	80046d0 <HAL_GetTick>
 800b122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b124:	e009      	b.n	800b13a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b126:	f7f9 fad3 	bl	80046d0 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b134:	d901      	bls.n	800b13a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e028      	b.n	800b18c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b13a:	4b16      	ldr	r3, [pc, #88]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b146:	d1ee      	bne.n	800b126 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b1e      	cmp	r3, #30
 800b14c:	d008      	beq.n	800b160 <HAL_PWREx_ConfigSupply+0x7c>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b2e      	cmp	r3, #46	; 0x2e
 800b152:	d005      	beq.n	800b160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b1d      	cmp	r3, #29
 800b158:	d002      	beq.n	800b160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b2d      	cmp	r3, #45	; 0x2d
 800b15e:	d114      	bne.n	800b18a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b160:	f7f9 fab6 	bl	80046d0 <HAL_GetTick>
 800b164:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b166:	e009      	b.n	800b17c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b168:	f7f9 fab2 	bl	80046d0 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b176:	d901      	bls.n	800b17c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e007      	b.n	800b18c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b17c:	4b05      	ldr	r3, [pc, #20]	; (800b194 <HAL_PWREx_ConfigSupply+0xb0>)
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b188:	d1ee      	bne.n	800b168 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	58024800 	.word	0x58024800

0800b198 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b19c:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	4a04      	ldr	r2, [pc, #16]	; (800b1b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b1a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a6:	60d3      	str	r3, [r2, #12]
}
 800b1a8:	bf00      	nop
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	58024800 	.word	0x58024800

0800b1b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08c      	sub	sp, #48	; 0x30
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f000 bc48 	b.w	800ba5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8088 	beq.w	800b2ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1da:	4b99      	ldr	r3, [pc, #612]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b1e4:	4b96      	ldr	r3, [pc, #600]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	2b10      	cmp	r3, #16
 800b1ee:	d007      	beq.n	800b200 <HAL_RCC_OscConfig+0x48>
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f2:	2b18      	cmp	r3, #24
 800b1f4:	d111      	bne.n	800b21a <HAL_RCC_OscConfig+0x62>
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	f003 0303 	and.w	r3, r3, #3
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d10c      	bne.n	800b21a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b200:	4b8f      	ldr	r3, [pc, #572]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d06d      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x130>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d169      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f000 bc21 	b.w	800ba5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b222:	d106      	bne.n	800b232 <HAL_RCC_OscConfig+0x7a>
 800b224:	4b86      	ldr	r3, [pc, #536]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a85      	ldr	r2, [pc, #532]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b22a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	e02e      	b.n	800b290 <HAL_RCC_OscConfig+0xd8>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10c      	bne.n	800b254 <HAL_RCC_OscConfig+0x9c>
 800b23a:	4b81      	ldr	r3, [pc, #516]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a80      	ldr	r2, [pc, #512]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	4b7e      	ldr	r3, [pc, #504]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a7d      	ldr	r2, [pc, #500]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b24c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e01d      	b.n	800b290 <HAL_RCC_OscConfig+0xd8>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b25c:	d10c      	bne.n	800b278 <HAL_RCC_OscConfig+0xc0>
 800b25e:	4b78      	ldr	r3, [pc, #480]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a77      	ldr	r2, [pc, #476]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b268:	6013      	str	r3, [r2, #0]
 800b26a:	4b75      	ldr	r3, [pc, #468]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a74      	ldr	r2, [pc, #464]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e00b      	b.n	800b290 <HAL_RCC_OscConfig+0xd8>
 800b278:	4b71      	ldr	r3, [pc, #452]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a70      	ldr	r2, [pc, #448]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	4b6e      	ldr	r3, [pc, #440]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a6d      	ldr	r2, [pc, #436]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b28a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b28e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d013      	beq.n	800b2c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b298:	f7f9 fa1a 	bl	80046d0 <HAL_GetTick>
 800b29c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b29e:	e008      	b.n	800b2b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2a0:	f7f9 fa16 	bl	80046d0 <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b64      	cmp	r3, #100	; 0x64
 800b2ac:	d901      	bls.n	800b2b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e3d4      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2b2:	4b63      	ldr	r3, [pc, #396]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d0f0      	beq.n	800b2a0 <HAL_RCC_OscConfig+0xe8>
 800b2be:	e014      	b.n	800b2ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c0:	f7f9 fa06 	bl	80046d0 <HAL_GetTick>
 800b2c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b2c6:	e008      	b.n	800b2da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2c8:	f7f9 fa02 	bl	80046d0 <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	2b64      	cmp	r3, #100	; 0x64
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e3c0      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b2da:	4b59      	ldr	r3, [pc, #356]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1f0      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x110>
 800b2e6:	e000      	b.n	800b2ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80ca 	beq.w	800b48c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2f8:	4b51      	ldr	r3, [pc, #324]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b302:	4b4f      	ldr	r3, [pc, #316]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <HAL_RCC_OscConfig+0x166>
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	2b18      	cmp	r3, #24
 800b312:	d156      	bne.n	800b3c2 <HAL_RCC_OscConfig+0x20a>
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d151      	bne.n	800b3c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b31e:	4b48      	ldr	r3, [pc, #288]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0304 	and.w	r3, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <HAL_RCC_OscConfig+0x17e>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e392      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b336:	4b42      	ldr	r3, [pc, #264]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f023 0219 	bic.w	r2, r3, #25
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	493f      	ldr	r1, [pc, #252]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b344:	4313      	orrs	r3, r2
 800b346:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b348:	f7f9 f9c2 	bl	80046d0 <HAL_GetTick>
 800b34c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b34e:	e008      	b.n	800b362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b350:	f7f9 f9be 	bl	80046d0 <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d901      	bls.n	800b362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e37c      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b362:	4b37      	ldr	r3, [pc, #220]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0304 	and.w	r3, r3, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0f0      	beq.n	800b350 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b36e:	f7f9 f9df 	bl	8004730 <HAL_GetREVID>
 800b372:	4603      	mov	r3, r0
 800b374:	f241 0203 	movw	r2, #4099	; 0x1003
 800b378:	4293      	cmp	r3, r2
 800b37a:	d817      	bhi.n	800b3ac <HAL_RCC_OscConfig+0x1f4>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	2b40      	cmp	r3, #64	; 0x40
 800b382:	d108      	bne.n	800b396 <HAL_RCC_OscConfig+0x1de>
 800b384:	4b2e      	ldr	r3, [pc, #184]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b38c:	4a2c      	ldr	r2, [pc, #176]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b38e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b392:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b394:	e07a      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b396:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	031b      	lsls	r3, r3, #12
 800b3a4:	4926      	ldr	r1, [pc, #152]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3aa:	e06f      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3ac:	4b24      	ldr	r3, [pc, #144]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	061b      	lsls	r3, r3, #24
 800b3ba:	4921      	ldr	r1, [pc, #132]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3c0:	e064      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d047      	beq.n	800b45a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b3ca:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f023 0219 	bic.w	r2, r3, #25
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	491a      	ldr	r1, [pc, #104]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3dc:	f7f9 f978 	bl	80046d0 <HAL_GetTick>
 800b3e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3e2:	e008      	b.n	800b3f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3e4:	f7f9 f974 	bl	80046d0 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d901      	bls.n	800b3f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e332      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3f6:	4b12      	ldr	r3, [pc, #72]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0304 	and.w	r3, r3, #4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0f0      	beq.n	800b3e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b402:	f7f9 f995 	bl	8004730 <HAL_GetREVID>
 800b406:	4603      	mov	r3, r0
 800b408:	f241 0203 	movw	r2, #4099	; 0x1003
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d819      	bhi.n	800b444 <HAL_RCC_OscConfig+0x28c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b40      	cmp	r3, #64	; 0x40
 800b416:	d108      	bne.n	800b42a <HAL_RCC_OscConfig+0x272>
 800b418:	4b09      	ldr	r3, [pc, #36]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b420:	4a07      	ldr	r2, [pc, #28]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b426:	6053      	str	r3, [r2, #4]
 800b428:	e030      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
 800b42a:	4b05      	ldr	r3, [pc, #20]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	031b      	lsls	r3, r3, #12
 800b438:	4901      	ldr	r1, [pc, #4]	; (800b440 <HAL_RCC_OscConfig+0x288>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	604b      	str	r3, [r1, #4]
 800b43e:	e025      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
 800b440:	58024400 	.word	0x58024400
 800b444:	4b9a      	ldr	r3, [pc, #616]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	061b      	lsls	r3, r3, #24
 800b452:	4997      	ldr	r1, [pc, #604]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b454:	4313      	orrs	r3, r2
 800b456:	604b      	str	r3, [r1, #4]
 800b458:	e018      	b.n	800b48c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b45a:	4b95      	ldr	r3, [pc, #596]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a94      	ldr	r2, [pc, #592]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b460:	f023 0301 	bic.w	r3, r3, #1
 800b464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b466:	f7f9 f933 	bl	80046d0 <HAL_GetTick>
 800b46a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b46c:	e008      	b.n	800b480 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b46e:	f7f9 f92f 	bl	80046d0 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e2ed      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b480:	4b8b      	ldr	r3, [pc, #556]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f0      	bne.n	800b46e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0310 	and.w	r3, r3, #16
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80a9 	beq.w	800b5ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b49a:	4b85      	ldr	r3, [pc, #532]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4a4:	4b82      	ldr	r3, [pc, #520]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b08      	cmp	r3, #8
 800b4ae:	d007      	beq.n	800b4c0 <HAL_RCC_OscConfig+0x308>
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	2b18      	cmp	r3, #24
 800b4b4:	d13a      	bne.n	800b52c <HAL_RCC_OscConfig+0x374>
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d135      	bne.n	800b52c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b4c0:	4b7b      	ldr	r3, [pc, #492]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x320>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	2b80      	cmp	r3, #128	; 0x80
 800b4d2:	d001      	beq.n	800b4d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e2c1      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b4d8:	f7f9 f92a 	bl	8004730 <HAL_GetREVID>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f241 0203 	movw	r2, #4099	; 0x1003
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d817      	bhi.n	800b516 <HAL_RCC_OscConfig+0x35e>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	d108      	bne.n	800b500 <HAL_RCC_OscConfig+0x348>
 800b4ee:	4b70      	ldr	r3, [pc, #448]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b4f6:	4a6e      	ldr	r2, [pc, #440]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b4f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b4fe:	e075      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b500:	4b6b      	ldr	r3, [pc, #428]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	069b      	lsls	r3, r3, #26
 800b50e:	4968      	ldr	r1, [pc, #416]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b510:	4313      	orrs	r3, r2
 800b512:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b514:	e06a      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b516:	4b66      	ldr	r3, [pc, #408]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a1b      	ldr	r3, [r3, #32]
 800b522:	061b      	lsls	r3, r3, #24
 800b524:	4962      	ldr	r1, [pc, #392]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b526:	4313      	orrs	r3, r2
 800b528:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b52a:	e05f      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d042      	beq.n	800b5ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b534:	4b5e      	ldr	r3, [pc, #376]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a5d      	ldr	r2, [pc, #372]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b540:	f7f9 f8c6 	bl	80046d0 <HAL_GetTick>
 800b544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b546:	e008      	b.n	800b55a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b548:	f7f9 f8c2 	bl	80046d0 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d901      	bls.n	800b55a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e280      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b55a:	4b55      	ldr	r3, [pc, #340]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0f0      	beq.n	800b548 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b566:	f7f9 f8e3 	bl	8004730 <HAL_GetREVID>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b570:	4293      	cmp	r3, r2
 800b572:	d817      	bhi.n	800b5a4 <HAL_RCC_OscConfig+0x3ec>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	2b20      	cmp	r3, #32
 800b57a:	d108      	bne.n	800b58e <HAL_RCC_OscConfig+0x3d6>
 800b57c:	4b4c      	ldr	r3, [pc, #304]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b584:	4a4a      	ldr	r2, [pc, #296]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b58a:	6053      	str	r3, [r2, #4]
 800b58c:	e02e      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
 800b58e:	4b48      	ldr	r3, [pc, #288]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	069b      	lsls	r3, r3, #26
 800b59c:	4944      	ldr	r1, [pc, #272]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	604b      	str	r3, [r1, #4]
 800b5a2:	e023      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
 800b5a4:	4b42      	ldr	r3, [pc, #264]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	061b      	lsls	r3, r3, #24
 800b5b2:	493f      	ldr	r1, [pc, #252]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	60cb      	str	r3, [r1, #12]
 800b5b8:	e018      	b.n	800b5ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b5ba:	4b3d      	ldr	r3, [pc, #244]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a3c      	ldr	r2, [pc, #240]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c6:	f7f9 f883 	bl	80046d0 <HAL_GetTick>
 800b5ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b5cc:	e008      	b.n	800b5e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b5ce:	f7f9 f87f 	bl	80046d0 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d901      	bls.n	800b5e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e23d      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b5e0:	4b33      	ldr	r3, [pc, #204]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1f0      	bne.n	800b5ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0308 	and.w	r3, r3, #8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d036      	beq.n	800b666 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d019      	beq.n	800b634 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b600:	4b2b      	ldr	r3, [pc, #172]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b604:	4a2a      	ldr	r2, [pc, #168]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b60c:	f7f9 f860 	bl	80046d0 <HAL_GetTick>
 800b610:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b612:	e008      	b.n	800b626 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b614:	f7f9 f85c 	bl	80046d0 <HAL_GetTick>
 800b618:	4602      	mov	r2, r0
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d901      	bls.n	800b626 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e21a      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b626:	4b22      	ldr	r3, [pc, #136]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b62a:	f003 0302 	and.w	r3, r3, #2
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0f0      	beq.n	800b614 <HAL_RCC_OscConfig+0x45c>
 800b632:	e018      	b.n	800b666 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b634:	4b1e      	ldr	r3, [pc, #120]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b638:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b640:	f7f9 f846 	bl	80046d0 <HAL_GetTick>
 800b644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b646:	e008      	b.n	800b65a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b648:	f7f9 f842 	bl	80046d0 <HAL_GetTick>
 800b64c:	4602      	mov	r2, r0
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	2b02      	cmp	r3, #2
 800b654:	d901      	bls.n	800b65a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b656:	2303      	movs	r3, #3
 800b658:	e200      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b65a:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f0      	bne.n	800b648 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d039      	beq.n	800b6e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01c      	beq.n	800b6b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b67a:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a0c      	ldr	r2, [pc, #48]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b684:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b686:	f7f9 f823 	bl	80046d0 <HAL_GetTick>
 800b68a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b68c:	e008      	b.n	800b6a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b68e:	f7f9 f81f 	bl	80046d0 <HAL_GetTick>
 800b692:	4602      	mov	r2, r0
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d901      	bls.n	800b6a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b69c:	2303      	movs	r3, #3
 800b69e:	e1dd      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b6a0:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <HAL_RCC_OscConfig+0x4f8>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0f0      	beq.n	800b68e <HAL_RCC_OscConfig+0x4d6>
 800b6ac:	e01b      	b.n	800b6e6 <HAL_RCC_OscConfig+0x52e>
 800b6ae:	bf00      	nop
 800b6b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b6b4:	4b9b      	ldr	r3, [pc, #620]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a9a      	ldr	r2, [pc, #616]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b6ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b6c0:	f7f9 f806 	bl	80046d0 <HAL_GetTick>
 800b6c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b6c6:	e008      	b.n	800b6da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b6c8:	f7f9 f802 	bl	80046d0 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d901      	bls.n	800b6da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e1c0      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b6da:	4b92      	ldr	r3, [pc, #584]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f0      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 0304 	and.w	r3, r3, #4
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 8081 	beq.w	800b7f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6f4:	4b8c      	ldr	r3, [pc, #560]	; (800b928 <HAL_RCC_OscConfig+0x770>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a8b      	ldr	r2, [pc, #556]	; (800b928 <HAL_RCC_OscConfig+0x770>)
 800b6fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b700:	f7f8 ffe6 	bl	80046d0 <HAL_GetTick>
 800b704:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b706:	e008      	b.n	800b71a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b708:	f7f8 ffe2 	bl	80046d0 <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	2b64      	cmp	r3, #100	; 0x64
 800b714:	d901      	bls.n	800b71a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e1a0      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b71a:	4b83      	ldr	r3, [pc, #524]	; (800b928 <HAL_RCC_OscConfig+0x770>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0f0      	beq.n	800b708 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d106      	bne.n	800b73c <HAL_RCC_OscConfig+0x584>
 800b72e:	4b7d      	ldr	r3, [pc, #500]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b732:	4a7c      	ldr	r2, [pc, #496]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b734:	f043 0301 	orr.w	r3, r3, #1
 800b738:	6713      	str	r3, [r2, #112]	; 0x70
 800b73a:	e02d      	b.n	800b798 <HAL_RCC_OscConfig+0x5e0>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10c      	bne.n	800b75e <HAL_RCC_OscConfig+0x5a6>
 800b744:	4b77      	ldr	r3, [pc, #476]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b748:	4a76      	ldr	r2, [pc, #472]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b74a:	f023 0301 	bic.w	r3, r3, #1
 800b74e:	6713      	str	r3, [r2, #112]	; 0x70
 800b750:	4b74      	ldr	r3, [pc, #464]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b754:	4a73      	ldr	r2, [pc, #460]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b756:	f023 0304 	bic.w	r3, r3, #4
 800b75a:	6713      	str	r3, [r2, #112]	; 0x70
 800b75c:	e01c      	b.n	800b798 <HAL_RCC_OscConfig+0x5e0>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	2b05      	cmp	r3, #5
 800b764:	d10c      	bne.n	800b780 <HAL_RCC_OscConfig+0x5c8>
 800b766:	4b6f      	ldr	r3, [pc, #444]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	4a6e      	ldr	r2, [pc, #440]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b76c:	f043 0304 	orr.w	r3, r3, #4
 800b770:	6713      	str	r3, [r2, #112]	; 0x70
 800b772:	4b6c      	ldr	r3, [pc, #432]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b776:	4a6b      	ldr	r2, [pc, #428]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b778:	f043 0301 	orr.w	r3, r3, #1
 800b77c:	6713      	str	r3, [r2, #112]	; 0x70
 800b77e:	e00b      	b.n	800b798 <HAL_RCC_OscConfig+0x5e0>
 800b780:	4b68      	ldr	r3, [pc, #416]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b784:	4a67      	ldr	r2, [pc, #412]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b786:	f023 0301 	bic.w	r3, r3, #1
 800b78a:	6713      	str	r3, [r2, #112]	; 0x70
 800b78c:	4b65      	ldr	r3, [pc, #404]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b790:	4a64      	ldr	r2, [pc, #400]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b792:	f023 0304 	bic.w	r3, r3, #4
 800b796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d015      	beq.n	800b7cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7a0:	f7f8 ff96 	bl	80046d0 <HAL_GetTick>
 800b7a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7a6:	e00a      	b.n	800b7be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7a8:	f7f8 ff92 	bl	80046d0 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d901      	bls.n	800b7be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e14e      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7be:	4b59      	ldr	r3, [pc, #356]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c2:	f003 0302 	and.w	r3, r3, #2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0ee      	beq.n	800b7a8 <HAL_RCC_OscConfig+0x5f0>
 800b7ca:	e014      	b.n	800b7f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7cc:	f7f8 ff80 	bl	80046d0 <HAL_GetTick>
 800b7d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b7d2:	e00a      	b.n	800b7ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7d4:	f7f8 ff7c 	bl	80046d0 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e138      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b7ea:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	f003 0302 	and.w	r3, r3, #2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1ee      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 812d 	beq.w	800ba5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b800:	4b48      	ldr	r3, [pc, #288]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b808:	2b18      	cmp	r3, #24
 800b80a:	f000 80bd 	beq.w	800b988 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b02      	cmp	r3, #2
 800b814:	f040 809e 	bne.w	800b954 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b818:	4b42      	ldr	r3, [pc, #264]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a41      	ldr	r2, [pc, #260]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b81e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b824:	f7f8 ff54 	bl	80046d0 <HAL_GetTick>
 800b828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b82a:	e008      	b.n	800b83e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b82c:	f7f8 ff50 	bl	80046d0 <HAL_GetTick>
 800b830:	4602      	mov	r2, r0
 800b832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	2b02      	cmp	r3, #2
 800b838:	d901      	bls.n	800b83e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e10e      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b83e:	4b39      	ldr	r3, [pc, #228]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1f0      	bne.n	800b82c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b84a:	4b36      	ldr	r3, [pc, #216]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b84c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b84e:	4b37      	ldr	r3, [pc, #220]	; (800b92c <HAL_RCC_OscConfig+0x774>)
 800b850:	4013      	ands	r3, r2
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b85a:	0112      	lsls	r2, r2, #4
 800b85c:	430a      	orrs	r2, r1
 800b85e:	4931      	ldr	r1, [pc, #196]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b860:	4313      	orrs	r3, r2
 800b862:	628b      	str	r3, [r1, #40]	; 0x28
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b868:	3b01      	subs	r3, #1
 800b86a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	3b01      	subs	r3, #1
 800b874:	025b      	lsls	r3, r3, #9
 800b876:	b29b      	uxth	r3, r3
 800b878:	431a      	orrs	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87e:	3b01      	subs	r3, #1
 800b880:	041b      	lsls	r3, r3, #16
 800b882:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b886:	431a      	orrs	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88c:	3b01      	subs	r3, #1
 800b88e:	061b      	lsls	r3, r3, #24
 800b890:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b894:	4923      	ldr	r1, [pc, #140]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b896:	4313      	orrs	r3, r2
 800b898:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b89a:	4b22      	ldr	r3, [pc, #136]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89e:	4a21      	ldr	r2, [pc, #132]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8a0:	f023 0301 	bic.w	r3, r3, #1
 800b8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b8a6:	4b1f      	ldr	r3, [pc, #124]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8aa:	4b21      	ldr	r3, [pc, #132]	; (800b930 <HAL_RCC_OscConfig+0x778>)
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b8b2:	00d2      	lsls	r2, r2, #3
 800b8b4:	491b      	ldr	r1, [pc, #108]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b8ba:	4b1a      	ldr	r3, [pc, #104]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	f023 020c 	bic.w	r2, r3, #12
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c6:	4917      	ldr	r1, [pc, #92]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b8cc:	4b15      	ldr	r3, [pc, #84]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	f023 0202 	bic.w	r2, r3, #2
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d8:	4912      	ldr	r1, [pc, #72]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	4a10      	ldr	r2, [pc, #64]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ee:	4a0d      	ldr	r2, [pc, #52]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fa:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b8fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b906:	4a07      	ldr	r2, [pc, #28]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b908:	f043 0301 	orr.w	r3, r3, #1
 800b90c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b90e:	4b05      	ldr	r3, [pc, #20]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a04      	ldr	r2, [pc, #16]	; (800b924 <HAL_RCC_OscConfig+0x76c>)
 800b914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91a:	f7f8 fed9 	bl	80046d0 <HAL_GetTick>
 800b91e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b920:	e011      	b.n	800b946 <HAL_RCC_OscConfig+0x78e>
 800b922:	bf00      	nop
 800b924:	58024400 	.word	0x58024400
 800b928:	58024800 	.word	0x58024800
 800b92c:	fffffc0c 	.word	0xfffffc0c
 800b930:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b934:	f7f8 fecc 	bl	80046d0 <HAL_GetTick>
 800b938:	4602      	mov	r2, r0
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d901      	bls.n	800b946 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e08a      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b946:	4b47      	ldr	r3, [pc, #284]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f0      	beq.n	800b934 <HAL_RCC_OscConfig+0x77c>
 800b952:	e082      	b.n	800ba5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b954:	4b43      	ldr	r3, [pc, #268]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a42      	ldr	r2, [pc, #264]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b95a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b95e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b960:	f7f8 feb6 	bl	80046d0 <HAL_GetTick>
 800b964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b966:	e008      	b.n	800b97a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b968:	f7f8 feb2 	bl	80046d0 <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b02      	cmp	r3, #2
 800b974:	d901      	bls.n	800b97a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b976:	2303      	movs	r3, #3
 800b978:	e070      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b97a:	4b3a      	ldr	r3, [pc, #232]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1f0      	bne.n	800b968 <HAL_RCC_OscConfig+0x7b0>
 800b986:	e068      	b.n	800ba5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b988:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b98e:	4b35      	ldr	r3, [pc, #212]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800b990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b992:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d031      	beq.n	800ba00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f003 0203 	and.w	r2, r3, #3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d12a      	bne.n	800ba00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	091b      	lsrs	r3, r3, #4
 800b9ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d122      	bne.n	800ba00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d11a      	bne.n	800ba00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	0a5b      	lsrs	r3, r3, #9
 800b9ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d111      	bne.n	800ba00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	0c1b      	lsrs	r3, r3, #16
 800b9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d108      	bne.n	800ba00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	0e1b      	lsrs	r3, r3, #24
 800b9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e02b      	b.n	800ba5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ba04:	4b17      	ldr	r3, [pc, #92]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba08:	08db      	lsrs	r3, r3, #3
 800ba0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d01f      	beq.n	800ba5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1e:	4a11      	ldr	r2, [pc, #68]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba20:	f023 0301 	bic.w	r3, r3, #1
 800ba24:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ba26:	f7f8 fe53 	bl	80046d0 <HAL_GetTick>
 800ba2a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ba2c:	bf00      	nop
 800ba2e:	f7f8 fe4f 	bl	80046d0 <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d0f9      	beq.n	800ba2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ba3a:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <HAL_RCC_OscConfig+0x8b0>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ba46:	00d2      	lsls	r2, r2, #3
 800ba48:	4906      	ldr	r1, [pc, #24]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	4a04      	ldr	r2, [pc, #16]	; (800ba64 <HAL_RCC_OscConfig+0x8ac>)
 800ba54:	f043 0301 	orr.w	r3, r3, #1
 800ba58:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3730      	adds	r7, #48	; 0x30
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	58024400 	.word	0x58024400
 800ba68:	ffff0007 	.word	0xffff0007

0800ba6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e19c      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba80:	4b8a      	ldr	r3, [pc, #552]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 030f 	and.w	r3, r3, #15
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d910      	bls.n	800bab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba8e:	4b87      	ldr	r3, [pc, #540]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f023 020f 	bic.w	r2, r3, #15
 800ba96:	4985      	ldr	r1, [pc, #532]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba9e:	4b83      	ldr	r3, [pc, #524]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 030f 	and.w	r3, r3, #15
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d001      	beq.n	800bab0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e184      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d010      	beq.n	800bade <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691a      	ldr	r2, [r3, #16]
 800bac0:	4b7b      	ldr	r3, [pc, #492]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bac8:	429a      	cmp	r2, r3
 800baca:	d908      	bls.n	800bade <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bacc:	4b78      	ldr	r3, [pc, #480]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4975      	ldr	r1, [pc, #468]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bada:	4313      	orrs	r3, r2
 800badc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d010      	beq.n	800bb0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	695a      	ldr	r2, [r3, #20]
 800baee:	4b70      	ldr	r3, [pc, #448]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d908      	bls.n	800bb0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bafa:	4b6d      	ldr	r3, [pc, #436]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	496a      	ldr	r1, [pc, #424]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d010      	beq.n	800bb3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	699a      	ldr	r2, [r3, #24]
 800bb1c:	4b64      	ldr	r3, [pc, #400]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d908      	bls.n	800bb3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb28:	4b61      	ldr	r3, [pc, #388]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	495e      	ldr	r1, [pc, #376]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d010      	beq.n	800bb68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	69da      	ldr	r2, [r3, #28]
 800bb4a:	4b59      	ldr	r3, [pc, #356]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d908      	bls.n	800bb68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bb56:	4b56      	ldr	r3, [pc, #344]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	4953      	ldr	r1, [pc, #332]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d010      	beq.n	800bb96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68da      	ldr	r2, [r3, #12]
 800bb78:	4b4d      	ldr	r3, [pc, #308]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d908      	bls.n	800bb96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb84:	4b4a      	ldr	r3, [pc, #296]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	f023 020f 	bic.w	r2, r3, #15
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	4947      	ldr	r1, [pc, #284]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d055      	beq.n	800bc4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bba2:	4b43      	ldr	r3, [pc, #268]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bba4:	699b      	ldr	r3, [r3, #24]
 800bba6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	4940      	ldr	r1, [pc, #256]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d107      	bne.n	800bbcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbbc:	4b3c      	ldr	r3, [pc, #240]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d121      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e0f6      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d107      	bne.n	800bbe4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbd4:	4b36      	ldr	r3, [pc, #216]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d115      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e0ea      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d107      	bne.n	800bbfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bbec:	4b30      	ldr	r3, [pc, #192]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d109      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e0de      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bbfc:	4b2c      	ldr	r3, [pc, #176]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e0d6      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc0c:	4b28      	ldr	r3, [pc, #160]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	f023 0207 	bic.w	r2, r3, #7
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4925      	ldr	r1, [pc, #148]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc1e:	f7f8 fd57 	bl	80046d0 <HAL_GetTick>
 800bc22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc24:	e00a      	b.n	800bc3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc26:	f7f8 fd53 	bl	80046d0 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d901      	bls.n	800bc3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e0be      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc3c:	4b1c      	ldr	r3, [pc, #112]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d1eb      	bne.n	800bc26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d010      	beq.n	800bc7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	f003 030f 	and.w	r3, r3, #15
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d208      	bcs.n	800bc7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc6a:	4b11      	ldr	r3, [pc, #68]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	f023 020f 	bic.w	r2, r3, #15
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	490e      	ldr	r1, [pc, #56]	; (800bcb0 <HAL_RCC_ClockConfig+0x244>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f003 030f 	and.w	r3, r3, #15
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d214      	bcs.n	800bcb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc8a:	4b08      	ldr	r3, [pc, #32]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f023 020f 	bic.w	r2, r3, #15
 800bc92:	4906      	ldr	r1, [pc, #24]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc9a:	4b04      	ldr	r3, [pc, #16]	; (800bcac <HAL_RCC_ClockConfig+0x240>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 030f 	and.w	r3, r3, #15
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d005      	beq.n	800bcb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e086      	b.n	800bdba <HAL_RCC_ClockConfig+0x34e>
 800bcac:	52002000 	.word	0x52002000
 800bcb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d010      	beq.n	800bce2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	691a      	ldr	r2, [r3, #16]
 800bcc4:	4b3f      	ldr	r3, [pc, #252]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d208      	bcs.n	800bce2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcd0:	4b3c      	ldr	r3, [pc, #240]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	4939      	ldr	r1, [pc, #228]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0308 	and.w	r3, r3, #8
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d010      	beq.n	800bd10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	695a      	ldr	r2, [r3, #20]
 800bcf2:	4b34      	ldr	r3, [pc, #208]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d208      	bcs.n	800bd10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bcfe:	4b31      	ldr	r3, [pc, #196]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	492e      	ldr	r1, [pc, #184]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0310 	and.w	r3, r3, #16
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d010      	beq.n	800bd3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	699a      	ldr	r2, [r3, #24]
 800bd20:	4b28      	ldr	r3, [pc, #160]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d208      	bcs.n	800bd3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd2c:	4b25      	ldr	r3, [pc, #148]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	4922      	ldr	r1, [pc, #136]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d010      	beq.n	800bd6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	69da      	ldr	r2, [r3, #28]
 800bd4e:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d208      	bcs.n	800bd6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bd5a:	4b1a      	ldr	r3, [pc, #104]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	4917      	ldr	r1, [pc, #92]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd6c:	f000 f834 	bl	800bdd8 <HAL_RCC_GetSysClockFreq>
 800bd70:	4602      	mov	r2, r0
 800bd72:	4b14      	ldr	r3, [pc, #80]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd74:	699b      	ldr	r3, [r3, #24]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	4912      	ldr	r1, [pc, #72]	; (800bdc8 <HAL_RCC_ClockConfig+0x35c>)
 800bd7e:	5ccb      	ldrb	r3, [r1, r3]
 800bd80:	f003 031f 	and.w	r3, r3, #31
 800bd84:	fa22 f303 	lsr.w	r3, r2, r3
 800bd88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <HAL_RCC_ClockConfig+0x358>)
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	f003 030f 	and.w	r3, r3, #15
 800bd92:	4a0d      	ldr	r2, [pc, #52]	; (800bdc8 <HAL_RCC_ClockConfig+0x35c>)
 800bd94:	5cd3      	ldrb	r3, [r2, r3]
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bda0:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <HAL_RCC_ClockConfig+0x360>)
 800bda2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bda4:	4a0a      	ldr	r2, [pc, #40]	; (800bdd0 <HAL_RCC_ClockConfig+0x364>)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bdaa:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <HAL_RCC_ClockConfig+0x368>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7f8 fc44 	bl	800463c <HAL_InitTick>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	58024400 	.word	0x58024400
 800bdc8:	0801ad50 	.word	0x0801ad50
 800bdcc:	24000004 	.word	0x24000004
 800bdd0:	24000000 	.word	0x24000000
 800bdd4:	240000cc 	.word	0x240000cc

0800bdd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b089      	sub	sp, #36	; 0x24
 800bddc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdde:	4bb3      	ldr	r3, [pc, #716]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bde6:	2b18      	cmp	r3, #24
 800bde8:	f200 8155 	bhi.w	800c096 <HAL_RCC_GetSysClockFreq+0x2be>
 800bdec:	a201      	add	r2, pc, #4	; (adr r2, 800bdf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be59 	.word	0x0800be59
 800bdf8:	0800c097 	.word	0x0800c097
 800bdfc:	0800c097 	.word	0x0800c097
 800be00:	0800c097 	.word	0x0800c097
 800be04:	0800c097 	.word	0x0800c097
 800be08:	0800c097 	.word	0x0800c097
 800be0c:	0800c097 	.word	0x0800c097
 800be10:	0800c097 	.word	0x0800c097
 800be14:	0800be7f 	.word	0x0800be7f
 800be18:	0800c097 	.word	0x0800c097
 800be1c:	0800c097 	.word	0x0800c097
 800be20:	0800c097 	.word	0x0800c097
 800be24:	0800c097 	.word	0x0800c097
 800be28:	0800c097 	.word	0x0800c097
 800be2c:	0800c097 	.word	0x0800c097
 800be30:	0800c097 	.word	0x0800c097
 800be34:	0800be85 	.word	0x0800be85
 800be38:	0800c097 	.word	0x0800c097
 800be3c:	0800c097 	.word	0x0800c097
 800be40:	0800c097 	.word	0x0800c097
 800be44:	0800c097 	.word	0x0800c097
 800be48:	0800c097 	.word	0x0800c097
 800be4c:	0800c097 	.word	0x0800c097
 800be50:	0800c097 	.word	0x0800c097
 800be54:	0800be8b 	.word	0x0800be8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be58:	4b94      	ldr	r3, [pc, #592]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0320 	and.w	r3, r3, #32
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be64:	4b91      	ldr	r3, [pc, #580]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	08db      	lsrs	r3, r3, #3
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	4a90      	ldr	r2, [pc, #576]	; (800c0b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be70:	fa22 f303 	lsr.w	r3, r2, r3
 800be74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800be76:	e111      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800be78:	4b8d      	ldr	r3, [pc, #564]	; (800c0b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be7a:	61bb      	str	r3, [r7, #24]
      break;
 800be7c:	e10e      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800be7e:	4b8d      	ldr	r3, [pc, #564]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800be80:	61bb      	str	r3, [r7, #24]
      break;
 800be82:	e10b      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800be84:	4b8c      	ldr	r3, [pc, #560]	; (800c0b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800be86:	61bb      	str	r3, [r7, #24]
      break;
 800be88:	e108      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be8a:	4b88      	ldr	r3, [pc, #544]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	f003 0303 	and.w	r3, r3, #3
 800be92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800be94:	4b85      	ldr	r3, [pc, #532]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be98:	091b      	lsrs	r3, r3, #4
 800be9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bea0:	4b82      	ldr	r3, [pc, #520]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800beaa:	4b80      	ldr	r3, [pc, #512]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beae:	08db      	lsrs	r3, r3, #3
 800beb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 80e1 	beq.w	800c090 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	f000 8083 	beq.w	800bfdc <HAL_RCC_GetSysClockFreq+0x204>
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	f200 80a1 	bhi.w	800c020 <HAL_RCC_GetSysClockFreq+0x248>
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_RCC_GetSysClockFreq+0x114>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d056      	beq.n	800bf98 <HAL_RCC_GetSysClockFreq+0x1c0>
 800beea:	e099      	b.n	800c020 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beec:	4b6f      	ldr	r3, [pc, #444]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0320 	and.w	r3, r3, #32
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d02d      	beq.n	800bf54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bef8:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	08db      	lsrs	r3, r3, #3
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	4a6b      	ldr	r2, [pc, #428]	; (800c0b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf04:	fa22 f303 	lsr.w	r3, r2, r3
 800bf08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	ee07 3a90 	vmov	s15, r3
 800bf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf22:	4b62      	ldr	r3, [pc, #392]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf32:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf36:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c0bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bf52:	e087      	b.n	800c064 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c0c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf66:	4b51      	ldr	r3, [pc, #324]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf76:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c0bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf96:	e065      	b.n	800c064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c0c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfaa:	4b40      	ldr	r3, [pc, #256]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfba:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c0bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfda:	e043      	b.n	800c064 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c0c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfee:	4b2f      	ldr	r3, [pc, #188]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffe:	ed97 6a02 	vldr	s12, [r7, #8]
 800c002:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c0bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c01e:	e021      	b.n	800c064 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c0c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c032:	4b1e      	ldr	r3, [pc, #120]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c042:	ed97 6a02 	vldr	s12, [r7, #8]
 800c046:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c0bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800c04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c062:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c064:	4b11      	ldr	r3, [pc, #68]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c068:	0a5b      	lsrs	r3, r3, #9
 800c06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06e:	3301      	adds	r3, #1
 800c070:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	ee07 3a90 	vmov	s15, r3
 800c078:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c07c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c088:	ee17 3a90 	vmov	r3, s15
 800c08c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c08e:	e005      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	61bb      	str	r3, [r7, #24]
      break;
 800c094:	e002      	b.n	800c09c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c096:	4b07      	ldr	r3, [pc, #28]	; (800c0b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c098:	61bb      	str	r3, [r7, #24]
      break;
 800c09a:	bf00      	nop
  }

  return sysclockfreq;
 800c09c:	69bb      	ldr	r3, [r7, #24]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3724      	adds	r7, #36	; 0x24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop
 800c0ac:	58024400 	.word	0x58024400
 800c0b0:	03d09000 	.word	0x03d09000
 800c0b4:	003d0900 	.word	0x003d0900
 800c0b8:	007a1200 	.word	0x007a1200
 800c0bc:	46000000 	.word	0x46000000
 800c0c0:	4c742400 	.word	0x4c742400
 800c0c4:	4a742400 	.word	0x4a742400
 800c0c8:	4af42400 	.word	0x4af42400

0800c0cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0d2:	f7ff fe81 	bl	800bdd8 <HAL_RCC_GetSysClockFreq>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b10      	ldr	r3, [pc, #64]	; (800c11c <HAL_RCC_GetHCLKFreq+0x50>)
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	0a1b      	lsrs	r3, r3, #8
 800c0de:	f003 030f 	and.w	r3, r3, #15
 800c0e2:	490f      	ldr	r1, [pc, #60]	; (800c120 <HAL_RCC_GetHCLKFreq+0x54>)
 800c0e4:	5ccb      	ldrb	r3, [r1, r3]
 800c0e6:	f003 031f 	and.w	r3, r3, #31
 800c0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <HAL_RCC_GetHCLKFreq+0x50>)
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	f003 030f 	and.w	r3, r3, #15
 800c0f8:	4a09      	ldr	r2, [pc, #36]	; (800c120 <HAL_RCC_GetHCLKFreq+0x54>)
 800c0fa:	5cd3      	ldrb	r3, [r2, r3]
 800c0fc:	f003 031f 	and.w	r3, r3, #31
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	fa22 f303 	lsr.w	r3, r2, r3
 800c106:	4a07      	ldr	r2, [pc, #28]	; (800c124 <HAL_RCC_GetHCLKFreq+0x58>)
 800c108:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c10a:	4a07      	ldr	r2, [pc, #28]	; (800c128 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c110:	4b04      	ldr	r3, [pc, #16]	; (800c124 <HAL_RCC_GetHCLKFreq+0x58>)
 800c112:	681b      	ldr	r3, [r3, #0]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	58024400 	.word	0x58024400
 800c120:	0801ad50 	.word	0x0801ad50
 800c124:	24000004 	.word	0x24000004
 800c128:	24000000 	.word	0x24000000

0800c12c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c130:	f7ff ffcc 	bl	800c0cc <HAL_RCC_GetHCLKFreq>
 800c134:	4602      	mov	r2, r0
 800c136:	4b06      	ldr	r3, [pc, #24]	; (800c150 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c138:	69db      	ldr	r3, [r3, #28]
 800c13a:	091b      	lsrs	r3, r3, #4
 800c13c:	f003 0307 	and.w	r3, r3, #7
 800c140:	4904      	ldr	r1, [pc, #16]	; (800c154 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c142:	5ccb      	ldrb	r3, [r1, r3]
 800c144:	f003 031f 	and.w	r3, r3, #31
 800c148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	58024400 	.word	0x58024400
 800c154:	0801ad50 	.word	0x0801ad50

0800c158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c15c:	f7ff ffb6 	bl	800c0cc <HAL_RCC_GetHCLKFreq>
 800c160:	4602      	mov	r2, r0
 800c162:	4b06      	ldr	r3, [pc, #24]	; (800c17c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	0a1b      	lsrs	r3, r3, #8
 800c168:	f003 0307 	and.w	r3, r3, #7
 800c16c:	4904      	ldr	r1, [pc, #16]	; (800c180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c16e:	5ccb      	ldrb	r3, [r1, r3]
 800c170:	f003 031f 	and.w	r3, r3, #31
 800c174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c178:	4618      	mov	r0, r3
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	58024400 	.word	0x58024400
 800c180:	0801ad50 	.word	0x0801ad50

0800c184 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c188:	b0ca      	sub	sp, #296	; 0x128
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c190:	2300      	movs	r3, #0
 800c192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c196:	2300      	movs	r3, #0
 800c198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	ea54 0305 	orrs.w	r3, r4, r5
 800c1ae:	d049      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1ba:	d02f      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c1bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1c0:	d828      	bhi.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c1c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1c6:	d01a      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c1c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1cc:	d822      	bhi.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d003      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c1d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1d6:	d007      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c1d8:	e01c      	b.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1da:	4bb8      	ldr	r3, [pc, #736]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	4ab7      	ldr	r2, [pc, #732]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c1e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c1e6:	e01a      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f002 fb61 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c1fc:	e00f      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c202:	3328      	adds	r3, #40	; 0x28
 800c204:	2102      	movs	r1, #2
 800c206:	4618      	mov	r0, r3
 800c208:	f002 fc08 	bl	800ea1c <RCCEx_PLL3_Config>
 800c20c:	4603      	mov	r3, r0
 800c20e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c212:	e004      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c21a:	e000      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c226:	4ba5      	ldr	r3, [pc, #660]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c22a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c234:	4aa1      	ldr	r2, [pc, #644]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c236:	430b      	orrs	r3, r1
 800c238:	6513      	str	r3, [r2, #80]	; 0x50
 800c23a:	e003      	b.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c23c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c240:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c250:	f04f 0900 	mov.w	r9, #0
 800c254:	ea58 0309 	orrs.w	r3, r8, r9
 800c258:	d047      	beq.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c260:	2b04      	cmp	r3, #4
 800c262:	d82a      	bhi.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c264:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c281 	.word	0x0800c281
 800c270:	0800c28f 	.word	0x0800c28f
 800c274:	0800c2a5 	.word	0x0800c2a5
 800c278:	0800c2c3 	.word	0x0800c2c3
 800c27c:	0800c2c3 	.word	0x0800c2c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c280:	4b8e      	ldr	r3, [pc, #568]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	4a8d      	ldr	r2, [pc, #564]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c28a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c28c:	e01a      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c292:	3308      	adds	r3, #8
 800c294:	2100      	movs	r1, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f002 fb0e 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c2a2:	e00f      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2a8:	3328      	adds	r3, #40	; 0x28
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f002 fbb5 	bl	800ea1c <RCCEx_PLL3_Config>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c2b8:	e004      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c2c0:	e000      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2cc:	4b7b      	ldr	r3, [pc, #492]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d0:	f023 0107 	bic.w	r1, r3, #7
 800c2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2da:	4a78      	ldr	r2, [pc, #480]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	6513      	str	r3, [r2, #80]	; 0x50
 800c2e0:	e003      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c2f6:	f04f 0b00 	mov.w	fp, #0
 800c2fa:	ea5a 030b 	orrs.w	r3, sl, fp
 800c2fe:	d04c      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30a:	d030      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c310:	d829      	bhi.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c312:	2bc0      	cmp	r3, #192	; 0xc0
 800c314:	d02d      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c316:	2bc0      	cmp	r3, #192	; 0xc0
 800c318:	d825      	bhi.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c31a:	2b80      	cmp	r3, #128	; 0x80
 800c31c:	d018      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c31e:	2b80      	cmp	r3, #128	; 0x80
 800c320:	d821      	bhi.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c326:	2b40      	cmp	r3, #64	; 0x40
 800c328:	d007      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c32a:	e01c      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c32c:	4b63      	ldr	r3, [pc, #396]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	4a62      	ldr	r2, [pc, #392]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c338:	e01c      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33e:	3308      	adds	r3, #8
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f002 fab8 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c34e:	e011      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c354:	3328      	adds	r3, #40	; 0x28
 800c356:	2100      	movs	r1, #0
 800c358:	4618      	mov	r0, r3
 800c35a:	f002 fb5f 	bl	800ea1c <RCCEx_PLL3_Config>
 800c35e:	4603      	mov	r3, r0
 800c360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c364:	e006      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c36c:	e002      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c36e:	bf00      	nop
 800c370:	e000      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c37c:	4b4f      	ldr	r3, [pc, #316]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c380:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c38a:	4a4c      	ldr	r2, [pc, #304]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c38c:	430b      	orrs	r3, r1
 800c38e:	6513      	str	r3, [r2, #80]	; 0x50
 800c390:	e003      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c3a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800c3b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	d053      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c3c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3c6:	d035      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c3c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3cc:	d82e      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c3ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3d2:	d031      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c3d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3d8:	d828      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c3da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3de:	d01a      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c3e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3e4:	d822      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c3ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3ee:	d007      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c3f0:	e01c      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3f2:	4b32      	ldr	r3, [pc, #200]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f6:	4a31      	ldr	r2, [pc, #196]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c3f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3fe:	e01c      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c404:	3308      	adds	r3, #8
 800c406:	2100      	movs	r1, #0
 800c408:	4618      	mov	r0, r3
 800c40a:	f002 fa55 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c414:	e011      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41a:	3328      	adds	r3, #40	; 0x28
 800c41c:	2100      	movs	r1, #0
 800c41e:	4618      	mov	r0, r3
 800c420:	f002 fafc 	bl	800ea1c <RCCEx_PLL3_Config>
 800c424:	4603      	mov	r3, r0
 800c426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c42a:	e006      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c432:	e002      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c434:	bf00      	nop
 800c436:	e000      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c43a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10b      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c442:	4b1e      	ldr	r3, [pc, #120]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c446:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800c44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c44e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c452:	4a1a      	ldr	r2, [pc, #104]	; (800c4bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c454:	430b      	orrs	r3, r1
 800c456:	6593      	str	r3, [r2, #88]	; 0x58
 800c458:	e003      	b.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c46e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c472:	2300      	movs	r3, #0
 800c474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c478:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c47c:	460b      	mov	r3, r1
 800c47e:	4313      	orrs	r3, r2
 800c480:	d056      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c48a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c48e:	d038      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c494:	d831      	bhi.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c49a:	d034      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c49c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c4a0:	d82b      	bhi.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c4a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4a6:	d01d      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c4a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ac:	d825      	bhi.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d006      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c4b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4b6:	d00a      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c4b8:	e01f      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c4ba:	bf00      	nop
 800c4bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c0:	4ba2      	ldr	r3, [pc, #648]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c4:	4aa1      	ldr	r2, [pc, #644]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c4c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4cc:	e01c      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4d2:	3308      	adds	r3, #8
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f002 f9ee 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4e2:	e011      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e8:	3328      	adds	r3, #40	; 0x28
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f002 fa95 	bl	800ea1c <RCCEx_PLL3_Config>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4f8:	e006      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c500:	e002      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c506:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c510:	4b8e      	ldr	r3, [pc, #568]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c514:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800c518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c51c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c520:	4a8a      	ldr	r2, [pc, #552]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c522:	430b      	orrs	r3, r1
 800c524:	6593      	str	r3, [r2, #88]	; 0x58
 800c526:	e003      	b.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c52c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c53c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c540:	2300      	movs	r3, #0
 800c542:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c546:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c54a:	460b      	mov	r3, r1
 800c54c:	4313      	orrs	r3, r2
 800c54e:	d03a      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c556:	2b30      	cmp	r3, #48	; 0x30
 800c558:	d01f      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c55a:	2b30      	cmp	r3, #48	; 0x30
 800c55c:	d819      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d00c      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c562:	2b20      	cmp	r3, #32
 800c564:	d815      	bhi.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c566:	2b00      	cmp	r3, #0
 800c568:	d019      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c56a:	2b10      	cmp	r3, #16
 800c56c:	d111      	bne.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c56e:	4b77      	ldr	r3, [pc, #476]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	4a76      	ldr	r2, [pc, #472]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c57a:	e011      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c580:	3308      	adds	r3, #8
 800c582:	2102      	movs	r1, #2
 800c584:	4618      	mov	r0, r3
 800c586:	f002 f997 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c590:	e006      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c598:	e002      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c59a:	bf00      	nop
 800c59c:	e000      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c59e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c5a8:	4b68      	ldr	r3, [pc, #416]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b6:	4a65      	ldr	r2, [pc, #404]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c5b8:	430b      	orrs	r3, r1
 800c5ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5bc:	e003      	b.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c5d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c5dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	d051      	beq.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5f0:	d035      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c5f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5f6:	d82e      	bhi.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c5f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c5fc:	d031      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c5fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c602:	d828      	bhi.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c608:	d01a      	beq.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c60e:	d822      	bhi.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c618:	d007      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c61a:	e01c      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c61c:	4b4b      	ldr	r3, [pc, #300]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c620:	4a4a      	ldr	r2, [pc, #296]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c628:	e01c      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c62e:	3308      	adds	r3, #8
 800c630:	2100      	movs	r1, #0
 800c632:	4618      	mov	r0, r3
 800c634:	f002 f940 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c63e:	e011      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c644:	3328      	adds	r3, #40	; 0x28
 800c646:	2100      	movs	r1, #0
 800c648:	4618      	mov	r0, r3
 800c64a:	f002 f9e7 	bl	800ea1c <RCCEx_PLL3_Config>
 800c64e:	4603      	mov	r3, r0
 800c650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c654:	e006      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c65c:	e002      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c65e:	bf00      	nop
 800c660:	e000      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800c662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c66c:	4b37      	ldr	r3, [pc, #220]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c670:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c67a:	4a34      	ldr	r2, [pc, #208]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6513      	str	r3, [r2, #80]	; 0x50
 800c680:	e003      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c6a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	d056      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6b4:	d033      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c6b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6ba:	d82c      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c6bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6c0:	d02f      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800c6c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6c6:	d826      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c6c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6cc:	d02b      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800c6ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6d2:	d820      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c6d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6d8:	d012      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800c6da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6de:	d81a      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d022      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e8:	d115      	bne.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ee:	3308      	adds	r3, #8
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f002 f8e0 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c6fe:	e015      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c704:	3328      	adds	r3, #40	; 0x28
 800c706:	2101      	movs	r1, #1
 800c708:	4618      	mov	r0, r3
 800c70a:	f002 f987 	bl	800ea1c <RCCEx_PLL3_Config>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c714:	e00a      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c71c:	e006      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c71e:	bf00      	nop
 800c720:	e004      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800c72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10d      	bne.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c734:	4b05      	ldr	r3, [pc, #20]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c738:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c742:	4a02      	ldr	r2, [pc, #8]	; (800c74c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c744:	430b      	orrs	r3, r1
 800c746:	6513      	str	r3, [r2, #80]	; 0x50
 800c748:	e006      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c74a:	bf00      	nop
 800c74c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c768:	2300      	movs	r3, #0
 800c76a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c76e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d055      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c77c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c784:	d033      	beq.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800c786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c78a:	d82c      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c790:	d02f      	beq.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800c792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c796:	d826      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c79c:	d02b      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800c79e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7a2:	d820      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c7a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a8:	d012      	beq.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800c7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ae:	d81a      	bhi.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d022      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800c7b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7b8:	d115      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7be:	3308      	adds	r3, #8
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f002 f878 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7ce:	e015      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7d4:	3328      	adds	r3, #40	; 0x28
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f002 f91f 	bl	800ea1c <RCCEx_PLL3_Config>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7e4:	e00a      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c7ec:	e006      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c7ee:	bf00      	nop
 800c7f0:	e004      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c7f2:	bf00      	nop
 800c7f4:	e002      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800c7fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10b      	bne.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c804:	4ba3      	ldr	r3, [pc, #652]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c808:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c814:	4a9f      	ldr	r2, [pc, #636]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c816:	430b      	orrs	r3, r1
 800c818:	6593      	str	r3, [r2, #88]	; 0x58
 800c81a:	e003      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c81c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c834:	2300      	movs	r3, #0
 800c836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c83a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d037      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84e:	d00e      	beq.n	800c86e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c854:	d816      	bhi.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d018      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c85a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c85e:	d111      	bne.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c860:	4b8c      	ldr	r3, [pc, #560]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	4a8b      	ldr	r2, [pc, #556]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c86a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c86c:	e00f      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c872:	3308      	adds	r3, #8
 800c874:	2101      	movs	r1, #1
 800c876:	4618      	mov	r0, r3
 800c878:	f002 f81e 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c882:	e004      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c88a:	e000      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c88c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10a      	bne.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c896:	4b7f      	ldr	r3, [pc, #508]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a4:	4a7b      	ldr	r2, [pc, #492]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	6513      	str	r3, [r2, #80]	; 0x50
 800c8aa:	e003      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c8b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c8c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c8ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	d039      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d81c      	bhi.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c8de:	a201      	add	r2, pc, #4	; (adr r2, 800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e4:	0800c921 	.word	0x0800c921
 800c8e8:	0800c8f5 	.word	0x0800c8f5
 800c8ec:	0800c903 	.word	0x0800c903
 800c8f0:	0800c921 	.word	0x0800c921
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8f4:	4b67      	ldr	r3, [pc, #412]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	4a66      	ldr	r2, [pc, #408]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c8fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c900:	e00f      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c906:	3308      	adds	r3, #8
 800c908:	2102      	movs	r1, #2
 800c90a:	4618      	mov	r0, r3
 800c90c:	f001 ffd4 	bl	800e8b8 <RCCEx_PLL2_Config>
 800c910:	4603      	mov	r3, r0
 800c912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c916:	e004      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c91e:	e000      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c92a:	4b5a      	ldr	r3, [pc, #360]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c92c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c92e:	f023 0103 	bic.w	r1, r3, #3
 800c932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c938:	4a56      	ldr	r2, [pc, #344]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c93a:	430b      	orrs	r3, r1
 800c93c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c93e:	e003      	b.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c958:	2300      	movs	r3, #0
 800c95a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c95e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c962:	460b      	mov	r3, r1
 800c964:	4313      	orrs	r3, r2
 800c966:	f000 809f 	beq.w	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c96a:	4b4b      	ldr	r3, [pc, #300]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a4a      	ldr	r2, [pc, #296]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c976:	f7f7 feab 	bl	80046d0 <HAL_GetTick>
 800c97a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c97e:	e00b      	b.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c980:	f7f7 fea6 	bl	80046d0 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	2b64      	cmp	r3, #100	; 0x64
 800c98e:	d903      	bls.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c996:	e005      	b.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c998:	4b3f      	ldr	r3, [pc, #252]	; (800ca98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d0ed      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c9a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d179      	bne.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c9ac:	4b39      	ldr	r3, [pc, #228]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c9b8:	4053      	eors	r3, r2
 800c9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d015      	beq.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9c2:	4b34      	ldr	r3, [pc, #208]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c9ce:	4b31      	ldr	r3, [pc, #196]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d2:	4a30      	ldr	r2, [pc, #192]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c9da:	4b2e      	ldr	r3, [pc, #184]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9de:	4a2d      	ldr	r2, [pc, #180]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c9e6:	4a2b      	ldr	r2, [pc, #172]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c9e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c9ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9fa:	d118      	bne.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9fc:	f7f7 fe68 	bl	80046d0 <HAL_GetTick>
 800ca00:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca04:	e00d      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca06:	f7f7 fe63 	bl	80046d0 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ca10:	1ad2      	subs	r2, r2, r3
 800ca12:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d903      	bls.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800ca20:	e005      	b.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca22:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca26:	f003 0302 	and.w	r3, r3, #2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0eb      	beq.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ca2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d129      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca46:	d10e      	bne.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ca48:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ca50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca58:	091a      	lsrs	r2, r3, #4
 800ca5a:	4b10      	ldr	r3, [pc, #64]	; (800ca9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	4a0d      	ldr	r2, [pc, #52]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca60:	430b      	orrs	r3, r1
 800ca62:	6113      	str	r3, [r2, #16]
 800ca64:	e005      	b.n	800ca72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ca66:	4b0b      	ldr	r3, [pc, #44]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	4a0a      	ldr	r2, [pc, #40]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca70:	6113      	str	r3, [r2, #16]
 800ca72:	4b08      	ldr	r3, [pc, #32]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ca76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca82:	4a04      	ldr	r2, [pc, #16]	; (800ca94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ca84:	430b      	orrs	r3, r1
 800ca86:	6713      	str	r3, [r2, #112]	; 0x70
 800ca88:	e00e      	b.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ca8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800ca92:	e009      	b.n	800caa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ca94:	58024400 	.word	0x58024400
 800ca98:	58024800 	.word	0x58024800
 800ca9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800caa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800caa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	f002 0301 	and.w	r3, r2, #1
 800cab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cab8:	2300      	movs	r3, #0
 800caba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cabe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4313      	orrs	r3, r2
 800cac6:	f000 8089 	beq.w	800cbdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800caca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cad0:	2b28      	cmp	r3, #40	; 0x28
 800cad2:	d86b      	bhi.n	800cbac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800cad4:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cbb5 	.word	0x0800cbb5
 800cae0:	0800cbad 	.word	0x0800cbad
 800cae4:	0800cbad 	.word	0x0800cbad
 800cae8:	0800cbad 	.word	0x0800cbad
 800caec:	0800cbad 	.word	0x0800cbad
 800caf0:	0800cbad 	.word	0x0800cbad
 800caf4:	0800cbad 	.word	0x0800cbad
 800caf8:	0800cbad 	.word	0x0800cbad
 800cafc:	0800cb81 	.word	0x0800cb81
 800cb00:	0800cbad 	.word	0x0800cbad
 800cb04:	0800cbad 	.word	0x0800cbad
 800cb08:	0800cbad 	.word	0x0800cbad
 800cb0c:	0800cbad 	.word	0x0800cbad
 800cb10:	0800cbad 	.word	0x0800cbad
 800cb14:	0800cbad 	.word	0x0800cbad
 800cb18:	0800cbad 	.word	0x0800cbad
 800cb1c:	0800cb97 	.word	0x0800cb97
 800cb20:	0800cbad 	.word	0x0800cbad
 800cb24:	0800cbad 	.word	0x0800cbad
 800cb28:	0800cbad 	.word	0x0800cbad
 800cb2c:	0800cbad 	.word	0x0800cbad
 800cb30:	0800cbad 	.word	0x0800cbad
 800cb34:	0800cbad 	.word	0x0800cbad
 800cb38:	0800cbad 	.word	0x0800cbad
 800cb3c:	0800cbb5 	.word	0x0800cbb5
 800cb40:	0800cbad 	.word	0x0800cbad
 800cb44:	0800cbad 	.word	0x0800cbad
 800cb48:	0800cbad 	.word	0x0800cbad
 800cb4c:	0800cbad 	.word	0x0800cbad
 800cb50:	0800cbad 	.word	0x0800cbad
 800cb54:	0800cbad 	.word	0x0800cbad
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cbb5 	.word	0x0800cbb5
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cbad 	.word	0x0800cbad
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cbad 	.word	0x0800cbad
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cbad 	.word	0x0800cbad
 800cb7c:	0800cbb5 	.word	0x0800cbb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb84:	3308      	adds	r3, #8
 800cb86:	2101      	movs	r1, #1
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f001 fe95 	bl	800e8b8 <RCCEx_PLL2_Config>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cb94:	e00f      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cb9a:	3328      	adds	r3, #40	; 0x28
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 ff3c 	bl	800ea1c <RCCEx_PLL3_Config>
 800cba4:	4603      	mov	r3, r0
 800cba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cbaa:	e004      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cbb2:	e000      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cbb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10a      	bne.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cbbe:	4bbf      	ldr	r3, [pc, #764]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbc2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800cbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbcc:	4abb      	ldr	r2, [pc, #748]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	6553      	str	r3, [r2, #84]	; 0x54
 800cbd2:	e003      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cbd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f002 0302 	and.w	r3, r2, #2
 800cbe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbec:	2300      	movs	r3, #0
 800cbee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cbf2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	d041      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc02:	2b05      	cmp	r3, #5
 800cc04:	d824      	bhi.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800cc06:	a201      	add	r2, pc, #4	; (adr r2, 800cc0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0c:	0800cc59 	.word	0x0800cc59
 800cc10:	0800cc25 	.word	0x0800cc25
 800cc14:	0800cc3b 	.word	0x0800cc3b
 800cc18:	0800cc59 	.word	0x0800cc59
 800cc1c:	0800cc59 	.word	0x0800cc59
 800cc20:	0800cc59 	.word	0x0800cc59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc28:	3308      	adds	r3, #8
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f001 fe43 	bl	800e8b8 <RCCEx_PLL2_Config>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc38:	e00f      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc3e:	3328      	adds	r3, #40	; 0x28
 800cc40:	2101      	movs	r1, #1
 800cc42:	4618      	mov	r0, r3
 800cc44:	f001 feea 	bl	800ea1c <RCCEx_PLL3_Config>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc4e:	e004      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cc56:	e000      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800cc58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10a      	bne.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc62:	4b96      	ldr	r3, [pc, #600]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc66:	f023 0107 	bic.w	r1, r3, #7
 800cc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc70:	4a92      	ldr	r2, [pc, #584]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cc72:	430b      	orrs	r3, r1
 800cc74:	6553      	str	r3, [r2, #84]	; 0x54
 800cc76:	e003      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cc7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f002 0304 	and.w	r3, r2, #4
 800cc8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc90:	2300      	movs	r3, #0
 800cc92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	d044      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cca8:	2b05      	cmp	r3, #5
 800ccaa:	d825      	bhi.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ccac:	a201      	add	r2, pc, #4	; (adr r2, 800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ccae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb2:	bf00      	nop
 800ccb4:	0800cd01 	.word	0x0800cd01
 800ccb8:	0800cccd 	.word	0x0800cccd
 800ccbc:	0800cce3 	.word	0x0800cce3
 800ccc0:	0800cd01 	.word	0x0800cd01
 800ccc4:	0800cd01 	.word	0x0800cd01
 800ccc8:	0800cd01 	.word	0x0800cd01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f001 fdef 	bl	800e8b8 <RCCEx_PLL2_Config>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cce0:	e00f      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cce6:	3328      	adds	r3, #40	; 0x28
 800cce8:	2101      	movs	r1, #1
 800ccea:	4618      	mov	r0, r3
 800ccec:	f001 fe96 	bl	800ea1c <RCCEx_PLL3_Config>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ccf6:	e004      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ccfe:	e000      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800cd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10b      	bne.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd0a:	4b6c      	ldr	r3, [pc, #432]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd0e:	f023 0107 	bic.w	r1, r3, #7
 800cd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd1a:	4a68      	ldr	r2, [pc, #416]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cd1c:	430b      	orrs	r3, r1
 800cd1e:	6593      	str	r3, [r2, #88]	; 0x58
 800cd20:	e003      	b.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f002 0320 	and.w	r3, r2, #32
 800cd36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cd44:	460b      	mov	r3, r1
 800cd46:	4313      	orrs	r3, r2
 800cd48:	d055      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd56:	d033      	beq.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800cd58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd5c:	d82c      	bhi.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800cd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd62:	d02f      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800cd64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd68:	d826      	bhi.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800cd6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd6e:	d02b      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800cd70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd74:	d820      	bhi.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800cd76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd7a:	d012      	beq.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800cd7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd80:	d81a      	bhi.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d022      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800cd86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd8a:	d115      	bne.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd90:	3308      	adds	r3, #8
 800cd92:	2100      	movs	r1, #0
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 fd8f 	bl	800e8b8 <RCCEx_PLL2_Config>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cda0:	e015      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda6:	3328      	adds	r3, #40	; 0x28
 800cda8:	2102      	movs	r1, #2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f001 fe36 	bl	800ea1c <RCCEx_PLL3_Config>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cdb6:	e00a      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cdbe:	e006      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cdc0:	bf00      	nop
 800cdc2:	e004      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cdc4:	bf00      	nop
 800cdc6:	e002      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cdc8:	bf00      	nop
 800cdca:	e000      	b.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800cdcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cdd6:	4b39      	ldr	r3, [pc, #228]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cdd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde6:	4a35      	ldr	r2, [pc, #212]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cde8:	430b      	orrs	r3, r1
 800cdea:	6553      	str	r3, [r2, #84]	; 0x54
 800cdec:	e003      	b.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ce02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ce06:	2300      	movs	r3, #0
 800ce08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ce0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4313      	orrs	r3, r2
 800ce14:	d058      	beq.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ce16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ce22:	d033      	beq.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ce24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ce28:	d82c      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ce2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce2e:	d02f      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ce30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce34:	d826      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ce36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce3a:	d02b      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ce3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce40:	d820      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ce42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce46:	d012      	beq.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ce48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce4c:	d81a      	bhi.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d022      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ce52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce56:	d115      	bne.n	800ce84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	2100      	movs	r1, #0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f001 fd29 	bl	800e8b8 <RCCEx_PLL2_Config>
 800ce66:	4603      	mov	r3, r0
 800ce68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce6c:	e015      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce72:	3328      	adds	r3, #40	; 0x28
 800ce74:	2102      	movs	r1, #2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f001 fdd0 	bl	800ea1c <RCCEx_PLL3_Config>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce82:	e00a      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce84:	2301      	movs	r3, #1
 800ce86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce8a:	e006      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ce8c:	bf00      	nop
 800ce8e:	e004      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ce90:	bf00      	nop
 800ce92:	e002      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ce94:	bf00      	nop
 800ce96:	e000      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ce98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10e      	bne.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cea2:	4b06      	ldr	r3, [pc, #24]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cea6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ceaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ceb2:	4a02      	ldr	r2, [pc, #8]	; (800cebc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ceb4:	430b      	orrs	r3, r1
 800ceb6:	6593      	str	r3, [r2, #88]	; 0x58
 800ceb8:	e006      	b.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ceba:	bf00      	nop
 800cebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ced4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ced8:	2300      	movs	r3, #0
 800ceda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cede:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cee2:	460b      	mov	r3, r1
 800cee4:	4313      	orrs	r3, r2
 800cee6:	d055      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ceec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cef0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cef4:	d033      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800cef6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cefa:	d82c      	bhi.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cefc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf00:	d02f      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800cf02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf06:	d826      	bhi.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cf08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cf0c:	d02b      	beq.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800cf0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cf12:	d820      	bhi.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cf14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf18:	d012      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800cf1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf1e:	d81a      	bhi.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d022      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800cf24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf28:	d115      	bne.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf2e:	3308      	adds	r3, #8
 800cf30:	2100      	movs	r1, #0
 800cf32:	4618      	mov	r0, r3
 800cf34:	f001 fcc0 	bl	800e8b8 <RCCEx_PLL2_Config>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf3e:	e015      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf44:	3328      	adds	r3, #40	; 0x28
 800cf46:	2102      	movs	r1, #2
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f001 fd67 	bl	800ea1c <RCCEx_PLL3_Config>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf54:	e00a      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cf5c:	e006      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800cf5e:	bf00      	nop
 800cf60:	e004      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800cf62:	bf00      	nop
 800cf64:	e002      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800cf66:	bf00      	nop
 800cf68:	e000      	b.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800cf6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10b      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cf74:	4ba1      	ldr	r3, [pc, #644]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cf76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf78:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800cf7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf84:	4a9d      	ldr	r2, [pc, #628]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cf86:	430b      	orrs	r3, r1
 800cf88:	6593      	str	r3, [r2, #88]	; 0x58
 800cf8a:	e003      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cf94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f002 0308 	and.w	r3, r2, #8
 800cfa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cfaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	d01e      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800cfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfc0:	d10c      	bne.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cfc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfc6:	3328      	adds	r3, #40	; 0x28
 800cfc8:	2102      	movs	r1, #2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f001 fd26 	bl	800ea1c <RCCEx_PLL3_Config>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d002      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cfdc:	4b87      	ldr	r3, [pc, #540]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cfde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfec:	4a83      	ldr	r2, [pc, #524]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800cfee:	430b      	orrs	r3, r1
 800cff0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffa:	f002 0310 	and.w	r3, r2, #16
 800cffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d002:	2300      	movs	r3, #0
 800d004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d008:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d00c:	460b      	mov	r3, r1
 800d00e:	4313      	orrs	r3, r2
 800d010:	d01e      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d01e:	d10c      	bne.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d024:	3328      	adds	r3, #40	; 0x28
 800d026:	2102      	movs	r1, #2
 800d028:	4618      	mov	r0, r3
 800d02a:	f001 fcf7 	bl	800ea1c <RCCEx_PLL3_Config>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d03a:	4b70      	ldr	r3, [pc, #448]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d03e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d04a:	4a6c      	ldr	r2, [pc, #432]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d04c:	430b      	orrs	r3, r1
 800d04e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d05c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d060:	2300      	movs	r3, #0
 800d062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d066:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d06a:	460b      	mov	r3, r1
 800d06c:	4313      	orrs	r3, r2
 800d06e:	d03e      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d07c:	d022      	beq.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d07e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d082:	d81b      	bhi.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d08c:	d00b      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d08e:	e015      	b.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d094:	3308      	adds	r3, #8
 800d096:	2100      	movs	r1, #0
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 fc0d 	bl	800e8b8 <RCCEx_PLL2_Config>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0a4:	e00f      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0aa:	3328      	adds	r3, #40	; 0x28
 800d0ac:	2102      	movs	r1, #2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f001 fcb4 	bl	800ea1c <RCCEx_PLL3_Config>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0ba:	e004      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d0c2:	e000      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10b      	bne.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0ce:	4b4b      	ldr	r3, [pc, #300]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0de:	4a47      	ldr	r2, [pc, #284]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	6593      	str	r3, [r2, #88]	; 0x58
 800d0e4:	e003      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d0ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d0fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d100:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d104:	460b      	mov	r3, r1
 800d106:	4313      	orrs	r3, r2
 800d108:	d03b      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d112:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d116:	d01f      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d11c:	d818      	bhi.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d11e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d122:	d003      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d128:	d007      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d12a:	e011      	b.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d12c:	4b33      	ldr	r3, [pc, #204]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	4a32      	ldr	r2, [pc, #200]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d138:	e00f      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d13e:	3328      	adds	r3, #40	; 0x28
 800d140:	2101      	movs	r1, #1
 800d142:	4618      	mov	r0, r3
 800d144:	f001 fc6a 	bl	800ea1c <RCCEx_PLL3_Config>
 800d148:	4603      	mov	r3, r0
 800d14a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d14e:	e004      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d156:	e000      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10b      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d162:	4b26      	ldr	r3, [pc, #152]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d166:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d172:	4a22      	ldr	r2, [pc, #136]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d174:	430b      	orrs	r3, r1
 800d176:	6553      	str	r3, [r2, #84]	; 0x54
 800d178:	e003      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d17a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d17e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d18e:	673b      	str	r3, [r7, #112]	; 0x70
 800d190:	2300      	movs	r3, #0
 800d192:	677b      	str	r3, [r7, #116]	; 0x74
 800d194:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d198:	460b      	mov	r3, r1
 800d19a:	4313      	orrs	r3, r2
 800d19c:	d034      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ac:	d007      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d1ae:	e011      	b.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b4:	4a11      	ldr	r2, [pc, #68]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1bc:	e00e      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f001 fb76 	bl	800e8b8 <RCCEx_PLL2_Config>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1d2:	e003      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10d      	bne.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1f2:	4a02      	ldr	r2, [pc, #8]	; (800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d1f4:	430b      	orrs	r3, r1
 800d1f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d1f8:	e006      	b.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d1fa:	bf00      	nop
 800d1fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d214:	66bb      	str	r3, [r7, #104]	; 0x68
 800d216:	2300      	movs	r3, #0
 800d218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d21a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d21e:	460b      	mov	r3, r1
 800d220:	4313      	orrs	r3, r2
 800d222:	d00c      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d228:	3328      	adds	r3, #40	; 0x28
 800d22a:	2102      	movs	r1, #2
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fbf5 	bl	800ea1c <RCCEx_PLL3_Config>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d24a:	663b      	str	r3, [r7, #96]	; 0x60
 800d24c:	2300      	movs	r3, #0
 800d24e:	667b      	str	r3, [r7, #100]	; 0x64
 800d250:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d254:	460b      	mov	r3, r1
 800d256:	4313      	orrs	r3, r2
 800d258:	d038      	beq.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d266:	d018      	beq.n	800d29a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d26c:	d811      	bhi.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d272:	d014      	beq.n	800d29e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d278:	d80b      	bhi.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d011      	beq.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d282:	d106      	bne.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d284:	4bc3      	ldr	r3, [pc, #780]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	4ac2      	ldr	r2, [pc, #776]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d28e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d290:	e008      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d298:	e004      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d29a:	bf00      	nop
 800d29c:	e002      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d2a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10b      	bne.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d2ac:	4bb9      	ldr	r3, [pc, #740]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2bc:	4ab5      	ldr	r2, [pc, #724]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d2be:	430b      	orrs	r3, r1
 800d2c0:	6553      	str	r3, [r2, #84]	; 0x54
 800d2c2:	e003      	b.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d2d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2da:	2300      	movs	r3, #0
 800d2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	d009      	beq.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d2e8:	4baa      	ldr	r3, [pc, #680]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2f6:	4aa7      	ldr	r2, [pc, #668]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d2f8:	430b      	orrs	r3, r1
 800d2fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800d308:	653b      	str	r3, [r7, #80]	; 0x50
 800d30a:	2300      	movs	r3, #0
 800d30c:	657b      	str	r3, [r7, #84]	; 0x54
 800d30e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d312:	460b      	mov	r3, r1
 800d314:	4313      	orrs	r3, r2
 800d316:	d00a      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d318:	4b9e      	ldr	r3, [pc, #632]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800d320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d328:	4a9a      	ldr	r2, [pc, #616]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d32a:	430b      	orrs	r3, r1
 800d32c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d33a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d33c:	2300      	movs	r3, #0
 800d33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d340:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d344:	460b      	mov	r3, r1
 800d346:	4313      	orrs	r3, r2
 800d348:	d009      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d34a:	4b92      	ldr	r3, [pc, #584]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d34e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	4a8e      	ldr	r2, [pc, #568]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d35a:	430b      	orrs	r3, r1
 800d35c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d36a:	643b      	str	r3, [r7, #64]	; 0x40
 800d36c:	2300      	movs	r3, #0
 800d36e:	647b      	str	r3, [r7, #68]	; 0x44
 800d370:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d374:	460b      	mov	r3, r1
 800d376:	4313      	orrs	r3, r2
 800d378:	d00e      	beq.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d37a:	4b86      	ldr	r3, [pc, #536]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	4a85      	ldr	r2, [pc, #532]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d384:	6113      	str	r3, [r2, #16]
 800d386:	4b83      	ldr	r3, [pc, #524]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d388:	6919      	ldr	r1, [r3, #16]
 800d38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d38e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d392:	4a80      	ldr	r2, [pc, #512]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d394:	430b      	orrs	r3, r1
 800d396:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d3a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	d009      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d3b4:	4b77      	ldr	r3, [pc, #476]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3c2:	4a74      	ldr	r2, [pc, #464]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3c4:	430b      	orrs	r3, r1
 800d3c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d3d4:	633b      	str	r3, [r7, #48]	; 0x30
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	d00a      	beq.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d3e4:	4b6b      	ldr	r3, [pc, #428]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f4:	4a67      	ldr	r2, [pc, #412]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d3f6:	430b      	orrs	r3, r1
 800d3f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	2100      	movs	r1, #0
 800d404:	62b9      	str	r1, [r7, #40]	; 0x28
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d40c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d410:	460b      	mov	r3, r1
 800d412:	4313      	orrs	r3, r2
 800d414:	d011      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d41a:	3308      	adds	r3, #8
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 fa4a 	bl	800e8b8 <RCCEx_PLL2_Config>
 800d424:	4603      	mov	r3, r0
 800d426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	2100      	movs	r1, #0
 800d444:	6239      	str	r1, [r7, #32]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	627b      	str	r3, [r7, #36]	; 0x24
 800d44c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d450:	460b      	mov	r3, r1
 800d452:	4313      	orrs	r3, r2
 800d454:	d011      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d45a:	3308      	adds	r3, #8
 800d45c:	2101      	movs	r1, #1
 800d45e:	4618      	mov	r0, r3
 800d460:	f001 fa2a 	bl	800e8b8 <RCCEx_PLL2_Config>
 800d464:	4603      	mov	r3, r0
 800d466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	2100      	movs	r1, #0
 800d484:	61b9      	str	r1, [r7, #24]
 800d486:	f003 0304 	and.w	r3, r3, #4
 800d48a:	61fb      	str	r3, [r7, #28]
 800d48c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d490:	460b      	mov	r3, r1
 800d492:	4313      	orrs	r3, r2
 800d494:	d011      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d49a:	3308      	adds	r3, #8
 800d49c:	2102      	movs	r1, #2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 fa0a 	bl	800e8b8 <RCCEx_PLL2_Config>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d4aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	6139      	str	r1, [r7, #16]
 800d4c6:	f003 0308 	and.w	r3, r3, #8
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	d011      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4da:	3328      	adds	r3, #40	; 0x28
 800d4dc:	2100      	movs	r1, #0
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f001 fa9c 	bl	800ea1c <RCCEx_PLL3_Config>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800d4ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d502:	2100      	movs	r1, #0
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	f003 0310 	and.w	r3, r3, #16
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d510:	460b      	mov	r3, r1
 800d512:	4313      	orrs	r3, r2
 800d514:	d011      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d51a:	3328      	adds	r3, #40	; 0x28
 800d51c:	2101      	movs	r1, #1
 800d51e:	4618      	mov	r0, r3
 800d520:	f001 fa7c 	bl	800ea1c <RCCEx_PLL3_Config>
 800d524:	4603      	mov	r3, r0
 800d526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d52a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	2100      	movs	r1, #0
 800d544:	6039      	str	r1, [r7, #0]
 800d546:	f003 0320 	and.w	r3, r3, #32
 800d54a:	607b      	str	r3, [r7, #4]
 800d54c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d550:	460b      	mov	r3, r1
 800d552:	4313      	orrs	r3, r2
 800d554:	d011      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d55a:	3328      	adds	r3, #40	; 0x28
 800d55c:	2102      	movs	r1, #2
 800d55e:	4618      	mov	r0, r3
 800d560:	f001 fa5c 	bl	800ea1c <RCCEx_PLL3_Config>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800d56a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800d57a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d101      	bne.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	e000      	b.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
}
 800d588:	4618      	mov	r0, r3
 800d58a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800d58e:	46bd      	mov	sp, r7
 800d590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d594:	58024400 	.word	0x58024400

0800d598 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b090      	sub	sp, #64	; 0x40
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d5a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	f040 8094 	bne.w	800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d5b0:	4b9e      	ldr	r3, [pc, #632]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5b4:	f003 0307 	and.w	r3, r3, #7
 800d5b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	2b04      	cmp	r3, #4
 800d5be:	f200 8087 	bhi.w	800d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d5c2:	a201      	add	r2, pc, #4	; (adr r2, 800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5dd 	.word	0x0800d5dd
 800d5cc:	0800d605 	.word	0x0800d605
 800d5d0:	0800d62d 	.word	0x0800d62d
 800d5d4:	0800d6c9 	.word	0x0800d6c9
 800d5d8:	0800d655 	.word	0x0800d655
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5dc:	4b93      	ldr	r3, [pc, #588]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5e8:	d108      	bne.n	800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f001 f810 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5f8:	f000 bd45 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d600:	f000 bd41 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d604:	4b89      	ldr	r3, [pc, #548]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d60c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d610:	d108      	bne.n	800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d612:	f107 0318 	add.w	r3, r7, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fd54 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d620:	f000 bd31 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d628:	f000 bd2d 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d62c:	4b7f      	ldr	r3, [pc, #508]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d638:	d108      	bne.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d63a:	f107 030c 	add.w	r3, r7, #12
 800d63e:	4618      	mov	r0, r3
 800d640:	f000 fe94 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d648:	f000 bd1d 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d650:	f000 bd19 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d654:	4b75      	ldr	r3, [pc, #468]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d65c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d65e:	4b73      	ldr	r3, [pc, #460]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f003 0304 	and.w	r3, r3, #4
 800d666:	2b04      	cmp	r3, #4
 800d668:	d10c      	bne.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d109      	bne.n	800d684 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d670:	4b6e      	ldr	r3, [pc, #440]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	08db      	lsrs	r3, r3, #3
 800d676:	f003 0303 	and.w	r3, r3, #3
 800d67a:	4a6d      	ldr	r2, [pc, #436]	; (800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d67c:	fa22 f303 	lsr.w	r3, r2, r3
 800d680:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d682:	e01f      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d684:	4b69      	ldr	r3, [pc, #420]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d690:	d106      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d698:	d102      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d69a:	4b66      	ldr	r3, [pc, #408]	; (800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d69e:	e011      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d6a0:	4b62      	ldr	r3, [pc, #392]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6ac:	d106      	bne.n	800d6bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6b4:	d102      	bne.n	800d6bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d6b6:	4b60      	ldr	r3, [pc, #384]	; (800d838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6ba:	e003      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d6c0:	f000 bce1 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d6c4:	f000 bcdf 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d6c8:	4b5c      	ldr	r3, [pc, #368]	; (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6cc:	f000 bcdb 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6d4:	f000 bcd7 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6dc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	f040 80ad 	bne.w	800d840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d6e6:	4b51      	ldr	r3, [pc, #324]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800d6ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6f6:	d056      	beq.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fe:	f200 8090 	bhi.w	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	2bc0      	cmp	r3, #192	; 0xc0
 800d706:	f000 8088 	beq.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	2bc0      	cmp	r3, #192	; 0xc0
 800d70e:	f200 8088 	bhi.w	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	2b80      	cmp	r3, #128	; 0x80
 800d716:	d032      	beq.n	800d77e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	2b80      	cmp	r3, #128	; 0x80
 800d71c:	f200 8081 	bhi.w	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	2b00      	cmp	r3, #0
 800d724:	d003      	beq.n	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	2b40      	cmp	r3, #64	; 0x40
 800d72a:	d014      	beq.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800d72c:	e079      	b.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d72e:	4b3f      	ldr	r3, [pc, #252]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d73a:	d108      	bne.n	800d74e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d73c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d740:	4618      	mov	r0, r3
 800d742:	f000 ff67 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d74a:	f000 bc9c 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d74e:	2300      	movs	r3, #0
 800d750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d752:	f000 bc98 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d756:	4b35      	ldr	r3, [pc, #212]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d75e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d762:	d108      	bne.n	800d776 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d764:	f107 0318 	add.w	r3, r7, #24
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fcab 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d772:	f000 bc88 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d776:	2300      	movs	r3, #0
 800d778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d77a:	f000 bc84 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d77e:	4b2b      	ldr	r3, [pc, #172]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d78a:	d108      	bne.n	800d79e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d78c:	f107 030c 	add.w	r3, r7, #12
 800d790:	4618      	mov	r0, r3
 800d792:	f000 fdeb 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d79a:	f000 bc74 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a2:	f000 bc70 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7a6:	4b21      	ldr	r3, [pc, #132]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d7ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7b0:	4b1e      	ldr	r3, [pc, #120]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 0304 	and.w	r3, r3, #4
 800d7b8:	2b04      	cmp	r3, #4
 800d7ba:	d10c      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800d7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d109      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7c2:	4b1a      	ldr	r3, [pc, #104]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	08db      	lsrs	r3, r3, #3
 800d7c8:	f003 0303 	and.w	r3, r3, #3
 800d7cc:	4a18      	ldr	r2, [pc, #96]	; (800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7d4:	e01f      	b.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7d6:	4b15      	ldr	r3, [pc, #84]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7e2:	d106      	bne.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7ea:	d102      	bne.n	800d7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d7ec:	4b11      	ldr	r3, [pc, #68]	; (800d834 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800d7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7f0:	e011      	b.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7f2:	4b0e      	ldr	r3, [pc, #56]	; (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d7fe:	d106      	bne.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800d800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d806:	d102      	bne.n	800d80e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d808:	4b0b      	ldr	r3, [pc, #44]	; (800d838 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d80c:	e003      	b.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d812:	f000 bc38 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d816:	f000 bc36 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d81a:	4b08      	ldr	r3, [pc, #32]	; (800d83c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800d81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d81e:	f000 bc32 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d826:	f000 bc2e 	b.w	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d82a:	bf00      	nop
 800d82c:	58024400 	.word	0x58024400
 800d830:	03d09000 	.word	0x03d09000
 800d834:	003d0900 	.word	0x003d0900
 800d838:	007a1200 	.word	0x007a1200
 800d83c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d844:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800d848:	430b      	orrs	r3, r1
 800d84a:	f040 809c 	bne.w	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d84e:	4b9e      	ldr	r3, [pc, #632]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d852:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d856:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d85e:	d054      	beq.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d866:	f200 808b 	bhi.w	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d870:	f000 8083 	beq.w	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d87a:	f200 8081 	bhi.w	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d884:	d02f      	beq.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d88c:	d878      	bhi.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	2b00      	cmp	r3, #0
 800d892:	d004      	beq.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d89a:	d012      	beq.n	800d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800d89c:	e070      	b.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d89e:	4b8a      	ldr	r3, [pc, #552]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8aa:	d107      	bne.n	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 feaf 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8ba:	e3e4      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8c0:	e3e1      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8c2:	4b81      	ldr	r3, [pc, #516]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d8ce:	d107      	bne.n	800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8d0:	f107 0318 	add.w	r3, r7, #24
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fbf5 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8de:	e3d2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8e4:	e3cf      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8e6:	4b78      	ldr	r3, [pc, #480]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8f2:	d107      	bne.n	800d904 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8f4:	f107 030c 	add.w	r3, r7, #12
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fd37 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d902:	e3c0      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d908:	e3bd      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d90a:	4b6f      	ldr	r3, [pc, #444]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d912:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d914:	4b6c      	ldr	r3, [pc, #432]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 0304 	and.w	r3, r3, #4
 800d91c:	2b04      	cmp	r3, #4
 800d91e:	d10c      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800d920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d926:	4b68      	ldr	r3, [pc, #416]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	08db      	lsrs	r3, r3, #3
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	4a66      	ldr	r2, [pc, #408]	; (800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d932:	fa22 f303 	lsr.w	r3, r2, r3
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d938:	e01e      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d93a:	4b63      	ldr	r3, [pc, #396]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d946:	d106      	bne.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800d948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d94a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d94e:	d102      	bne.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d950:	4b5f      	ldr	r3, [pc, #380]	; (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800d952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d954:	e010      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d956:	4b5c      	ldr	r3, [pc, #368]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d962:	d106      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800d964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d96a:	d102      	bne.n	800d972 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d96c:	4b59      	ldr	r3, [pc, #356]	; (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800d96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d970:	e002      	b.n	800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d976:	e386      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d978:	e385      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d97a:	4b57      	ldr	r3, [pc, #348]	; (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d97e:	e382      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d984:	e37f      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d98a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800d98e:	430b      	orrs	r3, r1
 800d990:	f040 80a7 	bne.w	800dae2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d994:	4b4c      	ldr	r3, [pc, #304]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d998:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d99c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9a4:	d055      	beq.n	800da52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9ac:	f200 8096 	bhi.w	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d9b6:	f000 8084 	beq.w	800dac2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d9c0:	f200 808c 	bhi.w	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9ca:	d030      	beq.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9d2:	f200 8083 	bhi.w	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d004      	beq.n	800d9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d9e2:	d012      	beq.n	800da0a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800d9e4:	e07a      	b.n	800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9e6:	4b38      	ldr	r3, [pc, #224]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9f2:	d107      	bne.n	800da04 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 fe0b 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da02:	e340      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da08:	e33d      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da0a:	4b2f      	ldr	r3, [pc, #188]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da16:	d107      	bne.n	800da28 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da18:	f107 0318 	add.w	r3, r7, #24
 800da1c:	4618      	mov	r0, r3
 800da1e:	f000 fb51 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da26:	e32e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da2c:	e32b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da2e:	4b26      	ldr	r3, [pc, #152]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da3a:	d107      	bne.n	800da4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da3c:	f107 030c 	add.w	r3, r7, #12
 800da40:	4618      	mov	r0, r3
 800da42:	f000 fc93 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da4a:	e31c      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da50:	e319      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800da52:	4b1d      	ldr	r3, [pc, #116]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800da5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da5c:	4b1a      	ldr	r3, [pc, #104]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0304 	and.w	r3, r3, #4
 800da64:	2b04      	cmp	r3, #4
 800da66:	d10c      	bne.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800da68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da6e:	4b16      	ldr	r3, [pc, #88]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	08db      	lsrs	r3, r3, #3
 800da74:	f003 0303 	and.w	r3, r3, #3
 800da78:	4a14      	ldr	r2, [pc, #80]	; (800dacc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800da7a:	fa22 f303 	lsr.w	r3, r2, r3
 800da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da80:	e01e      	b.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da82:	4b11      	ldr	r3, [pc, #68]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da8e:	d106      	bne.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800da90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da96:	d102      	bne.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800da98:	4b0d      	ldr	r3, [pc, #52]	; (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800da9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da9c:	e010      	b.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da9e:	4b0a      	ldr	r3, [pc, #40]	; (800dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800daaa:	d106      	bne.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800daac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dab2:	d102      	bne.n	800daba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dab4:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dab8:	e002      	b.n	800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dabe:	e2e2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dac0:	e2e1      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dac6:	e2de      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dac8:	58024400 	.word	0x58024400
 800dacc:	03d09000 	.word	0x03d09000
 800dad0:	003d0900 	.word	0x003d0900
 800dad4:	007a1200 	.word	0x007a1200
 800dad8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dae0:	e2d1      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800dae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dae6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800daea:	430b      	orrs	r3, r1
 800daec:	f040 809c 	bne.w	800dc28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800daf0:	4b93      	ldr	r3, [pc, #588]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800daf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800daf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db00:	d054      	beq.n	800dbac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db08:	f200 808b 	bhi.w	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db12:	f000 8083 	beq.w	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800db16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db1c:	f200 8081 	bhi.w	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db26:	d02f      	beq.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db2e:	d878      	bhi.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	2b00      	cmp	r3, #0
 800db34:	d004      	beq.n	800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800db36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db3c:	d012      	beq.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800db3e:	e070      	b.n	800dc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db40:	4b7f      	ldr	r3, [pc, #508]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db4c:	d107      	bne.n	800db5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db52:	4618      	mov	r0, r3
 800db54:	f000 fd5e 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db5c:	e293      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db62:	e290      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db64:	4b76      	ldr	r3, [pc, #472]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db70:	d107      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db72:	f107 0318 	add.w	r3, r7, #24
 800db76:	4618      	mov	r0, r3
 800db78:	f000 faa4 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db80:	e281      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db86:	e27e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db88:	4b6d      	ldr	r3, [pc, #436]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db94:	d107      	bne.n	800dba6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db96:	f107 030c 	add.w	r3, r7, #12
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 fbe6 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dba4:	e26f      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbaa:	e26c      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dbac:	4b64      	ldr	r3, [pc, #400]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dbb6:	4b62      	ldr	r3, [pc, #392]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 0304 	and.w	r3, r3, #4
 800dbbe:	2b04      	cmp	r3, #4
 800dbc0:	d10c      	bne.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800dbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d109      	bne.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dbc8:	4b5d      	ldr	r3, [pc, #372]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	08db      	lsrs	r3, r3, #3
 800dbce:	f003 0303 	and.w	r3, r3, #3
 800dbd2:	4a5c      	ldr	r2, [pc, #368]	; (800dd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800dbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800dbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbda:	e01e      	b.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dbdc:	4b58      	ldr	r3, [pc, #352]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbe8:	d106      	bne.n	800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800dbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbf0:	d102      	bne.n	800dbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dbf2:	4b55      	ldr	r3, [pc, #340]	; (800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800dbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbf6:	e010      	b.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dbf8:	4b51      	ldr	r3, [pc, #324]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc04:	d106      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800dc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc0c:	d102      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc0e:	4b4f      	ldr	r3, [pc, #316]	; (800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800dc10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc12:	e002      	b.n	800dc1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dc18:	e235      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dc1a:	e234      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc1c:	4b4c      	ldr	r3, [pc, #304]	; (800dd50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800dc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc20:	e231      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc26:	e22e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800dc28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc2c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800dc30:	430b      	orrs	r3, r1
 800dc32:	f040 808f 	bne.w	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dc36:	4b42      	ldr	r3, [pc, #264]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dc3e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc46:	d06b      	beq.n	800dd20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc4e:	d874      	bhi.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc56:	d056      	beq.n	800dd06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc5e:	d86c      	bhi.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc66:	d03b      	beq.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc6e:	d864      	bhi.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc76:	d021      	beq.n	800dcbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc7e:	d85c      	bhi.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800dc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d004      	beq.n	800dc90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc8c:	d004      	beq.n	800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800dc8e:	e054      	b.n	800dd3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800dc90:	f7fe fa4c 	bl	800c12c <HAL_RCC_GetPCLK1Freq>
 800dc94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dc96:	e1f6      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc98:	4b29      	ldr	r3, [pc, #164]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dca4:	d107      	bne.n	800dcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dca6:	f107 0318 	add.w	r3, r7, #24
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 fa0a 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcb4:	e1e7      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcba:	e1e4      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcbc:	4b20      	ldr	r3, [pc, #128]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc8:	d107      	bne.n	800dcda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcca:	f107 030c 	add.w	r3, r7, #12
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f000 fb4c 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcd8:	e1d5      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcde:	e1d2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dce0:	4b17      	ldr	r3, [pc, #92]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f003 0304 	and.w	r3, r3, #4
 800dce8:	2b04      	cmp	r3, #4
 800dcea:	d109      	bne.n	800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dcec:	4b14      	ldr	r3, [pc, #80]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	08db      	lsrs	r3, r3, #3
 800dcf2:	f003 0303 	and.w	r3, r3, #3
 800dcf6:	4a13      	ldr	r2, [pc, #76]	; (800dd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800dcf8:	fa22 f303 	lsr.w	r3, r2, r3
 800dcfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcfe:	e1c2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd04:	e1bf      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd12:	d102      	bne.n	800dd1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800dd14:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800dd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd18:	e1b5      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd1e:	e1b2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd20:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd2c:	d102      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800dd2e:	4b07      	ldr	r3, [pc, #28]	; (800dd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800dd30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd32:	e1a8      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd38:	e1a5      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd3e:	e1a2      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dd40:	58024400 	.word	0x58024400
 800dd44:	03d09000 	.word	0x03d09000
 800dd48:	003d0900 	.word	0x003d0900
 800dd4c:	007a1200 	.word	0x007a1200
 800dd50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800dd54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd58:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800dd5c:	430b      	orrs	r3, r1
 800dd5e:	d173      	bne.n	800de48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800dd60:	4b9c      	ldr	r3, [pc, #624]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dd62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800dd68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd70:	d02f      	beq.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800dd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd78:	d863      	bhi.n	800de42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800dd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd86:	d012      	beq.n	800ddae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800dd88:	e05b      	b.n	800de42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dd8a:	4b92      	ldr	r3, [pc, #584]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd96:	d107      	bne.n	800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd98:	f107 0318 	add.w	r3, r7, #24
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f991 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dda6:	e16e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddac:	e16b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ddae:	4b89      	ldr	r3, [pc, #548]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ddba:	d107      	bne.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddbc:	f107 030c 	add.w	r3, r7, #12
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f000 fad3 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddca:	e15c      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd0:	e159      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ddd2:	4b80      	ldr	r3, [pc, #512]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ddd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ddda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dddc:	4b7d      	ldr	r3, [pc, #500]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b04      	cmp	r3, #4
 800dde6:	d10c      	bne.n	800de02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800dde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddee:	4b79      	ldr	r3, [pc, #484]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	08db      	lsrs	r3, r3, #3
 800ddf4:	f003 0303 	and.w	r3, r3, #3
 800ddf8:	4a77      	ldr	r2, [pc, #476]	; (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ddfa:	fa22 f303 	lsr.w	r3, r2, r3
 800ddfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de00:	e01e      	b.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de02:	4b74      	ldr	r3, [pc, #464]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de0e:	d106      	bne.n	800de1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800de10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de16:	d102      	bne.n	800de1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800de18:	4b70      	ldr	r3, [pc, #448]	; (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de1c:	e010      	b.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de1e:	4b6d      	ldr	r3, [pc, #436]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de2a:	d106      	bne.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800de2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de32:	d102      	bne.n	800de3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800de34:	4b6a      	ldr	r3, [pc, #424]	; (800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800de36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de38:	e002      	b.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800de3e:	e122      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800de40:	e121      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de46:	e11e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800de48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de4c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800de50:	430b      	orrs	r3, r1
 800de52:	d133      	bne.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800de54:	4b5f      	ldr	r3, [pc, #380]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800de5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de60:	2b00      	cmp	r3, #0
 800de62:	d004      	beq.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de6a:	d012      	beq.n	800de92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800de6c:	e023      	b.n	800deb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de6e:	4b59      	ldr	r3, [pc, #356]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de7a:	d107      	bne.n	800de8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de80:	4618      	mov	r0, r3
 800de82:	f000 fbc7 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de8a:	e0fc      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de90:	e0f9      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de92:	4b50      	ldr	r3, [pc, #320]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de9e:	d107      	bne.n	800deb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dea0:	f107 0318 	add.w	r3, r7, #24
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f90d 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deae:	e0ea      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb4:	e0e7      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deba:	e0e4      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800debc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800dec4:	430b      	orrs	r3, r1
 800dec6:	f040 808d 	bne.w	800dfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800deca:	4b42      	ldr	r3, [pc, #264]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800decc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dece:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ded2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800deda:	d06b      	beq.n	800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800dedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dee2:	d874      	bhi.n	800dfce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800deea:	d056      	beq.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800deec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800def2:	d86c      	bhi.n	800dfce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800defa:	d03b      	beq.n	800df74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800df02:	d864      	bhi.n	800dfce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df0a:	d021      	beq.n	800df50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df12:	d85c      	bhi.n	800dfce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800df14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df16:	2b00      	cmp	r3, #0
 800df18:	d004      	beq.n	800df24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df20:	d004      	beq.n	800df2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800df22:	e054      	b.n	800dfce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800df24:	f000 f8b8 	bl	800e098 <HAL_RCCEx_GetD3PCLK1Freq>
 800df28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df2a:	e0ac      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df2c:	4b29      	ldr	r3, [pc, #164]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df38:	d107      	bne.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df3a:	f107 0318 	add.w	r3, r7, #24
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f8c0 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df48:	e09d      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df4a:	2300      	movs	r3, #0
 800df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4e:	e09a      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df50:	4b20      	ldr	r3, [pc, #128]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df5c:	d107      	bne.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df5e:	f107 030c 	add.w	r3, r7, #12
 800df62:	4618      	mov	r0, r3
 800df64:	f000 fa02 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df6c:	e08b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df72:	e088      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800df74:	4b17      	ldr	r3, [pc, #92]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 0304 	and.w	r3, r3, #4
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d109      	bne.n	800df94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df80:	4b14      	ldr	r3, [pc, #80]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	08db      	lsrs	r3, r3, #3
 800df86:	f003 0303 	and.w	r3, r3, #3
 800df8a:	4a13      	ldr	r2, [pc, #76]	; (800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800df8c:	fa22 f303 	lsr.w	r3, r2, r3
 800df90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df92:	e078      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df98:	e075      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800df9a:	4b0e      	ldr	r3, [pc, #56]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfa6:	d102      	bne.n	800dfae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800dfa8:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfac:	e06b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfb2:	e068      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dfb4:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfc0:	d102      	bne.n	800dfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800dfc2:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800dfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfc6:	e05e      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfcc:	e05b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfd2:	e058      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800dfd4:	58024400 	.word	0x58024400
 800dfd8:	03d09000 	.word	0x03d09000
 800dfdc:	003d0900 	.word	0x003d0900
 800dfe0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800dfe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfe8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800dfec:	430b      	orrs	r3, r1
 800dfee:	d148      	bne.n	800e082 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800dff0:	4b27      	ldr	r3, [pc, #156]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800dff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dff8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e000:	d02a      	beq.n	800e058 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e008:	d838      	bhi.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d004      	beq.n	800e01a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e016:	d00d      	beq.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800e018:	e030      	b.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e01a:	4b1d      	ldr	r3, [pc, #116]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e026:	d102      	bne.n	800e02e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e02c:	e02b      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e032:	e028      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e034:	4b16      	ldr	r3, [pc, #88]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e03c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e040:	d107      	bne.n	800e052 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e046:	4618      	mov	r0, r3
 800e048:	f000 fae4 	bl	800e614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e050:	e019      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e056:	e016      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e058:	4b0d      	ldr	r3, [pc, #52]	; (800e090 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e064:	d107      	bne.n	800e076 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e066:	f107 0318 	add.w	r3, r7, #24
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f82a 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e074:	e007      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e07a:	e004      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e080:	e001      	b.n	800e086 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800e082:	2300      	movs	r3, #0
 800e084:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3740      	adds	r7, #64	; 0x40
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	58024400 	.word	0x58024400
 800e094:	007a1200 	.word	0x007a1200

0800e098 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e09c:	f7fe f816 	bl	800c0cc <HAL_RCC_GetHCLKFreq>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	091b      	lsrs	r3, r3, #4
 800e0a8:	f003 0307 	and.w	r3, r3, #7
 800e0ac:	4904      	ldr	r1, [pc, #16]	; (800e0c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e0ae:	5ccb      	ldrb	r3, [r1, r3]
 800e0b0:	f003 031f 	and.w	r3, r3, #31
 800e0b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	58024400 	.word	0x58024400
 800e0c0:	0801ad50 	.word	0x0801ad50

0800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b089      	sub	sp, #36	; 0x24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e0cc:	4ba1      	ldr	r3, [pc, #644]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d0:	f003 0303 	and.w	r3, r3, #3
 800e0d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e0d6:	4b9f      	ldr	r3, [pc, #636]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0da:	0b1b      	lsrs	r3, r3, #12
 800e0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e0e2:	4b9c      	ldr	r3, [pc, #624]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e6:	091b      	lsrs	r3, r3, #4
 800e0e8:	f003 0301 	and.w	r3, r3, #1
 800e0ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e0ee:	4b99      	ldr	r3, [pc, #612]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f2:	08db      	lsrs	r3, r3, #3
 800e0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 8111 	beq.w	800e334 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b02      	cmp	r3, #2
 800e116:	f000 8083 	beq.w	800e220 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	f200 80a1 	bhi.w	800e264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d056      	beq.n	800e1dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e12e:	e099      	b.n	800e264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e130:	4b88      	ldr	r3, [pc, #544]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0320 	and.w	r3, r3, #32
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d02d      	beq.n	800e198 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e13c:	4b85      	ldr	r3, [pc, #532]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	08db      	lsrs	r3, r3, #3
 800e142:	f003 0303 	and.w	r3, r3, #3
 800e146:	4a84      	ldr	r2, [pc, #528]	; (800e358 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e148:	fa22 f303 	lsr.w	r3, r2, r3
 800e14c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	ee07 3a90 	vmov	s15, r3
 800e154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e166:	4b7b      	ldr	r3, [pc, #492]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e16e:	ee07 3a90 	vmov	s15, r3
 800e172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e176:	ed97 6a03 	vldr	s12, [r7, #12]
 800e17a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e192:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e196:	e087      	b.n	800e2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	ee07 3a90 	vmov	s15, r3
 800e19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e360 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1aa:	4b6a      	ldr	r3, [pc, #424]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1b2:	ee07 3a90 	vmov	s15, r3
 800e1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1da:	e065      	b.n	800e2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	ee07 3a90 	vmov	s15, r3
 800e1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1ee:	4b59      	ldr	r3, [pc, #356]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f6:	ee07 3a90 	vmov	s15, r3
 800e1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e21e:	e043      	b.n	800e2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e232:	4b48      	ldr	r3, [pc, #288]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e242:	ed97 6a03 	vldr	s12, [r7, #12]
 800e246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e262:	e021      	b.n	800e2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e276:	4b37      	ldr	r3, [pc, #220]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e27e:	ee07 3a90 	vmov	s15, r3
 800e282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e286:	ed97 6a03 	vldr	s12, [r7, #12]
 800e28a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e35c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e2a8:	4b2a      	ldr	r3, [pc, #168]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ac:	0a5b      	lsrs	r3, r3, #9
 800e2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2ce:	ee17 2a90 	vmov	r2, s15
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e2d6:	4b1f      	ldr	r3, [pc, #124]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	0c1b      	lsrs	r3, r3, #16
 800e2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2e0:	ee07 3a90 	vmov	s15, r3
 800e2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2fc:	ee17 2a90 	vmov	r2, s15
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e304:	4b13      	ldr	r3, [pc, #76]	; (800e354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e308:	0e1b      	lsrs	r3, r3, #24
 800e30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e30e:	ee07 3a90 	vmov	s15, r3
 800e312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e32a:	ee17 2a90 	vmov	r2, s15
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e332:	e008      	b.n	800e346 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	609a      	str	r2, [r3, #8]
}
 800e346:	bf00      	nop
 800e348:	3724      	adds	r7, #36	; 0x24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	58024400 	.word	0x58024400
 800e358:	03d09000 	.word	0x03d09000
 800e35c:	46000000 	.word	0x46000000
 800e360:	4c742400 	.word	0x4c742400
 800e364:	4a742400 	.word	0x4a742400
 800e368:	4af42400 	.word	0x4af42400

0800e36c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b089      	sub	sp, #36	; 0x24
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e374:	4ba1      	ldr	r3, [pc, #644]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e37e:	4b9f      	ldr	r3, [pc, #636]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e382:	0d1b      	lsrs	r3, r3, #20
 800e384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e388:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e38a:	4b9c      	ldr	r3, [pc, #624]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e38e:	0a1b      	lsrs	r3, r3, #8
 800e390:	f003 0301 	and.w	r3, r3, #1
 800e394:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e396:	4b99      	ldr	r3, [pc, #612]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39a:	08db      	lsrs	r3, r3, #3
 800e39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	fb02 f303 	mul.w	r3, r2, r3
 800e3a6:	ee07 3a90 	vmov	s15, r3
 800e3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f000 8111 	beq.w	800e5dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	f000 8083 	beq.w	800e4c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	f200 80a1 	bhi.w	800e50c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d003      	beq.n	800e3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d056      	beq.n	800e484 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e3d6:	e099      	b.n	800e50c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3d8:	4b88      	ldr	r3, [pc, #544]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0320 	and.w	r3, r3, #32
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d02d      	beq.n	800e440 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3e4:	4b85      	ldr	r3, [pc, #532]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	08db      	lsrs	r3, r3, #3
 800e3ea:	f003 0303 	and.w	r3, r3, #3
 800e3ee:	4a84      	ldr	r2, [pc, #528]	; (800e600 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	ee07 3a90 	vmov	s15, r3
 800e3fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	ee07 3a90 	vmov	s15, r3
 800e406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e40e:	4b7b      	ldr	r3, [pc, #492]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e416:	ee07 3a90 	vmov	s15, r3
 800e41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e422:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e42e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e43a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e43e:	e087      	b.n	800e550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	ee07 3a90 	vmov	s15, r3
 800e446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e44a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e608 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e452:	4b6a      	ldr	r3, [pc, #424]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e45a:	ee07 3a90 	vmov	s15, r3
 800e45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e462:	ed97 6a03 	vldr	s12, [r7, #12]
 800e466:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e482:	e065      	b.n	800e550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	ee07 3a90 	vmov	s15, r3
 800e48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e48e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e496:	4b59      	ldr	r3, [pc, #356]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e4c6:	e043      	b.n	800e550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	ee07 3a90 	vmov	s15, r3
 800e4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4da:	4b48      	ldr	r3, [pc, #288]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4e2:	ee07 3a90 	vmov	s15, r3
 800e4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e50a:	e021      	b.n	800e550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	ee07 3a90 	vmov	s15, r3
 800e512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e51e:	4b37      	ldr	r3, [pc, #220]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e526:	ee07 3a90 	vmov	s15, r3
 800e52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e532:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e54e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e550:	4b2a      	ldr	r3, [pc, #168]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e554:	0a5b      	lsrs	r3, r3, #9
 800e556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e55a:	ee07 3a90 	vmov	s15, r3
 800e55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e56a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e56e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e576:	ee17 2a90 	vmov	r2, s15
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e57e:	4b1f      	ldr	r3, [pc, #124]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e582:	0c1b      	lsrs	r3, r3, #16
 800e584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e588:	ee07 3a90 	vmov	s15, r3
 800e58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e594:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e598:	edd7 6a07 	vldr	s13, [r7, #28]
 800e59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5a4:	ee17 2a90 	vmov	r2, s15
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e5ac:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b0:	0e1b      	lsrs	r3, r3, #24
 800e5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5b6:	ee07 3a90 	vmov	s15, r3
 800e5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5d2:	ee17 2a90 	vmov	r2, s15
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e5da:	e008      	b.n	800e5ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	609a      	str	r2, [r3, #8]
}
 800e5ee:	bf00      	nop
 800e5f0:	3724      	adds	r7, #36	; 0x24
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	58024400 	.word	0x58024400
 800e600:	03d09000 	.word	0x03d09000
 800e604:	46000000 	.word	0x46000000
 800e608:	4c742400 	.word	0x4c742400
 800e60c:	4a742400 	.word	0x4a742400
 800e610:	4af42400 	.word	0x4af42400

0800e614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e614:	b480      	push	{r7}
 800e616:	b089      	sub	sp, #36	; 0x24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e61c:	4ba0      	ldr	r3, [pc, #640]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e620:	f003 0303 	and.w	r3, r3, #3
 800e624:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e626:	4b9e      	ldr	r3, [pc, #632]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62a:	091b      	lsrs	r3, r3, #4
 800e62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e630:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e632:	4b9b      	ldr	r3, [pc, #620]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e636:	f003 0301 	and.w	r3, r3, #1
 800e63a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e63c:	4b98      	ldr	r3, [pc, #608]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e640:	08db      	lsrs	r3, r3, #3
 800e642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	fb02 f303 	mul.w	r3, r2, r3
 800e64c:	ee07 3a90 	vmov	s15, r3
 800e650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e654:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 8111 	beq.w	800e882 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	2b02      	cmp	r3, #2
 800e664:	f000 8083 	beq.w	800e76e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	f200 80a1 	bhi.w	800e7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d056      	beq.n	800e72a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e67c:	e099      	b.n	800e7b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e67e:	4b88      	ldr	r3, [pc, #544]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d02d      	beq.n	800e6e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e68a:	4b85      	ldr	r3, [pc, #532]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	08db      	lsrs	r3, r3, #3
 800e690:	f003 0303 	and.w	r3, r3, #3
 800e694:	4a83      	ldr	r2, [pc, #524]	; (800e8a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e696:	fa22 f303 	lsr.w	r3, r2, r3
 800e69a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	ee07 3a90 	vmov	s15, r3
 800e6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	ee07 3a90 	vmov	s15, r3
 800e6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6b4:	4b7a      	ldr	r3, [pc, #488]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6bc:	ee07 3a90 	vmov	s15, r3
 800e6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e6e4:	e087      	b.n	800e7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	ee07 3a90 	vmov	s15, r3
 800e6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e8ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6f8:	4b69      	ldr	r3, [pc, #420]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e700:	ee07 3a90 	vmov	s15, r3
 800e704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e708:	ed97 6a03 	vldr	s12, [r7, #12]
 800e70c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e728:	e065      	b.n	800e7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	ee07 3a90 	vmov	s15, r3
 800e730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e73c:	4b58      	ldr	r3, [pc, #352]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e744:	ee07 3a90 	vmov	s15, r3
 800e748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e74c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e750:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e768:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e76c:	e043      	b.n	800e7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	ee07 3a90 	vmov	s15, r3
 800e774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e8b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e780:	4b47      	ldr	r3, [pc, #284]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e788:	ee07 3a90 	vmov	s15, r3
 800e78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e790:	ed97 6a03 	vldr	s12, [r7, #12]
 800e794:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7b0:	e021      	b.n	800e7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	ee07 3a90 	vmov	s15, r3
 800e7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e8ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7c4:	4b36      	ldr	r3, [pc, #216]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7cc:	ee07 3a90 	vmov	s15, r3
 800e7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e8a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e7f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e7f6:	4b2a      	ldr	r3, [pc, #168]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	0a5b      	lsrs	r3, r3, #9
 800e7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e800:	ee07 3a90 	vmov	s15, r3
 800e804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e810:	edd7 6a07 	vldr	s13, [r7, #28]
 800e814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e81c:	ee17 2a90 	vmov	r2, s15
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e824:	4b1e      	ldr	r3, [pc, #120]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e828:	0c1b      	lsrs	r3, r3, #16
 800e82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e84a:	ee17 2a90 	vmov	r2, s15
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e852:	4b13      	ldr	r3, [pc, #76]	; (800e8a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e856:	0e1b      	lsrs	r3, r3, #24
 800e858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e85c:	ee07 3a90 	vmov	s15, r3
 800e860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e86c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e878:	ee17 2a90 	vmov	r2, s15
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e880:	e008      	b.n	800e894 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	609a      	str	r2, [r3, #8]
}
 800e894:	bf00      	nop
 800e896:	3724      	adds	r7, #36	; 0x24
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr
 800e8a0:	58024400 	.word	0x58024400
 800e8a4:	03d09000 	.word	0x03d09000
 800e8a8:	46000000 	.word	0x46000000
 800e8ac:	4c742400 	.word	0x4c742400
 800e8b0:	4a742400 	.word	0x4a742400
 800e8b4:	4af42400 	.word	0x4af42400

0800e8b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e8c6:	4b53      	ldr	r3, [pc, #332]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d101      	bne.n	800e8d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e099      	b.n	800ea0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e8d6:	4b4f      	ldr	r3, [pc, #316]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a4e      	ldr	r2, [pc, #312]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e8dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e8e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8e2:	f7f5 fef5 	bl	80046d0 <HAL_GetTick>
 800e8e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8e8:	e008      	b.n	800e8fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e8ea:	f7f5 fef1 	bl	80046d0 <HAL_GetTick>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d901      	bls.n	800e8fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e086      	b.n	800ea0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e8fc:	4b45      	ldr	r3, [pc, #276]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d1f0      	bne.n	800e8ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e908:	4b42      	ldr	r3, [pc, #264]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	031b      	lsls	r3, r3, #12
 800e916:	493f      	ldr	r1, [pc, #252]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e918:	4313      	orrs	r3, r2
 800e91a:	628b      	str	r3, [r1, #40]	; 0x28
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	3b01      	subs	r3, #1
 800e922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	025b      	lsls	r3, r3, #9
 800e92e:	b29b      	uxth	r3, r3
 800e930:	431a      	orrs	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	3b01      	subs	r3, #1
 800e938:	041b      	lsls	r3, r3, #16
 800e93a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e93e:	431a      	orrs	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	3b01      	subs	r3, #1
 800e946:	061b      	lsls	r3, r3, #24
 800e948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e94c:	4931      	ldr	r1, [pc, #196]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e94e:	4313      	orrs	r3, r2
 800e950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e952:	4b30      	ldr	r3, [pc, #192]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	492d      	ldr	r1, [pc, #180]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e960:	4313      	orrs	r3, r2
 800e962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e964:	4b2b      	ldr	r3, [pc, #172]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e968:	f023 0220 	bic.w	r2, r3, #32
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	4928      	ldr	r1, [pc, #160]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e972:	4313      	orrs	r3, r2
 800e974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e976:	4b27      	ldr	r3, [pc, #156]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97a:	4a26      	ldr	r2, [pc, #152]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e97c:	f023 0310 	bic.w	r3, r3, #16
 800e980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e982:	4b24      	ldr	r3, [pc, #144]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e986:	4b24      	ldr	r3, [pc, #144]	; (800ea18 <RCCEx_PLL2_Config+0x160>)
 800e988:	4013      	ands	r3, r2
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	69d2      	ldr	r2, [r2, #28]
 800e98e:	00d2      	lsls	r2, r2, #3
 800e990:	4920      	ldr	r1, [pc, #128]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e992:	4313      	orrs	r3, r2
 800e994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e996:	4b1f      	ldr	r3, [pc, #124]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	4a1e      	ldr	r2, [pc, #120]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e99c:	f043 0310 	orr.w	r3, r3, #16
 800e9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ac:	4a19      	ldr	r2, [pc, #100]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e9b4:	e00f      	b.n	800e9d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d106      	bne.n	800e9ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e9bc:	4b15      	ldr	r3, [pc, #84]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c0:	4a14      	ldr	r2, [pc, #80]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e9c8:	e005      	b.n	800e9d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ce:	4a11      	ldr	r2, [pc, #68]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e9d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e9d6:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a0e      	ldr	r2, [pc, #56]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9e2:	f7f5 fe75 	bl	80046d0 <HAL_GetTick>
 800e9e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9e8:	e008      	b.n	800e9fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e9ea:	f7f5 fe71 	bl	80046d0 <HAL_GetTick>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d901      	bls.n	800e9fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e9f8:	2303      	movs	r3, #3
 800e9fa:	e006      	b.n	800ea0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <RCCEx_PLL2_Config+0x15c>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d0f0      	beq.n	800e9ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ea08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	58024400 	.word	0x58024400
 800ea18:	ffff0007 	.word	0xffff0007

0800ea1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea2a:	4b53      	ldr	r3, [pc, #332]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2e:	f003 0303 	and.w	r3, r3, #3
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d101      	bne.n	800ea3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e099      	b.n	800eb6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ea3a:	4b4f      	ldr	r3, [pc, #316]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4a4e      	ldr	r2, [pc, #312]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea46:	f7f5 fe43 	bl	80046d0 <HAL_GetTick>
 800ea4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea4c:	e008      	b.n	800ea60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea4e:	f7f5 fe3f 	bl	80046d0 <HAL_GetTick>
 800ea52:	4602      	mov	r2, r0
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d901      	bls.n	800ea60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ea5c:	2303      	movs	r3, #3
 800ea5e:	e086      	b.n	800eb6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ea60:	4b45      	ldr	r3, [pc, #276]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1f0      	bne.n	800ea4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ea6c:	4b42      	ldr	r3, [pc, #264]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	051b      	lsls	r3, r3, #20
 800ea7a:	493f      	ldr	r1, [pc, #252]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	628b      	str	r3, [r1, #40]	; 0x28
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	3b01      	subs	r3, #1
 800ea86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	689b      	ldr	r3, [r3, #8]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	025b      	lsls	r3, r3, #9
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	431a      	orrs	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	041b      	lsls	r3, r3, #16
 800ea9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eaa2:	431a      	orrs	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	061b      	lsls	r3, r3, #24
 800eaac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eab0:	4931      	ldr	r1, [pc, #196]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eab2:	4313      	orrs	r3, r2
 800eab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800eab6:	4b30      	ldr	r3, [pc, #192]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	695b      	ldr	r3, [r3, #20]
 800eac2:	492d      	ldr	r1, [pc, #180]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eac4:	4313      	orrs	r3, r2
 800eac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800eac8:	4b2b      	ldr	r3, [pc, #172]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	4928      	ldr	r1, [pc, #160]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800ead6:	4313      	orrs	r3, r2
 800ead8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800eada:	4b27      	ldr	r3, [pc, #156]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	4a26      	ldr	r2, [pc, #152]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eae6:	4b24      	ldr	r3, [pc, #144]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaea:	4b24      	ldr	r3, [pc, #144]	; (800eb7c <RCCEx_PLL3_Config+0x160>)
 800eaec:	4013      	ands	r3, r2
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	69d2      	ldr	r2, [r2, #28]
 800eaf2:	00d2      	lsls	r2, r2, #3
 800eaf4:	4920      	ldr	r1, [pc, #128]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800eafa:	4b1f      	ldr	r3, [pc, #124]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafe:	4a1e      	ldr	r2, [pc, #120]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800eb0c:	4b1a      	ldr	r3, [pc, #104]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb10:	4a19      	ldr	r2, [pc, #100]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800eb16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eb18:	e00f      	b.n	800eb3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d106      	bne.n	800eb2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800eb20:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	4a14      	ldr	r2, [pc, #80]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eb2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eb2c:	e005      	b.n	800eb3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800eb2e:	4b12      	ldr	r3, [pc, #72]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb32:	4a11      	ldr	r2, [pc, #68]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eb38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800eb3a:	4b0f      	ldr	r3, [pc, #60]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4a0e      	ldr	r2, [pc, #56]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb46:	f7f5 fdc3 	bl	80046d0 <HAL_GetTick>
 800eb4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb4c:	e008      	b.n	800eb60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800eb4e:	f7f5 fdbf 	bl	80046d0 <HAL_GetTick>
 800eb52:	4602      	mov	r2, r0
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d901      	bls.n	800eb60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	e006      	b.n	800eb6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800eb60:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <RCCEx_PLL3_Config+0x15c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d0f0      	beq.n	800eb4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	58024400 	.word	0x58024400
 800eb7c:	ffff0007 	.word	0xffff0007

0800eb80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d101      	bne.n	800eb92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e049      	b.n	800ec26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d106      	bne.n	800ebac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7f2 fe84 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2202      	movs	r2, #2
 800ebb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	3304      	adds	r3, #4
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	f000 fafe 	bl	800f1c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b085      	sub	sp, #20
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d001      	beq.n	800ec48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e04c      	b.n	800ece2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2202      	movs	r2, #2
 800ec4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a26      	ldr	r2, [pc, #152]	; (800ecf0 <HAL_TIM_Base_Start+0xc0>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d022      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec62:	d01d      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a22      	ldr	r2, [pc, #136]	; (800ecf4 <HAL_TIM_Base_Start+0xc4>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d018      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a21      	ldr	r2, [pc, #132]	; (800ecf8 <HAL_TIM_Base_Start+0xc8>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d013      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a1f      	ldr	r2, [pc, #124]	; (800ecfc <HAL_TIM_Base_Start+0xcc>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d00e      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a1e      	ldr	r2, [pc, #120]	; (800ed00 <HAL_TIM_Base_Start+0xd0>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d009      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a1c      	ldr	r2, [pc, #112]	; (800ed04 <HAL_TIM_Base_Start+0xd4>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d004      	beq.n	800eca0 <HAL_TIM_Base_Start+0x70>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a1b      	ldr	r2, [pc, #108]	; (800ed08 <HAL_TIM_Base_Start+0xd8>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d115      	bne.n	800eccc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	689a      	ldr	r2, [r3, #8]
 800eca6:	4b19      	ldr	r3, [pc, #100]	; (800ed0c <HAL_TIM_Base_Start+0xdc>)
 800eca8:	4013      	ands	r3, r2
 800ecaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b06      	cmp	r3, #6
 800ecb0:	d015      	beq.n	800ecde <HAL_TIM_Base_Start+0xae>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecb8:	d011      	beq.n	800ecde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f042 0201 	orr.w	r2, r2, #1
 800ecc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecca:	e008      	b.n	800ecde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0201 	orr.w	r2, r2, #1
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	e000      	b.n	800ece0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3714      	adds	r7, #20
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	40010000 	.word	0x40010000
 800ecf4:	40000400 	.word	0x40000400
 800ecf8:	40000800 	.word	0x40000800
 800ecfc:	40000c00 	.word	0x40000c00
 800ed00:	40010400 	.word	0x40010400
 800ed04:	40001800 	.word	0x40001800
 800ed08:	40014000 	.word	0x40014000
 800ed0c:	00010007 	.word	0x00010007

0800ed10 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6a1a      	ldr	r2, [r3, #32]
 800ed1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed22:	4013      	ands	r3, r2
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10f      	bne.n	800ed48 <HAL_TIM_Base_Stop+0x38>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6a1a      	ldr	r2, [r3, #32]
 800ed2e:	f240 4344 	movw	r3, #1092	; 0x444
 800ed32:	4013      	ands	r3, r2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d107      	bne.n	800ed48 <HAL_TIM_Base_Stop+0x38>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f022 0201 	bic.w	r2, r2, #1
 800ed46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	f003 0302 	and.w	r3, r3, #2
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d020      	beq.n	800edc2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f003 0302 	and.w	r3, r3, #2
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d01b      	beq.n	800edc2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f06f 0202 	mvn.w	r2, #2
 800ed92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	f003 0303 	and.w	r3, r3, #3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d003      	beq.n	800edb0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f9eb 	bl	800f184 <HAL_TIM_IC_CaptureCallback>
 800edae:	e005      	b.n	800edbc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f9dd 	bl	800f170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 f9ee 	bl	800f198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d020      	beq.n	800ee0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f003 0304 	and.w	r3, r3, #4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d01b      	beq.n	800ee0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f06f 0204 	mvn.w	r2, #4
 800edde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2202      	movs	r2, #2
 800ede4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d003      	beq.n	800edfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f9c5 	bl	800f184 <HAL_TIM_IC_CaptureCallback>
 800edfa:	e005      	b.n	800ee08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f9b7 	bl	800f170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f9c8 	bl	800f198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	f003 0308 	and.w	r3, r3, #8
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d020      	beq.n	800ee5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f003 0308 	and.w	r3, r3, #8
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d01b      	beq.n	800ee5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f06f 0208 	mvn.w	r2, #8
 800ee2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2204      	movs	r2, #4
 800ee30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	69db      	ldr	r3, [r3, #28]
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 f99f 	bl	800f184 <HAL_TIM_IC_CaptureCallback>
 800ee46:	e005      	b.n	800ee54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f991 	bl	800f170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f9a2 	bl	800f198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	f003 0310 	and.w	r3, r3, #16
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d020      	beq.n	800eea6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f003 0310 	and.w	r3, r3, #16
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d01b      	beq.n	800eea6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f06f 0210 	mvn.w	r2, #16
 800ee76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2208      	movs	r2, #8
 800ee7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d003      	beq.n	800ee94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f979 	bl	800f184 <HAL_TIM_IC_CaptureCallback>
 800ee92:	e005      	b.n	800eea0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 f96b 	bl	800f170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f97c 	bl	800f198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2200      	movs	r2, #0
 800eea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	f003 0301 	and.w	r3, r3, #1
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00c      	beq.n	800eeca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d007      	beq.n	800eeca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f06f 0201 	mvn.w	r2, #1
 800eec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 f949 	bl	800f15c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d104      	bne.n	800eede <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00c      	beq.n	800eef8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d007      	beq.n	800eef8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 fb40 	bl	800f578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00c      	beq.n	800ef1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d007      	beq.n	800ef1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ef14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 fb38 	bl	800f58c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00c      	beq.n	800ef40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d007      	beq.n	800ef40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f936 	bl	800f1ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f003 0320 	and.w	r3, r3, #32
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00c      	beq.n	800ef64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f003 0320 	and.w	r3, r3, #32
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d007      	beq.n	800ef64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f06f 0220 	mvn.w	r2, #32
 800ef5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fb00 	bl	800f564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef64:	bf00      	nop
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef76:	2300      	movs	r3, #0
 800ef78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d101      	bne.n	800ef88 <HAL_TIM_ConfigClockSource+0x1c>
 800ef84:	2302      	movs	r3, #2
 800ef86:	e0dc      	b.n	800f142 <HAL_TIM_ConfigClockSource+0x1d6>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2202      	movs	r2, #2
 800ef94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	4b6a      	ldr	r3, [pc, #424]	; (800f14c <HAL_TIM_ConfigClockSource+0x1e0>)
 800efa4:	4013      	ands	r3, r2
 800efa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800efae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a64      	ldr	r2, [pc, #400]	; (800f150 <HAL_TIM_ConfigClockSource+0x1e4>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	f000 80a9 	beq.w	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800efc4:	4a62      	ldr	r2, [pc, #392]	; (800f150 <HAL_TIM_ConfigClockSource+0x1e4>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	f200 80ae 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800efcc:	4a61      	ldr	r2, [pc, #388]	; (800f154 <HAL_TIM_ConfigClockSource+0x1e8>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	f000 80a1 	beq.w	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800efd4:	4a5f      	ldr	r2, [pc, #380]	; (800f154 <HAL_TIM_ConfigClockSource+0x1e8>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	f200 80a6 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800efdc:	4a5e      	ldr	r2, [pc, #376]	; (800f158 <HAL_TIM_ConfigClockSource+0x1ec>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	f000 8099 	beq.w	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800efe4:	4a5c      	ldr	r2, [pc, #368]	; (800f158 <HAL_TIM_ConfigClockSource+0x1ec>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	f200 809e 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800efec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eff0:	f000 8091 	beq.w	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800eff4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eff8:	f200 8096 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800effc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f000:	f000 8089 	beq.w	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800f004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f008:	f200 808e 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f010:	d03e      	beq.n	800f090 <HAL_TIM_ConfigClockSource+0x124>
 800f012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f016:	f200 8087 	bhi.w	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f01a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f01e:	f000 8086 	beq.w	800f12e <HAL_TIM_ConfigClockSource+0x1c2>
 800f022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f026:	d87f      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f028:	2b70      	cmp	r3, #112	; 0x70
 800f02a:	d01a      	beq.n	800f062 <HAL_TIM_ConfigClockSource+0xf6>
 800f02c:	2b70      	cmp	r3, #112	; 0x70
 800f02e:	d87b      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f030:	2b60      	cmp	r3, #96	; 0x60
 800f032:	d050      	beq.n	800f0d6 <HAL_TIM_ConfigClockSource+0x16a>
 800f034:	2b60      	cmp	r3, #96	; 0x60
 800f036:	d877      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f038:	2b50      	cmp	r3, #80	; 0x50
 800f03a:	d03c      	beq.n	800f0b6 <HAL_TIM_ConfigClockSource+0x14a>
 800f03c:	2b50      	cmp	r3, #80	; 0x50
 800f03e:	d873      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f040:	2b40      	cmp	r3, #64	; 0x40
 800f042:	d058      	beq.n	800f0f6 <HAL_TIM_ConfigClockSource+0x18a>
 800f044:	2b40      	cmp	r3, #64	; 0x40
 800f046:	d86f      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f048:	2b30      	cmp	r3, #48	; 0x30
 800f04a:	d064      	beq.n	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800f04c:	2b30      	cmp	r3, #48	; 0x30
 800f04e:	d86b      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f050:	2b20      	cmp	r3, #32
 800f052:	d060      	beq.n	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800f054:	2b20      	cmp	r3, #32
 800f056:	d867      	bhi.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d05c      	beq.n	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800f05c:	2b10      	cmp	r3, #16
 800f05e:	d05a      	beq.n	800f116 <HAL_TIM_ConfigClockSource+0x1aa>
 800f060:	e062      	b.n	800f128 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f072:	f000 f9c9 	bl	800f408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	609a      	str	r2, [r3, #8]
      break;
 800f08e:	e04f      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f0a0:	f000 f9b2 	bl	800f408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	689a      	ldr	r2, [r3, #8]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f0b2:	609a      	str	r2, [r3, #8]
      break;
 800f0b4:	e03c      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f000 f922 	bl	800f30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2150      	movs	r1, #80	; 0x50
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 f97c 	bl	800f3cc <TIM_ITRx_SetConfig>
      break;
 800f0d4:	e02c      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f000 f941 	bl	800f36a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2160      	movs	r1, #96	; 0x60
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 f96c 	bl	800f3cc <TIM_ITRx_SetConfig>
      break;
 800f0f4:	e01c      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f102:	461a      	mov	r2, r3
 800f104:	f000 f902 	bl	800f30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2140      	movs	r1, #64	; 0x40
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 f95c 	bl	800f3cc <TIM_ITRx_SetConfig>
      break;
 800f114:	e00c      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4619      	mov	r1, r3
 800f120:	4610      	mov	r0, r2
 800f122:	f000 f953 	bl	800f3cc <TIM_ITRx_SetConfig>
      break;
 800f126:	e003      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f128:	2301      	movs	r3, #1
 800f12a:	73fb      	strb	r3, [r7, #15]
      break;
 800f12c:	e000      	b.n	800f130 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f140:	7bfb      	ldrb	r3, [r7, #15]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	ffceff88 	.word	0xffceff88
 800f150:	00100040 	.word	0x00100040
 800f154:	00100030 	.word	0x00100030
 800f158:	00100020 	.word	0x00100020

0800f15c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a46      	ldr	r2, [pc, #280]	; (800f2ec <TIM_Base_SetConfig+0x12c>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d013      	beq.n	800f200 <TIM_Base_SetConfig+0x40>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1de:	d00f      	beq.n	800f200 <TIM_Base_SetConfig+0x40>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a43      	ldr	r2, [pc, #268]	; (800f2f0 <TIM_Base_SetConfig+0x130>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d00b      	beq.n	800f200 <TIM_Base_SetConfig+0x40>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a42      	ldr	r2, [pc, #264]	; (800f2f4 <TIM_Base_SetConfig+0x134>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d007      	beq.n	800f200 <TIM_Base_SetConfig+0x40>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a41      	ldr	r2, [pc, #260]	; (800f2f8 <TIM_Base_SetConfig+0x138>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d003      	beq.n	800f200 <TIM_Base_SetConfig+0x40>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a40      	ldr	r2, [pc, #256]	; (800f2fc <TIM_Base_SetConfig+0x13c>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d108      	bne.n	800f212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	4313      	orrs	r3, r2
 800f210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a35      	ldr	r2, [pc, #212]	; (800f2ec <TIM_Base_SetConfig+0x12c>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d01f      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f220:	d01b      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a32      	ldr	r2, [pc, #200]	; (800f2f0 <TIM_Base_SetConfig+0x130>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d017      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a31      	ldr	r2, [pc, #196]	; (800f2f4 <TIM_Base_SetConfig+0x134>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d013      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a30      	ldr	r2, [pc, #192]	; (800f2f8 <TIM_Base_SetConfig+0x138>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d00f      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a2f      	ldr	r2, [pc, #188]	; (800f2fc <TIM_Base_SetConfig+0x13c>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d00b      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4a2e      	ldr	r2, [pc, #184]	; (800f300 <TIM_Base_SetConfig+0x140>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d007      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4a2d      	ldr	r2, [pc, #180]	; (800f304 <TIM_Base_SetConfig+0x144>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d003      	beq.n	800f25a <TIM_Base_SetConfig+0x9a>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4a2c      	ldr	r2, [pc, #176]	; (800f308 <TIM_Base_SetConfig+0x148>)
 800f256:	4293      	cmp	r3, r2
 800f258:	d108      	bne.n	800f26c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	4313      	orrs	r3, r2
 800f26a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	689a      	ldr	r2, [r3, #8]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a16      	ldr	r2, [pc, #88]	; (800f2ec <TIM_Base_SetConfig+0x12c>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d00f      	beq.n	800f2b8 <TIM_Base_SetConfig+0xf8>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4a18      	ldr	r2, [pc, #96]	; (800f2fc <TIM_Base_SetConfig+0x13c>)
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d00b      	beq.n	800f2b8 <TIM_Base_SetConfig+0xf8>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4a17      	ldr	r2, [pc, #92]	; (800f300 <TIM_Base_SetConfig+0x140>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d007      	beq.n	800f2b8 <TIM_Base_SetConfig+0xf8>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	4a16      	ldr	r2, [pc, #88]	; (800f304 <TIM_Base_SetConfig+0x144>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d003      	beq.n	800f2b8 <TIM_Base_SetConfig+0xf8>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4a15      	ldr	r2, [pc, #84]	; (800f308 <TIM_Base_SetConfig+0x148>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d103      	bne.n	800f2c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	691b      	ldr	r3, [r3, #16]
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d105      	bne.n	800f2de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	f023 0201 	bic.w	r2, r3, #1
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	611a      	str	r2, [r3, #16]
  }
}
 800f2de:	bf00      	nop
 800f2e0:	3714      	adds	r7, #20
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	40010000 	.word	0x40010000
 800f2f0:	40000400 	.word	0x40000400
 800f2f4:	40000800 	.word	0x40000800
 800f2f8:	40000c00 	.word	0x40000c00
 800f2fc:	40010400 	.word	0x40010400
 800f300:	40014000 	.word	0x40014000
 800f304:	40014400 	.word	0x40014400
 800f308:	40014800 	.word	0x40014800

0800f30c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b087      	sub	sp, #28
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6a1b      	ldr	r3, [r3, #32]
 800f31c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6a1b      	ldr	r3, [r3, #32]
 800f322:	f023 0201 	bic.w	r2, r3, #1
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	011b      	lsls	r3, r3, #4
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	4313      	orrs	r3, r2
 800f340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	f023 030a 	bic.w	r3, r3, #10
 800f348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f34a:	697a      	ldr	r2, [r7, #20]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	697a      	ldr	r2, [r7, #20]
 800f35c:	621a      	str	r2, [r3, #32]
}
 800f35e:	bf00      	nop
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f36a:	b480      	push	{r7}
 800f36c:	b087      	sub	sp, #28
 800f36e:	af00      	add	r7, sp, #0
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	60b9      	str	r1, [r7, #8]
 800f374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6a1b      	ldr	r3, [r3, #32]
 800f380:	f023 0210 	bic.w	r2, r3, #16
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	031b      	lsls	r3, r3, #12
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f3a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	011b      	lsls	r3, r3, #4
 800f3ac:	697a      	ldr	r2, [r7, #20]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	693a      	ldr	r2, [r7, #16]
 800f3b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	621a      	str	r2, [r3, #32]
}
 800f3be:	bf00      	nop
 800f3c0:	371c      	adds	r7, #28
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr
	...

0800f3cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	689b      	ldr	r3, [r3, #8]
 800f3da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	4b09      	ldr	r3, [pc, #36]	; (800f404 <TIM_ITRx_SetConfig+0x38>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	f043 0307 	orr.w	r3, r3, #7
 800f3ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	609a      	str	r2, [r3, #8]
}
 800f3f6:	bf00      	nop
 800f3f8:	3714      	adds	r7, #20
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	ffcfff8f 	.word	0xffcfff8f

0800f408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f408:	b480      	push	{r7}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	021a      	lsls	r2, r3, #8
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	431a      	orrs	r2, r3
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	4313      	orrs	r3, r2
 800f430:	697a      	ldr	r2, [r7, #20]
 800f432:	4313      	orrs	r3, r2
 800f434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	609a      	str	r2, [r3, #8]
}
 800f43c:	bf00      	nop
 800f43e:	371c      	adds	r7, #28
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f448:	b480      	push	{r7}
 800f44a:	b085      	sub	sp, #20
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d101      	bne.n	800f460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f45c:	2302      	movs	r3, #2
 800f45e:	e06d      	b.n	800f53c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2202      	movs	r2, #2
 800f46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a30      	ldr	r2, [pc, #192]	; (800f548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d004      	beq.n	800f494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4a2f      	ldr	r2, [pc, #188]	; (800f54c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d108      	bne.n	800f4a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f49a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4a20      	ldr	r2, [pc, #128]	; (800f548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d022      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4d2:	d01d      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a1d      	ldr	r2, [pc, #116]	; (800f550 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d018      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4a1c      	ldr	r2, [pc, #112]	; (800f554 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d013      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a1a      	ldr	r2, [pc, #104]	; (800f558 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d00e      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4a15      	ldr	r2, [pc, #84]	; (800f54c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d009      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a16      	ldr	r2, [pc, #88]	; (800f55c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d004      	beq.n	800f510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a15      	ldr	r2, [pc, #84]	; (800f560 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d10c      	bne.n	800f52a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	4313      	orrs	r3, r2
 800f520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr
 800f548:	40010000 	.word	0x40010000
 800f54c:	40010400 	.word	0x40010400
 800f550:	40000400 	.word	0x40000400
 800f554:	40000800 	.word	0x40000800
 800f558:	40000c00 	.word	0x40000c00
 800f55c:	40001800 	.word	0x40001800
 800f560:	40014000 	.word	0x40014000

0800f564 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f56c:	bf00      	nop
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f594:	bf00      	nop
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e042      	b.n	800f638 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d106      	bne.n	800f5ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7f2 f9b3 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2224      	movs	r2, #36	; 0x24
 800f5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f022 0201 	bic.w	r2, r2, #1
 800f5e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f001 fa4a 	bl	8010a84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 fcdf 	bl	800ffb4 <UART_SetConfig>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d101      	bne.n	800f600 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e01b      	b.n	800f638 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f60e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	689a      	ldr	r2, [r3, #8]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f61e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f042 0201 	orr.w	r2, r2, #1
 800f62e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f001 fac9 	bl	8010bc8 <UART_CheckIdleState>
 800f636:	4603      	mov	r3, r0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f640:	b480      	push	{r7}
 800f642:	b091      	sub	sp, #68	; 0x44
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	4613      	mov	r3, r2
 800f64c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f654:	2b20      	cmp	r3, #32
 800f656:	d178      	bne.n	800f74a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d002      	beq.n	800f664 <HAL_UART_Transmit_IT+0x24>
 800f65e:	88fb      	ldrh	r3, [r7, #6]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e071      	b.n	800f74c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	88fa      	ldrh	r2, [r7, #6]
 800f672:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	88fa      	ldrh	r2, [r7, #6]
 800f67a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2200      	movs	r2, #0
 800f682:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2221      	movs	r2, #33	; 0x21
 800f690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f69c:	d12a      	bne.n	800f6f4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6a6:	d107      	bne.n	800f6b8 <HAL_UART_Transmit_IT+0x78>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d103      	bne.n	800f6b8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4a29      	ldr	r2, [pc, #164]	; (800f758 <HAL_UART_Transmit_IT+0x118>)
 800f6b4:	679a      	str	r2, [r3, #120]	; 0x78
 800f6b6:	e002      	b.n	800f6be <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4a28      	ldr	r2, [pc, #160]	; (800f75c <HAL_UART_Transmit_IT+0x11c>)
 800f6bc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	e853 3f00 	ldrex	r3, [r3]
 800f6cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f6d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3308      	adds	r3, #8
 800f6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6de:	637a      	str	r2, [r7, #52]	; 0x34
 800f6e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6e6:	e841 2300 	strex	r3, r2, [r1]
 800f6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1e5      	bne.n	800f6be <HAL_UART_Transmit_IT+0x7e>
 800f6f2:	e028      	b.n	800f746 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6fc:	d107      	bne.n	800f70e <HAL_UART_Transmit_IT+0xce>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d103      	bne.n	800f70e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	4a15      	ldr	r2, [pc, #84]	; (800f760 <HAL_UART_Transmit_IT+0x120>)
 800f70a:	679a      	str	r2, [r3, #120]	; 0x78
 800f70c:	e002      	b.n	800f714 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	4a14      	ldr	r2, [pc, #80]	; (800f764 <HAL_UART_Transmit_IT+0x124>)
 800f712:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	e853 3f00 	ldrex	r3, [r3]
 800f720:	613b      	str	r3, [r7, #16]
   return(result);
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	461a      	mov	r2, r3
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	623b      	str	r3, [r7, #32]
 800f734:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f736:	69f9      	ldr	r1, [r7, #28]
 800f738:	6a3a      	ldr	r2, [r7, #32]
 800f73a:	e841 2300 	strex	r3, r2, [r1]
 800f73e:	61bb      	str	r3, [r7, #24]
   return(result);
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1e6      	bne.n	800f714 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800f746:	2300      	movs	r3, #0
 800f748:	e000      	b.n	800f74c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800f74a:	2302      	movs	r3, #2
  }
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3744      	adds	r7, #68	; 0x44
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr
 800f758:	0801138f 	.word	0x0801138f
 800f75c:	080112af 	.word	0x080112af
 800f760:	080111ed 	.word	0x080111ed
 800f764:	08011135 	.word	0x08011135

0800f768 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08a      	sub	sp, #40	; 0x28
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	4613      	mov	r3, r2
 800f774:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f77c:	2b20      	cmp	r3, #32
 800f77e:	d137      	bne.n	800f7f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <HAL_UART_Receive_IT+0x24>
 800f786:	88fb      	ldrh	r3, [r7, #6]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e030      	b.n	800f7f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2200      	movs	r2, #0
 800f794:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	4a18      	ldr	r2, [pc, #96]	; (800f7fc <HAL_UART_Receive_IT+0x94>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d01f      	beq.n	800f7e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d018      	beq.n	800f7e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	e853 3f00 	ldrex	r3, [r3]
 800f7ba:	613b      	str	r3, [r7, #16]
   return(result);
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7cc:	623b      	str	r3, [r7, #32]
 800f7ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d0:	69f9      	ldr	r1, [r7, #28]
 800f7d2:	6a3a      	ldr	r2, [r7, #32]
 800f7d4:	e841 2300 	strex	r3, r2, [r1]
 800f7d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e6      	bne.n	800f7ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	68b9      	ldr	r1, [r7, #8]
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f001 fb06 	bl	8010df8 <UART_Start_Receive_IT>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	e000      	b.n	800f7f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f7f0:	2302      	movs	r3, #2
  }
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3728      	adds	r7, #40	; 0x28
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	58000c00 	.word	0x58000c00

0800f800 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b0ba      	sub	sp, #232	; 0xe8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	69db      	ldr	r3, [r3, #28]
 800f80e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f826:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f82a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f82e:	4013      	ands	r3, r2
 800f830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d11b      	bne.n	800f874 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f840:	f003 0320 	and.w	r3, r3, #32
 800f844:	2b00      	cmp	r3, #0
 800f846:	d015      	beq.n	800f874 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f84c:	f003 0320 	and.w	r3, r3, #32
 800f850:	2b00      	cmp	r3, #0
 800f852:	d105      	bne.n	800f860 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d009      	beq.n	800f874 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f864:	2b00      	cmp	r3, #0
 800f866:	f000 8377 	beq.w	800ff58 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	4798      	blx	r3
      }
      return;
 800f872:	e371      	b.n	800ff58 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 8123 	beq.w	800fac4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f87e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f882:	4b8d      	ldr	r3, [pc, #564]	; (800fab8 <HAL_UART_IRQHandler+0x2b8>)
 800f884:	4013      	ands	r3, r2
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f88a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f88e:	4b8b      	ldr	r3, [pc, #556]	; (800fabc <HAL_UART_IRQHandler+0x2bc>)
 800f890:	4013      	ands	r3, r2
 800f892:	2b00      	cmp	r3, #0
 800f894:	f000 8116 	beq.w	800fac4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f89c:	f003 0301 	and.w	r3, r3, #1
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d011      	beq.n	800f8c8 <HAL_UART_IRQHandler+0xc8>
 800f8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8be:	f043 0201 	orr.w	r2, r3, #1
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8cc:	f003 0302 	and.w	r3, r3, #2
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d011      	beq.n	800f8f8 <HAL_UART_IRQHandler+0xf8>
 800f8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00b      	beq.n	800f8f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8ee:	f043 0204 	orr.w	r2, r3, #4
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b00      	cmp	r3, #0
 800f902:	d011      	beq.n	800f928 <HAL_UART_IRQHandler+0x128>
 800f904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00b      	beq.n	800f928 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2204      	movs	r2, #4
 800f916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f91e:	f043 0202 	orr.w	r2, r3, #2
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f92c:	f003 0308 	and.w	r3, r3, #8
 800f930:	2b00      	cmp	r3, #0
 800f932:	d017      	beq.n	800f964 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f938:	f003 0320 	and.w	r3, r3, #32
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d105      	bne.n	800f94c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f940:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f944:	4b5c      	ldr	r3, [pc, #368]	; (800fab8 <HAL_UART_IRQHandler+0x2b8>)
 800f946:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00b      	beq.n	800f964 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2208      	movs	r2, #8
 800f952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f95a:	f043 0208 	orr.w	r2, r3, #8
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d012      	beq.n	800f996 <HAL_UART_IRQHandler+0x196>
 800f970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d00c      	beq.n	800f996 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f98c:	f043 0220 	orr.w	r2, r3, #32
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 82dd 	beq.w	800ff5c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a6:	f003 0320 	and.w	r3, r3, #32
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d013      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f9ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9b2:	f003 0320 	and.w	r3, r3, #32
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d105      	bne.n	800f9c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f9ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d007      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9ea:	2b40      	cmp	r3, #64	; 0x40
 800f9ec:	d005      	beq.n	800f9fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f9ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f9f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d054      	beq.n	800faa4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f001 fb1e 	bl	801103c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa0a:	2b40      	cmp	r3, #64	; 0x40
 800fa0c:	d146      	bne.n	800fa9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3308      	adds	r3, #8
 800fa14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa1c:	e853 3f00 	ldrex	r3, [r3]
 800fa20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fa24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	3308      	adds	r3, #8
 800fa36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fa3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fa3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fa46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fa4a:	e841 2300 	strex	r3, r2, [r1]
 800fa4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fa52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1d9      	bne.n	800fa0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d017      	beq.n	800fa94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa6a:	4a15      	ldr	r2, [pc, #84]	; (800fac0 <HAL_UART_IRQHandler+0x2c0>)
 800fa6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7f6 fe95 	bl	80067a4 <HAL_DMA_Abort_IT>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d019      	beq.n	800fab4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800fa8e:	4610      	mov	r0, r2
 800fa90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa92:	e00f      	b.n	800fab4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fa77 	bl	800ff88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa9a:	e00b      	b.n	800fab4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 fa73 	bl	800ff88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faa2:	e007      	b.n	800fab4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 fa6f 	bl	800ff88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800fab2:	e253      	b.n	800ff5c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fab4:	bf00      	nop
    return;
 800fab6:	e251      	b.n	800ff5c <HAL_UART_IRQHandler+0x75c>
 800fab8:	10000001 	.word	0x10000001
 800fabc:	04000120 	.word	0x04000120
 800fac0:	08011109 	.word	0x08011109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac8:	2b01      	cmp	r3, #1
 800faca:	f040 81e7 	bne.w	800fe9c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800face:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fad2:	f003 0310 	and.w	r3, r3, #16
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f000 81e0 	beq.w	800fe9c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fae0:	f003 0310 	and.w	r3, r3, #16
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f000 81d9 	beq.w	800fe9c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2210      	movs	r2, #16
 800faf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	689b      	ldr	r3, [r3, #8]
 800faf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fafc:	2b40      	cmp	r3, #64	; 0x40
 800fafe:	f040 8151 	bne.w	800fda4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a96      	ldr	r2, [pc, #600]	; (800fd64 <HAL_UART_IRQHandler+0x564>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d068      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a93      	ldr	r2, [pc, #588]	; (800fd68 <HAL_UART_IRQHandler+0x568>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d061      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a91      	ldr	r2, [pc, #580]	; (800fd6c <HAL_UART_IRQHandler+0x56c>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d05a      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a8e      	ldr	r2, [pc, #568]	; (800fd70 <HAL_UART_IRQHandler+0x570>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d053      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a8c      	ldr	r2, [pc, #560]	; (800fd74 <HAL_UART_IRQHandler+0x574>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d04c      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a89      	ldr	r2, [pc, #548]	; (800fd78 <HAL_UART_IRQHandler+0x578>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d045      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4a87      	ldr	r2, [pc, #540]	; (800fd7c <HAL_UART_IRQHandler+0x57c>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d03e      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a84      	ldr	r2, [pc, #528]	; (800fd80 <HAL_UART_IRQHandler+0x580>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d037      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4a82      	ldr	r2, [pc, #520]	; (800fd84 <HAL_UART_IRQHandler+0x584>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d030      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a7f      	ldr	r2, [pc, #508]	; (800fd88 <HAL_UART_IRQHandler+0x588>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d029      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a7d      	ldr	r2, [pc, #500]	; (800fd8c <HAL_UART_IRQHandler+0x58c>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d022      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a7a      	ldr	r2, [pc, #488]	; (800fd90 <HAL_UART_IRQHandler+0x590>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d01b      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a78      	ldr	r2, [pc, #480]	; (800fd94 <HAL_UART_IRQHandler+0x594>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d014      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a75      	ldr	r2, [pc, #468]	; (800fd98 <HAL_UART_IRQHandler+0x598>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d00d      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a73      	ldr	r2, [pc, #460]	; (800fd9c <HAL_UART_IRQHandler+0x59c>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d006      	beq.n	800fbe2 <HAL_UART_IRQHandler+0x3e2>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a70      	ldr	r2, [pc, #448]	; (800fda0 <HAL_UART_IRQHandler+0x5a0>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d106      	bne.n	800fbf0 <HAL_UART_IRQHandler+0x3f0>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	e005      	b.n	800fbfc <HAL_UART_IRQHandler+0x3fc>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fc00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 81ab 	beq.w	800ff60 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc14:	429a      	cmp	r2, r3
 800fc16:	f080 81a3 	bcs.w	800ff60 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc2a:	69db      	ldr	r3, [r3, #28]
 800fc2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc30:	f000 8087 	beq.w	800fd42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc40:	e853 3f00 	ldrex	r3, [r3]
 800fc44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fc48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fc5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fc76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1da      	bne.n	800fc34 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	3308      	adds	r3, #8
 800fc84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc88:	e853 3f00 	ldrex	r3, [r3]
 800fc8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fc8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc90:	f023 0301 	bic.w	r3, r3, #1
 800fc94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	3308      	adds	r3, #8
 800fc9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fcaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fcae:	e841 2300 	strex	r3, r2, [r1]
 800fcb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fcb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d1e1      	bne.n	800fc7e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcc4:	e853 3f00 	ldrex	r3, [r3]
 800fcc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fcca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3308      	adds	r3, #8
 800fcda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fcde:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fce6:	e841 2300 	strex	r3, r2, [r1]
 800fcea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fcec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e3      	bne.n	800fcba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2220      	movs	r2, #32
 800fcf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd08:	e853 3f00 	ldrex	r3, [r3]
 800fd0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd10:	f023 0310 	bic.w	r3, r3, #16
 800fd14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd22:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd2a:	e841 2300 	strex	r3, r2, [r1]
 800fd2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1e4      	bne.n	800fd00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7f6 fa13 	bl	8006168 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2202      	movs	r2, #2
 800fd46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f91d 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd62:	e0fd      	b.n	800ff60 <HAL_UART_IRQHandler+0x760>
 800fd64:	40020010 	.word	0x40020010
 800fd68:	40020028 	.word	0x40020028
 800fd6c:	40020040 	.word	0x40020040
 800fd70:	40020058 	.word	0x40020058
 800fd74:	40020070 	.word	0x40020070
 800fd78:	40020088 	.word	0x40020088
 800fd7c:	400200a0 	.word	0x400200a0
 800fd80:	400200b8 	.word	0x400200b8
 800fd84:	40020410 	.word	0x40020410
 800fd88:	40020428 	.word	0x40020428
 800fd8c:	40020440 	.word	0x40020440
 800fd90:	40020458 	.word	0x40020458
 800fd94:	40020470 	.word	0x40020470
 800fd98:	40020488 	.word	0x40020488
 800fd9c:	400204a0 	.word	0x400204a0
 800fda0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	1ad3      	subs	r3, r2, r3
 800fdb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 80cf 	beq.w	800ff64 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800fdc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f000 80ca 	beq.w	800ff64 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd8:	e853 3f00 	ldrex	r3, [r3]
 800fddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fde0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fde4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	461a      	mov	r2, r3
 800fdee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fdf2:	647b      	str	r3, [r7, #68]	; 0x44
 800fdf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fdf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdfa:	e841 2300 	strex	r3, r2, [r1]
 800fdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1e4      	bne.n	800fdd0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe10:	e853 3f00 	ldrex	r3, [r3]
 800fe14:	623b      	str	r3, [r7, #32]
   return(result);
 800fe16:	6a3a      	ldr	r2, [r7, #32]
 800fe18:	4b55      	ldr	r3, [pc, #340]	; (800ff70 <HAL_UART_IRQHandler+0x770>)
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	3308      	adds	r3, #8
 800fe26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fe2a:	633a      	str	r2, [r7, #48]	; 0x30
 800fe2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe32:	e841 2300 	strex	r3, r2, [r1]
 800fe36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d1e3      	bne.n	800fe06 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2220      	movs	r2, #32
 800fe42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	e853 3f00 	ldrex	r3, [r3]
 800fe5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f023 0310 	bic.w	r3, r3, #16
 800fe66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	461a      	mov	r2, r3
 800fe70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fe74:	61fb      	str	r3, [r7, #28]
 800fe76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe78:	69b9      	ldr	r1, [r7, #24]
 800fe7a:	69fa      	ldr	r2, [r7, #28]
 800fe7c:	e841 2300 	strex	r3, r2, [r1]
 800fe80:	617b      	str	r3, [r7, #20]
   return(result);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1e4      	bne.n	800fe52 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe92:	4619      	mov	r1, r3
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f881 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe9a:	e063      	b.n	800ff64 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fe9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00e      	beq.n	800fec6 <HAL_UART_IRQHandler+0x6c6>
 800fea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800feac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d008      	beq.n	800fec6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800febc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f002 f822 	bl	8011f08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fec4:	e051      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d014      	beq.n	800fefc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d105      	bne.n	800feea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d008      	beq.n	800fefc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d03a      	beq.n	800ff68 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	4798      	blx	r3
    }
    return;
 800fefa:	e035      	b.n	800ff68 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d009      	beq.n	800ff1c <HAL_UART_IRQHandler+0x71c>
 800ff08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d003      	beq.n	800ff1c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f001 faaf 	bl	8011478 <UART_EndTransmit_IT>
    return;
 800ff1a:	e026      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ff1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d009      	beq.n	800ff3c <HAL_UART_IRQHandler+0x73c>
 800ff28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d003      	beq.n	800ff3c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f001 fffb 	bl	8011f30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff3a:	e016      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ff3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d010      	beq.n	800ff6a <HAL_UART_IRQHandler+0x76a>
 800ff48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	da0c      	bge.n	800ff6a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f001 ffe3 	bl	8011f1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff56:	e008      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff58:	bf00      	nop
 800ff5a:	e006      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
    return;
 800ff5c:	bf00      	nop
 800ff5e:	e004      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff60:	bf00      	nop
 800ff62:	e002      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff64:	bf00      	nop
 800ff66:	e000      	b.n	800ff6a <HAL_UART_IRQHandler+0x76a>
    return;
 800ff68:	bf00      	nop
  }
}
 800ff6a:	37e8      	adds	r7, #232	; 0xe8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	effffffe 	.word	0xeffffffe

0800ff74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ff74:	b480      	push	{r7}
 800ff76:	b083      	sub	sp, #12
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ff7c:	bf00      	nop
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ffa8:	bf00      	nop
 800ffaa:	370c      	adds	r7, #12
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ffb8:	b092      	sub	sp, #72	; 0x48
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	69db      	ldr	r3, [r3, #28]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	4bbe      	ldr	r3, [pc, #760]	; (80102dc <UART_SetConfig+0x328>)
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	6812      	ldr	r2, [r2, #0]
 800ffea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffec:	430b      	orrs	r3, r1
 800ffee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	68da      	ldr	r2, [r3, #12]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	430a      	orrs	r2, r1
 8010004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	699b      	ldr	r3, [r3, #24]
 801000a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4ab3      	ldr	r2, [pc, #716]	; (80102e0 <UART_SetConfig+0x32c>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d004      	beq.n	8010020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801001c:	4313      	orrs	r3, r2
 801001e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	689a      	ldr	r2, [r3, #8]
 8010026:	4baf      	ldr	r3, [pc, #700]	; (80102e4 <UART_SetConfig+0x330>)
 8010028:	4013      	ands	r3, r2
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	6812      	ldr	r2, [r2, #0]
 801002e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010030:	430b      	orrs	r3, r1
 8010032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003a:	f023 010f 	bic.w	r1, r3, #15
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	430a      	orrs	r2, r1
 8010048:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4aa6      	ldr	r2, [pc, #664]	; (80102e8 <UART_SetConfig+0x334>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d177      	bne.n	8010144 <UART_SetConfig+0x190>
 8010054:	4ba5      	ldr	r3, [pc, #660]	; (80102ec <UART_SetConfig+0x338>)
 8010056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801005c:	2b28      	cmp	r3, #40	; 0x28
 801005e:	d86d      	bhi.n	801013c <UART_SetConfig+0x188>
 8010060:	a201      	add	r2, pc, #4	; (adr r2, 8010068 <UART_SetConfig+0xb4>)
 8010062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010066:	bf00      	nop
 8010068:	0801010d 	.word	0x0801010d
 801006c:	0801013d 	.word	0x0801013d
 8010070:	0801013d 	.word	0x0801013d
 8010074:	0801013d 	.word	0x0801013d
 8010078:	0801013d 	.word	0x0801013d
 801007c:	0801013d 	.word	0x0801013d
 8010080:	0801013d 	.word	0x0801013d
 8010084:	0801013d 	.word	0x0801013d
 8010088:	08010115 	.word	0x08010115
 801008c:	0801013d 	.word	0x0801013d
 8010090:	0801013d 	.word	0x0801013d
 8010094:	0801013d 	.word	0x0801013d
 8010098:	0801013d 	.word	0x0801013d
 801009c:	0801013d 	.word	0x0801013d
 80100a0:	0801013d 	.word	0x0801013d
 80100a4:	0801013d 	.word	0x0801013d
 80100a8:	0801011d 	.word	0x0801011d
 80100ac:	0801013d 	.word	0x0801013d
 80100b0:	0801013d 	.word	0x0801013d
 80100b4:	0801013d 	.word	0x0801013d
 80100b8:	0801013d 	.word	0x0801013d
 80100bc:	0801013d 	.word	0x0801013d
 80100c0:	0801013d 	.word	0x0801013d
 80100c4:	0801013d 	.word	0x0801013d
 80100c8:	08010125 	.word	0x08010125
 80100cc:	0801013d 	.word	0x0801013d
 80100d0:	0801013d 	.word	0x0801013d
 80100d4:	0801013d 	.word	0x0801013d
 80100d8:	0801013d 	.word	0x0801013d
 80100dc:	0801013d 	.word	0x0801013d
 80100e0:	0801013d 	.word	0x0801013d
 80100e4:	0801013d 	.word	0x0801013d
 80100e8:	0801012d 	.word	0x0801012d
 80100ec:	0801013d 	.word	0x0801013d
 80100f0:	0801013d 	.word	0x0801013d
 80100f4:	0801013d 	.word	0x0801013d
 80100f8:	0801013d 	.word	0x0801013d
 80100fc:	0801013d 	.word	0x0801013d
 8010100:	0801013d 	.word	0x0801013d
 8010104:	0801013d 	.word	0x0801013d
 8010108:	08010135 	.word	0x08010135
 801010c:	2301      	movs	r3, #1
 801010e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010112:	e222      	b.n	801055a <UART_SetConfig+0x5a6>
 8010114:	2304      	movs	r3, #4
 8010116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801011a:	e21e      	b.n	801055a <UART_SetConfig+0x5a6>
 801011c:	2308      	movs	r3, #8
 801011e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010122:	e21a      	b.n	801055a <UART_SetConfig+0x5a6>
 8010124:	2310      	movs	r3, #16
 8010126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801012a:	e216      	b.n	801055a <UART_SetConfig+0x5a6>
 801012c:	2320      	movs	r3, #32
 801012e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010132:	e212      	b.n	801055a <UART_SetConfig+0x5a6>
 8010134:	2340      	movs	r3, #64	; 0x40
 8010136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801013a:	e20e      	b.n	801055a <UART_SetConfig+0x5a6>
 801013c:	2380      	movs	r3, #128	; 0x80
 801013e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010142:	e20a      	b.n	801055a <UART_SetConfig+0x5a6>
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a69      	ldr	r2, [pc, #420]	; (80102f0 <UART_SetConfig+0x33c>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d130      	bne.n	80101b0 <UART_SetConfig+0x1fc>
 801014e:	4b67      	ldr	r3, [pc, #412]	; (80102ec <UART_SetConfig+0x338>)
 8010150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010152:	f003 0307 	and.w	r3, r3, #7
 8010156:	2b05      	cmp	r3, #5
 8010158:	d826      	bhi.n	80101a8 <UART_SetConfig+0x1f4>
 801015a:	a201      	add	r2, pc, #4	; (adr r2, 8010160 <UART_SetConfig+0x1ac>)
 801015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010160:	08010179 	.word	0x08010179
 8010164:	08010181 	.word	0x08010181
 8010168:	08010189 	.word	0x08010189
 801016c:	08010191 	.word	0x08010191
 8010170:	08010199 	.word	0x08010199
 8010174:	080101a1 	.word	0x080101a1
 8010178:	2300      	movs	r3, #0
 801017a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801017e:	e1ec      	b.n	801055a <UART_SetConfig+0x5a6>
 8010180:	2304      	movs	r3, #4
 8010182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010186:	e1e8      	b.n	801055a <UART_SetConfig+0x5a6>
 8010188:	2308      	movs	r3, #8
 801018a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801018e:	e1e4      	b.n	801055a <UART_SetConfig+0x5a6>
 8010190:	2310      	movs	r3, #16
 8010192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010196:	e1e0      	b.n	801055a <UART_SetConfig+0x5a6>
 8010198:	2320      	movs	r3, #32
 801019a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801019e:	e1dc      	b.n	801055a <UART_SetConfig+0x5a6>
 80101a0:	2340      	movs	r3, #64	; 0x40
 80101a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101a6:	e1d8      	b.n	801055a <UART_SetConfig+0x5a6>
 80101a8:	2380      	movs	r3, #128	; 0x80
 80101aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ae:	e1d4      	b.n	801055a <UART_SetConfig+0x5a6>
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4a4f      	ldr	r2, [pc, #316]	; (80102f4 <UART_SetConfig+0x340>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d130      	bne.n	801021c <UART_SetConfig+0x268>
 80101ba:	4b4c      	ldr	r3, [pc, #304]	; (80102ec <UART_SetConfig+0x338>)
 80101bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101be:	f003 0307 	and.w	r3, r3, #7
 80101c2:	2b05      	cmp	r3, #5
 80101c4:	d826      	bhi.n	8010214 <UART_SetConfig+0x260>
 80101c6:	a201      	add	r2, pc, #4	; (adr r2, 80101cc <UART_SetConfig+0x218>)
 80101c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101cc:	080101e5 	.word	0x080101e5
 80101d0:	080101ed 	.word	0x080101ed
 80101d4:	080101f5 	.word	0x080101f5
 80101d8:	080101fd 	.word	0x080101fd
 80101dc:	08010205 	.word	0x08010205
 80101e0:	0801020d 	.word	0x0801020d
 80101e4:	2300      	movs	r3, #0
 80101e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ea:	e1b6      	b.n	801055a <UART_SetConfig+0x5a6>
 80101ec:	2304      	movs	r3, #4
 80101ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101f2:	e1b2      	b.n	801055a <UART_SetConfig+0x5a6>
 80101f4:	2308      	movs	r3, #8
 80101f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101fa:	e1ae      	b.n	801055a <UART_SetConfig+0x5a6>
 80101fc:	2310      	movs	r3, #16
 80101fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010202:	e1aa      	b.n	801055a <UART_SetConfig+0x5a6>
 8010204:	2320      	movs	r3, #32
 8010206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801020a:	e1a6      	b.n	801055a <UART_SetConfig+0x5a6>
 801020c:	2340      	movs	r3, #64	; 0x40
 801020e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010212:	e1a2      	b.n	801055a <UART_SetConfig+0x5a6>
 8010214:	2380      	movs	r3, #128	; 0x80
 8010216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801021a:	e19e      	b.n	801055a <UART_SetConfig+0x5a6>
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a35      	ldr	r2, [pc, #212]	; (80102f8 <UART_SetConfig+0x344>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d130      	bne.n	8010288 <UART_SetConfig+0x2d4>
 8010226:	4b31      	ldr	r3, [pc, #196]	; (80102ec <UART_SetConfig+0x338>)
 8010228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801022a:	f003 0307 	and.w	r3, r3, #7
 801022e:	2b05      	cmp	r3, #5
 8010230:	d826      	bhi.n	8010280 <UART_SetConfig+0x2cc>
 8010232:	a201      	add	r2, pc, #4	; (adr r2, 8010238 <UART_SetConfig+0x284>)
 8010234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010238:	08010251 	.word	0x08010251
 801023c:	08010259 	.word	0x08010259
 8010240:	08010261 	.word	0x08010261
 8010244:	08010269 	.word	0x08010269
 8010248:	08010271 	.word	0x08010271
 801024c:	08010279 	.word	0x08010279
 8010250:	2300      	movs	r3, #0
 8010252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010256:	e180      	b.n	801055a <UART_SetConfig+0x5a6>
 8010258:	2304      	movs	r3, #4
 801025a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801025e:	e17c      	b.n	801055a <UART_SetConfig+0x5a6>
 8010260:	2308      	movs	r3, #8
 8010262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010266:	e178      	b.n	801055a <UART_SetConfig+0x5a6>
 8010268:	2310      	movs	r3, #16
 801026a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801026e:	e174      	b.n	801055a <UART_SetConfig+0x5a6>
 8010270:	2320      	movs	r3, #32
 8010272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010276:	e170      	b.n	801055a <UART_SetConfig+0x5a6>
 8010278:	2340      	movs	r3, #64	; 0x40
 801027a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801027e:	e16c      	b.n	801055a <UART_SetConfig+0x5a6>
 8010280:	2380      	movs	r3, #128	; 0x80
 8010282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010286:	e168      	b.n	801055a <UART_SetConfig+0x5a6>
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4a1b      	ldr	r2, [pc, #108]	; (80102fc <UART_SetConfig+0x348>)
 801028e:	4293      	cmp	r3, r2
 8010290:	d142      	bne.n	8010318 <UART_SetConfig+0x364>
 8010292:	4b16      	ldr	r3, [pc, #88]	; (80102ec <UART_SetConfig+0x338>)
 8010294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010296:	f003 0307 	and.w	r3, r3, #7
 801029a:	2b05      	cmp	r3, #5
 801029c:	d838      	bhi.n	8010310 <UART_SetConfig+0x35c>
 801029e:	a201      	add	r2, pc, #4	; (adr r2, 80102a4 <UART_SetConfig+0x2f0>)
 80102a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a4:	080102bd 	.word	0x080102bd
 80102a8:	080102c5 	.word	0x080102c5
 80102ac:	080102cd 	.word	0x080102cd
 80102b0:	080102d5 	.word	0x080102d5
 80102b4:	08010301 	.word	0x08010301
 80102b8:	08010309 	.word	0x08010309
 80102bc:	2300      	movs	r3, #0
 80102be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102c2:	e14a      	b.n	801055a <UART_SetConfig+0x5a6>
 80102c4:	2304      	movs	r3, #4
 80102c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102ca:	e146      	b.n	801055a <UART_SetConfig+0x5a6>
 80102cc:	2308      	movs	r3, #8
 80102ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102d2:	e142      	b.n	801055a <UART_SetConfig+0x5a6>
 80102d4:	2310      	movs	r3, #16
 80102d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102da:	e13e      	b.n	801055a <UART_SetConfig+0x5a6>
 80102dc:	cfff69f3 	.word	0xcfff69f3
 80102e0:	58000c00 	.word	0x58000c00
 80102e4:	11fff4ff 	.word	0x11fff4ff
 80102e8:	40011000 	.word	0x40011000
 80102ec:	58024400 	.word	0x58024400
 80102f0:	40004400 	.word	0x40004400
 80102f4:	40004800 	.word	0x40004800
 80102f8:	40004c00 	.word	0x40004c00
 80102fc:	40005000 	.word	0x40005000
 8010300:	2320      	movs	r3, #32
 8010302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010306:	e128      	b.n	801055a <UART_SetConfig+0x5a6>
 8010308:	2340      	movs	r3, #64	; 0x40
 801030a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801030e:	e124      	b.n	801055a <UART_SetConfig+0x5a6>
 8010310:	2380      	movs	r3, #128	; 0x80
 8010312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010316:	e120      	b.n	801055a <UART_SetConfig+0x5a6>
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4acb      	ldr	r2, [pc, #812]	; (801064c <UART_SetConfig+0x698>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d176      	bne.n	8010410 <UART_SetConfig+0x45c>
 8010322:	4bcb      	ldr	r3, [pc, #812]	; (8010650 <UART_SetConfig+0x69c>)
 8010324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801032a:	2b28      	cmp	r3, #40	; 0x28
 801032c:	d86c      	bhi.n	8010408 <UART_SetConfig+0x454>
 801032e:	a201      	add	r2, pc, #4	; (adr r2, 8010334 <UART_SetConfig+0x380>)
 8010330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010334:	080103d9 	.word	0x080103d9
 8010338:	08010409 	.word	0x08010409
 801033c:	08010409 	.word	0x08010409
 8010340:	08010409 	.word	0x08010409
 8010344:	08010409 	.word	0x08010409
 8010348:	08010409 	.word	0x08010409
 801034c:	08010409 	.word	0x08010409
 8010350:	08010409 	.word	0x08010409
 8010354:	080103e1 	.word	0x080103e1
 8010358:	08010409 	.word	0x08010409
 801035c:	08010409 	.word	0x08010409
 8010360:	08010409 	.word	0x08010409
 8010364:	08010409 	.word	0x08010409
 8010368:	08010409 	.word	0x08010409
 801036c:	08010409 	.word	0x08010409
 8010370:	08010409 	.word	0x08010409
 8010374:	080103e9 	.word	0x080103e9
 8010378:	08010409 	.word	0x08010409
 801037c:	08010409 	.word	0x08010409
 8010380:	08010409 	.word	0x08010409
 8010384:	08010409 	.word	0x08010409
 8010388:	08010409 	.word	0x08010409
 801038c:	08010409 	.word	0x08010409
 8010390:	08010409 	.word	0x08010409
 8010394:	080103f1 	.word	0x080103f1
 8010398:	08010409 	.word	0x08010409
 801039c:	08010409 	.word	0x08010409
 80103a0:	08010409 	.word	0x08010409
 80103a4:	08010409 	.word	0x08010409
 80103a8:	08010409 	.word	0x08010409
 80103ac:	08010409 	.word	0x08010409
 80103b0:	08010409 	.word	0x08010409
 80103b4:	080103f9 	.word	0x080103f9
 80103b8:	08010409 	.word	0x08010409
 80103bc:	08010409 	.word	0x08010409
 80103c0:	08010409 	.word	0x08010409
 80103c4:	08010409 	.word	0x08010409
 80103c8:	08010409 	.word	0x08010409
 80103cc:	08010409 	.word	0x08010409
 80103d0:	08010409 	.word	0x08010409
 80103d4:	08010401 	.word	0x08010401
 80103d8:	2301      	movs	r3, #1
 80103da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103de:	e0bc      	b.n	801055a <UART_SetConfig+0x5a6>
 80103e0:	2304      	movs	r3, #4
 80103e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103e6:	e0b8      	b.n	801055a <UART_SetConfig+0x5a6>
 80103e8:	2308      	movs	r3, #8
 80103ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103ee:	e0b4      	b.n	801055a <UART_SetConfig+0x5a6>
 80103f0:	2310      	movs	r3, #16
 80103f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103f6:	e0b0      	b.n	801055a <UART_SetConfig+0x5a6>
 80103f8:	2320      	movs	r3, #32
 80103fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103fe:	e0ac      	b.n	801055a <UART_SetConfig+0x5a6>
 8010400:	2340      	movs	r3, #64	; 0x40
 8010402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010406:	e0a8      	b.n	801055a <UART_SetConfig+0x5a6>
 8010408:	2380      	movs	r3, #128	; 0x80
 801040a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801040e:	e0a4      	b.n	801055a <UART_SetConfig+0x5a6>
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4a8f      	ldr	r2, [pc, #572]	; (8010654 <UART_SetConfig+0x6a0>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d130      	bne.n	801047c <UART_SetConfig+0x4c8>
 801041a:	4b8d      	ldr	r3, [pc, #564]	; (8010650 <UART_SetConfig+0x69c>)
 801041c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801041e:	f003 0307 	and.w	r3, r3, #7
 8010422:	2b05      	cmp	r3, #5
 8010424:	d826      	bhi.n	8010474 <UART_SetConfig+0x4c0>
 8010426:	a201      	add	r2, pc, #4	; (adr r2, 801042c <UART_SetConfig+0x478>)
 8010428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042c:	08010445 	.word	0x08010445
 8010430:	0801044d 	.word	0x0801044d
 8010434:	08010455 	.word	0x08010455
 8010438:	0801045d 	.word	0x0801045d
 801043c:	08010465 	.word	0x08010465
 8010440:	0801046d 	.word	0x0801046d
 8010444:	2300      	movs	r3, #0
 8010446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801044a:	e086      	b.n	801055a <UART_SetConfig+0x5a6>
 801044c:	2304      	movs	r3, #4
 801044e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010452:	e082      	b.n	801055a <UART_SetConfig+0x5a6>
 8010454:	2308      	movs	r3, #8
 8010456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801045a:	e07e      	b.n	801055a <UART_SetConfig+0x5a6>
 801045c:	2310      	movs	r3, #16
 801045e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010462:	e07a      	b.n	801055a <UART_SetConfig+0x5a6>
 8010464:	2320      	movs	r3, #32
 8010466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801046a:	e076      	b.n	801055a <UART_SetConfig+0x5a6>
 801046c:	2340      	movs	r3, #64	; 0x40
 801046e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010472:	e072      	b.n	801055a <UART_SetConfig+0x5a6>
 8010474:	2380      	movs	r3, #128	; 0x80
 8010476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801047a:	e06e      	b.n	801055a <UART_SetConfig+0x5a6>
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a75      	ldr	r2, [pc, #468]	; (8010658 <UART_SetConfig+0x6a4>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d130      	bne.n	80104e8 <UART_SetConfig+0x534>
 8010486:	4b72      	ldr	r3, [pc, #456]	; (8010650 <UART_SetConfig+0x69c>)
 8010488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801048a:	f003 0307 	and.w	r3, r3, #7
 801048e:	2b05      	cmp	r3, #5
 8010490:	d826      	bhi.n	80104e0 <UART_SetConfig+0x52c>
 8010492:	a201      	add	r2, pc, #4	; (adr r2, 8010498 <UART_SetConfig+0x4e4>)
 8010494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010498:	080104b1 	.word	0x080104b1
 801049c:	080104b9 	.word	0x080104b9
 80104a0:	080104c1 	.word	0x080104c1
 80104a4:	080104c9 	.word	0x080104c9
 80104a8:	080104d1 	.word	0x080104d1
 80104ac:	080104d9 	.word	0x080104d9
 80104b0:	2300      	movs	r3, #0
 80104b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104b6:	e050      	b.n	801055a <UART_SetConfig+0x5a6>
 80104b8:	2304      	movs	r3, #4
 80104ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104be:	e04c      	b.n	801055a <UART_SetConfig+0x5a6>
 80104c0:	2308      	movs	r3, #8
 80104c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104c6:	e048      	b.n	801055a <UART_SetConfig+0x5a6>
 80104c8:	2310      	movs	r3, #16
 80104ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ce:	e044      	b.n	801055a <UART_SetConfig+0x5a6>
 80104d0:	2320      	movs	r3, #32
 80104d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104d6:	e040      	b.n	801055a <UART_SetConfig+0x5a6>
 80104d8:	2340      	movs	r3, #64	; 0x40
 80104da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104de:	e03c      	b.n	801055a <UART_SetConfig+0x5a6>
 80104e0:	2380      	movs	r3, #128	; 0x80
 80104e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104e6:	e038      	b.n	801055a <UART_SetConfig+0x5a6>
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a5b      	ldr	r2, [pc, #364]	; (801065c <UART_SetConfig+0x6a8>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d130      	bne.n	8010554 <UART_SetConfig+0x5a0>
 80104f2:	4b57      	ldr	r3, [pc, #348]	; (8010650 <UART_SetConfig+0x69c>)
 80104f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104f6:	f003 0307 	and.w	r3, r3, #7
 80104fa:	2b05      	cmp	r3, #5
 80104fc:	d826      	bhi.n	801054c <UART_SetConfig+0x598>
 80104fe:	a201      	add	r2, pc, #4	; (adr r2, 8010504 <UART_SetConfig+0x550>)
 8010500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010504:	0801051d 	.word	0x0801051d
 8010508:	08010525 	.word	0x08010525
 801050c:	0801052d 	.word	0x0801052d
 8010510:	08010535 	.word	0x08010535
 8010514:	0801053d 	.word	0x0801053d
 8010518:	08010545 	.word	0x08010545
 801051c:	2302      	movs	r3, #2
 801051e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010522:	e01a      	b.n	801055a <UART_SetConfig+0x5a6>
 8010524:	2304      	movs	r3, #4
 8010526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801052a:	e016      	b.n	801055a <UART_SetConfig+0x5a6>
 801052c:	2308      	movs	r3, #8
 801052e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010532:	e012      	b.n	801055a <UART_SetConfig+0x5a6>
 8010534:	2310      	movs	r3, #16
 8010536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801053a:	e00e      	b.n	801055a <UART_SetConfig+0x5a6>
 801053c:	2320      	movs	r3, #32
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010542:	e00a      	b.n	801055a <UART_SetConfig+0x5a6>
 8010544:	2340      	movs	r3, #64	; 0x40
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801054a:	e006      	b.n	801055a <UART_SetConfig+0x5a6>
 801054c:	2380      	movs	r3, #128	; 0x80
 801054e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010552:	e002      	b.n	801055a <UART_SetConfig+0x5a6>
 8010554:	2380      	movs	r3, #128	; 0x80
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a3f      	ldr	r2, [pc, #252]	; (801065c <UART_SetConfig+0x6a8>)
 8010560:	4293      	cmp	r3, r2
 8010562:	f040 80f8 	bne.w	8010756 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010566:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801056a:	2b20      	cmp	r3, #32
 801056c:	dc46      	bgt.n	80105fc <UART_SetConfig+0x648>
 801056e:	2b02      	cmp	r3, #2
 8010570:	f2c0 8082 	blt.w	8010678 <UART_SetConfig+0x6c4>
 8010574:	3b02      	subs	r3, #2
 8010576:	2b1e      	cmp	r3, #30
 8010578:	d87e      	bhi.n	8010678 <UART_SetConfig+0x6c4>
 801057a:	a201      	add	r2, pc, #4	; (adr r2, 8010580 <UART_SetConfig+0x5cc>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	08010603 	.word	0x08010603
 8010584:	08010679 	.word	0x08010679
 8010588:	0801060b 	.word	0x0801060b
 801058c:	08010679 	.word	0x08010679
 8010590:	08010679 	.word	0x08010679
 8010594:	08010679 	.word	0x08010679
 8010598:	0801061b 	.word	0x0801061b
 801059c:	08010679 	.word	0x08010679
 80105a0:	08010679 	.word	0x08010679
 80105a4:	08010679 	.word	0x08010679
 80105a8:	08010679 	.word	0x08010679
 80105ac:	08010679 	.word	0x08010679
 80105b0:	08010679 	.word	0x08010679
 80105b4:	08010679 	.word	0x08010679
 80105b8:	0801062b 	.word	0x0801062b
 80105bc:	08010679 	.word	0x08010679
 80105c0:	08010679 	.word	0x08010679
 80105c4:	08010679 	.word	0x08010679
 80105c8:	08010679 	.word	0x08010679
 80105cc:	08010679 	.word	0x08010679
 80105d0:	08010679 	.word	0x08010679
 80105d4:	08010679 	.word	0x08010679
 80105d8:	08010679 	.word	0x08010679
 80105dc:	08010679 	.word	0x08010679
 80105e0:	08010679 	.word	0x08010679
 80105e4:	08010679 	.word	0x08010679
 80105e8:	08010679 	.word	0x08010679
 80105ec:	08010679 	.word	0x08010679
 80105f0:	08010679 	.word	0x08010679
 80105f4:	08010679 	.word	0x08010679
 80105f8:	0801066b 	.word	0x0801066b
 80105fc:	2b40      	cmp	r3, #64	; 0x40
 80105fe:	d037      	beq.n	8010670 <UART_SetConfig+0x6bc>
 8010600:	e03a      	b.n	8010678 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010602:	f7fd fd49 	bl	800e098 <HAL_RCCEx_GetD3PCLK1Freq>
 8010606:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010608:	e03c      	b.n	8010684 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801060e:	4618      	mov	r0, r3
 8010610:	f7fd fd58 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010618:	e034      	b.n	8010684 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801061a:	f107 0318 	add.w	r3, r7, #24
 801061e:	4618      	mov	r0, r3
 8010620:	f7fd fea4 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010628:	e02c      	b.n	8010684 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801062a:	4b09      	ldr	r3, [pc, #36]	; (8010650 <UART_SetConfig+0x69c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f003 0320 	and.w	r3, r3, #32
 8010632:	2b00      	cmp	r3, #0
 8010634:	d016      	beq.n	8010664 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010636:	4b06      	ldr	r3, [pc, #24]	; (8010650 <UART_SetConfig+0x69c>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	08db      	lsrs	r3, r3, #3
 801063c:	f003 0303 	and.w	r3, r3, #3
 8010640:	4a07      	ldr	r2, [pc, #28]	; (8010660 <UART_SetConfig+0x6ac>)
 8010642:	fa22 f303 	lsr.w	r3, r2, r3
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010648:	e01c      	b.n	8010684 <UART_SetConfig+0x6d0>
 801064a:	bf00      	nop
 801064c:	40011400 	.word	0x40011400
 8010650:	58024400 	.word	0x58024400
 8010654:	40007800 	.word	0x40007800
 8010658:	40007c00 	.word	0x40007c00
 801065c:	58000c00 	.word	0x58000c00
 8010660:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010664:	4b9d      	ldr	r3, [pc, #628]	; (80108dc <UART_SetConfig+0x928>)
 8010666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010668:	e00c      	b.n	8010684 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801066a:	4b9d      	ldr	r3, [pc, #628]	; (80108e0 <UART_SetConfig+0x92c>)
 801066c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801066e:	e009      	b.n	8010684 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010676:	e005      	b.n	8010684 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010678:	2300      	movs	r3, #0
 801067a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801067c:	2301      	movs	r3, #1
 801067e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010682:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 81de 	beq.w	8010a48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010690:	4a94      	ldr	r2, [pc, #592]	; (80108e4 <UART_SetConfig+0x930>)
 8010692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010696:	461a      	mov	r2, r3
 8010698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801069a:	fbb3 f3f2 	udiv	r3, r3, r2
 801069e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	685a      	ldr	r2, [r3, #4]
 80106a4:	4613      	mov	r3, r2
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	4413      	add	r3, r2
 80106aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d305      	bcc.n	80106bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d903      	bls.n	80106c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80106c2:	e1c1      	b.n	8010a48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c6:	2200      	movs	r2, #0
 80106c8:	60bb      	str	r3, [r7, #8]
 80106ca:	60fa      	str	r2, [r7, #12]
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d0:	4a84      	ldr	r2, [pc, #528]	; (80108e4 <UART_SetConfig+0x930>)
 80106d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	2200      	movs	r2, #0
 80106da:	603b      	str	r3, [r7, #0]
 80106dc:	607a      	str	r2, [r7, #4]
 80106de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106e6:	f7f0 f81f 	bl	8000728 <__aeabi_uldivmod>
 80106ea:	4602      	mov	r2, r0
 80106ec:	460b      	mov	r3, r1
 80106ee:	4610      	mov	r0, r2
 80106f0:	4619      	mov	r1, r3
 80106f2:	f04f 0200 	mov.w	r2, #0
 80106f6:	f04f 0300 	mov.w	r3, #0
 80106fa:	020b      	lsls	r3, r1, #8
 80106fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010700:	0202      	lsls	r2, r0, #8
 8010702:	6979      	ldr	r1, [r7, #20]
 8010704:	6849      	ldr	r1, [r1, #4]
 8010706:	0849      	lsrs	r1, r1, #1
 8010708:	2000      	movs	r0, #0
 801070a:	460c      	mov	r4, r1
 801070c:	4605      	mov	r5, r0
 801070e:	eb12 0804 	adds.w	r8, r2, r4
 8010712:	eb43 0905 	adc.w	r9, r3, r5
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	469a      	mov	sl, r3
 801071e:	4693      	mov	fp, r2
 8010720:	4652      	mov	r2, sl
 8010722:	465b      	mov	r3, fp
 8010724:	4640      	mov	r0, r8
 8010726:	4649      	mov	r1, r9
 8010728:	f7ef fffe 	bl	8000728 <__aeabi_uldivmod>
 801072c:	4602      	mov	r2, r0
 801072e:	460b      	mov	r3, r1
 8010730:	4613      	mov	r3, r2
 8010732:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801073a:	d308      	bcc.n	801074e <UART_SetConfig+0x79a>
 801073c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010742:	d204      	bcs.n	801074e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801074a:	60da      	str	r2, [r3, #12]
 801074c:	e17c      	b.n	8010a48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010754:	e178      	b.n	8010a48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	69db      	ldr	r3, [r3, #28]
 801075a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801075e:	f040 80c5 	bne.w	80108ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010762:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010766:	2b20      	cmp	r3, #32
 8010768:	dc48      	bgt.n	80107fc <UART_SetConfig+0x848>
 801076a:	2b00      	cmp	r3, #0
 801076c:	db7b      	blt.n	8010866 <UART_SetConfig+0x8b2>
 801076e:	2b20      	cmp	r3, #32
 8010770:	d879      	bhi.n	8010866 <UART_SetConfig+0x8b2>
 8010772:	a201      	add	r2, pc, #4	; (adr r2, 8010778 <UART_SetConfig+0x7c4>)
 8010774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010778:	08010803 	.word	0x08010803
 801077c:	0801080b 	.word	0x0801080b
 8010780:	08010867 	.word	0x08010867
 8010784:	08010867 	.word	0x08010867
 8010788:	08010813 	.word	0x08010813
 801078c:	08010867 	.word	0x08010867
 8010790:	08010867 	.word	0x08010867
 8010794:	08010867 	.word	0x08010867
 8010798:	08010823 	.word	0x08010823
 801079c:	08010867 	.word	0x08010867
 80107a0:	08010867 	.word	0x08010867
 80107a4:	08010867 	.word	0x08010867
 80107a8:	08010867 	.word	0x08010867
 80107ac:	08010867 	.word	0x08010867
 80107b0:	08010867 	.word	0x08010867
 80107b4:	08010867 	.word	0x08010867
 80107b8:	08010833 	.word	0x08010833
 80107bc:	08010867 	.word	0x08010867
 80107c0:	08010867 	.word	0x08010867
 80107c4:	08010867 	.word	0x08010867
 80107c8:	08010867 	.word	0x08010867
 80107cc:	08010867 	.word	0x08010867
 80107d0:	08010867 	.word	0x08010867
 80107d4:	08010867 	.word	0x08010867
 80107d8:	08010867 	.word	0x08010867
 80107dc:	08010867 	.word	0x08010867
 80107e0:	08010867 	.word	0x08010867
 80107e4:	08010867 	.word	0x08010867
 80107e8:	08010867 	.word	0x08010867
 80107ec:	08010867 	.word	0x08010867
 80107f0:	08010867 	.word	0x08010867
 80107f4:	08010867 	.word	0x08010867
 80107f8:	08010859 	.word	0x08010859
 80107fc:	2b40      	cmp	r3, #64	; 0x40
 80107fe:	d02e      	beq.n	801085e <UART_SetConfig+0x8aa>
 8010800:	e031      	b.n	8010866 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010802:	f7fb fc93 	bl	800c12c <HAL_RCC_GetPCLK1Freq>
 8010806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010808:	e033      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801080a:	f7fb fca5 	bl	800c158 <HAL_RCC_GetPCLK2Freq>
 801080e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010810:	e02f      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010816:	4618      	mov	r0, r3
 8010818:	f7fd fc54 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010820:	e027      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010822:	f107 0318 	add.w	r3, r7, #24
 8010826:	4618      	mov	r0, r3
 8010828:	f7fd fda0 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010830:	e01f      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010832:	4b2d      	ldr	r3, [pc, #180]	; (80108e8 <UART_SetConfig+0x934>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f003 0320 	and.w	r3, r3, #32
 801083a:	2b00      	cmp	r3, #0
 801083c:	d009      	beq.n	8010852 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801083e:	4b2a      	ldr	r3, [pc, #168]	; (80108e8 <UART_SetConfig+0x934>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	08db      	lsrs	r3, r3, #3
 8010844:	f003 0303 	and.w	r3, r3, #3
 8010848:	4a24      	ldr	r2, [pc, #144]	; (80108dc <UART_SetConfig+0x928>)
 801084a:	fa22 f303 	lsr.w	r3, r2, r3
 801084e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010850:	e00f      	b.n	8010872 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010852:	4b22      	ldr	r3, [pc, #136]	; (80108dc <UART_SetConfig+0x928>)
 8010854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010856:	e00c      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010858:	4b21      	ldr	r3, [pc, #132]	; (80108e0 <UART_SetConfig+0x92c>)
 801085a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801085c:	e009      	b.n	8010872 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801085e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010864:	e005      	b.n	8010872 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010866:	2300      	movs	r3, #0
 8010868:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010870:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 80e7 	beq.w	8010a48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087e:	4a19      	ldr	r2, [pc, #100]	; (80108e4 <UART_SetConfig+0x930>)
 8010880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010884:	461a      	mov	r2, r3
 8010886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010888:	fbb3 f3f2 	udiv	r3, r3, r2
 801088c:	005a      	lsls	r2, r3, #1
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	085b      	lsrs	r3, r3, #1
 8010894:	441a      	add	r2, r3
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	fbb2 f3f3 	udiv	r3, r2, r3
 801089e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a2:	2b0f      	cmp	r3, #15
 80108a4:	d916      	bls.n	80108d4 <UART_SetConfig+0x920>
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108ac:	d212      	bcs.n	80108d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80108ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	f023 030f 	bic.w	r3, r3, #15
 80108b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	085b      	lsrs	r3, r3, #1
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f003 0307 	and.w	r3, r3, #7
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80108c6:	4313      	orrs	r3, r2
 80108c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80108d0:	60da      	str	r2, [r3, #12]
 80108d2:	e0b9      	b.n	8010a48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80108d4:	2301      	movs	r3, #1
 80108d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80108da:	e0b5      	b.n	8010a48 <UART_SetConfig+0xa94>
 80108dc:	03d09000 	.word	0x03d09000
 80108e0:	003d0900 	.word	0x003d0900
 80108e4:	0801ad68 	.word	0x0801ad68
 80108e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80108ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80108f0:	2b20      	cmp	r3, #32
 80108f2:	dc49      	bgt.n	8010988 <UART_SetConfig+0x9d4>
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	db7c      	blt.n	80109f2 <UART_SetConfig+0xa3e>
 80108f8:	2b20      	cmp	r3, #32
 80108fa:	d87a      	bhi.n	80109f2 <UART_SetConfig+0xa3e>
 80108fc:	a201      	add	r2, pc, #4	; (adr r2, 8010904 <UART_SetConfig+0x950>)
 80108fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010902:	bf00      	nop
 8010904:	0801098f 	.word	0x0801098f
 8010908:	08010997 	.word	0x08010997
 801090c:	080109f3 	.word	0x080109f3
 8010910:	080109f3 	.word	0x080109f3
 8010914:	0801099f 	.word	0x0801099f
 8010918:	080109f3 	.word	0x080109f3
 801091c:	080109f3 	.word	0x080109f3
 8010920:	080109f3 	.word	0x080109f3
 8010924:	080109af 	.word	0x080109af
 8010928:	080109f3 	.word	0x080109f3
 801092c:	080109f3 	.word	0x080109f3
 8010930:	080109f3 	.word	0x080109f3
 8010934:	080109f3 	.word	0x080109f3
 8010938:	080109f3 	.word	0x080109f3
 801093c:	080109f3 	.word	0x080109f3
 8010940:	080109f3 	.word	0x080109f3
 8010944:	080109bf 	.word	0x080109bf
 8010948:	080109f3 	.word	0x080109f3
 801094c:	080109f3 	.word	0x080109f3
 8010950:	080109f3 	.word	0x080109f3
 8010954:	080109f3 	.word	0x080109f3
 8010958:	080109f3 	.word	0x080109f3
 801095c:	080109f3 	.word	0x080109f3
 8010960:	080109f3 	.word	0x080109f3
 8010964:	080109f3 	.word	0x080109f3
 8010968:	080109f3 	.word	0x080109f3
 801096c:	080109f3 	.word	0x080109f3
 8010970:	080109f3 	.word	0x080109f3
 8010974:	080109f3 	.word	0x080109f3
 8010978:	080109f3 	.word	0x080109f3
 801097c:	080109f3 	.word	0x080109f3
 8010980:	080109f3 	.word	0x080109f3
 8010984:	080109e5 	.word	0x080109e5
 8010988:	2b40      	cmp	r3, #64	; 0x40
 801098a:	d02e      	beq.n	80109ea <UART_SetConfig+0xa36>
 801098c:	e031      	b.n	80109f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801098e:	f7fb fbcd 	bl	800c12c <HAL_RCC_GetPCLK1Freq>
 8010992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010994:	e033      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010996:	f7fb fbdf 	bl	800c158 <HAL_RCC_GetPCLK2Freq>
 801099a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801099c:	e02f      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7fd fb8e 	bl	800e0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109ac:	e027      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109ae:	f107 0318 	add.w	r3, r7, #24
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fd fcda 	bl	800e36c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109bc:	e01f      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109be:	4b2d      	ldr	r3, [pc, #180]	; (8010a74 <UART_SetConfig+0xac0>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f003 0320 	and.w	r3, r3, #32
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d009      	beq.n	80109de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80109ca:	4b2a      	ldr	r3, [pc, #168]	; (8010a74 <UART_SetConfig+0xac0>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	08db      	lsrs	r3, r3, #3
 80109d0:	f003 0303 	and.w	r3, r3, #3
 80109d4:	4a28      	ldr	r2, [pc, #160]	; (8010a78 <UART_SetConfig+0xac4>)
 80109d6:	fa22 f303 	lsr.w	r3, r2, r3
 80109da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80109dc:	e00f      	b.n	80109fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80109de:	4b26      	ldr	r3, [pc, #152]	; (8010a78 <UART_SetConfig+0xac4>)
 80109e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109e2:	e00c      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80109e4:	4b25      	ldr	r3, [pc, #148]	; (8010a7c <UART_SetConfig+0xac8>)
 80109e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109e8:	e009      	b.n	80109fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80109ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f0:	e005      	b.n	80109fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80109f2:	2300      	movs	r3, #0
 80109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80109fc:	bf00      	nop
    }

    if (pclk != 0U)
 80109fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d021      	beq.n	8010a48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a08:	4a1d      	ldr	r2, [pc, #116]	; (8010a80 <UART_SetConfig+0xacc>)
 8010a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a12:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	085b      	lsrs	r3, r3, #1
 8010a1c:	441a      	add	r2, r3
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2a:	2b0f      	cmp	r3, #15
 8010a2c:	d909      	bls.n	8010a42 <UART_SetConfig+0xa8e>
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a34:	d205      	bcs.n	8010a42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	60da      	str	r2, [r3, #12]
 8010a40:	e002      	b.n	8010a48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2200      	movs	r2, #0
 8010a62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010a64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3748      	adds	r7, #72	; 0x48
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a72:	bf00      	nop
 8010a74:	58024400 	.word	0x58024400
 8010a78:	03d09000 	.word	0x03d09000
 8010a7c:	003d0900 	.word	0x003d0900
 8010a80:	0801ad68 	.word	0x0801ad68

08010a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a90:	f003 0308 	and.w	r3, r3, #8
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d00a      	beq.n	8010aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	430a      	orrs	r2, r1
 8010ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad4:	f003 0302 	and.w	r3, r3, #2
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00a      	beq.n	8010af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	430a      	orrs	r2, r1
 8010af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af6:	f003 0304 	and.w	r3, r3, #4
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00a      	beq.n	8010b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	430a      	orrs	r2, r1
 8010b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b18:	f003 0310 	and.w	r3, r3, #16
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00a      	beq.n	8010b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	430a      	orrs	r2, r1
 8010b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b3a:	f003 0320 	and.w	r3, r3, #32
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00a      	beq.n	8010b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	430a      	orrs	r2, r1
 8010b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d01a      	beq.n	8010b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	430a      	orrs	r2, r1
 8010b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b82:	d10a      	bne.n	8010b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	430a      	orrs	r2, r1
 8010b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00a      	beq.n	8010bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	430a      	orrs	r2, r1
 8010bba:	605a      	str	r2, [r3, #4]
  }
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b098      	sub	sp, #96	; 0x60
 8010bcc:	af02      	add	r7, sp, #8
 8010bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010bd8:	f7f3 fd7a 	bl	80046d0 <HAL_GetTick>
 8010bdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f003 0308 	and.w	r3, r3, #8
 8010be8:	2b08      	cmp	r3, #8
 8010bea:	d12f      	bne.n	8010c4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f88e 	bl	8010d1c <UART_WaitOnFlagUntilTimeout>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d022      	beq.n	8010c4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	e853 3f00 	ldrex	r3, [r3]
 8010c12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c24:	647b      	str	r3, [r7, #68]	; 0x44
 8010c26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c2c:	e841 2300 	strex	r3, r2, [r1]
 8010c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1e6      	bne.n	8010c06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2220      	movs	r2, #32
 8010c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010c48:	2303      	movs	r3, #3
 8010c4a:	e063      	b.n	8010d14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f003 0304 	and.w	r3, r3, #4
 8010c56:	2b04      	cmp	r3, #4
 8010c58:	d149      	bne.n	8010cee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c62:	2200      	movs	r2, #0
 8010c64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 f857 	bl	8010d1c <UART_WaitOnFlagUntilTimeout>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d03c      	beq.n	8010cee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	e853 3f00 	ldrex	r3, [r3]
 8010c80:	623b      	str	r3, [r7, #32]
   return(result);
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c92:	633b      	str	r3, [r7, #48]	; 0x30
 8010c94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c9a:	e841 2300 	strex	r3, r2, [r1]
 8010c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1e6      	bne.n	8010c74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	3308      	adds	r3, #8
 8010cac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	e853 3f00 	ldrex	r3, [r3]
 8010cb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f023 0301 	bic.w	r3, r3, #1
 8010cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cc6:	61fa      	str	r2, [r7, #28]
 8010cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cca:	69b9      	ldr	r1, [r7, #24]
 8010ccc:	69fa      	ldr	r2, [r7, #28]
 8010cce:	e841 2300 	strex	r3, r2, [r1]
 8010cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1e5      	bne.n	8010ca6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2220      	movs	r2, #32
 8010cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010cea:	2303      	movs	r3, #3
 8010cec:	e012      	b.n	8010d14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2220      	movs	r2, #32
 8010cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2220      	movs	r2, #32
 8010cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2200      	movs	r2, #0
 8010d02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010d12:	2300      	movs	r3, #0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3758      	adds	r7, #88	; 0x58
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	603b      	str	r3, [r7, #0]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d2c:	e04f      	b.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d34:	d04b      	beq.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d36:	f7f3 fccb 	bl	80046d0 <HAL_GetTick>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	69ba      	ldr	r2, [r7, #24]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d302      	bcc.n	8010d4c <UART_WaitOnFlagUntilTimeout+0x30>
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	e04e      	b.n	8010dee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f003 0304 	and.w	r3, r3, #4
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d037      	beq.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b80      	cmp	r3, #128	; 0x80
 8010d62:	d034      	beq.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b40      	cmp	r3, #64	; 0x40
 8010d68:	d031      	beq.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	69db      	ldr	r3, [r3, #28]
 8010d70:	f003 0308 	and.w	r3, r3, #8
 8010d74:	2b08      	cmp	r3, #8
 8010d76:	d110      	bne.n	8010d9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2208      	movs	r2, #8
 8010d7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 f95b 	bl	801103c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2208      	movs	r2, #8
 8010d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e029      	b.n	8010dee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	69db      	ldr	r3, [r3, #28]
 8010da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010da8:	d111      	bne.n	8010dce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010db2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f000 f941 	bl	801103c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2220      	movs	r2, #32
 8010dbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010dca:	2303      	movs	r3, #3
 8010dcc:	e00f      	b.n	8010dee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	69da      	ldr	r2, [r3, #28]
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	bf0c      	ite	eq
 8010dde:	2301      	moveq	r3, #1
 8010de0:	2300      	movne	r3, #0
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	461a      	mov	r2, r3
 8010de6:	79fb      	ldrb	r3, [r7, #7]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d0a0      	beq.n	8010d2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
	...

08010df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b0a3      	sub	sp, #140	; 0x8c
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	4613      	mov	r3, r2
 8010e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	68ba      	ldr	r2, [r7, #8]
 8010e0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	88fa      	ldrh	r2, [r7, #6]
 8010e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	88fa      	ldrh	r2, [r7, #6]
 8010e18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e2a:	d10e      	bne.n	8010e4a <UART_Start_Receive_IT+0x52>
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	691b      	ldr	r3, [r3, #16]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d105      	bne.n	8010e40 <UART_Start_Receive_IT+0x48>
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010e3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e3e:	e02d      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	22ff      	movs	r2, #255	; 0xff
 8010e44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e48:	e028      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10d      	bne.n	8010e6e <UART_Start_Receive_IT+0x76>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	691b      	ldr	r3, [r3, #16]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d104      	bne.n	8010e64 <UART_Start_Receive_IT+0x6c>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	22ff      	movs	r2, #255	; 0xff
 8010e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e62:	e01b      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	227f      	movs	r2, #127	; 0x7f
 8010e68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e6c:	e016      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e76:	d10d      	bne.n	8010e94 <UART_Start_Receive_IT+0x9c>
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d104      	bne.n	8010e8a <UART_Start_Receive_IT+0x92>
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	227f      	movs	r2, #127	; 0x7f
 8010e84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e88:	e008      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	223f      	movs	r2, #63	; 0x3f
 8010e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e92:	e003      	b.n	8010e9c <UART_Start_Receive_IT+0xa4>
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2200      	movs	r2, #0
 8010e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2222      	movs	r2, #34	; 0x22
 8010ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eb6:	e853 3f00 	ldrex	r3, [r3]
 8010eba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ebe:	f043 0301 	orr.w	r3, r3, #1
 8010ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	3308      	adds	r3, #8
 8010ecc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010ed0:	673a      	str	r2, [r7, #112]	; 0x70
 8010ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010ed6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010ed8:	e841 2300 	strex	r3, r2, [r1]
 8010edc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1e3      	bne.n	8010eac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010eec:	d14f      	bne.n	8010f8e <UART_Start_Receive_IT+0x196>
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ef4:	88fa      	ldrh	r2, [r7, #6]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d349      	bcc.n	8010f8e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	689b      	ldr	r3, [r3, #8]
 8010efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f02:	d107      	bne.n	8010f14 <UART_Start_Receive_IT+0x11c>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	4a47      	ldr	r2, [pc, #284]	; (801102c <UART_Start_Receive_IT+0x234>)
 8010f10:	675a      	str	r2, [r3, #116]	; 0x74
 8010f12:	e002      	b.n	8010f1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	4a46      	ldr	r2, [pc, #280]	; (8011030 <UART_Start_Receive_IT+0x238>)
 8010f18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d01a      	beq.n	8010f58 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2a:	e853 3f00 	ldrex	r3, [r3]
 8010f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	461a      	mov	r2, r3
 8010f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f46:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f4c:	e841 2300 	strex	r3, r2, [r1]
 8010f50:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1e4      	bne.n	8010f22 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f62:	e853 3f00 	ldrex	r3, [r3]
 8010f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3308      	adds	r3, #8
 8010f76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010f78:	64ba      	str	r2, [r7, #72]	; 0x48
 8010f7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f80:	e841 2300 	strex	r3, r2, [r1]
 8010f84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1e5      	bne.n	8010f58 <UART_Start_Receive_IT+0x160>
 8010f8c:	e046      	b.n	801101c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f96:	d107      	bne.n	8010fa8 <UART_Start_Receive_IT+0x1b0>
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d103      	bne.n	8010fa8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	4a24      	ldr	r2, [pc, #144]	; (8011034 <UART_Start_Receive_IT+0x23c>)
 8010fa4:	675a      	str	r2, [r3, #116]	; 0x74
 8010fa6:	e002      	b.n	8010fae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	4a23      	ldr	r2, [pc, #140]	; (8011038 <UART_Start_Receive_IT+0x240>)
 8010fac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	691b      	ldr	r3, [r3, #16]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d019      	beq.n	8010fea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	e853 3f00 	ldrex	r3, [r3]
 8010fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010fca:	677b      	str	r3, [r7, #116]	; 0x74
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8010fd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fdc:	e841 2300 	strex	r3, r2, [r1]
 8010fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d1e6      	bne.n	8010fb6 <UART_Start_Receive_IT+0x1be>
 8010fe8:	e018      	b.n	801101c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	e853 3f00 	ldrex	r3, [r3]
 8010ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	f043 0320 	orr.w	r3, r3, #32
 8010ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	461a      	mov	r2, r3
 8011006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011008:	623b      	str	r3, [r7, #32]
 801100a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801100c:	69f9      	ldr	r1, [r7, #28]
 801100e:	6a3a      	ldr	r2, [r7, #32]
 8011010:	e841 2300 	strex	r3, r2, [r1]
 8011014:	61bb      	str	r3, [r7, #24]
   return(result);
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d1e6      	bne.n	8010fea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	378c      	adds	r7, #140	; 0x8c
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	08011ba1 	.word	0x08011ba1
 8011030:	08011841 	.word	0x08011841
 8011034:	08011689 	.word	0x08011689
 8011038:	080114d1 	.word	0x080114d1

0801103c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801103c:	b480      	push	{r7}
 801103e:	b095      	sub	sp, #84	; 0x54
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011058:	64fb      	str	r3, [r7, #76]	; 0x4c
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	461a      	mov	r2, r3
 8011060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011062:	643b      	str	r3, [r7, #64]	; 0x40
 8011064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801106a:	e841 2300 	strex	r3, r2, [r1]
 801106e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1e6      	bne.n	8011044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	e853 3f00 	ldrex	r3, [r3]
 8011084:	61fb      	str	r3, [r7, #28]
   return(result);
 8011086:	69fa      	ldr	r2, [r7, #28]
 8011088:	4b1e      	ldr	r3, [pc, #120]	; (8011104 <UART_EndRxTransfer+0xc8>)
 801108a:	4013      	ands	r3, r2
 801108c:	64bb      	str	r3, [r7, #72]	; 0x48
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3308      	adds	r3, #8
 8011094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801109c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801109e:	e841 2300 	strex	r3, r2, [r1]
 80110a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1e5      	bne.n	8011076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d118      	bne.n	80110e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	e853 3f00 	ldrex	r3, [r3]
 80110be:	60bb      	str	r3, [r7, #8]
   return(result);
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f023 0310 	bic.w	r3, r3, #16
 80110c6:	647b      	str	r3, [r7, #68]	; 0x44
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	461a      	mov	r2, r3
 80110ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d0:	61bb      	str	r3, [r7, #24]
 80110d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d4:	6979      	ldr	r1, [r7, #20]
 80110d6:	69ba      	ldr	r2, [r7, #24]
 80110d8:	e841 2300 	strex	r3, r2, [r1]
 80110dc:	613b      	str	r3, [r7, #16]
   return(result);
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1e6      	bne.n	80110b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2220      	movs	r2, #32
 80110e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2200      	movs	r2, #0
 80110f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80110f8:	bf00      	nop
 80110fa:	3754      	adds	r7, #84	; 0x54
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	effffffe 	.word	0xeffffffe

08011108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2200      	movs	r2, #0
 801111a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7fe ff2e 	bl	800ff88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801112c:	bf00      	nop
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011134:	b480      	push	{r7}
 8011136:	b08f      	sub	sp, #60	; 0x3c
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011142:	2b21      	cmp	r3, #33	; 0x21
 8011144:	d14c      	bne.n	80111e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801114c:	b29b      	uxth	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d132      	bne.n	80111b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011158:	6a3b      	ldr	r3, [r7, #32]
 801115a:	e853 3f00 	ldrex	r3, [r3]
 801115e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011166:	637b      	str	r3, [r7, #52]	; 0x34
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	461a      	mov	r2, r3
 801116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011172:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011178:	e841 2300 	strex	r3, r2, [r1]
 801117c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1e6      	bne.n	8011152 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	e853 3f00 	ldrex	r3, [r3]
 8011190:	60bb      	str	r3, [r7, #8]
   return(result);
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011198:	633b      	str	r3, [r7, #48]	; 0x30
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	461a      	mov	r2, r3
 80111a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a2:	61bb      	str	r3, [r7, #24]
 80111a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111a6:	6979      	ldr	r1, [r7, #20]
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	e841 2300 	strex	r3, r2, [r1]
 80111ae:	613b      	str	r3, [r7, #16]
   return(result);
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d1e6      	bne.n	8011184 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80111b6:	e013      	b.n	80111e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111bc:	781a      	ldrb	r2, [r3, #0]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	3b01      	subs	r3, #1
 80111d8:	b29a      	uxth	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80111e0:	bf00      	nop
 80111e2:	373c      	adds	r7, #60	; 0x3c
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b091      	sub	sp, #68	; 0x44
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111fa:	2b21      	cmp	r3, #33	; 0x21
 80111fc:	d151      	bne.n	80112a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011204:	b29b      	uxth	r3, r3
 8011206:	2b00      	cmp	r3, #0
 8011208:	d132      	bne.n	8011270 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011212:	e853 3f00 	ldrex	r3, [r3]
 8011216:	623b      	str	r3, [r7, #32]
   return(result);
 8011218:	6a3b      	ldr	r3, [r7, #32]
 801121a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801121e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	461a      	mov	r2, r3
 8011226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011228:	633b      	str	r3, [r7, #48]	; 0x30
 801122a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801122c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801122e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011230:	e841 2300 	strex	r3, r2, [r1]
 8011234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1e6      	bne.n	801120a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	e853 3f00 	ldrex	r3, [r3]
 8011248:	60fb      	str	r3, [r7, #12]
   return(result);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011250:	637b      	str	r3, [r7, #52]	; 0x34
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801125a:	61fb      	str	r3, [r7, #28]
 801125c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801125e:	69b9      	ldr	r1, [r7, #24]
 8011260:	69fa      	ldr	r2, [r7, #28]
 8011262:	e841 2300 	strex	r3, r2, [r1]
 8011266:	617b      	str	r3, [r7, #20]
   return(result);
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1e6      	bne.n	801123c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801126e:	e018      	b.n	80112a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011274:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011278:	881b      	ldrh	r3, [r3, #0]
 801127a:	461a      	mov	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011284:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801128a:	1c9a      	adds	r2, r3, #2
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011296:	b29b      	uxth	r3, r3
 8011298:	3b01      	subs	r3, #1
 801129a:	b29a      	uxth	r2, r3
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80112a2:	bf00      	nop
 80112a4:	3744      	adds	r7, #68	; 0x44
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80112ae:	b480      	push	{r7}
 80112b0:	b091      	sub	sp, #68	; 0x44
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112bc:	2b21      	cmp	r3, #33	; 0x21
 80112be:	d160      	bne.n	8011382 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80112c8:	e057      	b.n	801137a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d133      	bne.n	801133e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	3308      	adds	r3, #8
 80112dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	e853 3f00 	ldrex	r3, [r3]
 80112e4:	623b      	str	r3, [r7, #32]
   return(result);
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80112ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	3308      	adds	r3, #8
 80112f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f6:	633a      	str	r2, [r7, #48]	; 0x30
 80112f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112fe:	e841 2300 	strex	r3, r2, [r1]
 8011302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011306:	2b00      	cmp	r3, #0
 8011308:	d1e5      	bne.n	80112d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	e853 3f00 	ldrex	r3, [r3]
 8011316:	60fb      	str	r3, [r7, #12]
   return(result);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801131e:	637b      	str	r3, [r7, #52]	; 0x34
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	461a      	mov	r2, r3
 8011326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011328:	61fb      	str	r3, [r7, #28]
 801132a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801132c:	69b9      	ldr	r1, [r7, #24]
 801132e:	69fa      	ldr	r2, [r7, #28]
 8011330:	e841 2300 	strex	r3, r2, [r1]
 8011334:	617b      	str	r3, [r7, #20]
   return(result);
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e6      	bne.n	801130a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801133c:	e021      	b.n	8011382 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	69db      	ldr	r3, [r3, #28]
 8011344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011348:	2b00      	cmp	r3, #0
 801134a:	d013      	beq.n	8011374 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011350:	781a      	ldrb	r2, [r3, #0]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011368:	b29b      	uxth	r3, r3
 801136a:	3b01      	subs	r3, #1
 801136c:	b29a      	uxth	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011374:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011376:	3b01      	subs	r3, #1
 8011378:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801137a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801137c:	2b00      	cmp	r3, #0
 801137e:	d1a4      	bne.n	80112ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011380:	e7ff      	b.n	8011382 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8011382:	bf00      	nop
 8011384:	3744      	adds	r7, #68	; 0x44
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801138e:	b480      	push	{r7}
 8011390:	b091      	sub	sp, #68	; 0x44
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801139c:	2b21      	cmp	r3, #33	; 0x21
 801139e:	d165      	bne.n	801146c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80113a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80113a8:	e05c      	b.n	8011464 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d133      	bne.n	801141e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	3308      	adds	r3, #8
 80113bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113be:	6a3b      	ldr	r3, [r7, #32]
 80113c0:	e853 3f00 	ldrex	r3, [r3]
 80113c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80113cc:	637b      	str	r3, [r7, #52]	; 0x34
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	3308      	adds	r3, #8
 80113d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80113d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80113dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113de:	e841 2300 	strex	r3, r2, [r1]
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1e5      	bne.n	80113b6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	e853 3f00 	ldrex	r3, [r3]
 80113f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	461a      	mov	r2, r3
 8011406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011408:	61bb      	str	r3, [r7, #24]
 801140a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140c:	6979      	ldr	r1, [r7, #20]
 801140e:	69ba      	ldr	r2, [r7, #24]
 8011410:	e841 2300 	strex	r3, r2, [r1]
 8011414:	613b      	str	r3, [r7, #16]
   return(result);
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1e6      	bne.n	80113ea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801141c:	e026      	b.n	801146c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69db      	ldr	r3, [r3, #28]
 8011424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011428:	2b00      	cmp	r3, #0
 801142a:	d018      	beq.n	801145e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011430:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	461a      	mov	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011440:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011446:	1c9a      	adds	r2, r3, #2
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011452:	b29b      	uxth	r3, r3
 8011454:	3b01      	subs	r3, #1
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801145e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011460:	3b01      	subs	r3, #1
 8011462:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011464:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011466:	2b00      	cmp	r3, #0
 8011468:	d19f      	bne.n	80113aa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801146a:	e7ff      	b.n	801146c <UART_TxISR_16BIT_FIFOEN+0xde>
 801146c:	bf00      	nop
 801146e:	3744      	adds	r7, #68	; 0x44
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b088      	sub	sp, #32
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	e853 3f00 	ldrex	r3, [r3]
 801148c:	60bb      	str	r3, [r7, #8]
   return(result);
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011494:	61fb      	str	r3, [r7, #28]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	461a      	mov	r2, r3
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	61bb      	str	r3, [r7, #24]
 80114a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114a2:	6979      	ldr	r1, [r7, #20]
 80114a4:	69ba      	ldr	r2, [r7, #24]
 80114a6:	e841 2300 	strex	r3, r2, [r1]
 80114aa:	613b      	str	r3, [r7, #16]
   return(result);
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1e6      	bne.n	8011480 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2220      	movs	r2, #32
 80114b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7fe fd57 	bl	800ff74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114c6:	bf00      	nop
 80114c8:	3720      	adds	r7, #32
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
	...

080114d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b09c      	sub	sp, #112	; 0x70
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114e8:	2b22      	cmp	r3, #34	; 0x22
 80114ea:	f040 80be 	bne.w	801166a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80114f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80114fc:	b2d9      	uxtb	r1, r3
 80114fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011502:	b2da      	uxtb	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011508:	400a      	ands	r2, r1
 801150a:	b2d2      	uxtb	r2, r2
 801150c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801151e:	b29b      	uxth	r3, r3
 8011520:	3b01      	subs	r3, #1
 8011522:	b29a      	uxth	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011530:	b29b      	uxth	r3, r3
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 80a1 	bne.w	801167a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011540:	e853 3f00 	ldrex	r3, [r3]
 8011544:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801154c:	66bb      	str	r3, [r7, #104]	; 0x68
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011556:	65bb      	str	r3, [r7, #88]	; 0x58
 8011558:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801155c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e6      	bne.n	8011538 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	3308      	adds	r3, #8
 8011570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011574:	e853 3f00 	ldrex	r3, [r3]
 8011578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157c:	f023 0301 	bic.w	r3, r3, #1
 8011580:	667b      	str	r3, [r7, #100]	; 0x64
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	3308      	adds	r3, #8
 8011588:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801158a:	647a      	str	r2, [r7, #68]	; 0x44
 801158c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011592:	e841 2300 	strex	r3, r2, [r1]
 8011596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e5      	bne.n	801156a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2220      	movs	r2, #32
 80115a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a33      	ldr	r2, [pc, #204]	; (8011684 <UART_RxISR_8BIT+0x1b4>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d01f      	beq.n	80115fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d018      	beq.n	80115fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d2:	e853 3f00 	ldrex	r3, [r3]
 80115d6:	623b      	str	r3, [r7, #32]
   return(result);
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80115de:	663b      	str	r3, [r7, #96]	; 0x60
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	461a      	mov	r2, r3
 80115e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115e8:	633b      	str	r3, [r7, #48]	; 0x30
 80115ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f0:	e841 2300 	strex	r3, r2, [r1]
 80115f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80115f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1e6      	bne.n	80115ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011600:	2b01      	cmp	r3, #1
 8011602:	d12e      	bne.n	8011662 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	e853 3f00 	ldrex	r3, [r3]
 8011616:	60fb      	str	r3, [r7, #12]
   return(result);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f023 0310 	bic.w	r3, r3, #16
 801161e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	461a      	mov	r2, r3
 8011626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011628:	61fb      	str	r3, [r7, #28]
 801162a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162c:	69b9      	ldr	r1, [r7, #24]
 801162e:	69fa      	ldr	r2, [r7, #28]
 8011630:	e841 2300 	strex	r3, r2, [r1]
 8011634:	617b      	str	r3, [r7, #20]
   return(result);
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e6      	bne.n	801160a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	f003 0310 	and.w	r3, r3, #16
 8011646:	2b10      	cmp	r3, #16
 8011648:	d103      	bne.n	8011652 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2210      	movs	r2, #16
 8011650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011658:	4619      	mov	r1, r3
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7fe fc9e 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011660:	e00b      	b.n	801167a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7f2 fa3c 	bl	8003ae0 <HAL_UART_RxCpltCallback>
}
 8011668:	e007      	b.n	801167a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	699a      	ldr	r2, [r3, #24]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f042 0208 	orr.w	r2, r2, #8
 8011678:	619a      	str	r2, [r3, #24]
}
 801167a:	bf00      	nop
 801167c:	3770      	adds	r7, #112	; 0x70
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	58000c00 	.word	0x58000c00

08011688 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b09c      	sub	sp, #112	; 0x70
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011696:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116a0:	2b22      	cmp	r3, #34	; 0x22
 80116a2:	f040 80be 	bne.w	8011822 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80116b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80116ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80116be:	4013      	ands	r3, r2
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116ca:	1c9a      	adds	r2, r3, #2
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	3b01      	subs	r3, #1
 80116da:	b29a      	uxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f040 80a1 	bne.w	8011832 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80116fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011704:	667b      	str	r3, [r7, #100]	; 0x64
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801170e:	657b      	str	r3, [r7, #84]	; 0x54
 8011710:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011712:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011716:	e841 2300 	strex	r3, r2, [r1]
 801171a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1e6      	bne.n	80116f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	3308      	adds	r3, #8
 8011728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	e853 3f00 	ldrex	r3, [r3]
 8011730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	f023 0301 	bic.w	r3, r3, #1
 8011738:	663b      	str	r3, [r7, #96]	; 0x60
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	3308      	adds	r3, #8
 8011740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011742:	643a      	str	r2, [r7, #64]	; 0x40
 8011744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801174a:	e841 2300 	strex	r3, r2, [r1]
 801174e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	2b00      	cmp	r3, #0
 8011754:	d1e5      	bne.n	8011722 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2220      	movs	r2, #32
 801175a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a33      	ldr	r2, [pc, #204]	; (801183c <UART_RxISR_16BIT+0x1b4>)
 8011770:	4293      	cmp	r3, r2
 8011772:	d01f      	beq.n	80117b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801177e:	2b00      	cmp	r3, #0
 8011780:	d018      	beq.n	80117b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011788:	6a3b      	ldr	r3, [r7, #32]
 801178a:	e853 3f00 	ldrex	r3, [r3]
 801178e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	461a      	mov	r2, r3
 801179e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117a8:	e841 2300 	strex	r3, r2, [r1]
 80117ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d1e6      	bne.n	8011782 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d12e      	bne.n	801181a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2200      	movs	r2, #0
 80117c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	e853 3f00 	ldrex	r3, [r3]
 80117ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	f023 0310 	bic.w	r3, r3, #16
 80117d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	461a      	mov	r2, r3
 80117de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117e0:	61bb      	str	r3, [r7, #24]
 80117e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e4:	6979      	ldr	r1, [r7, #20]
 80117e6:	69ba      	ldr	r2, [r7, #24]
 80117e8:	e841 2300 	strex	r3, r2, [r1]
 80117ec:	613b      	str	r3, [r7, #16]
   return(result);
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1e6      	bne.n	80117c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	69db      	ldr	r3, [r3, #28]
 80117fa:	f003 0310 	and.w	r3, r3, #16
 80117fe:	2b10      	cmp	r3, #16
 8011800:	d103      	bne.n	801180a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2210      	movs	r2, #16
 8011808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011810:	4619      	mov	r1, r3
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7fe fbc2 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011818:	e00b      	b.n	8011832 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7f2 f960 	bl	8003ae0 <HAL_UART_RxCpltCallback>
}
 8011820:	e007      	b.n	8011832 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	699a      	ldr	r2, [r3, #24]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	f042 0208 	orr.w	r2, r2, #8
 8011830:	619a      	str	r2, [r3, #24]
}
 8011832:	bf00      	nop
 8011834:	3770      	adds	r7, #112	; 0x70
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	58000c00 	.word	0x58000c00

08011840 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b0ac      	sub	sp, #176	; 0xb0
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801184e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	69db      	ldr	r3, [r3, #28]
 8011858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011876:	2b22      	cmp	r3, #34	; 0x22
 8011878:	f040 8180 	bne.w	8011b7c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011882:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011886:	e123      	b.n	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801188e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011892:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011896:	b2d9      	uxtb	r1, r3
 8011898:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801189c:	b2da      	uxtb	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118a2:	400a      	ands	r2, r1
 80118a4:	b2d2      	uxtb	r2, r2
 80118a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	3b01      	subs	r3, #1
 80118bc:	b29a      	uxth	r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	69db      	ldr	r3, [r3, #28]
 80118ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80118ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80118d2:	f003 0307 	and.w	r3, r3, #7
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d053      	beq.n	8011982 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80118da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80118de:	f003 0301 	and.w	r3, r3, #1
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d011      	beq.n	801190a <UART_RxISR_8BIT_FIFOEN+0xca>
 80118e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80118ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d00b      	beq.n	801190a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	2201      	movs	r2, #1
 80118f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011900:	f043 0201 	orr.w	r2, r3, #1
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801190a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801190e:	f003 0302 	and.w	r3, r3, #2
 8011912:	2b00      	cmp	r3, #0
 8011914:	d011      	beq.n	801193a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2202      	movs	r2, #2
 8011928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011930:	f043 0204 	orr.w	r2, r3, #4
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801193e:	f003 0304 	and.w	r3, r3, #4
 8011942:	2b00      	cmp	r3, #0
 8011944:	d011      	beq.n	801196a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801194a:	f003 0301 	and.w	r3, r3, #1
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2204      	movs	r2, #4
 8011958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011960:	f043 0202 	orr.w	r2, r3, #2
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011970:	2b00      	cmp	r3, #0
 8011972:	d006      	beq.n	8011982 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7fe fb07 	bl	800ff88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011988:	b29b      	uxth	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	f040 80a0 	bne.w	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011998:	e853 3f00 	ldrex	r3, [r3]
 801199c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801199e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80119b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80119b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80119b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80119ba:	e841 2300 	strex	r3, r2, [r1]
 80119be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80119c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1e4      	bne.n	8011990 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	3308      	adds	r3, #8
 80119cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119d0:	e853 3f00 	ldrex	r3, [r3]
 80119d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80119d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80119d8:	4b6e      	ldr	r3, [pc, #440]	; (8011b94 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80119da:	4013      	ands	r3, r2
 80119dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	3308      	adds	r3, #8
 80119e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80119ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80119ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80119f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80119f2:	e841 2300 	strex	r3, r2, [r1]
 80119f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80119f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1e3      	bne.n	80119c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2220      	movs	r2, #32
 8011a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	4a60      	ldr	r2, [pc, #384]	; (8011b98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d021      	beq.n	8011a60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d01a      	beq.n	8011a60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a32:	e853 3f00 	ldrex	r3, [r3]
 8011a36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	461a      	mov	r2, r3
 8011a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8011a4e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011a54:	e841 2300 	strex	r3, r2, [r1]
 8011a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d1e4      	bne.n	8011a2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d130      	bne.n	8011aca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a76:	e853 3f00 	ldrex	r3, [r3]
 8011a7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a7e:	f023 0310 	bic.w	r3, r3, #16
 8011a82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a90:	643b      	str	r3, [r7, #64]	; 0x40
 8011a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a98:	e841 2300 	strex	r3, r2, [r1]
 8011a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1e4      	bne.n	8011a6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	69db      	ldr	r3, [r3, #28]
 8011aaa:	f003 0310 	and.w	r3, r3, #16
 8011aae:	2b10      	cmp	r3, #16
 8011ab0:	d103      	bne.n	8011aba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2210      	movs	r2, #16
 8011ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7fe fa6a 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
 8011ac8:	e002      	b.n	8011ad0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7f2 f808 	bl	8003ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ad0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d006      	beq.n	8011ae6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011adc:	f003 0320 	and.w	r3, r3, #32
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f47f aed1 	bne.w	8011888 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011aec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011af0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d049      	beq.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011afe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d242      	bcs.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	3308      	adds	r3, #8
 8011b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	e853 3f00 	ldrex	r3, [r3]
 8011b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	3308      	adds	r3, #8
 8011b26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b32:	e841 2300 	strex	r3, r2, [r1]
 8011b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1e3      	bne.n	8011b06 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4a16      	ldr	r2, [pc, #88]	; (8011b9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011b42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	e853 3f00 	ldrex	r3, [r3]
 8011b50:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	f043 0320 	orr.w	r3, r3, #32
 8011b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	461a      	mov	r2, r3
 8011b62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b66:	61bb      	str	r3, [r7, #24]
 8011b68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6a:	6979      	ldr	r1, [r7, #20]
 8011b6c:	69ba      	ldr	r2, [r7, #24]
 8011b6e:	e841 2300 	strex	r3, r2, [r1]
 8011b72:	613b      	str	r3, [r7, #16]
   return(result);
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1e4      	bne.n	8011b44 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011b7a:	e007      	b.n	8011b8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	699a      	ldr	r2, [r3, #24]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f042 0208 	orr.w	r2, r2, #8
 8011b8a:	619a      	str	r2, [r3, #24]
}
 8011b8c:	bf00      	nop
 8011b8e:	37b0      	adds	r7, #176	; 0xb0
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	effffffe 	.word	0xeffffffe
 8011b98:	58000c00 	.word	0x58000c00
 8011b9c:	080114d1 	.word	0x080114d1

08011ba0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b0ae      	sub	sp, #184	; 0xb8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	689b      	ldr	r3, [r3, #8]
 8011bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bd6:	2b22      	cmp	r3, #34	; 0x22
 8011bd8:	f040 8184 	bne.w	8011ee4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011be2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011be6:	e127      	b.n	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011bfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011bfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011c02:	4013      	ands	r3, r2
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c10:	1c9a      	adds	r2, r3, #2
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011c32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011c36:	f003 0307 	and.w	r3, r3, #7
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d053      	beq.n	8011ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011c42:	f003 0301 	and.w	r3, r3, #1
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d011      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8011c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00b      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c64:	f043 0201 	orr.w	r2, r3, #1
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011c72:	f003 0302 	and.w	r3, r3, #2
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d011      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00b      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c94:	f043 0204 	orr.w	r2, r3, #4
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ca2:	f003 0304 	and.w	r3, r3, #4
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011cae:	f003 0301 	and.w	r3, r3, #1
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00b      	beq.n	8011cce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2204      	movs	r2, #4
 8011cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cc4:	f043 0202 	orr.w	r2, r3, #2
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d006      	beq.n	8011ce6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7fe f955 	bl	800ff88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f040 80a2 	bne.w	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cfc:	e853 3f00 	ldrex	r3, [r3]
 8011d00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011d08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	461a      	mov	r2, r3
 8011d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d22:	e841 2300 	strex	r3, r2, [r1]
 8011d26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d1e2      	bne.n	8011cf4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	3308      	adds	r3, #8
 8011d34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011d38:	e853 3f00 	ldrex	r3, [r3]
 8011d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011d3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d40:	4b6e      	ldr	r3, [pc, #440]	; (8011efc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011d42:	4013      	ands	r3, r2
 8011d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3308      	adds	r3, #8
 8011d4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011d52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011d54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011d5a:	e841 2300 	strex	r3, r2, [r1]
 8011d5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d1e3      	bne.n	8011d2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2220      	movs	r2, #32
 8011d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2200      	movs	r2, #0
 8011d72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a60      	ldr	r2, [pc, #384]	; (8011f00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d021      	beq.n	8011dc8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d01a      	beq.n	8011dc8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d9a:	e853 3f00 	ldrex	r3, [r3]
 8011d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011da2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8011db6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011dbc:	e841 2300 	strex	r3, r2, [r1]
 8011dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1e4      	bne.n	8011d92 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d130      	bne.n	8011e32 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de6:	f023 0310 	bic.w	r3, r3, #16
 8011dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011df8:	647b      	str	r3, [r7, #68]	; 0x44
 8011dfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e00:	e841 2300 	strex	r3, r2, [r1]
 8011e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1e4      	bne.n	8011dd6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	69db      	ldr	r3, [r3, #28]
 8011e12:	f003 0310 	and.w	r3, r3, #16
 8011e16:	2b10      	cmp	r3, #16
 8011e18:	d103      	bne.n	8011e22 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2210      	movs	r2, #16
 8011e20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7fe f8b6 	bl	800ff9c <HAL_UARTEx_RxEventCallback>
 8011e30:	e002      	b.n	8011e38 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7f1 fe54 	bl	8003ae0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d006      	beq.n	8011e4e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011e40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e44:	f003 0320 	and.w	r3, r3, #32
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f47f aecd 	bne.w	8011be8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e54:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011e58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d049      	beq.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d242      	bcs.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3308      	adds	r3, #8
 8011e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e78:	e853 3f00 	ldrex	r3, [r3]
 8011e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	3308      	adds	r3, #8
 8011e8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011e92:	633a      	str	r2, [r7, #48]	; 0x30
 8011e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e9a:	e841 2300 	strex	r3, r2, [r1]
 8011e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1e3      	bne.n	8011e6e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	4a16      	ldr	r2, [pc, #88]	; (8011f04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011eaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	e853 3f00 	ldrex	r3, [r3]
 8011eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f043 0320 	orr.w	r3, r3, #32
 8011ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ece:	61fb      	str	r3, [r7, #28]
 8011ed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ed2:	69b9      	ldr	r1, [r7, #24]
 8011ed4:	69fa      	ldr	r2, [r7, #28]
 8011ed6:	e841 2300 	strex	r3, r2, [r1]
 8011eda:	617b      	str	r3, [r7, #20]
   return(result);
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1e4      	bne.n	8011eac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011ee2:	e007      	b.n	8011ef4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	699a      	ldr	r2, [r3, #24]
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f042 0208 	orr.w	r2, r2, #8
 8011ef2:	619a      	str	r2, [r3, #24]
}
 8011ef4:	bf00      	nop
 8011ef6:	37b8      	adds	r7, #184	; 0xb8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	effffffe 	.word	0xeffffffe
 8011f00:	58000c00 	.word	0x58000c00
 8011f04:	08011689 	.word	0x08011689

08011f08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011f10:	bf00      	nop
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011f24:	bf00      	nop
 8011f26:	370c      	adds	r7, #12
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b085      	sub	sp, #20
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d101      	bne.n	8011f5a <HAL_UARTEx_DisableFifoMode+0x16>
 8011f56:	2302      	movs	r3, #2
 8011f58:	e027      	b.n	8011faa <HAL_UARTEx_DisableFifoMode+0x66>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2224      	movs	r2, #36	; 0x24
 8011f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f022 0201 	bic.w	r2, r2, #1
 8011f80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011f88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	68fa      	ldr	r2, [r7, #12]
 8011f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3714      	adds	r7, #20
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b084      	sub	sp, #16
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d101      	bne.n	8011fce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011fca:	2302      	movs	r3, #2
 8011fcc:	e02d      	b.n	801202a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2224      	movs	r2, #36	; 0x24
 8011fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f022 0201 	bic.w	r2, r2, #1
 8011ff4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	683a      	ldr	r2, [r7, #0]
 8012006:	430a      	orrs	r2, r1
 8012008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f850 	bl	80120b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2220      	movs	r2, #32
 801201c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b084      	sub	sp, #16
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012042:	2b01      	cmp	r3, #1
 8012044:	d101      	bne.n	801204a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012046:	2302      	movs	r3, #2
 8012048:	e02d      	b.n	80120a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2201      	movs	r2, #1
 801204e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2224      	movs	r2, #36	; 0x24
 8012056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f022 0201 	bic.w	r2, r2, #1
 8012070:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	683a      	ldr	r2, [r7, #0]
 8012082:	430a      	orrs	r2, r1
 8012084:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 f812 	bl	80120b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2220      	movs	r2, #32
 8012098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
	...

080120b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80120b0:	b480      	push	{r7}
 80120b2:	b085      	sub	sp, #20
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d108      	bne.n	80120d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2201      	movs	r2, #1
 80120c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2201      	movs	r2, #1
 80120cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80120d0:	e031      	b.n	8012136 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80120d2:	2310      	movs	r3, #16
 80120d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80120d6:	2310      	movs	r3, #16
 80120d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	0e5b      	lsrs	r3, r3, #25
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	f003 0307 	and.w	r3, r3, #7
 80120e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	0f5b      	lsrs	r3, r3, #29
 80120f2:	b2db      	uxtb	r3, r3
 80120f4:	f003 0307 	and.w	r3, r3, #7
 80120f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120fa:	7bbb      	ldrb	r3, [r7, #14]
 80120fc:	7b3a      	ldrb	r2, [r7, #12]
 80120fe:	4911      	ldr	r1, [pc, #68]	; (8012144 <UARTEx_SetNbDataToProcess+0x94>)
 8012100:	5c8a      	ldrb	r2, [r1, r2]
 8012102:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012106:	7b3a      	ldrb	r2, [r7, #12]
 8012108:	490f      	ldr	r1, [pc, #60]	; (8012148 <UARTEx_SetNbDataToProcess+0x98>)
 801210a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801210c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012118:	7bfb      	ldrb	r3, [r7, #15]
 801211a:	7b7a      	ldrb	r2, [r7, #13]
 801211c:	4909      	ldr	r1, [pc, #36]	; (8012144 <UARTEx_SetNbDataToProcess+0x94>)
 801211e:	5c8a      	ldrb	r2, [r1, r2]
 8012120:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012124:	7b7a      	ldrb	r2, [r7, #13]
 8012126:	4908      	ldr	r1, [pc, #32]	; (8012148 <UARTEx_SetNbDataToProcess+0x98>)
 8012128:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801212a:	fb93 f3f2 	sdiv	r3, r3, r2
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012136:	bf00      	nop
 8012138:	3714      	adds	r7, #20
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	0801ad80 	.word	0x0801ad80
 8012148:	0801ad88 	.word	0x0801ad88

0801214c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801214c:	b084      	sub	sp, #16
 801214e:	b580      	push	{r7, lr}
 8012150:	b084      	sub	sp, #16
 8012152:	af00      	add	r7, sp, #0
 8012154:	6078      	str	r0, [r7, #4]
 8012156:	f107 001c 	add.w	r0, r7, #28
 801215a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801215e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012162:	2b01      	cmp	r3, #1
 8012164:	d121      	bne.n	80121aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	68da      	ldr	r2, [r3, #12]
 8012176:	4b2c      	ldr	r3, [pc, #176]	; (8012228 <USB_CoreInit+0xdc>)
 8012178:	4013      	ands	r3, r2
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801218a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801218e:	2b01      	cmp	r3, #1
 8012190:	d105      	bne.n	801219e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f001 faf6 	bl	8013790 <USB_CoreReset>
 80121a4:	4603      	mov	r3, r0
 80121a6:	73fb      	strb	r3, [r7, #15]
 80121a8:	e01b      	b.n	80121e2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f001 faea 	bl	8013790 <USB_CoreReset>
 80121bc:	4603      	mov	r3, r0
 80121be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80121c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d106      	bne.n	80121d6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	639a      	str	r2, [r3, #56]	; 0x38
 80121d4:	e005      	b.n	80121e2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80121e2:	7fbb      	ldrb	r3, [r7, #30]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d116      	bne.n	8012216 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121f6:	4b0d      	ldr	r3, [pc, #52]	; (801222c <USB_CoreInit+0xe0>)
 80121f8:	4313      	orrs	r3, r2
 80121fa:	687a      	ldr	r2, [r7, #4]
 80121fc:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	f043 0206 	orr.w	r2, r3, #6
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	f043 0220 	orr.w	r2, r3, #32
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012216:	7bfb      	ldrb	r3, [r7, #15]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012222:	b004      	add	sp, #16
 8012224:	4770      	bx	lr
 8012226:	bf00      	nop
 8012228:	ffbdffbf 	.word	0xffbdffbf
 801222c:	03ee0000 	.word	0x03ee0000

08012230 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012230:	b480      	push	{r7}
 8012232:	b087      	sub	sp, #28
 8012234:	af00      	add	r7, sp, #0
 8012236:	60f8      	str	r0, [r7, #12]
 8012238:	60b9      	str	r1, [r7, #8]
 801223a:	4613      	mov	r3, r2
 801223c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801223e:	79fb      	ldrb	r3, [r7, #7]
 8012240:	2b02      	cmp	r3, #2
 8012242:	d165      	bne.n	8012310 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	4a41      	ldr	r2, [pc, #260]	; (801234c <USB_SetTurnaroundTime+0x11c>)
 8012248:	4293      	cmp	r3, r2
 801224a:	d906      	bls.n	801225a <USB_SetTurnaroundTime+0x2a>
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	4a40      	ldr	r2, [pc, #256]	; (8012350 <USB_SetTurnaroundTime+0x120>)
 8012250:	4293      	cmp	r3, r2
 8012252:	d202      	bcs.n	801225a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012254:	230f      	movs	r3, #15
 8012256:	617b      	str	r3, [r7, #20]
 8012258:	e062      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	4a3c      	ldr	r2, [pc, #240]	; (8012350 <USB_SetTurnaroundTime+0x120>)
 801225e:	4293      	cmp	r3, r2
 8012260:	d306      	bcc.n	8012270 <USB_SetTurnaroundTime+0x40>
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	4a3b      	ldr	r2, [pc, #236]	; (8012354 <USB_SetTurnaroundTime+0x124>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d202      	bcs.n	8012270 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801226a:	230e      	movs	r3, #14
 801226c:	617b      	str	r3, [r7, #20]
 801226e:	e057      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	4a38      	ldr	r2, [pc, #224]	; (8012354 <USB_SetTurnaroundTime+0x124>)
 8012274:	4293      	cmp	r3, r2
 8012276:	d306      	bcc.n	8012286 <USB_SetTurnaroundTime+0x56>
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	4a37      	ldr	r2, [pc, #220]	; (8012358 <USB_SetTurnaroundTime+0x128>)
 801227c:	4293      	cmp	r3, r2
 801227e:	d202      	bcs.n	8012286 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012280:	230d      	movs	r3, #13
 8012282:	617b      	str	r3, [r7, #20]
 8012284:	e04c      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	4a33      	ldr	r2, [pc, #204]	; (8012358 <USB_SetTurnaroundTime+0x128>)
 801228a:	4293      	cmp	r3, r2
 801228c:	d306      	bcc.n	801229c <USB_SetTurnaroundTime+0x6c>
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	4a32      	ldr	r2, [pc, #200]	; (801235c <USB_SetTurnaroundTime+0x12c>)
 8012292:	4293      	cmp	r3, r2
 8012294:	d802      	bhi.n	801229c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012296:	230c      	movs	r3, #12
 8012298:	617b      	str	r3, [r7, #20]
 801229a:	e041      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	4a2f      	ldr	r2, [pc, #188]	; (801235c <USB_SetTurnaroundTime+0x12c>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d906      	bls.n	80122b2 <USB_SetTurnaroundTime+0x82>
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	4a2e      	ldr	r2, [pc, #184]	; (8012360 <USB_SetTurnaroundTime+0x130>)
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d802      	bhi.n	80122b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80122ac:	230b      	movs	r3, #11
 80122ae:	617b      	str	r3, [r7, #20]
 80122b0:	e036      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	4a2a      	ldr	r2, [pc, #168]	; (8012360 <USB_SetTurnaroundTime+0x130>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d906      	bls.n	80122c8 <USB_SetTurnaroundTime+0x98>
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	4a29      	ldr	r2, [pc, #164]	; (8012364 <USB_SetTurnaroundTime+0x134>)
 80122be:	4293      	cmp	r3, r2
 80122c0:	d802      	bhi.n	80122c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80122c2:	230a      	movs	r3, #10
 80122c4:	617b      	str	r3, [r7, #20]
 80122c6:	e02b      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	4a26      	ldr	r2, [pc, #152]	; (8012364 <USB_SetTurnaroundTime+0x134>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d906      	bls.n	80122de <USB_SetTurnaroundTime+0xae>
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	4a25      	ldr	r2, [pc, #148]	; (8012368 <USB_SetTurnaroundTime+0x138>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d202      	bcs.n	80122de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80122d8:	2309      	movs	r3, #9
 80122da:	617b      	str	r3, [r7, #20]
 80122dc:	e020      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	4a21      	ldr	r2, [pc, #132]	; (8012368 <USB_SetTurnaroundTime+0x138>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d306      	bcc.n	80122f4 <USB_SetTurnaroundTime+0xc4>
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	4a20      	ldr	r2, [pc, #128]	; (801236c <USB_SetTurnaroundTime+0x13c>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d802      	bhi.n	80122f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80122ee:	2308      	movs	r3, #8
 80122f0:	617b      	str	r3, [r7, #20]
 80122f2:	e015      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	4a1d      	ldr	r2, [pc, #116]	; (801236c <USB_SetTurnaroundTime+0x13c>)
 80122f8:	4293      	cmp	r3, r2
 80122fa:	d906      	bls.n	801230a <USB_SetTurnaroundTime+0xda>
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	4a1c      	ldr	r2, [pc, #112]	; (8012370 <USB_SetTurnaroundTime+0x140>)
 8012300:	4293      	cmp	r3, r2
 8012302:	d202      	bcs.n	801230a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012304:	2307      	movs	r3, #7
 8012306:	617b      	str	r3, [r7, #20]
 8012308:	e00a      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801230a:	2306      	movs	r3, #6
 801230c:	617b      	str	r3, [r7, #20]
 801230e:	e007      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012310:	79fb      	ldrb	r3, [r7, #7]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d102      	bne.n	801231c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012316:	2309      	movs	r3, #9
 8012318:	617b      	str	r3, [r7, #20]
 801231a:	e001      	b.n	8012320 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801231c:	2309      	movs	r3, #9
 801231e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	68da      	ldr	r2, [r3, #12]
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	029b      	lsls	r3, r3, #10
 8012334:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012338:	431a      	orrs	r2, r3
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	371c      	adds	r7, #28
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	00d8acbf 	.word	0x00d8acbf
 8012350:	00e4e1c0 	.word	0x00e4e1c0
 8012354:	00f42400 	.word	0x00f42400
 8012358:	01067380 	.word	0x01067380
 801235c:	011a499f 	.word	0x011a499f
 8012360:	01312cff 	.word	0x01312cff
 8012364:	014ca43f 	.word	0x014ca43f
 8012368:	016e3600 	.word	0x016e3600
 801236c:	01a6ab1f 	.word	0x01a6ab1f
 8012370:	01e84800 	.word	0x01e84800

08012374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012374:	b480      	push	{r7}
 8012376:	b083      	sub	sp, #12
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	f043 0201 	orr.w	r2, r3, #1
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012388:	2300      	movs	r3, #0
}
 801238a:	4618      	mov	r0, r3
 801238c:	370c      	adds	r7, #12
 801238e:	46bd      	mov	sp, r7
 8012390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012394:	4770      	bx	lr

08012396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012396:	b480      	push	{r7}
 8012398:	b083      	sub	sp, #12
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	689b      	ldr	r3, [r3, #8]
 80123a2:	f023 0201 	bic.w	r2, r3, #1
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80123aa:	2300      	movs	r3, #0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	370c      	adds	r7, #12
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80123c4:	2300      	movs	r3, #0
 80123c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80123d4:	78fb      	ldrb	r3, [r7, #3]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d115      	bne.n	8012406 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80123e6:	200a      	movs	r0, #10
 80123e8:	f7f2 f97e 	bl	80046e8 <HAL_Delay>
      ms += 10U;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	330a      	adds	r3, #10
 80123f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f001 f93b 	bl	801366e <USB_GetMode>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d01e      	beq.n	801243c <USB_SetCurrentMode+0x84>
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2bc7      	cmp	r3, #199	; 0xc7
 8012402:	d9f0      	bls.n	80123e6 <USB_SetCurrentMode+0x2e>
 8012404:	e01a      	b.n	801243c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012406:	78fb      	ldrb	r3, [r7, #3]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d115      	bne.n	8012438 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012418:	200a      	movs	r0, #10
 801241a:	f7f2 f965 	bl	80046e8 <HAL_Delay>
      ms += 10U;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	330a      	adds	r3, #10
 8012422:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f001 f922 	bl	801366e <USB_GetMode>
 801242a:	4603      	mov	r3, r0
 801242c:	2b00      	cmp	r3, #0
 801242e:	d005      	beq.n	801243c <USB_SetCurrentMode+0x84>
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2bc7      	cmp	r3, #199	; 0xc7
 8012434:	d9f0      	bls.n	8012418 <USB_SetCurrentMode+0x60>
 8012436:	e001      	b.n	801243c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012438:	2301      	movs	r3, #1
 801243a:	e005      	b.n	8012448 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2bc8      	cmp	r3, #200	; 0xc8
 8012440:	d101      	bne.n	8012446 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012442:	2301      	movs	r3, #1
 8012444:	e000      	b.n	8012448 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012450:	b084      	sub	sp, #16
 8012452:	b580      	push	{r7, lr}
 8012454:	b086      	sub	sp, #24
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801245e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801246a:	2300      	movs	r3, #0
 801246c:	613b      	str	r3, [r7, #16]
 801246e:	e009      	b.n	8012484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	3340      	adds	r3, #64	; 0x40
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	4413      	add	r3, r2
 801247a:	2200      	movs	r2, #0
 801247c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	3301      	adds	r3, #1
 8012482:	613b      	str	r3, [r7, #16]
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	2b0e      	cmp	r3, #14
 8012488:	d9f2      	bls.n	8012470 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801248a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801248e:	2b00      	cmp	r3, #0
 8012490:	d11c      	bne.n	80124cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80124a0:	f043 0302 	orr.w	r3, r3, #2
 80124a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	601a      	str	r2, [r3, #0]
 80124ca:	e005      	b.n	80124d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80124de:	461a      	mov	r2, r3
 80124e0:	2300      	movs	r3, #0
 80124e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80124e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	d10d      	bne.n	8012508 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80124ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d104      	bne.n	80124fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80124f4:	2100      	movs	r1, #0
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f968 	bl	80127cc <USB_SetDevSpeed>
 80124fc:	e008      	b.n	8012510 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80124fe:	2101      	movs	r1, #1
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 f963 	bl	80127cc <USB_SetDevSpeed>
 8012506:	e003      	b.n	8012510 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012508:	2103      	movs	r1, #3
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 f95e 	bl	80127cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012510:	2110      	movs	r1, #16
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 f8fa 	bl	801270c <USB_FlushTxFifo>
 8012518:	4603      	mov	r3, r0
 801251a:	2b00      	cmp	r3, #0
 801251c:	d001      	beq.n	8012522 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801251e:	2301      	movs	r3, #1
 8012520:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 f924 	bl	8012770 <USB_FlushRxFifo>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801252e:	2301      	movs	r3, #1
 8012530:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012538:	461a      	mov	r2, r3
 801253a:	2300      	movs	r3, #0
 801253c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012544:	461a      	mov	r2, r3
 8012546:	2300      	movs	r3, #0
 8012548:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012550:	461a      	mov	r2, r3
 8012552:	2300      	movs	r3, #0
 8012554:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012556:	2300      	movs	r3, #0
 8012558:	613b      	str	r3, [r7, #16]
 801255a:	e043      	b.n	80125e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	015a      	lsls	r2, r3, #5
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	4413      	add	r3, r2
 8012564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801256e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012572:	d118      	bne.n	80125a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10a      	bne.n	8012590 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	015a      	lsls	r2, r3, #5
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	4413      	add	r3, r2
 8012582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012586:	461a      	mov	r2, r3
 8012588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801258c:	6013      	str	r3, [r2, #0]
 801258e:	e013      	b.n	80125b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	015a      	lsls	r2, r3, #5
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	4413      	add	r3, r2
 8012598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801259c:	461a      	mov	r2, r3
 801259e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80125a2:	6013      	str	r3, [r2, #0]
 80125a4:	e008      	b.n	80125b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	015a      	lsls	r2, r3, #5
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	4413      	add	r3, r2
 80125ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b2:	461a      	mov	r2, r3
 80125b4:	2300      	movs	r3, #0
 80125b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	015a      	lsls	r2, r3, #5
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	4413      	add	r3, r2
 80125c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125c4:	461a      	mov	r2, r3
 80125c6:	2300      	movs	r3, #0
 80125c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	015a      	lsls	r2, r3, #5
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	4413      	add	r3, r2
 80125d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125d6:	461a      	mov	r2, r3
 80125d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80125dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	3301      	adds	r3, #1
 80125e2:	613b      	str	r3, [r7, #16]
 80125e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125e8:	461a      	mov	r2, r3
 80125ea:	693b      	ldr	r3, [r7, #16]
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d3b5      	bcc.n	801255c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80125f0:	2300      	movs	r3, #0
 80125f2:	613b      	str	r3, [r7, #16]
 80125f4:	e043      	b.n	801267e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	015a      	lsls	r2, r3, #5
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	4413      	add	r3, r2
 80125fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801260c:	d118      	bne.n	8012640 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10a      	bne.n	801262a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	015a      	lsls	r2, r3, #5
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	4413      	add	r3, r2
 801261c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012620:	461a      	mov	r2, r3
 8012622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	e013      	b.n	8012652 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	015a      	lsls	r2, r3, #5
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	4413      	add	r3, r2
 8012632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012636:	461a      	mov	r2, r3
 8012638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801263c:	6013      	str	r3, [r2, #0]
 801263e:	e008      	b.n	8012652 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	015a      	lsls	r2, r3, #5
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	4413      	add	r3, r2
 8012648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801264c:	461a      	mov	r2, r3
 801264e:	2300      	movs	r3, #0
 8012650:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	015a      	lsls	r2, r3, #5
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	4413      	add	r3, r2
 801265a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801265e:	461a      	mov	r2, r3
 8012660:	2300      	movs	r3, #0
 8012662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	015a      	lsls	r2, r3, #5
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	4413      	add	r3, r2
 801266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012670:	461a      	mov	r2, r3
 8012672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	3301      	adds	r3, #1
 801267c:	613b      	str	r3, [r7, #16]
 801267e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012682:	461a      	mov	r2, r3
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	4293      	cmp	r3, r2
 8012688:	d3b5      	bcc.n	80125f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	68fa      	ldr	r2, [r7, #12]
 8012694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801269c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2200      	movs	r2, #0
 80126a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80126aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80126ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d105      	bne.n	80126c0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	699b      	ldr	r3, [r3, #24]
 80126b8:	f043 0210 	orr.w	r2, r3, #16
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	699a      	ldr	r2, [r3, #24]
 80126c4:	4b0f      	ldr	r3, [pc, #60]	; (8012704 <USB_DevInit+0x2b4>)
 80126c6:	4313      	orrs	r3, r2
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80126cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d005      	beq.n	80126e0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	f043 0208 	orr.w	r2, r3, #8
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80126e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d105      	bne.n	80126f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	699a      	ldr	r2, [r3, #24]
 80126ec:	4b06      	ldr	r3, [pc, #24]	; (8012708 <USB_DevInit+0x2b8>)
 80126ee:	4313      	orrs	r3, r2
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80126f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3718      	adds	r7, #24
 80126fa:	46bd      	mov	sp, r7
 80126fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012700:	b004      	add	sp, #16
 8012702:	4770      	bx	lr
 8012704:	803c3800 	.word	0x803c3800
 8012708:	40000004 	.word	0x40000004

0801270c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801270c:	b480      	push	{r7}
 801270e:	b085      	sub	sp, #20
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012716:	2300      	movs	r3, #0
 8012718:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	3301      	adds	r3, #1
 801271e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012726:	d901      	bls.n	801272c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012728:	2303      	movs	r3, #3
 801272a:	e01b      	b.n	8012764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	daf2      	bge.n	801271a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012734:	2300      	movs	r3, #0
 8012736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	019b      	lsls	r3, r3, #6
 801273c:	f043 0220 	orr.w	r2, r3, #32
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	3301      	adds	r3, #1
 8012748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012750:	d901      	bls.n	8012756 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012752:	2303      	movs	r3, #3
 8012754:	e006      	b.n	8012764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	691b      	ldr	r3, [r3, #16]
 801275a:	f003 0320 	and.w	r3, r3, #32
 801275e:	2b20      	cmp	r3, #32
 8012760:	d0f0      	beq.n	8012744 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012762:	2300      	movs	r3, #0
}
 8012764:	4618      	mov	r0, r3
 8012766:	3714      	adds	r7, #20
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr

08012770 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012778:	2300      	movs	r3, #0
 801277a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	3301      	adds	r3, #1
 8012780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8012788:	d901      	bls.n	801278e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801278a:	2303      	movs	r3, #3
 801278c:	e018      	b.n	80127c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	691b      	ldr	r3, [r3, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	daf2      	bge.n	801277c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012796:	2300      	movs	r3, #0
 8012798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2210      	movs	r2, #16
 801279e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	3301      	adds	r3, #1
 80127a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80127ac:	d901      	bls.n	80127b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80127ae:	2303      	movs	r3, #3
 80127b0:	e006      	b.n	80127c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	691b      	ldr	r3, [r3, #16]
 80127b6:	f003 0310 	and.w	r3, r3, #16
 80127ba:	2b10      	cmp	r3, #16
 80127bc:	d0f0      	beq.n	80127a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b085      	sub	sp, #20
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	460b      	mov	r3, r1
 80127d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	78fb      	ldrb	r3, [r7, #3]
 80127e6:	68f9      	ldr	r1, [r7, #12]
 80127e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127ec:	4313      	orrs	r3, r2
 80127ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80127f0:	2300      	movs	r3, #0
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3714      	adds	r7, #20
 80127f6:	46bd      	mov	sp, r7
 80127f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fc:	4770      	bx	lr

080127fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80127fe:	b480      	push	{r7}
 8012800:	b087      	sub	sp, #28
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	f003 0306 	and.w	r3, r3, #6
 8012816:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d102      	bne.n	8012824 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801281e:	2300      	movs	r3, #0
 8012820:	75fb      	strb	r3, [r7, #23]
 8012822:	e00a      	b.n	801283a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	2b02      	cmp	r3, #2
 8012828:	d002      	beq.n	8012830 <USB_GetDevSpeed+0x32>
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2b06      	cmp	r3, #6
 801282e:	d102      	bne.n	8012836 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012830:	2302      	movs	r3, #2
 8012832:	75fb      	strb	r3, [r7, #23]
 8012834:	e001      	b.n	801283a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012836:	230f      	movs	r3, #15
 8012838:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801283a:	7dfb      	ldrb	r3, [r7, #23]
}
 801283c:	4618      	mov	r0, r3
 801283e:	371c      	adds	r7, #28
 8012840:	46bd      	mov	sp, r7
 8012842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012846:	4770      	bx	lr

08012848 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012848:	b480      	push	{r7}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	785b      	ldrb	r3, [r3, #1]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d139      	bne.n	80128d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801286a:	69da      	ldr	r2, [r3, #28]
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	f003 030f 	and.w	r3, r3, #15
 8012874:	2101      	movs	r1, #1
 8012876:	fa01 f303 	lsl.w	r3, r1, r3
 801287a:	b29b      	uxth	r3, r3
 801287c:	68f9      	ldr	r1, [r7, #12]
 801287e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012882:	4313      	orrs	r3, r2
 8012884:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	015a      	lsls	r2, r3, #5
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	4413      	add	r3, r2
 801288e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012898:	2b00      	cmp	r3, #0
 801289a:	d153      	bne.n	8012944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	015a      	lsls	r2, r3, #5
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4413      	add	r3, r2
 80128a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	791b      	ldrb	r3, [r3, #4]
 80128b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80128b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	059b      	lsls	r3, r3, #22
 80128be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80128c0:	431a      	orrs	r2, r3
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	0159      	lsls	r1, r3, #5
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	440b      	add	r3, r1
 80128ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ce:	4619      	mov	r1, r3
 80128d0:	4b20      	ldr	r3, [pc, #128]	; (8012954 <USB_ActivateEndpoint+0x10c>)
 80128d2:	4313      	orrs	r3, r2
 80128d4:	600b      	str	r3, [r1, #0]
 80128d6:	e035      	b.n	8012944 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128de:	69da      	ldr	r2, [r3, #28]
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	f003 030f 	and.w	r3, r3, #15
 80128e8:	2101      	movs	r1, #1
 80128ea:	fa01 f303 	lsl.w	r3, r1, r3
 80128ee:	041b      	lsls	r3, r3, #16
 80128f0:	68f9      	ldr	r1, [r7, #12]
 80128f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80128f6:	4313      	orrs	r3, r2
 80128f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	015a      	lsls	r2, r3, #5
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	4413      	add	r3, r2
 8012902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801290c:	2b00      	cmp	r3, #0
 801290e:	d119      	bne.n	8012944 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	015a      	lsls	r2, r3, #5
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	4413      	add	r3, r2
 8012918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	689b      	ldr	r3, [r3, #8]
 8012922:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	791b      	ldrb	r3, [r3, #4]
 801292a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801292c:	430b      	orrs	r3, r1
 801292e:	431a      	orrs	r2, r3
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	0159      	lsls	r1, r3, #5
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	440b      	add	r3, r1
 8012938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801293c:	4619      	mov	r1, r3
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <USB_ActivateEndpoint+0x10c>)
 8012940:	4313      	orrs	r3, r2
 8012942:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012944:	2300      	movs	r3, #0
}
 8012946:	4618      	mov	r0, r3
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	10008000 	.word	0x10008000

08012958 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012958:	b480      	push	{r7}
 801295a:	b085      	sub	sp, #20
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	785b      	ldrb	r3, [r3, #1]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d161      	bne.n	8012a38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	015a      	lsls	r2, r3, #5
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4413      	add	r3, r2
 801297c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801298a:	d11f      	bne.n	80129cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	015a      	lsls	r2, r3, #5
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	4413      	add	r3, r2
 8012994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	0151      	lsls	r1, r2, #5
 801299e:	68fa      	ldr	r2, [r7, #12]
 80129a0:	440a      	add	r2, r1
 80129a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80129aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	015a      	lsls	r2, r3, #5
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4413      	add	r3, r2
 80129b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	0151      	lsls	r1, r2, #5
 80129be:	68fa      	ldr	r2, [r7, #12]
 80129c0:	440a      	add	r2, r1
 80129c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80129ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	f003 030f 	and.w	r3, r3, #15
 80129dc:	2101      	movs	r1, #1
 80129de:	fa01 f303 	lsl.w	r3, r1, r3
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	43db      	mvns	r3, r3
 80129e6:	68f9      	ldr	r1, [r7, #12]
 80129e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80129ec:	4013      	ands	r3, r2
 80129ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129f6:	69da      	ldr	r2, [r3, #28]
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	f003 030f 	and.w	r3, r3, #15
 8012a00:	2101      	movs	r1, #1
 8012a02:	fa01 f303 	lsl.w	r3, r1, r3
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	43db      	mvns	r3, r3
 8012a0a:	68f9      	ldr	r1, [r7, #12]
 8012a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a10:	4013      	ands	r3, r2
 8012a12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	015a      	lsls	r2, r3, #5
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	0159      	lsls	r1, r3, #5
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	440b      	add	r3, r1
 8012a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2e:	4619      	mov	r1, r3
 8012a30:	4b35      	ldr	r3, [pc, #212]	; (8012b08 <USB_DeactivateEndpoint+0x1b0>)
 8012a32:	4013      	ands	r3, r2
 8012a34:	600b      	str	r3, [r1, #0]
 8012a36:	e060      	b.n	8012afa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	015a      	lsls	r2, r3, #5
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	4413      	add	r3, r2
 8012a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a4e:	d11f      	bne.n	8012a90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	015a      	lsls	r2, r3, #5
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	4413      	add	r3, r2
 8012a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	68ba      	ldr	r2, [r7, #8]
 8012a60:	0151      	lsls	r1, r2, #5
 8012a62:	68fa      	ldr	r2, [r7, #12]
 8012a64:	440a      	add	r2, r1
 8012a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012a6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	015a      	lsls	r2, r3, #5
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	4413      	add	r3, r2
 8012a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	68ba      	ldr	r2, [r7, #8]
 8012a80:	0151      	lsls	r1, r2, #5
 8012a82:	68fa      	ldr	r2, [r7, #12]
 8012a84:	440a      	add	r2, r1
 8012a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	f003 030f 	and.w	r3, r3, #15
 8012aa0:	2101      	movs	r1, #1
 8012aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8012aa6:	041b      	lsls	r3, r3, #16
 8012aa8:	43db      	mvns	r3, r3
 8012aaa:	68f9      	ldr	r1, [r7, #12]
 8012aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ab0:	4013      	ands	r3, r2
 8012ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aba:	69da      	ldr	r2, [r3, #28]
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	f003 030f 	and.w	r3, r3, #15
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8012aca:	041b      	lsls	r3, r3, #16
 8012acc:	43db      	mvns	r3, r3
 8012ace:	68f9      	ldr	r1, [r7, #12]
 8012ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ad4:	4013      	ands	r3, r2
 8012ad6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	015a      	lsls	r2, r3, #5
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	4413      	add	r3, r2
 8012ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	0159      	lsls	r1, r3, #5
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	440b      	add	r3, r1
 8012aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012af2:	4619      	mov	r1, r3
 8012af4:	4b05      	ldr	r3, [pc, #20]	; (8012b0c <USB_DeactivateEndpoint+0x1b4>)
 8012af6:	4013      	ands	r3, r2
 8012af8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	ec337800 	.word	0xec337800
 8012b0c:	eff37800 	.word	0xeff37800

08012b10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08a      	sub	sp, #40	; 0x28
 8012b14:	af02      	add	r7, sp, #8
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	4613      	mov	r3, r2
 8012b1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	785b      	ldrb	r3, [r3, #1]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	f040 8181 	bne.w	8012e34 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d132      	bne.n	8012ba0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	015a      	lsls	r2, r3, #5
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	4413      	add	r3, r2
 8012b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b46:	691a      	ldr	r2, [r3, #16]
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	0159      	lsls	r1, r3, #5
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	440b      	add	r3, r1
 8012b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b54:	4619      	mov	r1, r3
 8012b56:	4ba5      	ldr	r3, [pc, #660]	; (8012dec <USB_EPStartXfer+0x2dc>)
 8012b58:	4013      	ands	r3, r2
 8012b5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	015a      	lsls	r2, r3, #5
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	4413      	add	r3, r2
 8012b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b68:	691b      	ldr	r3, [r3, #16]
 8012b6a:	69ba      	ldr	r2, [r7, #24]
 8012b6c:	0151      	lsls	r1, r2, #5
 8012b6e:	69fa      	ldr	r2, [r7, #28]
 8012b70:	440a      	add	r2, r1
 8012b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	015a      	lsls	r2, r3, #5
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	4413      	add	r3, r2
 8012b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b88:	691a      	ldr	r2, [r3, #16]
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	0159      	lsls	r1, r3, #5
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	440b      	add	r3, r1
 8012b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b96:	4619      	mov	r1, r3
 8012b98:	4b95      	ldr	r3, [pc, #596]	; (8012df0 <USB_EPStartXfer+0x2e0>)
 8012b9a:	4013      	ands	r3, r2
 8012b9c:	610b      	str	r3, [r1, #16]
 8012b9e:	e092      	b.n	8012cc6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	015a      	lsls	r2, r3, #5
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bac:	691a      	ldr	r2, [r3, #16]
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	0159      	lsls	r1, r3, #5
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	440b      	add	r3, r1
 8012bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bba:	4619      	mov	r1, r3
 8012bbc:	4b8c      	ldr	r3, [pc, #560]	; (8012df0 <USB_EPStartXfer+0x2e0>)
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	015a      	lsls	r2, r3, #5
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	4413      	add	r3, r2
 8012bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bce:	691a      	ldr	r2, [r3, #16]
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	0159      	lsls	r1, r3, #5
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	440b      	add	r3, r1
 8012bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bdc:	4619      	mov	r1, r3
 8012bde:	4b83      	ldr	r3, [pc, #524]	; (8012dec <USB_EPStartXfer+0x2dc>)
 8012be0:	4013      	ands	r3, r2
 8012be2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012be4:	69bb      	ldr	r3, [r7, #24]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d11a      	bne.n	8012c20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	691a      	ldr	r2, [r3, #16]
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d903      	bls.n	8012bfe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	015a      	lsls	r2, r3, #5
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	4413      	add	r3, r2
 8012c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c0a:	691b      	ldr	r3, [r3, #16]
 8012c0c:	69ba      	ldr	r2, [r7, #24]
 8012c0e:	0151      	lsls	r1, r2, #5
 8012c10:	69fa      	ldr	r2, [r7, #28]
 8012c12:	440a      	add	r2, r1
 8012c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012c1c:	6113      	str	r3, [r2, #16]
 8012c1e:	e01b      	b.n	8012c58 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	015a      	lsls	r2, r3, #5
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	4413      	add	r3, r2
 8012c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	6919      	ldr	r1, [r3, #16]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	440b      	add	r3, r1
 8012c38:	1e59      	subs	r1, r3, #1
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	689b      	ldr	r3, [r3, #8]
 8012c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012c42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012c44:	4b6b      	ldr	r3, [pc, #428]	; (8012df4 <USB_EPStartXfer+0x2e4>)
 8012c46:	400b      	ands	r3, r1
 8012c48:	69b9      	ldr	r1, [r7, #24]
 8012c4a:	0148      	lsls	r0, r1, #5
 8012c4c:	69f9      	ldr	r1, [r7, #28]
 8012c4e:	4401      	add	r1, r0
 8012c50:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012c54:	4313      	orrs	r3, r2
 8012c56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	015a      	lsls	r2, r3, #5
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	4413      	add	r3, r2
 8012c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c64:	691a      	ldr	r2, [r3, #16]
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012c6e:	69b9      	ldr	r1, [r7, #24]
 8012c70:	0148      	lsls	r0, r1, #5
 8012c72:	69f9      	ldr	r1, [r7, #28]
 8012c74:	4401      	add	r1, r0
 8012c76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012c7a:	4313      	orrs	r3, r2
 8012c7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	791b      	ldrb	r3, [r3, #4]
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d11f      	bne.n	8012cc6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	015a      	lsls	r2, r3, #5
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c92:	691b      	ldr	r3, [r3, #16]
 8012c94:	69ba      	ldr	r2, [r7, #24]
 8012c96:	0151      	lsls	r1, r2, #5
 8012c98:	69fa      	ldr	r2, [r7, #28]
 8012c9a:	440a      	add	r2, r1
 8012c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ca0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012ca4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	015a      	lsls	r2, r3, #5
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	4413      	add	r3, r2
 8012cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	69ba      	ldr	r2, [r7, #24]
 8012cb6:	0151      	lsls	r1, r2, #5
 8012cb8:	69fa      	ldr	r2, [r7, #28]
 8012cba:	440a      	add	r2, r1
 8012cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012cc4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012cc6:	79fb      	ldrb	r3, [r7, #7]
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d14b      	bne.n	8012d64 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	69db      	ldr	r3, [r3, #28]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d009      	beq.n	8012ce8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	015a      	lsls	r2, r3, #5
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	4413      	add	r3, r2
 8012cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	69db      	ldr	r3, [r3, #28]
 8012ce6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	791b      	ldrb	r3, [r3, #4]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d128      	bne.n	8012d42 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d110      	bne.n	8012d22 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	015a      	lsls	r2, r3, #5
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	4413      	add	r3, r2
 8012d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	69ba      	ldr	r2, [r7, #24]
 8012d10:	0151      	lsls	r1, r2, #5
 8012d12:	69fa      	ldr	r2, [r7, #28]
 8012d14:	440a      	add	r2, r1
 8012d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012d1e:	6013      	str	r3, [r2, #0]
 8012d20:	e00f      	b.n	8012d42 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	015a      	lsls	r2, r3, #5
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	4413      	add	r3, r2
 8012d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	69ba      	ldr	r2, [r7, #24]
 8012d32:	0151      	lsls	r1, r2, #5
 8012d34:	69fa      	ldr	r2, [r7, #28]
 8012d36:	440a      	add	r2, r1
 8012d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	015a      	lsls	r2, r3, #5
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	4413      	add	r3, r2
 8012d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	69ba      	ldr	r2, [r7, #24]
 8012d52:	0151      	lsls	r1, r2, #5
 8012d54:	69fa      	ldr	r2, [r7, #28]
 8012d56:	440a      	add	r2, r1
 8012d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d60:	6013      	str	r3, [r2, #0]
 8012d62:	e16a      	b.n	801303a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	015a      	lsls	r2, r3, #5
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	69ba      	ldr	r2, [r7, #24]
 8012d74:	0151      	lsls	r1, r2, #5
 8012d76:	69fa      	ldr	r2, [r7, #28]
 8012d78:	440a      	add	r2, r1
 8012d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012d82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	791b      	ldrb	r3, [r3, #4]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d015      	beq.n	8012db8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	691b      	ldr	r3, [r3, #16]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 8152 	beq.w	801303a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	f003 030f 	and.w	r3, r3, #15
 8012da6:	2101      	movs	r1, #1
 8012da8:	fa01 f303 	lsl.w	r3, r1, r3
 8012dac:	69f9      	ldr	r1, [r7, #28]
 8012dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012db2:	4313      	orrs	r3, r2
 8012db4:	634b      	str	r3, [r1, #52]	; 0x34
 8012db6:	e140      	b.n	801303a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d117      	bne.n	8012df8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	015a      	lsls	r2, r3, #5
 8012dcc:	69fb      	ldr	r3, [r7, #28]
 8012dce:	4413      	add	r3, r2
 8012dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	69ba      	ldr	r2, [r7, #24]
 8012dd8:	0151      	lsls	r1, r2, #5
 8012dda:	69fa      	ldr	r2, [r7, #28]
 8012ddc:	440a      	add	r2, r1
 8012dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012de2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012de6:	6013      	str	r3, [r2, #0]
 8012de8:	e016      	b.n	8012e18 <USB_EPStartXfer+0x308>
 8012dea:	bf00      	nop
 8012dec:	e007ffff 	.word	0xe007ffff
 8012df0:	fff80000 	.word	0xfff80000
 8012df4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	015a      	lsls	r2, r3, #5
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	4413      	add	r3, r2
 8012e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	69ba      	ldr	r2, [r7, #24]
 8012e08:	0151      	lsls	r1, r2, #5
 8012e0a:	69fa      	ldr	r2, [r7, #28]
 8012e0c:	440a      	add	r2, r1
 8012e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e16:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	68d9      	ldr	r1, [r3, #12]
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	781a      	ldrb	r2, [r3, #0]
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	b298      	uxth	r0, r3
 8012e26:	79fb      	ldrb	r3, [r7, #7]
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 f9b9 	bl	80131a4 <USB_WritePacket>
 8012e32:	e102      	b.n	801303a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	015a      	lsls	r2, r3, #5
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e40:	691a      	ldr	r2, [r3, #16]
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	0159      	lsls	r1, r3, #5
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	440b      	add	r3, r1
 8012e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e4e:	4619      	mov	r1, r3
 8012e50:	4b7c      	ldr	r3, [pc, #496]	; (8013044 <USB_EPStartXfer+0x534>)
 8012e52:	4013      	ands	r3, r2
 8012e54:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	015a      	lsls	r2, r3, #5
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e62:	691a      	ldr	r2, [r3, #16]
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	0159      	lsls	r1, r3, #5
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	440b      	add	r3, r1
 8012e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e70:	4619      	mov	r1, r3
 8012e72:	4b75      	ldr	r3, [pc, #468]	; (8013048 <USB_EPStartXfer+0x538>)
 8012e74:	4013      	ands	r3, r2
 8012e76:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d12f      	bne.n	8012ede <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d003      	beq.n	8012e8e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	689a      	ldr	r2, [r3, #8]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	689a      	ldr	r2, [r3, #8]
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	015a      	lsls	r2, r3, #5
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ea2:	691a      	ldr	r2, [r3, #16]
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	6a1b      	ldr	r3, [r3, #32]
 8012ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012eac:	69b9      	ldr	r1, [r7, #24]
 8012eae:	0148      	lsls	r0, r1, #5
 8012eb0:	69f9      	ldr	r1, [r7, #28]
 8012eb2:	4401      	add	r1, r0
 8012eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	015a      	lsls	r2, r3, #5
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	69ba      	ldr	r2, [r7, #24]
 8012ecc:	0151      	lsls	r1, r2, #5
 8012ece:	69fa      	ldr	r2, [r7, #28]
 8012ed0:	440a      	add	r2, r1
 8012ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012eda:	6113      	str	r3, [r2, #16]
 8012edc:	e05f      	b.n	8012f9e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d123      	bne.n	8012f2e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	015a      	lsls	r2, r3, #5
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	4413      	add	r3, r2
 8012eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ef2:	691a      	ldr	r2, [r3, #16]
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012efc:	69b9      	ldr	r1, [r7, #24]
 8012efe:	0148      	lsls	r0, r1, #5
 8012f00:	69f9      	ldr	r1, [r7, #28]
 8012f02:	4401      	add	r1, r0
 8012f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	015a      	lsls	r2, r3, #5
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	4413      	add	r3, r2
 8012f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f18:	691b      	ldr	r3, [r3, #16]
 8012f1a:	69ba      	ldr	r2, [r7, #24]
 8012f1c:	0151      	lsls	r1, r2, #5
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	440a      	add	r2, r1
 8012f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f2a:	6113      	str	r3, [r2, #16]
 8012f2c:	e037      	b.n	8012f9e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	691a      	ldr	r2, [r3, #16]
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	689b      	ldr	r3, [r3, #8]
 8012f36:	4413      	add	r3, r2
 8012f38:	1e5a      	subs	r2, r3, #1
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f42:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	8afa      	ldrh	r2, [r7, #22]
 8012f4a:	fb03 f202 	mul.w	r2, r3, r2
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	015a      	lsls	r2, r3, #5
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	4413      	add	r3, r2
 8012f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f5e:	691a      	ldr	r2, [r3, #16]
 8012f60:	8afb      	ldrh	r3, [r7, #22]
 8012f62:	04d9      	lsls	r1, r3, #19
 8012f64:	4b39      	ldr	r3, [pc, #228]	; (801304c <USB_EPStartXfer+0x53c>)
 8012f66:	400b      	ands	r3, r1
 8012f68:	69b9      	ldr	r1, [r7, #24]
 8012f6a:	0148      	lsls	r0, r1, #5
 8012f6c:	69f9      	ldr	r1, [r7, #28]
 8012f6e:	4401      	add	r1, r0
 8012f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f74:	4313      	orrs	r3, r2
 8012f76:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	015a      	lsls	r2, r3, #5
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	4413      	add	r3, r2
 8012f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f84:	691a      	ldr	r2, [r3, #16]
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	6a1b      	ldr	r3, [r3, #32]
 8012f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f8e:	69b9      	ldr	r1, [r7, #24]
 8012f90:	0148      	lsls	r0, r1, #5
 8012f92:	69f9      	ldr	r1, [r7, #28]
 8012f94:	4401      	add	r1, r0
 8012f96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012f9e:	79fb      	ldrb	r3, [r7, #7]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d10d      	bne.n	8012fc0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d009      	beq.n	8012fc0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	68d9      	ldr	r1, [r3, #12]
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	015a      	lsls	r2, r3, #5
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fbc:	460a      	mov	r2, r1
 8012fbe:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	791b      	ldrb	r3, [r3, #4]
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d128      	bne.n	801301a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fce:	689b      	ldr	r3, [r3, #8]
 8012fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d110      	bne.n	8012ffa <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	015a      	lsls	r2, r3, #5
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	4413      	add	r3, r2
 8012fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	69ba      	ldr	r2, [r7, #24]
 8012fe8:	0151      	lsls	r1, r2, #5
 8012fea:	69fa      	ldr	r2, [r7, #28]
 8012fec:	440a      	add	r2, r1
 8012fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ff6:	6013      	str	r3, [r2, #0]
 8012ff8:	e00f      	b.n	801301a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	015a      	lsls	r2, r3, #5
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	4413      	add	r3, r2
 8013002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	69ba      	ldr	r2, [r7, #24]
 801300a:	0151      	lsls	r1, r2, #5
 801300c:	69fa      	ldr	r2, [r7, #28]
 801300e:	440a      	add	r2, r1
 8013010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013018:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	015a      	lsls	r2, r3, #5
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	4413      	add	r3, r2
 8013022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	69ba      	ldr	r2, [r7, #24]
 801302a:	0151      	lsls	r1, r2, #5
 801302c:	69fa      	ldr	r2, [r7, #28]
 801302e:	440a      	add	r2, r1
 8013030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013038:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801303a:	2300      	movs	r3, #0
}
 801303c:	4618      	mov	r0, r3
 801303e:	3720      	adds	r7, #32
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	fff80000 	.word	0xfff80000
 8013048:	e007ffff 	.word	0xe007ffff
 801304c:	1ff80000 	.word	0x1ff80000

08013050 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013050:	b480      	push	{r7}
 8013052:	b087      	sub	sp, #28
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801305a:	2300      	movs	r3, #0
 801305c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801305e:	2300      	movs	r3, #0
 8013060:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	785b      	ldrb	r3, [r3, #1]
 801306a:	2b01      	cmp	r3, #1
 801306c:	d14a      	bne.n	8013104 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	781b      	ldrb	r3, [r3, #0]
 8013072:	015a      	lsls	r2, r3, #5
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	4413      	add	r3, r2
 8013078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013086:	f040 8086 	bne.w	8013196 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	015a      	lsls	r2, r3, #5
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	4413      	add	r3, r2
 8013094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	683a      	ldr	r2, [r7, #0]
 801309c:	7812      	ldrb	r2, [r2, #0]
 801309e:	0151      	lsls	r1, r2, #5
 80130a0:	693a      	ldr	r2, [r7, #16]
 80130a2:	440a      	add	r2, r1
 80130a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80130ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	015a      	lsls	r2, r3, #5
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	4413      	add	r3, r2
 80130b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	683a      	ldr	r2, [r7, #0]
 80130c0:	7812      	ldrb	r2, [r2, #0]
 80130c2:	0151      	lsls	r1, r2, #5
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	440a      	add	r2, r1
 80130c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80130d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3301      	adds	r3, #1
 80130d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	f242 7210 	movw	r2, #10000	; 0x2710
 80130de:	4293      	cmp	r3, r2
 80130e0:	d902      	bls.n	80130e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80130e2:	2301      	movs	r3, #1
 80130e4:	75fb      	strb	r3, [r7, #23]
          break;
 80130e6:	e056      	b.n	8013196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	015a      	lsls	r2, r3, #5
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	4413      	add	r3, r2
 80130f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013100:	d0e7      	beq.n	80130d2 <USB_EPStopXfer+0x82>
 8013102:	e048      	b.n	8013196 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	015a      	lsls	r2, r3, #5
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	4413      	add	r3, r2
 801310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801311c:	d13b      	bne.n	8013196 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	015a      	lsls	r2, r3, #5
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	4413      	add	r3, r2
 8013128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	7812      	ldrb	r2, [r2, #0]
 8013132:	0151      	lsls	r1, r2, #5
 8013134:	693a      	ldr	r2, [r7, #16]
 8013136:	440a      	add	r2, r1
 8013138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801313c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013140:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	015a      	lsls	r2, r3, #5
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	4413      	add	r3, r2
 801314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	683a      	ldr	r2, [r7, #0]
 8013154:	7812      	ldrb	r2, [r2, #0]
 8013156:	0151      	lsls	r1, r2, #5
 8013158:	693a      	ldr	r2, [r7, #16]
 801315a:	440a      	add	r2, r1
 801315c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3301      	adds	r3, #1
 801316a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013172:	4293      	cmp	r3, r2
 8013174:	d902      	bls.n	801317c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013176:	2301      	movs	r3, #1
 8013178:	75fb      	strb	r3, [r7, #23]
          break;
 801317a:	e00c      	b.n	8013196 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	015a      	lsls	r2, r3, #5
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	4413      	add	r3, r2
 8013186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013194:	d0e7      	beq.n	8013166 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013196:	7dfb      	ldrb	r3, [r7, #23]
}
 8013198:	4618      	mov	r0, r3
 801319a:	371c      	adds	r7, #28
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b089      	sub	sp, #36	; 0x24
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	4611      	mov	r1, r2
 80131b0:	461a      	mov	r2, r3
 80131b2:	460b      	mov	r3, r1
 80131b4:	71fb      	strb	r3, [r7, #7]
 80131b6:	4613      	mov	r3, r2
 80131b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80131c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d123      	bne.n	8013212 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80131ca:	88bb      	ldrh	r3, [r7, #4]
 80131cc:	3303      	adds	r3, #3
 80131ce:	089b      	lsrs	r3, r3, #2
 80131d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80131d2:	2300      	movs	r3, #0
 80131d4:	61bb      	str	r3, [r7, #24]
 80131d6:	e018      	b.n	801320a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80131d8:	79fb      	ldrb	r3, [r7, #7]
 80131da:	031a      	lsls	r2, r3, #12
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131e4:	461a      	mov	r2, r3
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	3301      	adds	r3, #1
 80131f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	3301      	adds	r3, #1
 80131f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	3301      	adds	r3, #1
 80131fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	3301      	adds	r3, #1
 8013202:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013204:	69bb      	ldr	r3, [r7, #24]
 8013206:	3301      	adds	r3, #1
 8013208:	61bb      	str	r3, [r7, #24]
 801320a:	69ba      	ldr	r2, [r7, #24]
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	429a      	cmp	r2, r3
 8013210:	d3e2      	bcc.n	80131d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3724      	adds	r7, #36	; 0x24
 8013218:	46bd      	mov	sp, r7
 801321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321e:	4770      	bx	lr

08013220 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013220:	b480      	push	{r7}
 8013222:	b08b      	sub	sp, #44	; 0x2c
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	4613      	mov	r3, r2
 801322c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013236:	88fb      	ldrh	r3, [r7, #6]
 8013238:	089b      	lsrs	r3, r3, #2
 801323a:	b29b      	uxth	r3, r3
 801323c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801323e:	88fb      	ldrh	r3, [r7, #6]
 8013240:	f003 0303 	and.w	r3, r3, #3
 8013244:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013246:	2300      	movs	r3, #0
 8013248:	623b      	str	r3, [r7, #32]
 801324a:	e014      	b.n	8013276 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013256:	601a      	str	r2, [r3, #0]
    pDest++;
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	3301      	adds	r3, #1
 801325c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013260:	3301      	adds	r3, #1
 8013262:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013266:	3301      	adds	r3, #1
 8013268:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801326c:	3301      	adds	r3, #1
 801326e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013270:	6a3b      	ldr	r3, [r7, #32]
 8013272:	3301      	adds	r3, #1
 8013274:	623b      	str	r3, [r7, #32]
 8013276:	6a3a      	ldr	r2, [r7, #32]
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	429a      	cmp	r2, r3
 801327c:	d3e6      	bcc.n	801324c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801327e:	8bfb      	ldrh	r3, [r7, #30]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d01e      	beq.n	80132c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013284:	2300      	movs	r3, #0
 8013286:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801328e:	461a      	mov	r2, r3
 8013290:	f107 0310 	add.w	r3, r7, #16
 8013294:	6812      	ldr	r2, [r2, #0]
 8013296:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	b2db      	uxtb	r3, r3
 801329e:	00db      	lsls	r3, r3, #3
 80132a0:	fa22 f303 	lsr.w	r3, r2, r3
 80132a4:	b2da      	uxtb	r2, r3
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	701a      	strb	r2, [r3, #0]
      i++;
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	3301      	adds	r3, #1
 80132ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80132b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b2:	3301      	adds	r3, #1
 80132b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80132b6:	8bfb      	ldrh	r3, [r7, #30]
 80132b8:	3b01      	subs	r3, #1
 80132ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80132bc:	8bfb      	ldrh	r3, [r7, #30]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1ea      	bne.n	8013298 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80132c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	372c      	adds	r7, #44	; 0x2c
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b085      	sub	sp, #20
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	785b      	ldrb	r3, [r3, #1]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	d12c      	bne.n	8013346 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	015a      	lsls	r2, r3, #5
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4413      	add	r3, r2
 80132f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	db12      	blt.n	8013324 <USB_EPSetStall+0x54>
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00f      	beq.n	8013324 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	015a      	lsls	r2, r3, #5
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4413      	add	r3, r2
 801330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	68ba      	ldr	r2, [r7, #8]
 8013314:	0151      	lsls	r1, r2, #5
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	440a      	add	r2, r1
 801331a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801331e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013322:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	015a      	lsls	r2, r3, #5
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	4413      	add	r3, r2
 801332c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	0151      	lsls	r1, r2, #5
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	440a      	add	r2, r1
 801333a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801333e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013342:	6013      	str	r3, [r2, #0]
 8013344:	e02b      	b.n	801339e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	015a      	lsls	r2, r3, #5
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	4413      	add	r3, r2
 801334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	db12      	blt.n	801337e <USB_EPSetStall+0xae>
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d00f      	beq.n	801337e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	015a      	lsls	r2, r3, #5
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	4413      	add	r3, r2
 8013366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	68ba      	ldr	r2, [r7, #8]
 801336e:	0151      	lsls	r1, r2, #5
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	440a      	add	r2, r1
 8013374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013378:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801337c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	015a      	lsls	r2, r3, #5
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	4413      	add	r3, r2
 8013386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	68ba      	ldr	r2, [r7, #8]
 801338e:	0151      	lsls	r1, r2, #5
 8013390:	68fa      	ldr	r2, [r7, #12]
 8013392:	440a      	add	r2, r1
 8013394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801339c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801339e:	2300      	movs	r3, #0
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3714      	adds	r7, #20
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	785b      	ldrb	r3, [r3, #1]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d128      	bne.n	801341a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	015a      	lsls	r2, r3, #5
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4413      	add	r3, r2
 80133d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	0151      	lsls	r1, r2, #5
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	440a      	add	r2, r1
 80133de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80133e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	791b      	ldrb	r3, [r3, #4]
 80133ec:	2b03      	cmp	r3, #3
 80133ee:	d003      	beq.n	80133f8 <USB_EPClearStall+0x4c>
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	791b      	ldrb	r3, [r3, #4]
 80133f4:	2b02      	cmp	r3, #2
 80133f6:	d138      	bne.n	801346a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	015a      	lsls	r2, r3, #5
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	4413      	add	r3, r2
 8013400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	68ba      	ldr	r2, [r7, #8]
 8013408:	0151      	lsls	r1, r2, #5
 801340a:	68fa      	ldr	r2, [r7, #12]
 801340c:	440a      	add	r2, r1
 801340e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013416:	6013      	str	r3, [r2, #0]
 8013418:	e027      	b.n	801346a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	015a      	lsls	r2, r3, #5
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	4413      	add	r3, r2
 8013422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	68ba      	ldr	r2, [r7, #8]
 801342a:	0151      	lsls	r1, r2, #5
 801342c:	68fa      	ldr	r2, [r7, #12]
 801342e:	440a      	add	r2, r1
 8013430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013434:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013438:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	791b      	ldrb	r3, [r3, #4]
 801343e:	2b03      	cmp	r3, #3
 8013440:	d003      	beq.n	801344a <USB_EPClearStall+0x9e>
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	791b      	ldrb	r3, [r3, #4]
 8013446:	2b02      	cmp	r3, #2
 8013448:	d10f      	bne.n	801346a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	015a      	lsls	r2, r3, #5
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	4413      	add	r3, r2
 8013452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	68ba      	ldr	r2, [r7, #8]
 801345a:	0151      	lsls	r1, r2, #5
 801345c:	68fa      	ldr	r2, [r7, #12]
 801345e:	440a      	add	r2, r1
 8013460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013468:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3714      	adds	r7, #20
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	460b      	mov	r3, r1
 8013482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	68fa      	ldr	r2, [r7, #12]
 8013492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013496:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801349a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	78fb      	ldrb	r3, [r7, #3]
 80134a6:	011b      	lsls	r3, r3, #4
 80134a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80134ac:	68f9      	ldr	r1, [r7, #12]
 80134ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134b2:	4313      	orrs	r3, r2
 80134b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80134b6:	2300      	movs	r3, #0
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3714      	adds	r7, #20
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b085      	sub	sp, #20
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80134de:	f023 0303 	bic.w	r3, r3, #3
 80134e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80134f2:	f023 0302 	bic.w	r3, r3, #2
 80134f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80134f8:	2300      	movs	r3, #0
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3714      	adds	r7, #20
 80134fe:	46bd      	mov	sp, r7
 8013500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013504:	4770      	bx	lr

08013506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8013506:	b480      	push	{r7}
 8013508:	b085      	sub	sp, #20
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013520:	f023 0303 	bic.w	r3, r3, #3
 8013524:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	68fa      	ldr	r2, [r7, #12]
 8013530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013534:	f043 0302 	orr.w	r3, r3, #2
 8013538:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3714      	adds	r7, #20
 8013540:	46bd      	mov	sp, r7
 8013542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013546:	4770      	bx	lr

08013548 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8013548:	b480      	push	{r7}
 801354a:	b085      	sub	sp, #20
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	695b      	ldr	r3, [r3, #20]
 8013554:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	699b      	ldr	r3, [r3, #24]
 801355a:	68fa      	ldr	r2, [r7, #12]
 801355c:	4013      	ands	r3, r2
 801355e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013560:	68fb      	ldr	r3, [r7, #12]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801356e:	b480      	push	{r7}
 8013570:	b085      	sub	sp, #20
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013580:	699b      	ldr	r3, [r3, #24]
 8013582:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801358a:	69db      	ldr	r3, [r3, #28]
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	4013      	ands	r3, r2
 8013590:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	0c1b      	lsrs	r3, r3, #16
}
 8013596:	4618      	mov	r0, r3
 8013598:	3714      	adds	r7, #20
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr

080135a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80135a2:	b480      	push	{r7}
 80135a4:	b085      	sub	sp, #20
 80135a6:	af00      	add	r7, sp, #0
 80135a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135b4:	699b      	ldr	r3, [r3, #24]
 80135b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135be:	69db      	ldr	r3, [r3, #28]
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	4013      	ands	r3, r2
 80135c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	b29b      	uxth	r3, r3
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3714      	adds	r7, #20
 80135ce:	46bd      	mov	sp, r7
 80135d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d4:	4770      	bx	lr

080135d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80135d6:	b480      	push	{r7}
 80135d8:	b085      	sub	sp, #20
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
 80135de:	460b      	mov	r3, r1
 80135e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80135e6:	78fb      	ldrb	r3, [r7, #3]
 80135e8:	015a      	lsls	r2, r3, #5
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	4413      	add	r3, r2
 80135ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135fc:	695b      	ldr	r3, [r3, #20]
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	4013      	ands	r3, r2
 8013602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013604:	68bb      	ldr	r3, [r7, #8]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3714      	adds	r7, #20
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr

08013612 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013612:	b480      	push	{r7}
 8013614:	b087      	sub	sp, #28
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	460b      	mov	r3, r1
 801361c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013628:	691b      	ldr	r3, [r3, #16]
 801362a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013634:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013636:	78fb      	ldrb	r3, [r7, #3]
 8013638:	f003 030f 	and.w	r3, r3, #15
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	fa22 f303 	lsr.w	r3, r2, r3
 8013642:	01db      	lsls	r3, r3, #7
 8013644:	b2db      	uxtb	r3, r3
 8013646:	693a      	ldr	r2, [r7, #16]
 8013648:	4313      	orrs	r3, r2
 801364a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801364c:	78fb      	ldrb	r3, [r7, #3]
 801364e:	015a      	lsls	r2, r3, #5
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	4413      	add	r3, r2
 8013654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	693a      	ldr	r2, [r7, #16]
 801365c:	4013      	ands	r3, r2
 801365e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013660:	68bb      	ldr	r3, [r7, #8]
}
 8013662:	4618      	mov	r0, r3
 8013664:	371c      	adds	r7, #28
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr

0801366e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801366e:	b480      	push	{r7}
 8013670:	b083      	sub	sp, #12
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	695b      	ldr	r3, [r3, #20]
 801367a:	f003 0301 	and.w	r3, r3, #1
}
 801367e:	4618      	mov	r0, r3
 8013680:	370c      	adds	r7, #12
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr
	...

0801368c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 801368c:	b480      	push	{r7}
 801368e:	b085      	sub	sp, #20
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136a6:	4619      	mov	r1, r3
 80136a8:	4b09      	ldr	r3, [pc, #36]	; (80136d0 <USB_ActivateSetup+0x44>)
 80136aa:	4013      	ands	r3, r2
 80136ac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	68fa      	ldr	r2, [r7, #12]
 80136b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80136c2:	2300      	movs	r3, #0
}
 80136c4:	4618      	mov	r0, r3
 80136c6:	3714      	adds	r7, #20
 80136c8:	46bd      	mov	sp, r7
 80136ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ce:	4770      	bx	lr
 80136d0:	fffff800 	.word	0xfffff800

080136d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b087      	sub	sp, #28
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	460b      	mov	r3, r1
 80136de:	607a      	str	r2, [r7, #4]
 80136e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	333c      	adds	r3, #60	; 0x3c
 80136ea:	3304      	adds	r3, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	4a26      	ldr	r2, [pc, #152]	; (801378c <USB_EP0_OutStart+0xb8>)
 80136f4:	4293      	cmp	r3, r2
 80136f6:	d90a      	bls.n	801370e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013708:	d101      	bne.n	801370e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	e037      	b.n	801377e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013714:	461a      	mov	r2, r3
 8013716:	2300      	movs	r3, #0
 8013718:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	697a      	ldr	r2, [r7, #20]
 8013724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801372c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013734:	691b      	ldr	r3, [r3, #16]
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801373c:	f043 0318 	orr.w	r3, r3, #24
 8013740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	697a      	ldr	r2, [r7, #20]
 801374c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013750:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013754:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013756:	7afb      	ldrb	r3, [r7, #11]
 8013758:	2b01      	cmp	r3, #1
 801375a:	d10f      	bne.n	801377c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013762:	461a      	mov	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	697a      	ldr	r2, [r7, #20]
 8013772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013776:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801377a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801377c:	2300      	movs	r3, #0
}
 801377e:	4618      	mov	r0, r3
 8013780:	371c      	adds	r7, #28
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	4f54300a 	.word	0x4f54300a

08013790 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013798:	2300      	movs	r3, #0
 801379a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	3301      	adds	r3, #1
 80137a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80137a8:	d901      	bls.n	80137ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80137aa:	2303      	movs	r3, #3
 80137ac:	e01b      	b.n	80137e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	daf2      	bge.n	801379c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80137b6:	2300      	movs	r3, #0
 80137b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	691b      	ldr	r3, [r3, #16]
 80137be:	f043 0201 	orr.w	r2, r3, #1
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	3301      	adds	r3, #1
 80137ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80137d2:	d901      	bls.n	80137d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80137d4:	2303      	movs	r3, #3
 80137d6:	e006      	b.n	80137e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	f003 0301 	and.w	r3, r3, #1
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d0f0      	beq.n	80137c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3714      	adds	r7, #20
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr
	...

080137f4 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8013800:	f643 4050 	movw	r0, #15440	; 0x3c50
 8013804:	f002 fbb0 	bl	8015f68 <USBD_static_malloc>
 8013808:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d109      	bne.n	8013824 <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	32b0      	adds	r2, #176	; 0xb0
 801381a:	2100      	movs	r1, #0
 801381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013820:	2302      	movs	r3, #2
 8013822:	e08d      	b.n	8013940 <USBD_AUDIO_Init+0x14c>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	32b0      	adds	r2, #176	; 0xb0
 801382e:	68f9      	ldr	r1, [r7, #12]
 8013830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	32b0      	adds	r2, #176	; 0xb0
 801383e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	7c1b      	ldrb	r3, [r3, #16]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10e      	bne.n	801386e <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8013850:	4b3d      	ldr	r3, [pc, #244]	; (8013948 <USBD_AUDIO_Init+0x154>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	f003 020f 	and.w	r2, r3, #15
 8013858:	6879      	ldr	r1, [r7, #4]
 801385a:	4613      	mov	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4413      	add	r3, r2
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	440b      	add	r3, r1
 8013864:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013868:	2201      	movs	r2, #1
 801386a:	801a      	strh	r2, [r3, #0]
 801386c:	e00d      	b.n	801388a <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 801386e:	4b36      	ldr	r3, [pc, #216]	; (8013948 <USBD_AUDIO_Init+0x154>)
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	f003 020f 	and.w	r2, r3, #15
 8013876:	6879      	ldr	r1, [r7, #4]
 8013878:	4613      	mov	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	440b      	add	r3, r1
 8013882:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013886:	2201      	movs	r2, #1
 8013888:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 801388a:	4b2f      	ldr	r3, [pc, #188]	; (8013948 <USBD_AUDIO_Init+0x154>)
 801388c:	7819      	ldrb	r1, [r3, #0]
 801388e:	23c0      	movs	r3, #192	; 0xc0
 8013890:	2201      	movs	r2, #1
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f002 fa45 	bl	8015d22 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8013898:	4b2b      	ldr	r3, [pc, #172]	; (8013948 <USBD_AUDIO_Init+0x154>)
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	f003 020f 	and.w	r2, r3, #15
 80138a0:	6879      	ldr	r1, [r7, #4]
 80138a2:	4613      	mov	r3, r2
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4413      	add	r3, r2
 80138a8:	009b      	lsls	r3, r3, #2
 80138aa:	440b      	add	r3, r1
 80138ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80138b0:	2201      	movs	r2, #1
 80138b2:	801a      	strh	r2, [r3, #0]

  pdev->ep_in[AUDIO_IN_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2201      	movs	r2, #1
 80138b8:	875a      	strh	r2, [r3, #58]	; 0x3a
  pdev->ep_in[AUDIO_IN_EP & 0xFU].maxpacket = 3;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2203      	movs	r2, #3
 80138be:	635a      	str	r2, [r3, #52]	; 0x34
  (void)USBD_LL_OpenEP(pdev, AUDIO_IN_EP, USBD_EP_TYPE_ISOC, 3U);
 80138c0:	2303      	movs	r3, #3
 80138c2:	2201      	movs	r2, #1
 80138c4:	2181      	movs	r1, #129	; 0x81
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f002 fa2b 	bl	8015d22 <USBD_LL_OpenEP>
  pdev->ep_in[AUDIO_IN_EP & 0xFU].is_used = 1U;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2201      	movs	r2, #1
 80138d0:	871a      	strh	r2, [r3, #56]	; 0x38

  haudio->alt_setting = 0U;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80138de:	2203      	movs	r2, #3
 80138e0:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
  haudio->wr_ptr = 0U;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80138ea:	2200      	movs	r2, #0
 80138ec:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08
  haudio->rd_ptr = 0U;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80138f6:	2200      	movs	r2, #0
 80138f8:	f8a3 2c06 	strh.w	r2, [r3, #3078]	; 0xc06
  haudio->rd_enable = 0U;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013902:	2200      	movs	r2, #0
 8013904:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	33b0      	adds	r3, #176	; 0xb0
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4413      	add	r3, r2
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2200      	movs	r2, #0
 801391c:	2146      	movs	r1, #70	; 0x46
 801391e:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8013922:	4798      	blx	r3
 8013924:	4603      	mov	r3, r0
 8013926:	2b00      	cmp	r3, #0
 8013928:	d001      	beq.n	801392e <USBD_AUDIO_Init+0x13a>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 801392a:	2303      	movs	r3, #3
 801392c:	e008      	b.n	8013940 <USBD_AUDIO_Init+0x14c>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 801392e:	4b06      	ldr	r3, [pc, #24]	; (8013948 <USBD_AUDIO_Init+0x154>)
 8013930:	7819      	ldrb	r1, [r3, #0]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	1d1a      	adds	r2, r3, #4
 8013936:	23c0      	movs	r3, #192	; 0xc0
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f002 fae1 	bl	8015f00 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 801393e:	2300      	movs	r3, #0
}
 8013940:	4618      	mov	r0, r3
 8013942:	3710      	adds	r7, #16
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2400018e 	.word	0x2400018e

0801394c <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	460b      	mov	r3, r1
 8013956:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8013958:	4b28      	ldr	r3, [pc, #160]	; (80139fc <USBD_AUDIO_DeInit+0xb0>)
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	4619      	mov	r1, r3
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f002 fa05 	bl	8015d6e <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8013964:	4b25      	ldr	r3, [pc, #148]	; (80139fc <USBD_AUDIO_DeInit+0xb0>)
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	f003 020f 	and.w	r2, r3, #15
 801396c:	6879      	ldr	r1, [r7, #4]
 801396e:	4613      	mov	r3, r2
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	4413      	add	r3, r2
 8013974:	009b      	lsls	r3, r3, #2
 8013976:	440b      	add	r3, r1
 8013978:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801397c:	2200      	movs	r2, #0
 801397e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8013980:	4b1e      	ldr	r3, [pc, #120]	; (80139fc <USBD_AUDIO_DeInit+0xb0>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	f003 020f 	and.w	r2, r3, #15
 8013988:	6879      	ldr	r1, [r7, #4]
 801398a:	4613      	mov	r3, r2
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	440b      	add	r3, r1
 8013994:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8013998:	2200      	movs	r2, #0
 801399a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	32b0      	adds	r2, #176	; 0xb0
 80139a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d020      	beq.n	80139f0 <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139b4:	687a      	ldr	r2, [r7, #4]
 80139b6:	33b0      	adds	r3, #176	; 0xb0
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	4413      	add	r3, r2
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	2000      	movs	r0, #0
 80139c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	32b0      	adds	r2, #176	; 0xb0
 80139ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f002 fad6 	bl	8015f84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	32b0      	adds	r2, #176	; 0xb0
 80139e2:	2100      	movs	r1, #0
 80139e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80139f0:	2300      	movs	r3, #0
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3708      	adds	r7, #8
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	2400018e 	.word	0x2400018e

08013a00 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b086      	sub	sp, #24
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	32b0      	adds	r2, #176	; 0xb0
 8013a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a20:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d101      	bne.n	8013a2c <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013a28:	2303      	movs	r3, #3
 8013a2a:	e0c1      	b.n	8013bb0 <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d01a      	beq.n	8013a6e <USBD_AUDIO_Setup+0x6e>
 8013a38:	2b20      	cmp	r3, #32
 8013a3a:	f040 80b1 	bne.w	8013ba0 <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	785b      	ldrb	r3, [r3, #1]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d006      	beq.n	8013a54 <USBD_AUDIO_Setup+0x54>
 8013a46:	2b81      	cmp	r3, #129	; 0x81
 8013a48:	d109      	bne.n	8013a5e <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8013a4a:	6839      	ldr	r1, [r7, #0]
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f9f5 	bl	8013e3c <AUDIO_REQ_GetCurrent>
          break;
 8013a52:	e00b      	b.n	8013a6c <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8013a54:	6839      	ldr	r1, [r7, #0]
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f000 fa1c 	bl	8013e94 <AUDIO_REQ_SetCurrent>
          break;
 8013a5c:	e006      	b.n	8013a6c <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f001 fcb0 	bl	80153c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013a66:	2303      	movs	r3, #3
 8013a68:	75fb      	strb	r3, [r7, #23]
          break;
 8013a6a:	bf00      	nop
      }
      break;
 8013a6c:	e09f      	b.n	8013bae <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	785b      	ldrb	r3, [r3, #1]
 8013a72:	2b0b      	cmp	r3, #11
 8013a74:	f200 8089 	bhi.w	8013b8a <USBD_AUDIO_Setup+0x18a>
 8013a78:	a201      	add	r2, pc, #4	; (adr r2, 8013a80 <USBD_AUDIO_Setup+0x80>)
 8013a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a7e:	bf00      	nop
 8013a80:	08013ab1 	.word	0x08013ab1
 8013a84:	08013b99 	.word	0x08013b99
 8013a88:	08013b8b 	.word	0x08013b8b
 8013a8c:	08013b8b 	.word	0x08013b8b
 8013a90:	08013b8b 	.word	0x08013b8b
 8013a94:	08013b8b 	.word	0x08013b8b
 8013a98:	08013adb 	.word	0x08013adb
 8013a9c:	08013b8b 	.word	0x08013b8b
 8013aa0:	08013b8b 	.word	0x08013b8b
 8013aa4:	08013b8b 	.word	0x08013b8b
 8013aa8:	08013b23 	.word	0x08013b23
 8013aac:	08013b4b 	.word	0x08013b4b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	2b03      	cmp	r3, #3
 8013aba:	d107      	bne.n	8013acc <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013abc:	f107 0308 	add.w	r3, r7, #8
 8013ac0:	2202      	movs	r2, #2
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f001 fcfb 	bl	80154c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013aca:	e068      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f001 fc79 	bl	80153c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	75fb      	strb	r3, [r7, #23]
          break;
 8013ad8:	e061      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	885b      	ldrh	r3, [r3, #2]
 8013ade:	0a1b      	lsrs	r3, r3, #8
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	2b21      	cmp	r3, #33	; 0x21
 8013ae4:	d15a      	bne.n	8013b9c <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8013aec:	4618      	mov	r0, r3
 8013aee:	f000 fa3f 	bl	8013f70 <USBD_AUDIO_GetAudioHeaderDesc>
 8013af2:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d00c      	beq.n	8013b14 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	88db      	ldrh	r3, [r3, #6]
 8013afe:	2b09      	cmp	r3, #9
 8013b00:	bf28      	it	cs
 8013b02:	2309      	movcs	r3, #9
 8013b04:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8013b06:	897b      	ldrh	r3, [r7, #10]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	68f9      	ldr	r1, [r7, #12]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f001 fcd7 	bl	80154c0 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8013b12:	e043      	b.n	8013b9c <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f001 fc55 	bl	80153c6 <USBD_CtlError>
              ret = USBD_FAIL;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	75fb      	strb	r3, [r7, #23]
          break;
 8013b20:	e03c      	b.n	8013b9c <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d106      	bne.n	8013b3c <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	2201      	movs	r2, #1
 8013b32:	4619      	mov	r1, r3
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f001 fcc3 	bl	80154c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b3a:	e030      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013b3c:	6839      	ldr	r1, [r7, #0]
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f001 fc41 	bl	80153c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b44:	2303      	movs	r3, #3
 8013b46:	75fb      	strb	r3, [r7, #23]
          break;
 8013b48:	e029      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	2b03      	cmp	r3, #3
 8013b54:	d112      	bne.n	8013b7c <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	885b      	ldrh	r3, [r3, #2]
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	d806      	bhi.n	8013b6e <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	885b      	ldrh	r3, [r3, #2]
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	461a      	mov	r2, r3
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b6c:	e017      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8013b6e:	6839      	ldr	r1, [r7, #0]
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f001 fc28 	bl	80153c6 <USBD_CtlError>
              ret = USBD_FAIL;
 8013b76:	2303      	movs	r3, #3
 8013b78:	75fb      	strb	r3, [r7, #23]
          break;
 8013b7a:	e010      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013b7c:	6839      	ldr	r1, [r7, #0]
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f001 fc21 	bl	80153c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b84:	2303      	movs	r3, #3
 8013b86:	75fb      	strb	r3, [r7, #23]
          break;
 8013b88:	e009      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013b8a:	6839      	ldr	r1, [r7, #0]
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f001 fc1a 	bl	80153c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013b92:	2303      	movs	r3, #3
 8013b94:	75fb      	strb	r3, [r7, #23]
          break;
 8013b96:	e002      	b.n	8013b9e <USBD_AUDIO_Setup+0x19e>
          break;
 8013b98:	bf00      	nop
 8013b9a:	e008      	b.n	8013bae <USBD_AUDIO_Setup+0x1ae>
          break;
 8013b9c:	bf00      	nop
      }
      break;
 8013b9e:	e006      	b.n	8013bae <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f001 fc0f 	bl	80153c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013ba8:	2303      	movs	r3, #3
 8013baa:	75fb      	strb	r3, [r7, #23]
      break;
 8013bac:	bf00      	nop
  }

  return (uint8_t)ret;
 8013bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3718      	adds	r7, #24
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2276      	movs	r2, #118	; 0x76
 8013bc4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8013bc6:	4b03      	ldr	r3, [pc, #12]	; (8013bd4 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	370c      	adds	r7, #12
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	2400010c 	.word	0x2400010c

08013bd8 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	460b      	mov	r3, r1
 8013be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b084      	sub	sp, #16
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	32b0      	adds	r2, #176	; 0xb0
 8013c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c08:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d101      	bne.n	8013c14 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013c10:	2303      	movs	r3, #3
 8013c12:	e02a      	b.n	8013c6a <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013c1a:	f893 3c0a 	ldrb.w	r3, [r3, #3082]	; 0xc0a
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d122      	bne.n	8013c68 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013c28:	f893 3c4c 	ldrb.w	r3, [r3, #3148]	; 0xc4c
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d11b      	bne.n	8013c68 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	33b0      	adds	r3, #176	; 0xb0
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	4413      	add	r3, r2
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	691b      	ldr	r3, [r3, #16]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8013c48:	f892 2c0b 	ldrb.w	r2, [r2, #3083]	; 0xc0b
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013c56:	2200      	movs	r2, #0
 8013c58:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
      haudio->control.len = 0U;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013c62:	2200      	movs	r2, #0
 8013c64:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    }
  }

  return (uint8_t)USBD_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8013c72:	b480      	push	{r7}
 8013c74:	b083      	sub	sp, #12
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8013c90:	2300      	movs	r3, #0
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	370c      	adds	r7, #12
 8013c96:	46bd      	mov	sp, r7
 8013c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9c:	4770      	bx	lr

08013c9e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c9e:	b480      	push	{r7}
 8013ca0:	b083      	sub	sp, #12
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8013caa:	2300      	movs	r3, #0
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	370c      	adds	r7, #12
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	32b0      	adds	r2, #176	; 0xb0
 8013cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d101      	bne.n	8013cda <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013cd6:	2303      	movs	r3, #3
 8013cd8:	e016      	b.n	8013d08 <USBD_AUDIO_IsoOutIncomplete+0x50>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	32b0      	adds	r2, #176	; 0xb0
 8013ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce8:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013cf0:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8013cf4:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	1d1a      	adds	r2, r3, #4
 8013cfc:	78f9      	ldrb	r1, [r7, #3]
 8013cfe:	23c0      	movs	r3, #192	; 0xc0
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f002 f8fd 	bl	8015f00 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8013d06:	2300      	movs	r3, #0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b084      	sub	sp, #16
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	32b0      	adds	r2, #176	; 0xb0
 8013d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d101      	bne.n	8013d36 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013d32:	2303      	movs	r3, #3
 8013d34:	e07c      	b.n	8013e30 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8013d36:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <USBD_AUDIO_DataOut+0x128>)
 8013d38:	781b      	ldrb	r3, [r3, #0]
 8013d3a:	78fa      	ldrb	r2, [r7, #3]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d176      	bne.n	8013e2e <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8013d40:	78fb      	ldrb	r3, [r7, #3]
 8013d42:	4619      	mov	r1, r3
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f002 f8fc 	bl	8015f42 <USBD_LL_GetRxDataSize>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	33b0      	adds	r3, #176	; 0xb0
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	4413      	add	r3, r2
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	695b      	ldr	r3, [r3, #20]
 8013d60:	68fa      	ldr	r2, [r7, #12]
 8013d62:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8013d66:	f8b2 2c08 	ldrh.w	r2, [r2, #3080]	; 0xc08
 8013d6a:	4611      	mov	r1, r2
 8013d6c:	68fa      	ldr	r2, [r7, #12]
 8013d6e:	440a      	add	r2, r1
 8013d70:	1d10      	adds	r0, r2, #4
 8013d72:	8979      	ldrh	r1, [r7, #10]
 8013d74:	2201      	movs	r2, #1
 8013d76:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d7e:	f8b3 2c08 	ldrh.w	r2, [r3, #3080]	; 0xc08
 8013d82:	897b      	ldrh	r3, [r7, #10]
 8013d84:	4413      	add	r3, r2
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d8e:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013d98:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8013d9c:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 8013da0:	d321      	bcc.n	8013de6 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013da8:	2200      	movs	r2, #0
 8013daa:	f8a3 2c08 	strh.w	r2, [r3, #3080]	; 0xc08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013db4:	f893 3c04 	ldrb.w	r3, [r3, #3076]	; 0xc04
 8013db8:	2b03      	cmp	r3, #3
 8013dba:	d114      	bne.n	8013de6 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	33b0      	adds	r3, #176	; 0xb0
 8013dc6:	009b      	lsls	r3, r3, #2
 8013dc8:	4413      	add	r3, r2
 8013dca:	685b      	ldr	r3, [r3, #4]
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	1d10      	adds	r0, r2, #4
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8013dd8:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013de0:	2200      	movs	r2, #0
 8013de2:	f883 2c04 	strb.w	r2, [r3, #3076]	; 0xc04
      }
    }

    if (haudio->rd_enable == 0U)
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013dec:	f893 3c05 	ldrb.w	r3, [r3, #3077]	; 0xc05
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10d      	bne.n	8013e10 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013dfa:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8013dfe:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8013e02:	d105      	bne.n	8013e10 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	f883 2c05 	strb.w	r2, [r3, #3077]	; 0xc05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8013e10:	4b09      	ldr	r3, [pc, #36]	; (8013e38 <USBD_AUDIO_DataOut+0x128>)
 8013e12:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013e1a:	f8b3 3c08 	ldrh.w	r3, [r3, #3080]	; 0xc08
 8013e1e:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	4413      	add	r3, r2
 8013e24:	1d1a      	adds	r2, r3, #4
 8013e26:	23c0      	movs	r3, #192	; 0xc0
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f002 f869 	bl	8015f00 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	2400018e 	.word	0x2400018e

08013e3c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	32b0      	adds	r2, #176	; 0xb0
 8013e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e54:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d017      	beq.n	8013e8c <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8013e5c:	68fa      	ldr	r2, [r7, #12]
 8013e5e:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8013e62:	4413      	add	r3, r2
 8013e64:	2240      	movs	r2, #64	; 0x40
 8013e66:	2100      	movs	r1, #0
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f003 fd90 	bl	801798e <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8013e6e:	68fa      	ldr	r2, [r7, #12]
 8013e70:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8013e74:	4413      	add	r3, r2
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 8013e76:	683a      	ldr	r2, [r7, #0]
 8013e78:	88d2      	ldrh	r2, [r2, #6]
 8013e7a:	2a40      	cmp	r2, #64	; 0x40
 8013e7c:	bf28      	it	cs
 8013e7e:	2240      	movcs	r2, #64	; 0x40
 8013e80:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 8013e82:	4619      	mov	r1, r3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f001 fb1b 	bl	80154c0 <USBD_CtlSendData>
 8013e8a:	e000      	b.n	8013e8e <AUDIO_REQ_GetCurrent+0x52>
    return;
 8013e8c:	bf00      	nop
}
 8013e8e:	3710      	adds	r7, #16
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	32b0      	adds	r2, #176	; 0xb0
 8013ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eac:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d02f      	beq.n	8013f14 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	88db      	ldrh	r3, [r3, #6]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d02c      	beq.n	8013f16 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	f883 2c0a 	strb.w	r2, [r3, #3082]	; 0xc0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	88db      	ldrh	r3, [r3, #6]
 8013ecc:	2b3f      	cmp	r3, #63	; 0x3f
 8013ece:	d803      	bhi.n	8013ed8 <AUDIO_REQ_SetCurrent+0x44>
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	88db      	ldrh	r3, [r3, #6]
 8013ed4:	b2da      	uxtb	r2, r3
 8013ed6:	e000      	b.n	8013eda <AUDIO_REQ_SetCurrent+0x46>
 8013ed8:	2240      	movs	r2, #64	; 0x40
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013ee0:	f883 2c4b 	strb.w	r2, [r3, #3147]	; 0xc4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	889b      	ldrh	r3, [r3, #4]
 8013ee8:	0a1b      	lsrs	r3, r3, #8
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	b2da      	uxtb	r2, r3
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8013ef4:	f883 2c4c 	strb.w	r2, [r3, #3148]	; 0xc4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	f643 430b 	movw	r3, #15371	; 0x3c0b
 8013efe:	4413      	add	r3, r2
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8013f06:	f892 2c4b 	ldrb.w	r2, [r2, #3147]	; 0xc4b
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f001 fb03 	bl	8015518 <USBD_CtlPrepareRx>
 8013f12:	e000      	b.n	8013f16 <AUDIO_REQ_SetCurrent+0x82>
    return;
 8013f14:	bf00      	nop
  }
}
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	220a      	movs	r2, #10
 8013f28:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8013f2a:	4b03      	ldr	r3, [pc, #12]	; (8013f38 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	370c      	adds	r7, #12
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr
 8013f38:	24000184 	.word	0x24000184

08013f3c <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b083      	sub	sp, #12
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d101      	bne.n	8013f50 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013f4c:	2303      	movs	r3, #3
 8013f4e:	e009      	b.n	8013f64 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	33b0      	adds	r3, #176	; 0xb0
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	683a      	ldr	r2, [r7, #0]
 8013f60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b086      	sub	sp, #24
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 8013f80:	2300      	movs	r3, #0
 8013f82:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	885b      	ldrh	r3, [r3, #2]
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d91c      	bls.n	8013fce <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013f9c:	e011      	b.n	8013fc2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013f9e:	f107 030a 	add.w	r3, r7, #10
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	6978      	ldr	r0, [r7, #20]
 8013fa6:	f000 fbe6 	bl	8014776 <USBD_GetNextDesc>
 8013faa:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	785b      	ldrb	r3, [r3, #1]
 8013fb0:	2b24      	cmp	r3, #36	; 0x24
 8013fb2:	d106      	bne.n	8013fc2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d102      	bne.n	8013fc2 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	613b      	str	r3, [r7, #16]
        break;
 8013fc0:	e005      	b.n	8013fce <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	885b      	ldrh	r3, [r3, #2]
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	897b      	ldrh	r3, [r7, #10]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d8e7      	bhi.n	8013f9e <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 8013fce:	693b      	ldr	r3, [r7, #16]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3718      	adds	r7, #24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b086      	sub	sp, #24
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d101      	bne.n	8013ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013fec:	2303      	movs	r3, #3
 8013fee:	e01f      	b.n	8014030 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2200      	movs	r2, #0
 8014004:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	2201      	movs	r2, #1
 801401a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	79fa      	ldrb	r2, [r7, #7]
 8014022:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f001 fe11 	bl	8015c4c <USBD_LL_Init>
 801402a:	4603      	mov	r3, r0
 801402c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801402e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014030:	4618      	mov	r0, r3
 8014032:	3718      	adds	r7, #24
 8014034:	46bd      	mov	sp, r7
 8014036:	bd80      	pop	{r7, pc}

08014038 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014042:	2300      	movs	r3, #0
 8014044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d101      	bne.n	8014050 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801404c:	2303      	movs	r3, #3
 801404e:	e025      	b.n	801409c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	32ae      	adds	r2, #174	; 0xae
 8014062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014068:	2b00      	cmp	r3, #0
 801406a:	d00f      	beq.n	801408c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	32ae      	adds	r2, #174	; 0xae
 8014076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	f107 020e 	add.w	r2, r7, #14
 8014080:	4610      	mov	r0, r2
 8014082:	4798      	blx	r3
 8014084:	4602      	mov	r2, r0
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014092:	1c5a      	adds	r2, r3, #1
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801409a:	2300      	movs	r3, #0
}
 801409c:	4618      	mov	r0, r3
 801409e:	3710      	adds	r7, #16
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f001 fe1d 	bl	8015cec <USBD_LL_Start>
 80140b2:	4603      	mov	r3, r0
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80140c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	370c      	adds	r7, #12
 80140ca:	46bd      	mov	sp, r7
 80140cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d0:	4770      	bx	lr

080140d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80140d2:	b580      	push	{r7, lr}
 80140d4:	b084      	sub	sp, #16
 80140d6:	af00      	add	r7, sp, #0
 80140d8:	6078      	str	r0, [r7, #4]
 80140da:	460b      	mov	r3, r1
 80140dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80140de:	2300      	movs	r3, #0
 80140e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d009      	beq.n	8014100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	78fa      	ldrb	r2, [r7, #3]
 80140f6:	4611      	mov	r1, r2
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	4798      	blx	r3
 80140fc:	4603      	mov	r3, r0
 80140fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014100:	7bfb      	ldrb	r3, [r7, #15]
}
 8014102:	4618      	mov	r0, r3
 8014104:	3710      	adds	r7, #16
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801410a:	b580      	push	{r7, lr}
 801410c:	b084      	sub	sp, #16
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
 8014112:	460b      	mov	r3, r1
 8014114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014116:	2300      	movs	r3, #0
 8014118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	78fa      	ldrb	r2, [r7, #3]
 8014124:	4611      	mov	r1, r2
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	4798      	blx	r3
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d001      	beq.n	8014134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014130:	2303      	movs	r3, #3
 8014132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014134:	7bfb      	ldrb	r3, [r7, #15]
}
 8014136:	4618      	mov	r0, r3
 8014138:	3710      	adds	r7, #16
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}

0801413e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801413e:	b580      	push	{r7, lr}
 8014140:	b084      	sub	sp, #16
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
 8014146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801414e:	6839      	ldr	r1, [r7, #0]
 8014150:	4618      	mov	r0, r3
 8014152:	f001 f8fe 	bl	8015352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2201      	movs	r2, #1
 801415a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014164:	461a      	mov	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014172:	f003 031f 	and.w	r3, r3, #31
 8014176:	2b02      	cmp	r3, #2
 8014178:	d01a      	beq.n	80141b0 <USBD_LL_SetupStage+0x72>
 801417a:	2b02      	cmp	r3, #2
 801417c:	d822      	bhi.n	80141c4 <USBD_LL_SetupStage+0x86>
 801417e:	2b00      	cmp	r3, #0
 8014180:	d002      	beq.n	8014188 <USBD_LL_SetupStage+0x4a>
 8014182:	2b01      	cmp	r3, #1
 8014184:	d00a      	beq.n	801419c <USBD_LL_SetupStage+0x5e>
 8014186:	e01d      	b.n	80141c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801418e:	4619      	mov	r1, r3
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 fb2b 	bl	80147ec <USBD_StdDevReq>
 8014196:	4603      	mov	r3, r0
 8014198:	73fb      	strb	r3, [r7, #15]
      break;
 801419a:	e020      	b.n	80141de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80141a2:	4619      	mov	r1, r3
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f000 fb93 	bl	80148d0 <USBD_StdItfReq>
 80141aa:	4603      	mov	r3, r0
 80141ac:	73fb      	strb	r3, [r7, #15]
      break;
 80141ae:	e016      	b.n	80141de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80141b6:	4619      	mov	r1, r3
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 fbf5 	bl	80149a8 <USBD_StdEPReq>
 80141be:	4603      	mov	r3, r0
 80141c0:	73fb      	strb	r3, [r7, #15]
      break;
 80141c2:	e00c      	b.n	80141de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80141ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	4619      	mov	r1, r3
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f001 fdea 	bl	8015dac <USBD_LL_StallEP>
 80141d8:	4603      	mov	r3, r0
 80141da:	73fb      	strb	r3, [r7, #15]
      break;
 80141dc:	bf00      	nop
  }

  return ret;
 80141de:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3710      	adds	r7, #16
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}

080141e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b086      	sub	sp, #24
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60f8      	str	r0, [r7, #12]
 80141f0:	460b      	mov	r3, r1
 80141f2:	607a      	str	r2, [r7, #4]
 80141f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80141f6:	2300      	movs	r3, #0
 80141f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80141fa:	7afb      	ldrb	r3, [r7, #11]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d16e      	bne.n	80142de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801420e:	2b03      	cmp	r3, #3
 8014210:	f040 8098 	bne.w	8014344 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	689a      	ldr	r2, [r3, #8]
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	429a      	cmp	r2, r3
 801421e:	d913      	bls.n	8014248 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	689a      	ldr	r2, [r3, #8]
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	1ad2      	subs	r2, r2, r3
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	68da      	ldr	r2, [r3, #12]
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	4293      	cmp	r3, r2
 8014238:	bf28      	it	cs
 801423a:	4613      	movcs	r3, r2
 801423c:	461a      	mov	r2, r3
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	f001 f986 	bl	8015552 <USBD_CtlContinueRx>
 8014246:	e07d      	b.n	8014344 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801424e:	f003 031f 	and.w	r3, r3, #31
 8014252:	2b02      	cmp	r3, #2
 8014254:	d014      	beq.n	8014280 <USBD_LL_DataOutStage+0x98>
 8014256:	2b02      	cmp	r3, #2
 8014258:	d81d      	bhi.n	8014296 <USBD_LL_DataOutStage+0xae>
 801425a:	2b00      	cmp	r3, #0
 801425c:	d002      	beq.n	8014264 <USBD_LL_DataOutStage+0x7c>
 801425e:	2b01      	cmp	r3, #1
 8014260:	d003      	beq.n	801426a <USBD_LL_DataOutStage+0x82>
 8014262:	e018      	b.n	8014296 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014264:	2300      	movs	r3, #0
 8014266:	75bb      	strb	r3, [r7, #22]
            break;
 8014268:	e018      	b.n	801429c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014270:	b2db      	uxtb	r3, r3
 8014272:	4619      	mov	r1, r3
 8014274:	68f8      	ldr	r0, [r7, #12]
 8014276:	f000 fa64 	bl	8014742 <USBD_CoreFindIF>
 801427a:	4603      	mov	r3, r0
 801427c:	75bb      	strb	r3, [r7, #22]
            break;
 801427e:	e00d      	b.n	801429c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014286:	b2db      	uxtb	r3, r3
 8014288:	4619      	mov	r1, r3
 801428a:	68f8      	ldr	r0, [r7, #12]
 801428c:	f000 fa66 	bl	801475c <USBD_CoreFindEP>
 8014290:	4603      	mov	r3, r0
 8014292:	75bb      	strb	r3, [r7, #22]
            break;
 8014294:	e002      	b.n	801429c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014296:	2300      	movs	r3, #0
 8014298:	75bb      	strb	r3, [r7, #22]
            break;
 801429a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801429c:	7dbb      	ldrb	r3, [r7, #22]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d119      	bne.n	80142d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d113      	bne.n	80142d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80142ae:	7dba      	ldrb	r2, [r7, #22]
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	32ae      	adds	r2, #174	; 0xae
 80142b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d00b      	beq.n	80142d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80142be:	7dba      	ldrb	r2, [r7, #22]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80142c6:	7dba      	ldrb	r2, [r7, #22]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	32ae      	adds	r2, #174	; 0xae
 80142cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142d0:	691b      	ldr	r3, [r3, #16]
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f001 f94c 	bl	8015574 <USBD_CtlSendStatus>
 80142dc:	e032      	b.n	8014344 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80142de:	7afb      	ldrb	r3, [r7, #11]
 80142e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	4619      	mov	r1, r3
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f000 fa37 	bl	801475c <USBD_CoreFindEP>
 80142ee:	4603      	mov	r3, r0
 80142f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142f2:	7dbb      	ldrb	r3, [r7, #22]
 80142f4:	2bff      	cmp	r3, #255	; 0xff
 80142f6:	d025      	beq.n	8014344 <USBD_LL_DataOutStage+0x15c>
 80142f8:	7dbb      	ldrb	r3, [r7, #22]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d122      	bne.n	8014344 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014304:	b2db      	uxtb	r3, r3
 8014306:	2b03      	cmp	r3, #3
 8014308:	d117      	bne.n	801433a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801430a:	7dba      	ldrb	r2, [r7, #22]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	32ae      	adds	r2, #174	; 0xae
 8014310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014314:	699b      	ldr	r3, [r3, #24]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d00f      	beq.n	801433a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801431a:	7dba      	ldrb	r2, [r7, #22]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014322:	7dba      	ldrb	r2, [r7, #22]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	32ae      	adds	r2, #174	; 0xae
 8014328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801432c:	699b      	ldr	r3, [r3, #24]
 801432e:	7afa      	ldrb	r2, [r7, #11]
 8014330:	4611      	mov	r1, r2
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	4798      	blx	r3
 8014336:	4603      	mov	r3, r0
 8014338:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801433a:	7dfb      	ldrb	r3, [r7, #23]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d001      	beq.n	8014344 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014340:	7dfb      	ldrb	r3, [r7, #23]
 8014342:	e000      	b.n	8014346 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014344:	2300      	movs	r3, #0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3718      	adds	r7, #24
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}

0801434e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801434e:	b580      	push	{r7, lr}
 8014350:	b086      	sub	sp, #24
 8014352:	af00      	add	r7, sp, #0
 8014354:	60f8      	str	r0, [r7, #12]
 8014356:	460b      	mov	r3, r1
 8014358:	607a      	str	r2, [r7, #4]
 801435a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801435c:	7afb      	ldrb	r3, [r7, #11]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d16f      	bne.n	8014442 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	3314      	adds	r3, #20
 8014366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801436e:	2b02      	cmp	r3, #2
 8014370:	d15a      	bne.n	8014428 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014372:	693b      	ldr	r3, [r7, #16]
 8014374:	689a      	ldr	r2, [r3, #8]
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	429a      	cmp	r2, r3
 801437c:	d914      	bls.n	80143a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	689a      	ldr	r2, [r3, #8]
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	1ad2      	subs	r2, r2, r3
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	461a      	mov	r2, r3
 8014392:	6879      	ldr	r1, [r7, #4]
 8014394:	68f8      	ldr	r0, [r7, #12]
 8014396:	f001 f8ae 	bl	80154f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801439a:	2300      	movs	r3, #0
 801439c:	2200      	movs	r2, #0
 801439e:	2100      	movs	r1, #0
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f001 fdad 	bl	8015f00 <USBD_LL_PrepareReceive>
 80143a6:	e03f      	b.n	8014428 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	68da      	ldr	r2, [r3, #12]
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	689b      	ldr	r3, [r3, #8]
 80143b0:	429a      	cmp	r2, r3
 80143b2:	d11c      	bne.n	80143ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	685a      	ldr	r2, [r3, #4]
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80143bc:	429a      	cmp	r2, r3
 80143be:	d316      	bcc.n	80143ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	685a      	ldr	r2, [r3, #4]
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d20f      	bcs.n	80143ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80143ce:	2200      	movs	r2, #0
 80143d0:	2100      	movs	r1, #0
 80143d2:	68f8      	ldr	r0, [r7, #12]
 80143d4:	f001 f88f 	bl	80154f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2200      	movs	r2, #0
 80143dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143e0:	2300      	movs	r3, #0
 80143e2:	2200      	movs	r2, #0
 80143e4:	2100      	movs	r1, #0
 80143e6:	68f8      	ldr	r0, [r7, #12]
 80143e8:	f001 fd8a 	bl	8015f00 <USBD_LL_PrepareReceive>
 80143ec:	e01c      	b.n	8014428 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	2b03      	cmp	r3, #3
 80143f8:	d10f      	bne.n	801441a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d009      	beq.n	801441a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2200      	movs	r2, #0
 801440a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801441a:	2180      	movs	r1, #128	; 0x80
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f001 fcc5 	bl	8015dac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014422:	68f8      	ldr	r0, [r7, #12]
 8014424:	f001 f8b9 	bl	801559a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801442e:	2b00      	cmp	r3, #0
 8014430:	d03a      	beq.n	80144a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014432:	68f8      	ldr	r0, [r7, #12]
 8014434:	f7ff fe42 	bl	80140bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2200      	movs	r2, #0
 801443c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014440:	e032      	b.n	80144a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014442:	7afb      	ldrb	r3, [r7, #11]
 8014444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014448:	b2db      	uxtb	r3, r3
 801444a:	4619      	mov	r1, r3
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f000 f985 	bl	801475c <USBD_CoreFindEP>
 8014452:	4603      	mov	r3, r0
 8014454:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014456:	7dfb      	ldrb	r3, [r7, #23]
 8014458:	2bff      	cmp	r3, #255	; 0xff
 801445a:	d025      	beq.n	80144a8 <USBD_LL_DataInStage+0x15a>
 801445c:	7dfb      	ldrb	r3, [r7, #23]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d122      	bne.n	80144a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014468:	b2db      	uxtb	r3, r3
 801446a:	2b03      	cmp	r3, #3
 801446c:	d11c      	bne.n	80144a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801446e:	7dfa      	ldrb	r2, [r7, #23]
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	32ae      	adds	r2, #174	; 0xae
 8014474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014478:	695b      	ldr	r3, [r3, #20]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d014      	beq.n	80144a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801447e:	7dfa      	ldrb	r2, [r7, #23]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014486:	7dfa      	ldrb	r2, [r7, #23]
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	32ae      	adds	r2, #174	; 0xae
 801448c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014490:	695b      	ldr	r3, [r3, #20]
 8014492:	7afa      	ldrb	r2, [r7, #11]
 8014494:	4611      	mov	r1, r2
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	4798      	blx	r3
 801449a:	4603      	mov	r3, r0
 801449c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801449e:	7dbb      	ldrb	r3, [r7, #22]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80144a4:	7dbb      	ldrb	r3, [r7, #22]
 80144a6:	e000      	b.n	80144aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80144a8:	2300      	movs	r3, #0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}

080144b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80144b2:	b580      	push	{r7, lr}
 80144b4:	b084      	sub	sp, #16
 80144b6:	af00      	add	r7, sp, #0
 80144b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80144ba:	2300      	movs	r3, #0
 80144bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2201      	movs	r2, #1
 80144c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2200      	movs	r2, #0
 80144ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2200      	movs	r2, #0
 80144d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d014      	beq.n	8014518 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00e      	beq.n	8014518 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	6852      	ldr	r2, [r2, #4]
 8014506:	b2d2      	uxtb	r2, r2
 8014508:	4611      	mov	r1, r2
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	4798      	blx	r3
 801450e:	4603      	mov	r3, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	d001      	beq.n	8014518 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014514:	2303      	movs	r3, #3
 8014516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014518:	2340      	movs	r3, #64	; 0x40
 801451a:	2200      	movs	r2, #0
 801451c:	2100      	movs	r1, #0
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f001 fbff 	bl	8015d22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2201      	movs	r2, #1
 8014528:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2240      	movs	r2, #64	; 0x40
 8014530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014534:	2340      	movs	r3, #64	; 0x40
 8014536:	2200      	movs	r2, #0
 8014538:	2180      	movs	r1, #128	; 0x80
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f001 fbf1 	bl	8015d22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2201      	movs	r2, #1
 8014544:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2240      	movs	r2, #64	; 0x40
 801454a:	621a      	str	r2, [r3, #32]

  return ret;
 801454c:	7bfb      	ldrb	r3, [r7, #15]
}
 801454e:	4618      	mov	r0, r3
 8014550:	3710      	adds	r7, #16
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014556:	b480      	push	{r7}
 8014558:	b083      	sub	sp, #12
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	460b      	mov	r3, r1
 8014560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	78fa      	ldrb	r2, [r7, #3]
 8014566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014568:	2300      	movs	r3, #0
}
 801456a:	4618      	mov	r0, r3
 801456c:	370c      	adds	r7, #12
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr

08014576 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014576:	b480      	push	{r7}
 8014578:	b083      	sub	sp, #12
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014584:	b2db      	uxtb	r3, r3
 8014586:	2b04      	cmp	r3, #4
 8014588:	d006      	beq.n	8014598 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014590:	b2da      	uxtb	r2, r3
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2204      	movs	r2, #4
 801459c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	370c      	adds	r7, #12
 80145a6:	46bd      	mov	sp, r7
 80145a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ac:	4770      	bx	lr

080145ae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80145ae:	b480      	push	{r7}
 80145b0:	b083      	sub	sp, #12
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b04      	cmp	r3, #4
 80145c0:	d106      	bne.n	80145d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80145de:	b580      	push	{r7, lr}
 80145e0:	b082      	sub	sp, #8
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145ec:	b2db      	uxtb	r3, r3
 80145ee:	2b03      	cmp	r3, #3
 80145f0:	d110      	bne.n	8014614 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00b      	beq.n	8014614 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014602:	69db      	ldr	r3, [r3, #28]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d005      	beq.n	8014614 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801460e:	69db      	ldr	r3, [r3, #28]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3708      	adds	r7, #8
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b082      	sub	sp, #8
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
 8014626:	460b      	mov	r3, r1
 8014628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	32ae      	adds	r2, #174	; 0xae
 8014634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d101      	bne.n	8014640 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801463c:	2303      	movs	r3, #3
 801463e:	e01c      	b.n	801467a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014646:	b2db      	uxtb	r3, r3
 8014648:	2b03      	cmp	r3, #3
 801464a:	d115      	bne.n	8014678 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	32ae      	adds	r2, #174	; 0xae
 8014656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801465a:	6a1b      	ldr	r3, [r3, #32]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00b      	beq.n	8014678 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	32ae      	adds	r2, #174	; 0xae
 801466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466e:	6a1b      	ldr	r3, [r3, #32]
 8014670:	78fa      	ldrb	r2, [r7, #3]
 8014672:	4611      	mov	r1, r2
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3708      	adds	r7, #8
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b082      	sub	sp, #8
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
 801468a:	460b      	mov	r3, r1
 801468c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	32ae      	adds	r2, #174	; 0xae
 8014698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80146a0:	2303      	movs	r3, #3
 80146a2:	e01c      	b.n	80146de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146aa:	b2db      	uxtb	r3, r3
 80146ac:	2b03      	cmp	r3, #3
 80146ae:	d115      	bne.n	80146dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	32ae      	adds	r2, #174	; 0xae
 80146ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00b      	beq.n	80146dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	32ae      	adds	r2, #174	; 0xae
 80146ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146d4:	78fa      	ldrb	r2, [r7, #3]
 80146d6:	4611      	mov	r1, r2
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80146dc:	2300      	movs	r3, #0
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80146e6:	b480      	push	{r7}
 80146e8:	b083      	sub	sp, #12
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80146ee:	2300      	movs	r3, #0
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	370c      	adds	r7, #12
 80146f4:	46bd      	mov	sp, r7
 80146f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fa:	4770      	bx	lr

080146fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014704:	2300      	movs	r3, #0
 8014706:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2201      	movs	r2, #1
 801470c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014716:	2b00      	cmp	r3, #0
 8014718:	d00e      	beq.n	8014738 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	6852      	ldr	r2, [r2, #4]
 8014726:	b2d2      	uxtb	r2, r2
 8014728:	4611      	mov	r1, r2
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	4798      	blx	r3
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d001      	beq.n	8014738 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014734:	2303      	movs	r3, #3
 8014736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014738:	7bfb      	ldrb	r3, [r7, #15]
}
 801473a:	4618      	mov	r0, r3
 801473c:	3710      	adds	r7, #16
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	460b      	mov	r3, r1
 801474c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801474e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	460b      	mov	r3, r1
 8014766:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014768:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801476a:	4618      	mov	r0, r3
 801476c:	370c      	adds	r7, #12
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr

08014776 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014776:	b480      	push	{r7}
 8014778:	b085      	sub	sp, #20
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]
 801477e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	881a      	ldrh	r2, [r3, #0]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	b29b      	uxth	r3, r3
 801478e:	4413      	add	r3, r2
 8014790:	b29a      	uxth	r2, r3
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	461a      	mov	r2, r3
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	4413      	add	r3, r2
 80147a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80147a2:	68fb      	ldr	r3, [r7, #12]
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3714      	adds	r7, #20
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80147b0:	b480      	push	{r7}
 80147b2:	b087      	sub	sp, #28
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	3301      	adds	r3, #1
 80147c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80147ce:	8a3b      	ldrh	r3, [r7, #16]
 80147d0:	021b      	lsls	r3, r3, #8
 80147d2:	b21a      	sxth	r2, r3
 80147d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147d8:	4313      	orrs	r3, r2
 80147da:	b21b      	sxth	r3, r3
 80147dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80147de:	89fb      	ldrh	r3, [r7, #14]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	371c      	adds	r7, #28
 80147e4:	46bd      	mov	sp, r7
 80147e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ea:	4770      	bx	lr

080147ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147f6:	2300      	movs	r3, #0
 80147f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014802:	2b40      	cmp	r3, #64	; 0x40
 8014804:	d005      	beq.n	8014812 <USBD_StdDevReq+0x26>
 8014806:	2b40      	cmp	r3, #64	; 0x40
 8014808:	d857      	bhi.n	80148ba <USBD_StdDevReq+0xce>
 801480a:	2b00      	cmp	r3, #0
 801480c:	d00f      	beq.n	801482e <USBD_StdDevReq+0x42>
 801480e:	2b20      	cmp	r3, #32
 8014810:	d153      	bne.n	80148ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	32ae      	adds	r2, #174	; 0xae
 801481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014820:	689b      	ldr	r3, [r3, #8]
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	4798      	blx	r3
 8014828:	4603      	mov	r3, r0
 801482a:	73fb      	strb	r3, [r7, #15]
      break;
 801482c:	e04a      	b.n	80148c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	785b      	ldrb	r3, [r3, #1]
 8014832:	2b09      	cmp	r3, #9
 8014834:	d83b      	bhi.n	80148ae <USBD_StdDevReq+0xc2>
 8014836:	a201      	add	r2, pc, #4	; (adr r2, 801483c <USBD_StdDevReq+0x50>)
 8014838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801483c:	08014891 	.word	0x08014891
 8014840:	080148a5 	.word	0x080148a5
 8014844:	080148af 	.word	0x080148af
 8014848:	0801489b 	.word	0x0801489b
 801484c:	080148af 	.word	0x080148af
 8014850:	0801486f 	.word	0x0801486f
 8014854:	08014865 	.word	0x08014865
 8014858:	080148af 	.word	0x080148af
 801485c:	08014887 	.word	0x08014887
 8014860:	08014879 	.word	0x08014879
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014864:	6839      	ldr	r1, [r7, #0]
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f000 fa3c 	bl	8014ce4 <USBD_GetDescriptor>
          break;
 801486c:	e024      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801486e:	6839      	ldr	r1, [r7, #0]
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f000 fbcb 	bl	801500c <USBD_SetAddress>
          break;
 8014876:	e01f      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014878:	6839      	ldr	r1, [r7, #0]
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f000 fc0a 	bl	8015094 <USBD_SetConfig>
 8014880:	4603      	mov	r3, r0
 8014882:	73fb      	strb	r3, [r7, #15]
          break;
 8014884:	e018      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014886:	6839      	ldr	r1, [r7, #0]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 fcad 	bl	80151e8 <USBD_GetConfig>
          break;
 801488e:	e013      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 fcde 	bl	8015254 <USBD_GetStatus>
          break;
 8014898:	e00e      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801489a:	6839      	ldr	r1, [r7, #0]
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f000 fd0d 	bl	80152bc <USBD_SetFeature>
          break;
 80148a2:	e009      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80148a4:	6839      	ldr	r1, [r7, #0]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 fd31 	bl	801530e <USBD_ClrFeature>
          break;
 80148ac:	e004      	b.n	80148b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80148ae:	6839      	ldr	r1, [r7, #0]
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f000 fd88 	bl	80153c6 <USBD_CtlError>
          break;
 80148b6:	bf00      	nop
      }
      break;
 80148b8:	e004      	b.n	80148c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80148ba:	6839      	ldr	r1, [r7, #0]
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f000 fd82 	bl	80153c6 <USBD_CtlError>
      break;
 80148c2:	bf00      	nop
  }

  return ret;
 80148c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3710      	adds	r7, #16
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop

080148d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148da:	2300      	movs	r3, #0
 80148dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148e6:	2b40      	cmp	r3, #64	; 0x40
 80148e8:	d005      	beq.n	80148f6 <USBD_StdItfReq+0x26>
 80148ea:	2b40      	cmp	r3, #64	; 0x40
 80148ec:	d852      	bhi.n	8014994 <USBD_StdItfReq+0xc4>
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d001      	beq.n	80148f6 <USBD_StdItfReq+0x26>
 80148f2:	2b20      	cmp	r3, #32
 80148f4:	d14e      	bne.n	8014994 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	3b01      	subs	r3, #1
 8014900:	2b02      	cmp	r3, #2
 8014902:	d840      	bhi.n	8014986 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	889b      	ldrh	r3, [r3, #4]
 8014908:	b2db      	uxtb	r3, r3
 801490a:	2b01      	cmp	r3, #1
 801490c:	d836      	bhi.n	801497c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	889b      	ldrh	r3, [r3, #4]
 8014912:	b2db      	uxtb	r3, r3
 8014914:	4619      	mov	r1, r3
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7ff ff13 	bl	8014742 <USBD_CoreFindIF>
 801491c:	4603      	mov	r3, r0
 801491e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014920:	7bbb      	ldrb	r3, [r7, #14]
 8014922:	2bff      	cmp	r3, #255	; 0xff
 8014924:	d01d      	beq.n	8014962 <USBD_StdItfReq+0x92>
 8014926:	7bbb      	ldrb	r3, [r7, #14]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d11a      	bne.n	8014962 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801492c:	7bba      	ldrb	r2, [r7, #14]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	32ae      	adds	r2, #174	; 0xae
 8014932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014936:	689b      	ldr	r3, [r3, #8]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00f      	beq.n	801495c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801493c:	7bba      	ldrb	r2, [r7, #14]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014944:	7bba      	ldrb	r2, [r7, #14]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	32ae      	adds	r2, #174	; 0xae
 801494a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801494e:	689b      	ldr	r3, [r3, #8]
 8014950:	6839      	ldr	r1, [r7, #0]
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	4798      	blx	r3
 8014956:	4603      	mov	r3, r0
 8014958:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801495a:	e004      	b.n	8014966 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801495c:	2303      	movs	r3, #3
 801495e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014960:	e001      	b.n	8014966 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014962:	2303      	movs	r3, #3
 8014964:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	88db      	ldrh	r3, [r3, #6]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d110      	bne.n	8014990 <USBD_StdItfReq+0xc0>
 801496e:	7bfb      	ldrb	r3, [r7, #15]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d10d      	bne.n	8014990 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014974:	6878      	ldr	r0, [r7, #4]
 8014976:	f000 fdfd 	bl	8015574 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801497a:	e009      	b.n	8014990 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801497c:	6839      	ldr	r1, [r7, #0]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 fd21 	bl	80153c6 <USBD_CtlError>
          break;
 8014984:	e004      	b.n	8014990 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014986:	6839      	ldr	r1, [r7, #0]
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f000 fd1c 	bl	80153c6 <USBD_CtlError>
          break;
 801498e:	e000      	b.n	8014992 <USBD_StdItfReq+0xc2>
          break;
 8014990:	bf00      	nop
      }
      break;
 8014992:	e004      	b.n	801499e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014994:	6839      	ldr	r1, [r7, #0]
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 fd15 	bl	80153c6 <USBD_CtlError>
      break;
 801499c:	bf00      	nop
  }

  return ret;
 801499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80149b2:	2300      	movs	r3, #0
 80149b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	889b      	ldrh	r3, [r3, #4]
 80149ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80149c4:	2b40      	cmp	r3, #64	; 0x40
 80149c6:	d007      	beq.n	80149d8 <USBD_StdEPReq+0x30>
 80149c8:	2b40      	cmp	r3, #64	; 0x40
 80149ca:	f200 817f 	bhi.w	8014ccc <USBD_StdEPReq+0x324>
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d02a      	beq.n	8014a28 <USBD_StdEPReq+0x80>
 80149d2:	2b20      	cmp	r3, #32
 80149d4:	f040 817a 	bne.w	8014ccc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80149d8:	7bbb      	ldrb	r3, [r7, #14]
 80149da:	4619      	mov	r1, r3
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f7ff febd 	bl	801475c <USBD_CoreFindEP>
 80149e2:	4603      	mov	r3, r0
 80149e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80149e6:	7b7b      	ldrb	r3, [r7, #13]
 80149e8:	2bff      	cmp	r3, #255	; 0xff
 80149ea:	f000 8174 	beq.w	8014cd6 <USBD_StdEPReq+0x32e>
 80149ee:	7b7b      	ldrb	r3, [r7, #13]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	f040 8170 	bne.w	8014cd6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80149f6:	7b7a      	ldrb	r2, [r7, #13]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80149fe:	7b7a      	ldrb	r2, [r7, #13]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	32ae      	adds	r2, #174	; 0xae
 8014a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a08:	689b      	ldr	r3, [r3, #8]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f000 8163 	beq.w	8014cd6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014a10:	7b7a      	ldrb	r2, [r7, #13]
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	32ae      	adds	r2, #174	; 0xae
 8014a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	6839      	ldr	r1, [r7, #0]
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	4798      	blx	r3
 8014a22:	4603      	mov	r3, r0
 8014a24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014a26:	e156      	b.n	8014cd6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	785b      	ldrb	r3, [r3, #1]
 8014a2c:	2b03      	cmp	r3, #3
 8014a2e:	d008      	beq.n	8014a42 <USBD_StdEPReq+0x9a>
 8014a30:	2b03      	cmp	r3, #3
 8014a32:	f300 8145 	bgt.w	8014cc0 <USBD_StdEPReq+0x318>
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f000 809b 	beq.w	8014b72 <USBD_StdEPReq+0x1ca>
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d03c      	beq.n	8014aba <USBD_StdEPReq+0x112>
 8014a40:	e13e      	b.n	8014cc0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	2b02      	cmp	r3, #2
 8014a4c:	d002      	beq.n	8014a54 <USBD_StdEPReq+0xac>
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	d016      	beq.n	8014a80 <USBD_StdEPReq+0xd8>
 8014a52:	e02c      	b.n	8014aae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a54:	7bbb      	ldrb	r3, [r7, #14]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00d      	beq.n	8014a76 <USBD_StdEPReq+0xce>
 8014a5a:	7bbb      	ldrb	r3, [r7, #14]
 8014a5c:	2b80      	cmp	r3, #128	; 0x80
 8014a5e:	d00a      	beq.n	8014a76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a60:	7bbb      	ldrb	r3, [r7, #14]
 8014a62:	4619      	mov	r1, r3
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f001 f9a1 	bl	8015dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a6a:	2180      	movs	r1, #128	; 0x80
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f001 f99d 	bl	8015dac <USBD_LL_StallEP>
 8014a72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014a74:	e020      	b.n	8014ab8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 fca4 	bl	80153c6 <USBD_CtlError>
              break;
 8014a7e:	e01b      	b.n	8014ab8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	885b      	ldrh	r3, [r3, #2]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d10e      	bne.n	8014aa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014a88:	7bbb      	ldrb	r3, [r7, #14]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00b      	beq.n	8014aa6 <USBD_StdEPReq+0xfe>
 8014a8e:	7bbb      	ldrb	r3, [r7, #14]
 8014a90:	2b80      	cmp	r3, #128	; 0x80
 8014a92:	d008      	beq.n	8014aa6 <USBD_StdEPReq+0xfe>
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	88db      	ldrh	r3, [r3, #6]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d104      	bne.n	8014aa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a9c:	7bbb      	ldrb	r3, [r7, #14]
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f001 f983 	bl	8015dac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 fd64 	bl	8015574 <USBD_CtlSendStatus>

              break;
 8014aac:	e004      	b.n	8014ab8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014aae:	6839      	ldr	r1, [r7, #0]
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f000 fc88 	bl	80153c6 <USBD_CtlError>
              break;
 8014ab6:	bf00      	nop
          }
          break;
 8014ab8:	e107      	b.n	8014cca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	2b02      	cmp	r3, #2
 8014ac4:	d002      	beq.n	8014acc <USBD_StdEPReq+0x124>
 8014ac6:	2b03      	cmp	r3, #3
 8014ac8:	d016      	beq.n	8014af8 <USBD_StdEPReq+0x150>
 8014aca:	e04b      	b.n	8014b64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014acc:	7bbb      	ldrb	r3, [r7, #14]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d00d      	beq.n	8014aee <USBD_StdEPReq+0x146>
 8014ad2:	7bbb      	ldrb	r3, [r7, #14]
 8014ad4:	2b80      	cmp	r3, #128	; 0x80
 8014ad6:	d00a      	beq.n	8014aee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014ad8:	7bbb      	ldrb	r3, [r7, #14]
 8014ada:	4619      	mov	r1, r3
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f001 f965 	bl	8015dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ae2:	2180      	movs	r1, #128	; 0x80
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f001 f961 	bl	8015dac <USBD_LL_StallEP>
 8014aea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014aec:	e040      	b.n	8014b70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014aee:	6839      	ldr	r1, [r7, #0]
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f000 fc68 	bl	80153c6 <USBD_CtlError>
              break;
 8014af6:	e03b      	b.n	8014b70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	885b      	ldrh	r3, [r3, #2]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d136      	bne.n	8014b6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014b00:	7bbb      	ldrb	r3, [r7, #14]
 8014b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d004      	beq.n	8014b14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014b0a:	7bbb      	ldrb	r3, [r7, #14]
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f001 f96b 	bl	8015dea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014b14:	6878      	ldr	r0, [r7, #4]
 8014b16:	f000 fd2d 	bl	8015574 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014b1a:	7bbb      	ldrb	r3, [r7, #14]
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f7ff fe1c 	bl	801475c <USBD_CoreFindEP>
 8014b24:	4603      	mov	r3, r0
 8014b26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014b28:	7b7b      	ldrb	r3, [r7, #13]
 8014b2a:	2bff      	cmp	r3, #255	; 0xff
 8014b2c:	d01f      	beq.n	8014b6e <USBD_StdEPReq+0x1c6>
 8014b2e:	7b7b      	ldrb	r3, [r7, #13]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d11c      	bne.n	8014b6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014b34:	7b7a      	ldrb	r2, [r7, #13]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014b3c:	7b7a      	ldrb	r2, [r7, #13]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	32ae      	adds	r2, #174	; 0xae
 8014b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b46:	689b      	ldr	r3, [r3, #8]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d010      	beq.n	8014b6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014b4c:	7b7a      	ldrb	r2, [r7, #13]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	32ae      	adds	r2, #174	; 0xae
 8014b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b56:	689b      	ldr	r3, [r3, #8]
 8014b58:	6839      	ldr	r1, [r7, #0]
 8014b5a:	6878      	ldr	r0, [r7, #4]
 8014b5c:	4798      	blx	r3
 8014b5e:	4603      	mov	r3, r0
 8014b60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014b62:	e004      	b.n	8014b6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014b64:	6839      	ldr	r1, [r7, #0]
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 fc2d 	bl	80153c6 <USBD_CtlError>
              break;
 8014b6c:	e000      	b.n	8014b70 <USBD_StdEPReq+0x1c8>
              break;
 8014b6e:	bf00      	nop
          }
          break;
 8014b70:	e0ab      	b.n	8014cca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	2b02      	cmp	r3, #2
 8014b7c:	d002      	beq.n	8014b84 <USBD_StdEPReq+0x1dc>
 8014b7e:	2b03      	cmp	r3, #3
 8014b80:	d032      	beq.n	8014be8 <USBD_StdEPReq+0x240>
 8014b82:	e097      	b.n	8014cb4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d007      	beq.n	8014b9a <USBD_StdEPReq+0x1f2>
 8014b8a:	7bbb      	ldrb	r3, [r7, #14]
 8014b8c:	2b80      	cmp	r3, #128	; 0x80
 8014b8e:	d004      	beq.n	8014b9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014b90:	6839      	ldr	r1, [r7, #0]
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 fc17 	bl	80153c6 <USBD_CtlError>
                break;
 8014b98:	e091      	b.n	8014cbe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	da0b      	bge.n	8014bba <USBD_StdEPReq+0x212>
 8014ba2:	7bbb      	ldrb	r3, [r7, #14]
 8014ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ba8:	4613      	mov	r3, r2
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	4413      	add	r3, r2
 8014bae:	009b      	lsls	r3, r3, #2
 8014bb0:	3310      	adds	r3, #16
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	3304      	adds	r3, #4
 8014bb8:	e00b      	b.n	8014bd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014bba:	7bbb      	ldrb	r3, [r7, #14]
 8014bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014bc0:	4613      	mov	r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	4413      	add	r3, r2
 8014bc6:	009b      	lsls	r3, r3, #2
 8014bc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	4413      	add	r3, r2
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	2202      	movs	r2, #2
 8014bde:	4619      	mov	r1, r3
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f000 fc6d 	bl	80154c0 <USBD_CtlSendData>
              break;
 8014be6:	e06a      	b.n	8014cbe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	da11      	bge.n	8014c14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014bf0:	7bbb      	ldrb	r3, [r7, #14]
 8014bf2:	f003 020f 	and.w	r2, r3, #15
 8014bf6:	6879      	ldr	r1, [r7, #4]
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	4413      	add	r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	440b      	add	r3, r1
 8014c02:	3324      	adds	r3, #36	; 0x24
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d117      	bne.n	8014c3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 fbda 	bl	80153c6 <USBD_CtlError>
                  break;
 8014c12:	e054      	b.n	8014cbe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c14:	7bbb      	ldrb	r3, [r7, #14]
 8014c16:	f003 020f 	and.w	r2, r3, #15
 8014c1a:	6879      	ldr	r1, [r7, #4]
 8014c1c:	4613      	mov	r3, r2
 8014c1e:	009b      	lsls	r3, r3, #2
 8014c20:	4413      	add	r3, r2
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	440b      	add	r3, r1
 8014c26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d104      	bne.n	8014c3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014c30:	6839      	ldr	r1, [r7, #0]
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 fbc7 	bl	80153c6 <USBD_CtlError>
                  break;
 8014c38:	e041      	b.n	8014cbe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	da0b      	bge.n	8014c5a <USBD_StdEPReq+0x2b2>
 8014c42:	7bbb      	ldrb	r3, [r7, #14]
 8014c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c48:	4613      	mov	r3, r2
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	4413      	add	r3, r2
 8014c4e:	009b      	lsls	r3, r3, #2
 8014c50:	3310      	adds	r3, #16
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	4413      	add	r3, r2
 8014c56:	3304      	adds	r3, #4
 8014c58:	e00b      	b.n	8014c72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c5a:	7bbb      	ldrb	r3, [r7, #14]
 8014c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c60:	4613      	mov	r3, r2
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	4413      	add	r3, r2
 8014c66:	009b      	lsls	r3, r3, #2
 8014c68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	4413      	add	r3, r2
 8014c70:	3304      	adds	r3, #4
 8014c72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014c74:	7bbb      	ldrb	r3, [r7, #14]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d002      	beq.n	8014c80 <USBD_StdEPReq+0x2d8>
 8014c7a:	7bbb      	ldrb	r3, [r7, #14]
 8014c7c:	2b80      	cmp	r3, #128	; 0x80
 8014c7e:	d103      	bne.n	8014c88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2200      	movs	r2, #0
 8014c84:	601a      	str	r2, [r3, #0]
 8014c86:	e00e      	b.n	8014ca6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014c88:	7bbb      	ldrb	r3, [r7, #14]
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f001 f8cb 	bl	8015e28 <USBD_LL_IsStallEP>
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d003      	beq.n	8014ca0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	601a      	str	r2, [r3, #0]
 8014c9e:	e002      	b.n	8014ca6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	2202      	movs	r2, #2
 8014caa:	4619      	mov	r1, r3
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f000 fc07 	bl	80154c0 <USBD_CtlSendData>
              break;
 8014cb2:	e004      	b.n	8014cbe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 fb85 	bl	80153c6 <USBD_CtlError>
              break;
 8014cbc:	bf00      	nop
          }
          break;
 8014cbe:	e004      	b.n	8014cca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014cc0:	6839      	ldr	r1, [r7, #0]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f000 fb7f 	bl	80153c6 <USBD_CtlError>
          break;
 8014cc8:	bf00      	nop
      }
      break;
 8014cca:	e005      	b.n	8014cd8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014ccc:	6839      	ldr	r1, [r7, #0]
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f000 fb79 	bl	80153c6 <USBD_CtlError>
      break;
 8014cd4:	e000      	b.n	8014cd8 <USBD_StdEPReq+0x330>
      break;
 8014cd6:	bf00      	nop
  }

  return ret;
 8014cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
	...

08014ce4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	885b      	ldrh	r3, [r3, #2]
 8014cfe:	0a1b      	lsrs	r3, r3, #8
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	3b01      	subs	r3, #1
 8014d04:	2b0e      	cmp	r3, #14
 8014d06:	f200 8152 	bhi.w	8014fae <USBD_GetDescriptor+0x2ca>
 8014d0a:	a201      	add	r2, pc, #4	; (adr r2, 8014d10 <USBD_GetDescriptor+0x2c>)
 8014d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d10:	08014d81 	.word	0x08014d81
 8014d14:	08014d99 	.word	0x08014d99
 8014d18:	08014dd9 	.word	0x08014dd9
 8014d1c:	08014faf 	.word	0x08014faf
 8014d20:	08014faf 	.word	0x08014faf
 8014d24:	08014f4f 	.word	0x08014f4f
 8014d28:	08014f7b 	.word	0x08014f7b
 8014d2c:	08014faf 	.word	0x08014faf
 8014d30:	08014faf 	.word	0x08014faf
 8014d34:	08014faf 	.word	0x08014faf
 8014d38:	08014faf 	.word	0x08014faf
 8014d3c:	08014faf 	.word	0x08014faf
 8014d40:	08014faf 	.word	0x08014faf
 8014d44:	08014faf 	.word	0x08014faf
 8014d48:	08014d4d 	.word	0x08014d4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d52:	69db      	ldr	r3, [r3, #28]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00b      	beq.n	8014d70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d5e:	69db      	ldr	r3, [r3, #28]
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	7c12      	ldrb	r2, [r2, #16]
 8014d64:	f107 0108 	add.w	r1, r7, #8
 8014d68:	4610      	mov	r0, r2
 8014d6a:	4798      	blx	r3
 8014d6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d6e:	e126      	b.n	8014fbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d70:	6839      	ldr	r1, [r7, #0]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fb27 	bl	80153c6 <USBD_CtlError>
        err++;
 8014d78:	7afb      	ldrb	r3, [r7, #11]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	72fb      	strb	r3, [r7, #11]
      break;
 8014d7e:	e11e      	b.n	8014fbe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	7c12      	ldrb	r2, [r2, #16]
 8014d8c:	f107 0108 	add.w	r1, r7, #8
 8014d90:	4610      	mov	r0, r2
 8014d92:	4798      	blx	r3
 8014d94:	60f8      	str	r0, [r7, #12]
      break;
 8014d96:	e112      	b.n	8014fbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	7c1b      	ldrb	r3, [r3, #16]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d10d      	bne.n	8014dbc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da8:	f107 0208 	add.w	r2, r7, #8
 8014dac:	4610      	mov	r0, r2
 8014dae:	4798      	blx	r3
 8014db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	3301      	adds	r3, #1
 8014db6:	2202      	movs	r2, #2
 8014db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014dba:	e100      	b.n	8014fbe <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dc4:	f107 0208 	add.w	r2, r7, #8
 8014dc8:	4610      	mov	r0, r2
 8014dca:	4798      	blx	r3
 8014dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	2202      	movs	r2, #2
 8014dd4:	701a      	strb	r2, [r3, #0]
      break;
 8014dd6:	e0f2      	b.n	8014fbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	885b      	ldrh	r3, [r3, #2]
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b05      	cmp	r3, #5
 8014de0:	f200 80ac 	bhi.w	8014f3c <USBD_GetDescriptor+0x258>
 8014de4:	a201      	add	r2, pc, #4	; (adr r2, 8014dec <USBD_GetDescriptor+0x108>)
 8014de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dea:	bf00      	nop
 8014dec:	08014e05 	.word	0x08014e05
 8014df0:	08014e39 	.word	0x08014e39
 8014df4:	08014e6d 	.word	0x08014e6d
 8014df8:	08014ea1 	.word	0x08014ea1
 8014dfc:	08014ed5 	.word	0x08014ed5
 8014e00:	08014f09 	.word	0x08014f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00b      	beq.n	8014e28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	7c12      	ldrb	r2, [r2, #16]
 8014e1c:	f107 0108 	add.w	r1, r7, #8
 8014e20:	4610      	mov	r0, r2
 8014e22:	4798      	blx	r3
 8014e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e26:	e091      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e28:	6839      	ldr	r1, [r7, #0]
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 facb 	bl	80153c6 <USBD_CtlError>
            err++;
 8014e30:	7afb      	ldrb	r3, [r7, #11]
 8014e32:	3301      	adds	r3, #1
 8014e34:	72fb      	strb	r3, [r7, #11]
          break;
 8014e36:	e089      	b.n	8014f4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e3e:	689b      	ldr	r3, [r3, #8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00b      	beq.n	8014e5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e4a:	689b      	ldr	r3, [r3, #8]
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	7c12      	ldrb	r2, [r2, #16]
 8014e50:	f107 0108 	add.w	r1, r7, #8
 8014e54:	4610      	mov	r0, r2
 8014e56:	4798      	blx	r3
 8014e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e5a:	e077      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e5c:	6839      	ldr	r1, [r7, #0]
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f000 fab1 	bl	80153c6 <USBD_CtlError>
            err++;
 8014e64:	7afb      	ldrb	r3, [r7, #11]
 8014e66:	3301      	adds	r3, #1
 8014e68:	72fb      	strb	r3, [r7, #11]
          break;
 8014e6a:	e06f      	b.n	8014f4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d00b      	beq.n	8014e90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e7e:	68db      	ldr	r3, [r3, #12]
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	7c12      	ldrb	r2, [r2, #16]
 8014e84:	f107 0108 	add.w	r1, r7, #8
 8014e88:	4610      	mov	r0, r2
 8014e8a:	4798      	blx	r3
 8014e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e8e:	e05d      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014e90:	6839      	ldr	r1, [r7, #0]
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 fa97 	bl	80153c6 <USBD_CtlError>
            err++;
 8014e98:	7afb      	ldrb	r3, [r7, #11]
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8014e9e:	e055      	b.n	8014f4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ea6:	691b      	ldr	r3, [r3, #16]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00b      	beq.n	8014ec4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eb2:	691b      	ldr	r3, [r3, #16]
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	7c12      	ldrb	r2, [r2, #16]
 8014eb8:	f107 0108 	add.w	r1, r7, #8
 8014ebc:	4610      	mov	r0, r2
 8014ebe:	4798      	blx	r3
 8014ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ec2:	e043      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ec4:	6839      	ldr	r1, [r7, #0]
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 fa7d 	bl	80153c6 <USBD_CtlError>
            err++;
 8014ecc:	7afb      	ldrb	r3, [r7, #11]
 8014ece:	3301      	adds	r3, #1
 8014ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8014ed2:	e03b      	b.n	8014f4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eda:	695b      	ldr	r3, [r3, #20]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d00b      	beq.n	8014ef8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ee6:	695b      	ldr	r3, [r3, #20]
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	7c12      	ldrb	r2, [r2, #16]
 8014eec:	f107 0108 	add.w	r1, r7, #8
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	4798      	blx	r3
 8014ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ef6:	e029      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ef8:	6839      	ldr	r1, [r7, #0]
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f000 fa63 	bl	80153c6 <USBD_CtlError>
            err++;
 8014f00:	7afb      	ldrb	r3, [r7, #11]
 8014f02:	3301      	adds	r3, #1
 8014f04:	72fb      	strb	r3, [r7, #11]
          break;
 8014f06:	e021      	b.n	8014f4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f0e:	699b      	ldr	r3, [r3, #24]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d00b      	beq.n	8014f2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f1a:	699b      	ldr	r3, [r3, #24]
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	7c12      	ldrb	r2, [r2, #16]
 8014f20:	f107 0108 	add.w	r1, r7, #8
 8014f24:	4610      	mov	r0, r2
 8014f26:	4798      	blx	r3
 8014f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f2a:	e00f      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f2c:	6839      	ldr	r1, [r7, #0]
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 fa49 	bl	80153c6 <USBD_CtlError>
            err++;
 8014f34:	7afb      	ldrb	r3, [r7, #11]
 8014f36:	3301      	adds	r3, #1
 8014f38:	72fb      	strb	r3, [r7, #11]
          break;
 8014f3a:	e007      	b.n	8014f4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014f3c:	6839      	ldr	r1, [r7, #0]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f000 fa41 	bl	80153c6 <USBD_CtlError>
          err++;
 8014f44:	7afb      	ldrb	r3, [r7, #11]
 8014f46:	3301      	adds	r3, #1
 8014f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014f4a:	bf00      	nop
      }
      break;
 8014f4c:	e037      	b.n	8014fbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	7c1b      	ldrb	r3, [r3, #16]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d109      	bne.n	8014f6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f5e:	f107 0208 	add.w	r2, r7, #8
 8014f62:	4610      	mov	r0, r2
 8014f64:	4798      	blx	r3
 8014f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f68:	e029      	b.n	8014fbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014f6a:	6839      	ldr	r1, [r7, #0]
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f000 fa2a 	bl	80153c6 <USBD_CtlError>
        err++;
 8014f72:	7afb      	ldrb	r3, [r7, #11]
 8014f74:	3301      	adds	r3, #1
 8014f76:	72fb      	strb	r3, [r7, #11]
      break;
 8014f78:	e021      	b.n	8014fbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	7c1b      	ldrb	r3, [r3, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d10d      	bne.n	8014f9e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f8a:	f107 0208 	add.w	r2, r7, #8
 8014f8e:	4610      	mov	r0, r2
 8014f90:	4798      	blx	r3
 8014f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	3301      	adds	r3, #1
 8014f98:	2207      	movs	r2, #7
 8014f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014f9c:	e00f      	b.n	8014fbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014f9e:	6839      	ldr	r1, [r7, #0]
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 fa10 	bl	80153c6 <USBD_CtlError>
        err++;
 8014fa6:	7afb      	ldrb	r3, [r7, #11]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	72fb      	strb	r3, [r7, #11]
      break;
 8014fac:	e007      	b.n	8014fbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014fae:	6839      	ldr	r1, [r7, #0]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f000 fa08 	bl	80153c6 <USBD_CtlError>
      err++;
 8014fb6:	7afb      	ldrb	r3, [r7, #11]
 8014fb8:	3301      	adds	r3, #1
 8014fba:	72fb      	strb	r3, [r7, #11]
      break;
 8014fbc:	bf00      	nop
  }

  if (err != 0U)
 8014fbe:	7afb      	ldrb	r3, [r7, #11]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d11e      	bne.n	8015002 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	88db      	ldrh	r3, [r3, #6]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d016      	beq.n	8014ffa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014fcc:	893b      	ldrh	r3, [r7, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d00e      	beq.n	8014ff0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	88da      	ldrh	r2, [r3, #6]
 8014fd6:	893b      	ldrh	r3, [r7, #8]
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	bf28      	it	cs
 8014fdc:	4613      	movcs	r3, r2
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014fe2:	893b      	ldrh	r3, [r7, #8]
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	68f9      	ldr	r1, [r7, #12]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 fa69 	bl	80154c0 <USBD_CtlSendData>
 8014fee:	e009      	b.n	8015004 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014ff0:	6839      	ldr	r1, [r7, #0]
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 f9e7 	bl	80153c6 <USBD_CtlError>
 8014ff8:	e004      	b.n	8015004 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f000 faba 	bl	8015574 <USBD_CtlSendStatus>
 8015000:	e000      	b.n	8015004 <USBD_GetDescriptor+0x320>
    return;
 8015002:	bf00      	nop
  }
}
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop

0801500c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	889b      	ldrh	r3, [r3, #4]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d131      	bne.n	8015082 <USBD_SetAddress+0x76>
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	88db      	ldrh	r3, [r3, #6]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d12d      	bne.n	8015082 <USBD_SetAddress+0x76>
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	885b      	ldrh	r3, [r3, #2]
 801502a:	2b7f      	cmp	r3, #127	; 0x7f
 801502c:	d829      	bhi.n	8015082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	885b      	ldrh	r3, [r3, #2]
 8015032:	b2db      	uxtb	r3, r3
 8015034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b03      	cmp	r3, #3
 8015044:	d104      	bne.n	8015050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015046:	6839      	ldr	r1, [r7, #0]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f000 f9bc 	bl	80153c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801504e:	e01d      	b.n	801508c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	7bfa      	ldrb	r2, [r7, #15]
 8015054:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015058:	7bfb      	ldrb	r3, [r7, #15]
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f000 ff0f 	bl	8015e80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 fa86 	bl	8015574 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015068:	7bfb      	ldrb	r3, [r7, #15]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d004      	beq.n	8015078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2202      	movs	r2, #2
 8015072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015076:	e009      	b.n	801508c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2201      	movs	r2, #1
 801507c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015080:	e004      	b.n	801508c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015082:	6839      	ldr	r1, [r7, #0]
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f000 f99e 	bl	80153c6 <USBD_CtlError>
  }
}
 801508a:	bf00      	nop
 801508c:	bf00      	nop
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
 801509c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801509e:	2300      	movs	r3, #0
 80150a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	885b      	ldrh	r3, [r3, #2]
 80150a6:	b2da      	uxtb	r2, r3
 80150a8:	4b4e      	ldr	r3, [pc, #312]	; (80151e4 <USBD_SetConfig+0x150>)
 80150aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80150ac:	4b4d      	ldr	r3, [pc, #308]	; (80151e4 <USBD_SetConfig+0x150>)
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d905      	bls.n	80150c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80150b4:	6839      	ldr	r1, [r7, #0]
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f000 f985 	bl	80153c6 <USBD_CtlError>
    return USBD_FAIL;
 80150bc:	2303      	movs	r3, #3
 80150be:	e08c      	b.n	80151da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150c6:	b2db      	uxtb	r3, r3
 80150c8:	2b02      	cmp	r3, #2
 80150ca:	d002      	beq.n	80150d2 <USBD_SetConfig+0x3e>
 80150cc:	2b03      	cmp	r3, #3
 80150ce:	d029      	beq.n	8015124 <USBD_SetConfig+0x90>
 80150d0:	e075      	b.n	80151be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80150d2:	4b44      	ldr	r3, [pc, #272]	; (80151e4 <USBD_SetConfig+0x150>)
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d020      	beq.n	801511c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80150da:	4b42      	ldr	r3, [pc, #264]	; (80151e4 <USBD_SetConfig+0x150>)
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	461a      	mov	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80150e4:	4b3f      	ldr	r3, [pc, #252]	; (80151e4 <USBD_SetConfig+0x150>)
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	4619      	mov	r1, r3
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f7fe fff1 	bl	80140d2 <USBD_SetClassConfig>
 80150f0:	4603      	mov	r3, r0
 80150f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80150f4:	7bfb      	ldrb	r3, [r7, #15]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d008      	beq.n	801510c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80150fa:	6839      	ldr	r1, [r7, #0]
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 f962 	bl	80153c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2202      	movs	r2, #2
 8015106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801510a:	e065      	b.n	80151d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	f000 fa31 	bl	8015574 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2203      	movs	r2, #3
 8015116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801511a:	e05d      	b.n	80151d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 fa29 	bl	8015574 <USBD_CtlSendStatus>
      break;
 8015122:	e059      	b.n	80151d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015124:	4b2f      	ldr	r3, [pc, #188]	; (80151e4 <USBD_SetConfig+0x150>)
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d112      	bne.n	8015152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2202      	movs	r2, #2
 8015130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015134:	4b2b      	ldr	r3, [pc, #172]	; (80151e4 <USBD_SetConfig+0x150>)
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	461a      	mov	r2, r3
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801513e:	4b29      	ldr	r3, [pc, #164]	; (80151e4 <USBD_SetConfig+0x150>)
 8015140:	781b      	ldrb	r3, [r3, #0]
 8015142:	4619      	mov	r1, r3
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7fe ffe0 	bl	801410a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f000 fa12 	bl	8015574 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015150:	e042      	b.n	80151d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015152:	4b24      	ldr	r3, [pc, #144]	; (80151e4 <USBD_SetConfig+0x150>)
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	429a      	cmp	r2, r3
 801515e:	d02a      	beq.n	80151b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	b2db      	uxtb	r3, r3
 8015166:	4619      	mov	r1, r3
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f7fe ffce 	bl	801410a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801516e:	4b1d      	ldr	r3, [pc, #116]	; (80151e4 <USBD_SetConfig+0x150>)
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	461a      	mov	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015178:	4b1a      	ldr	r3, [pc, #104]	; (80151e4 <USBD_SetConfig+0x150>)
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7fe ffa7 	bl	80140d2 <USBD_SetClassConfig>
 8015184:	4603      	mov	r3, r0
 8015186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015188:	7bfb      	ldrb	r3, [r7, #15]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d00f      	beq.n	80151ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801518e:	6839      	ldr	r1, [r7, #0]
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f000 f918 	bl	80153c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	685b      	ldr	r3, [r3, #4]
 801519a:	b2db      	uxtb	r3, r3
 801519c:	4619      	mov	r1, r3
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f7fe ffb3 	bl	801410a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2202      	movs	r2, #2
 80151a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80151ac:	e014      	b.n	80151d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 f9e0 	bl	8015574 <USBD_CtlSendStatus>
      break;
 80151b4:	e010      	b.n	80151d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f000 f9dc 	bl	8015574 <USBD_CtlSendStatus>
      break;
 80151bc:	e00c      	b.n	80151d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80151be:	6839      	ldr	r1, [r7, #0]
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f000 f900 	bl	80153c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151c6:	4b07      	ldr	r3, [pc, #28]	; (80151e4 <USBD_SetConfig+0x150>)
 80151c8:	781b      	ldrb	r3, [r3, #0]
 80151ca:	4619      	mov	r1, r3
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7fe ff9c 	bl	801410a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80151d2:	2303      	movs	r3, #3
 80151d4:	73fb      	strb	r3, [r7, #15]
      break;
 80151d6:	bf00      	nop
  }

  return ret;
 80151d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80151da:	4618      	mov	r0, r3
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	24006d1c 	.word	0x24006d1c

080151e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	88db      	ldrh	r3, [r3, #6]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d004      	beq.n	8015204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80151fa:	6839      	ldr	r1, [r7, #0]
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f000 f8e2 	bl	80153c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015202:	e023      	b.n	801524c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801520a:	b2db      	uxtb	r3, r3
 801520c:	2b02      	cmp	r3, #2
 801520e:	dc02      	bgt.n	8015216 <USBD_GetConfig+0x2e>
 8015210:	2b00      	cmp	r3, #0
 8015212:	dc03      	bgt.n	801521c <USBD_GetConfig+0x34>
 8015214:	e015      	b.n	8015242 <USBD_GetConfig+0x5a>
 8015216:	2b03      	cmp	r3, #3
 8015218:	d00b      	beq.n	8015232 <USBD_GetConfig+0x4a>
 801521a:	e012      	b.n	8015242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2200      	movs	r2, #0
 8015220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	3308      	adds	r3, #8
 8015226:	2201      	movs	r2, #1
 8015228:	4619      	mov	r1, r3
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 f948 	bl	80154c0 <USBD_CtlSendData>
        break;
 8015230:	e00c      	b.n	801524c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	3304      	adds	r3, #4
 8015236:	2201      	movs	r2, #1
 8015238:	4619      	mov	r1, r3
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f000 f940 	bl	80154c0 <USBD_CtlSendData>
        break;
 8015240:	e004      	b.n	801524c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015242:	6839      	ldr	r1, [r7, #0]
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f000 f8be 	bl	80153c6 <USBD_CtlError>
        break;
 801524a:	bf00      	nop
}
 801524c:	bf00      	nop
 801524e:	3708      	adds	r7, #8
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015264:	b2db      	uxtb	r3, r3
 8015266:	3b01      	subs	r3, #1
 8015268:	2b02      	cmp	r3, #2
 801526a:	d81e      	bhi.n	80152aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	88db      	ldrh	r3, [r3, #6]
 8015270:	2b02      	cmp	r3, #2
 8015272:	d004      	beq.n	801527e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015274:	6839      	ldr	r1, [r7, #0]
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f000 f8a5 	bl	80153c6 <USBD_CtlError>
        break;
 801527c:	e01a      	b.n	80152b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2201      	movs	r2, #1
 8015282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801528a:	2b00      	cmp	r3, #0
 801528c:	d005      	beq.n	801529a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	68db      	ldr	r3, [r3, #12]
 8015292:	f043 0202 	orr.w	r2, r3, #2
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	330c      	adds	r3, #12
 801529e:	2202      	movs	r2, #2
 80152a0:	4619      	mov	r1, r3
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 f90c 	bl	80154c0 <USBD_CtlSendData>
      break;
 80152a8:	e004      	b.n	80152b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f000 f88a 	bl	80153c6 <USBD_CtlError>
      break;
 80152b2:	bf00      	nop
  }
}
 80152b4:	bf00      	nop
 80152b6:	3708      	adds	r7, #8
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	885b      	ldrh	r3, [r3, #2]
 80152ca:	2b01      	cmp	r3, #1
 80152cc:	d107      	bne.n	80152de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2201      	movs	r2, #1
 80152d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f94c 	bl	8015574 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80152dc:	e013      	b.n	8015306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	885b      	ldrh	r3, [r3, #2]
 80152e2:	2b02      	cmp	r3, #2
 80152e4:	d10b      	bne.n	80152fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	889b      	ldrh	r3, [r3, #4]
 80152ea:	0a1b      	lsrs	r3, r3, #8
 80152ec:	b29b      	uxth	r3, r3
 80152ee:	b2da      	uxtb	r2, r3
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f000 f93c 	bl	8015574 <USBD_CtlSendStatus>
}
 80152fc:	e003      	b.n	8015306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80152fe:	6839      	ldr	r1, [r7, #0]
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f000 f860 	bl	80153c6 <USBD_CtlError>
}
 8015306:	bf00      	nop
 8015308:	3708      	adds	r7, #8
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b082      	sub	sp, #8
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
 8015316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801531e:	b2db      	uxtb	r3, r3
 8015320:	3b01      	subs	r3, #1
 8015322:	2b02      	cmp	r3, #2
 8015324:	d80b      	bhi.n	801533e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	885b      	ldrh	r3, [r3, #2]
 801532a:	2b01      	cmp	r3, #1
 801532c:	d10c      	bne.n	8015348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2200      	movs	r2, #0
 8015332:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f000 f91c 	bl	8015574 <USBD_CtlSendStatus>
      }
      break;
 801533c:	e004      	b.n	8015348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801533e:	6839      	ldr	r1, [r7, #0]
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 f840 	bl	80153c6 <USBD_CtlError>
      break;
 8015346:	e000      	b.n	801534a <USBD_ClrFeature+0x3c>
      break;
 8015348:	bf00      	nop
  }
}
 801534a:	bf00      	nop
 801534c:	3708      	adds	r7, #8
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015352:	b580      	push	{r7, lr}
 8015354:	b084      	sub	sp, #16
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	781a      	ldrb	r2, [r3, #0]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	3301      	adds	r3, #1
 801536c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	781a      	ldrb	r2, [r3, #0]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	3301      	adds	r3, #1
 801537a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801537c:	68f8      	ldr	r0, [r7, #12]
 801537e:	f7ff fa17 	bl	80147b0 <SWAPBYTE>
 8015382:	4603      	mov	r3, r0
 8015384:	461a      	mov	r2, r3
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	3301      	adds	r3, #1
 801538e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	3301      	adds	r3, #1
 8015394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f7ff fa0a 	bl	80147b0 <SWAPBYTE>
 801539c:	4603      	mov	r3, r0
 801539e:	461a      	mov	r2, r3
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	3301      	adds	r3, #1
 80153a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	3301      	adds	r3, #1
 80153ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80153b0:	68f8      	ldr	r0, [r7, #12]
 80153b2:	f7ff f9fd 	bl	80147b0 <SWAPBYTE>
 80153b6:	4603      	mov	r3, r0
 80153b8:	461a      	mov	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	80da      	strh	r2, [r3, #6]
}
 80153be:	bf00      	nop
 80153c0:	3710      	adds	r7, #16
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80153d0:	2180      	movs	r1, #128	; 0x80
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f000 fcea 	bl	8015dac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80153d8:	2100      	movs	r1, #0
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 fce6 	bl	8015dac <USBD_LL_StallEP>
}
 80153e0:	bf00      	nop
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b086      	sub	sp, #24
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80153f4:	2300      	movs	r3, #0
 80153f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d042      	beq.n	8015484 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8015402:	6938      	ldr	r0, [r7, #16]
 8015404:	f000 f842 	bl	801548c <USBD_GetLen>
 8015408:	4603      	mov	r3, r0
 801540a:	3301      	adds	r3, #1
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015412:	d808      	bhi.n	8015426 <USBD_GetString+0x3e>
 8015414:	6938      	ldr	r0, [r7, #16]
 8015416:	f000 f839 	bl	801548c <USBD_GetLen>
 801541a:	4603      	mov	r3, r0
 801541c:	3301      	adds	r3, #1
 801541e:	b29b      	uxth	r3, r3
 8015420:	005b      	lsls	r3, r3, #1
 8015422:	b29a      	uxth	r2, r3
 8015424:	e001      	b.n	801542a <USBD_GetString+0x42>
 8015426:	f44f 7200 	mov.w	r2, #512	; 0x200
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	68ba      	ldr	r2, [r7, #8]
 8015432:	4413      	add	r3, r2
 8015434:	687a      	ldr	r2, [r7, #4]
 8015436:	7812      	ldrb	r2, [r2, #0]
 8015438:	701a      	strb	r2, [r3, #0]
  idx++;
 801543a:	7dfb      	ldrb	r3, [r7, #23]
 801543c:	3301      	adds	r3, #1
 801543e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015440:	7dfb      	ldrb	r3, [r7, #23]
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	4413      	add	r3, r2
 8015446:	2203      	movs	r2, #3
 8015448:	701a      	strb	r2, [r3, #0]
  idx++;
 801544a:	7dfb      	ldrb	r3, [r7, #23]
 801544c:	3301      	adds	r3, #1
 801544e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015450:	e013      	b.n	801547a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8015452:	7dfb      	ldrb	r3, [r7, #23]
 8015454:	68ba      	ldr	r2, [r7, #8]
 8015456:	4413      	add	r3, r2
 8015458:	693a      	ldr	r2, [r7, #16]
 801545a:	7812      	ldrb	r2, [r2, #0]
 801545c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	3301      	adds	r3, #1
 8015462:	613b      	str	r3, [r7, #16]
    idx++;
 8015464:	7dfb      	ldrb	r3, [r7, #23]
 8015466:	3301      	adds	r3, #1
 8015468:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801546a:	7dfb      	ldrb	r3, [r7, #23]
 801546c:	68ba      	ldr	r2, [r7, #8]
 801546e:	4413      	add	r3, r2
 8015470:	2200      	movs	r2, #0
 8015472:	701a      	strb	r2, [r3, #0]
    idx++;
 8015474:	7dfb      	ldrb	r3, [r7, #23]
 8015476:	3301      	adds	r3, #1
 8015478:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801547a:	693b      	ldr	r3, [r7, #16]
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d1e7      	bne.n	8015452 <USBD_GetString+0x6a>
 8015482:	e000      	b.n	8015486 <USBD_GetString+0x9e>
    return;
 8015484:	bf00      	nop
  }
}
 8015486:	3718      	adds	r7, #24
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801548c:	b480      	push	{r7}
 801548e:	b085      	sub	sp, #20
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015494:	2300      	movs	r3, #0
 8015496:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801549c:	e005      	b.n	80154aa <USBD_GetLen+0x1e>
  {
    len++;
 801549e:	7bfb      	ldrb	r3, [r7, #15]
 80154a0:	3301      	adds	r3, #1
 80154a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	3301      	adds	r3, #1
 80154a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d1f5      	bne.n	801549e <USBD_GetLen+0x12>
  }

  return len;
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3714      	adds	r7, #20
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr

080154c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	2202      	movs	r2, #2
 80154d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	2100      	movs	r1, #0
 80154e6:	68f8      	ldr	r0, [r7, #12]
 80154e8:	f000 fce9 	bl	8015ebe <USBD_LL_Transmit>

  return USBD_OK;
 80154ec:	2300      	movs	r3, #0
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3710      	adds	r7, #16
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b084      	sub	sp, #16
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	60f8      	str	r0, [r7, #12]
 80154fe:	60b9      	str	r1, [r7, #8]
 8015500:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	2100      	movs	r1, #0
 8015508:	68f8      	ldr	r0, [r7, #12]
 801550a:	f000 fcd8 	bl	8015ebe <USBD_LL_Transmit>

  return USBD_OK;
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3710      	adds	r7, #16
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b084      	sub	sp, #16
 801551c:	af00      	add	r7, sp, #0
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	2203      	movs	r2, #3
 8015528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	68ba      	ldr	r2, [r7, #8]
 8015540:	2100      	movs	r1, #0
 8015542:	68f8      	ldr	r0, [r7, #12]
 8015544:	f000 fcdc 	bl	8015f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015548:	2300      	movs	r3, #0
}
 801554a:	4618      	mov	r0, r3
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}

08015552 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015552:	b580      	push	{r7, lr}
 8015554:	b084      	sub	sp, #16
 8015556:	af00      	add	r7, sp, #0
 8015558:	60f8      	str	r0, [r7, #12]
 801555a:	60b9      	str	r1, [r7, #8]
 801555c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	68ba      	ldr	r2, [r7, #8]
 8015562:	2100      	movs	r1, #0
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f000 fccb 	bl	8015f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801556a:	2300      	movs	r3, #0
}
 801556c:	4618      	mov	r0, r3
 801556e:	3710      	adds	r7, #16
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2204      	movs	r2, #4
 8015580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015584:	2300      	movs	r3, #0
 8015586:	2200      	movs	r2, #0
 8015588:	2100      	movs	r1, #0
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 fc97 	bl	8015ebe <USBD_LL_Transmit>

  return USBD_OK;
 8015590:	2300      	movs	r3, #0
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b082      	sub	sp, #8
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2205      	movs	r2, #5
 80155a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155aa:	2300      	movs	r3, #0
 80155ac:	2200      	movs	r2, #0
 80155ae:	2100      	movs	r1, #0
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 fca5 	bl	8015f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80155c4:	2200      	movs	r2, #0
 80155c6:	4913      	ldr	r1, [pc, #76]	; (8015614 <MX_USB_DEVICE_Init+0x54>)
 80155c8:	4813      	ldr	r0, [pc, #76]	; (8015618 <MX_USB_DEVICE_Init+0x58>)
 80155ca:	f7fe fd05 	bl	8013fd8 <USBD_Init>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d001      	beq.n	80155d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80155d4:	f7eb fefc 	bl	80013d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80155d8:	4910      	ldr	r1, [pc, #64]	; (801561c <MX_USB_DEVICE_Init+0x5c>)
 80155da:	480f      	ldr	r0, [pc, #60]	; (8015618 <MX_USB_DEVICE_Init+0x58>)
 80155dc:	f7fe fd2c 	bl	8014038 <USBD_RegisterClass>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d001      	beq.n	80155ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80155e6:	f7eb fef3 	bl	80013d0 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80155ea:	490d      	ldr	r1, [pc, #52]	; (8015620 <MX_USB_DEVICE_Init+0x60>)
 80155ec:	480a      	ldr	r0, [pc, #40]	; (8015618 <MX_USB_DEVICE_Init+0x58>)
 80155ee:	f7fe fca5 	bl	8013f3c <USBD_AUDIO_RegisterInterface>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d001      	beq.n	80155fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80155f8:	f7eb feea 	bl	80013d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80155fc:	4806      	ldr	r0, [pc, #24]	; (8015618 <MX_USB_DEVICE_Init+0x58>)
 80155fe:	f7fe fd51 	bl	80140a4 <USBD_Start>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d001      	beq.n	801560c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015608:	f7eb fee2 	bl	80013d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801560c:	f7f5 fdc4 	bl	800b198 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015610:	bf00      	nop
 8015612:	bd80      	pop	{r7, pc}
 8015614:	240001ac 	.word	0x240001ac
 8015618:	24006d20 	.word	0x24006d20
 801561c:	240000d4 	.word	0x240000d4
 8015620:	24000190 	.word	0x24000190

08015624 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8015624:	b480      	push	{r7}
 8015626:	b085      	sub	sp, #20
 8015628:	af00      	add	r7, sp, #0
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
	UNUSED(AudioFreq);
	UNUSED(Volume);
	UNUSED(options);
	return (USBD_OK);
 8015630:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8015632:	4618      	mov	r0, r3
 8015634:	3714      	adds	r7, #20
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 801563e:	b480      	push	{r7}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
	UNUSED(options);
	return (USBD_OK);
 8015646:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8015648:	4618      	mov	r0, r3
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr

08015654 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8015654:	b480      	push	{r7}
 8015656:	b085      	sub	sp, #20
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	4613      	mov	r3, r2
 8015660:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	switch(cmd)
 8015662:	79fb      	ldrb	r3, [r7, #7]
 8015664:	2b01      	cmp	r3, #1
 8015666:	d001      	beq.n	801566c <AUDIO_AudioCmd_FS+0x18>
 8015668:	2b02      	cmp	r3, #2
	{
	case AUDIO_CMD_START:
		break;

	case AUDIO_CMD_PLAY:
		break;
 801566a:	e000      	b.n	801566e <AUDIO_AudioCmd_FS+0x1a>
		break;
 801566c:	bf00      	nop
	}
	UNUSED(pbuf);
	UNUSED(size);
	UNUSED(cmd);
	return (USBD_OK);
 801566e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015670:	4618      	mov	r0, r3
 8015672:	3714      	adds	r7, #20
 8015674:	46bd      	mov	sp, r7
 8015676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567a:	4770      	bx	lr

0801567c <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 801567c:	b480      	push	{r7}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	4603      	mov	r3, r0
 8015684:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
	UNUSED(vol);
	return (USBD_OK);
 8015686:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015688:	4618      	mov	r0, r3
 801568a:	370c      	adds	r7, #12
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8015694:	b480      	push	{r7}
 8015696:	b083      	sub	sp, #12
 8015698:	af00      	add	r7, sp, #0
 801569a:	4603      	mov	r3, r0
 801569c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	UNUSED(cmd);
	return (USBD_OK);
 801569e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	4613      	mov	r3, r2
 80156b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	//UNUSED(pbuf);
	//UNUSED(size);
	//UNUSED(cmd);
	LOG_TIME_START(LOG_TIME_USB_WR);
 80156ba:	2002      	movs	r0, #2
 80156bc:	f7ee fe4c 	bl	8004358 <logger_log_timer_start>
	if (usb_device)
 80156c0:	4b0a      	ldr	r3, [pc, #40]	; (80156ec <AUDIO_PeriodicTC_FS+0x40>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d008      	beq.n	80156da <AUDIO_PeriodicTC_FS+0x2e>
		usb_device->io_ops->write(usb_device, pbuf, size);
 80156c8:	4b08      	ldr	r3, [pc, #32]	; (80156ec <AUDIO_PeriodicTC_FS+0x40>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	4a06      	ldr	r2, [pc, #24]	; (80156ec <AUDIO_PeriodicTC_FS+0x40>)
 80156d2:	6810      	ldr	r0, [r2, #0]
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	68f9      	ldr	r1, [r7, #12]
 80156d8:	4798      	blx	r3
	LOG_TIME_STOP(LOG_TIME_USB_WR);
 80156da:	2002      	movs	r0, #2
 80156dc:	f7ee fe68 	bl	80043b0 <logger_log_timer_stop>
	return (USBD_OK);
 80156e0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	24006430 	.word	0x24006430

080156f0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 80156f0:	b480      	push	{r7}
 80156f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
	return (USBD_OK);
 80156f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	46bd      	mov	sp, r7
 80156fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fe:	4770      	bx	lr

08015700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015700:	b480      	push	{r7}
 8015702:	b083      	sub	sp, #12
 8015704:	af00      	add	r7, sp, #0
 8015706:	4603      	mov	r3, r0
 8015708:	6039      	str	r1, [r7, #0]
 801570a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	2212      	movs	r2, #18
 8015710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015712:	4b03      	ldr	r3, [pc, #12]	; (8015720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015714:	4618      	mov	r0, r3
 8015716:	370c      	adds	r7, #12
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr
 8015720:	240001cc 	.word	0x240001cc

08015724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	6039      	str	r1, [r7, #0]
 801572e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	2204      	movs	r2, #4
 8015734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015736:	4b03      	ldr	r3, [pc, #12]	; (8015744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015738:	4618      	mov	r0, r3
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr
 8015744:	240001e0 	.word	0x240001e0

08015748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	4603      	mov	r3, r0
 8015750:	6039      	str	r1, [r7, #0]
 8015752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015754:	79fb      	ldrb	r3, [r7, #7]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d105      	bne.n	8015766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801575a:	683a      	ldr	r2, [r7, #0]
 801575c:	4907      	ldr	r1, [pc, #28]	; (801577c <USBD_FS_ProductStrDescriptor+0x34>)
 801575e:	4808      	ldr	r0, [pc, #32]	; (8015780 <USBD_FS_ProductStrDescriptor+0x38>)
 8015760:	f7ff fe42 	bl	80153e8 <USBD_GetString>
 8015764:	e004      	b.n	8015770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	4904      	ldr	r1, [pc, #16]	; (801577c <USBD_FS_ProductStrDescriptor+0x34>)
 801576a:	4805      	ldr	r0, [pc, #20]	; (8015780 <USBD_FS_ProductStrDescriptor+0x38>)
 801576c:	f7ff fe3c 	bl	80153e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015770:	4b02      	ldr	r3, [pc, #8]	; (801577c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015772:	4618      	mov	r0, r3
 8015774:	3708      	adds	r7, #8
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	24006ffc 	.word	0x24006ffc
 8015780:	0801ad08 	.word	0x0801ad08

08015784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	4603      	mov	r3, r0
 801578c:	6039      	str	r1, [r7, #0]
 801578e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015790:	683a      	ldr	r2, [r7, #0]
 8015792:	4904      	ldr	r1, [pc, #16]	; (80157a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015794:	4804      	ldr	r0, [pc, #16]	; (80157a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015796:	f7ff fe27 	bl	80153e8 <USBD_GetString>
  return USBD_StrDesc;
 801579a:	4b02      	ldr	r3, [pc, #8]	; (80157a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801579c:	4618      	mov	r0, r3
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	24006ffc 	.word	0x24006ffc
 80157a8:	0801ad1c 	.word	0x0801ad1c

080157ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	4603      	mov	r3, r0
 80157b4:	6039      	str	r1, [r7, #0]
 80157b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	221a      	movs	r2, #26
 80157bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80157be:	f000 f843 	bl	8015848 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80157c2:	4b02      	ldr	r3, [pc, #8]	; (80157cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3708      	adds	r7, #8
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	240001e4 	.word	0x240001e4

080157d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	4603      	mov	r3, r0
 80157d8:	6039      	str	r1, [r7, #0]
 80157da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80157dc:	79fb      	ldrb	r3, [r7, #7]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d105      	bne.n	80157ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	4907      	ldr	r1, [pc, #28]	; (8015804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157e6:	4808      	ldr	r0, [pc, #32]	; (8015808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80157e8:	f7ff fdfe 	bl	80153e8 <USBD_GetString>
 80157ec:	e004      	b.n	80157f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80157ee:	683a      	ldr	r2, [r7, #0]
 80157f0:	4904      	ldr	r1, [pc, #16]	; (8015804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80157f2:	4805      	ldr	r0, [pc, #20]	; (8015808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80157f4:	f7ff fdf8 	bl	80153e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157f8:	4b02      	ldr	r3, [pc, #8]	; (8015804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
 8015802:	bf00      	nop
 8015804:	24006ffc 	.word	0x24006ffc
 8015808:	0801ad30 	.word	0x0801ad30

0801580c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	4603      	mov	r3, r0
 8015814:	6039      	str	r1, [r7, #0]
 8015816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015818:	79fb      	ldrb	r3, [r7, #7]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d105      	bne.n	801582a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	4907      	ldr	r1, [pc, #28]	; (8015840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015822:	4808      	ldr	r0, [pc, #32]	; (8015844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015824:	f7ff fde0 	bl	80153e8 <USBD_GetString>
 8015828:	e004      	b.n	8015834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801582a:	683a      	ldr	r2, [r7, #0]
 801582c:	4904      	ldr	r1, [pc, #16]	; (8015840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801582e:	4805      	ldr	r0, [pc, #20]	; (8015844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015830:	f7ff fdda 	bl	80153e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015834:	4b02      	ldr	r3, [pc, #8]	; (8015840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015836:	4618      	mov	r0, r3
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	24006ffc 	.word	0x24006ffc
 8015844:	0801ad40 	.word	0x0801ad40

08015848 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801584e:	4b0f      	ldr	r3, [pc, #60]	; (801588c <Get_SerialNum+0x44>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015854:	4b0e      	ldr	r3, [pc, #56]	; (8015890 <Get_SerialNum+0x48>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801585a:	4b0e      	ldr	r3, [pc, #56]	; (8015894 <Get_SerialNum+0x4c>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015860:	68fa      	ldr	r2, [r7, #12]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4413      	add	r3, r2
 8015866:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d009      	beq.n	8015882 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801586e:	2208      	movs	r2, #8
 8015870:	4909      	ldr	r1, [pc, #36]	; (8015898 <Get_SerialNum+0x50>)
 8015872:	68f8      	ldr	r0, [r7, #12]
 8015874:	f000 f814 	bl	80158a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015878:	2204      	movs	r2, #4
 801587a:	4908      	ldr	r1, [pc, #32]	; (801589c <Get_SerialNum+0x54>)
 801587c:	68b8      	ldr	r0, [r7, #8]
 801587e:	f000 f80f 	bl	80158a0 <IntToUnicode>
  }
}
 8015882:	bf00      	nop
 8015884:	3710      	adds	r7, #16
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	1ff1e800 	.word	0x1ff1e800
 8015890:	1ff1e804 	.word	0x1ff1e804
 8015894:	1ff1e808 	.word	0x1ff1e808
 8015898:	240001e6 	.word	0x240001e6
 801589c:	240001f6 	.word	0x240001f6

080158a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b087      	sub	sp, #28
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	4613      	mov	r3, r2
 80158ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80158b2:	2300      	movs	r3, #0
 80158b4:	75fb      	strb	r3, [r7, #23]
 80158b6:	e027      	b.n	8015908 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	0f1b      	lsrs	r3, r3, #28
 80158bc:	2b09      	cmp	r3, #9
 80158be:	d80b      	bhi.n	80158d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	0f1b      	lsrs	r3, r3, #28
 80158c4:	b2da      	uxtb	r2, r3
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
 80158c8:	005b      	lsls	r3, r3, #1
 80158ca:	4619      	mov	r1, r3
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	440b      	add	r3, r1
 80158d0:	3230      	adds	r2, #48	; 0x30
 80158d2:	b2d2      	uxtb	r2, r2
 80158d4:	701a      	strb	r2, [r3, #0]
 80158d6:	e00a      	b.n	80158ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	0f1b      	lsrs	r3, r3, #28
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	7dfb      	ldrb	r3, [r7, #23]
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4619      	mov	r1, r3
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	440b      	add	r3, r1
 80158e8:	3237      	adds	r2, #55	; 0x37
 80158ea:	b2d2      	uxtb	r2, r2
 80158ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	011b      	lsls	r3, r3, #4
 80158f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80158f4:	7dfb      	ldrb	r3, [r7, #23]
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	3301      	adds	r3, #1
 80158fa:	68ba      	ldr	r2, [r7, #8]
 80158fc:	4413      	add	r3, r2
 80158fe:	2200      	movs	r2, #0
 8015900:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015902:	7dfb      	ldrb	r3, [r7, #23]
 8015904:	3301      	adds	r3, #1
 8015906:	75fb      	strb	r3, [r7, #23]
 8015908:	7dfa      	ldrb	r2, [r7, #23]
 801590a:	79fb      	ldrb	r3, [r7, #7]
 801590c:	429a      	cmp	r2, r3
 801590e:	d3d3      	bcc.n	80158b8 <IntToUnicode+0x18>
  }
}
 8015910:	bf00      	nop
 8015912:	bf00      	nop
 8015914:	371c      	adds	r7, #28
 8015916:	46bd      	mov	sp, r7
 8015918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591c:	4770      	bx	lr
	...

08015920 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b0ba      	sub	sp, #232	; 0xe8
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015928:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801592c:	2200      	movs	r2, #0
 801592e:	601a      	str	r2, [r3, #0]
 8015930:	605a      	str	r2, [r3, #4]
 8015932:	609a      	str	r2, [r3, #8]
 8015934:	60da      	str	r2, [r3, #12]
 8015936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015938:	f107 0310 	add.w	r3, r7, #16
 801593c:	22c0      	movs	r2, #192	; 0xc0
 801593e:	2100      	movs	r1, #0
 8015940:	4618      	mov	r0, r3
 8015942:	f002 f824 	bl	801798e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	4a44      	ldr	r2, [pc, #272]	; (8015a5c <HAL_PCD_MspInit+0x13c>)
 801594c:	4293      	cmp	r3, r2
 801594e:	f040 8081 	bne.w	8015a54 <HAL_PCD_MspInit+0x134>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015952:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015956:	f04f 0300 	mov.w	r3, #0
 801595a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801595e:	2301      	movs	r3, #1
 8015960:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8015962:	2318      	movs	r3, #24
 8015964:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8015966:	2302      	movs	r3, #2
 8015968:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 801596a:	2304      	movs	r3, #4
 801596c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801596e:	2302      	movs	r3, #2
 8015970:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8015972:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015976:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801597c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015984:	f107 0310 	add.w	r3, r7, #16
 8015988:	4618      	mov	r0, r3
 801598a:	f7f6 fbfb 	bl	800c184 <HAL_RCCEx_PeriphCLKConfig>
 801598e:	4603      	mov	r3, r0
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8015994:	f7eb fd1c 	bl	80013d0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015998:	f7f5 fbfe 	bl	800b198 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801599c:	4b30      	ldr	r3, [pc, #192]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 801599e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80159a2:	4a2f      	ldr	r2, [pc, #188]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 80159a4:	f043 0301 	orr.w	r3, r3, #1
 80159a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80159ac:	4b2c      	ldr	r3, [pc, #176]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 80159ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80159b2:	f003 0301 	and.w	r3, r3, #1
 80159b6:	60fb      	str	r3, [r7, #12]
 80159b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80159ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80159be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159c2:	2302      	movs	r3, #2
 80159c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159c8:	2300      	movs	r3, #0
 80159ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159ce:	2300      	movs	r3, #0
 80159d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80159d4:	230a      	movs	r3, #10
 80159d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80159da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80159de:	4619      	mov	r1, r3
 80159e0:	4820      	ldr	r0, [pc, #128]	; (8015a64 <HAL_PCD_MspInit+0x144>)
 80159e2:	f7f2 fc37 	bl	8008254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80159e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80159ee:	2300      	movs	r3, #0
 80159f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159f4:	2300      	movs	r3, #0
 80159f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80159fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80159fe:	4619      	mov	r1, r3
 8015a00:	4818      	ldr	r0, [pc, #96]	; (8015a64 <HAL_PCD_MspInit+0x144>)
 8015a02:	f7f2 fc27 	bl	8008254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015a06:	4b16      	ldr	r3, [pc, #88]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 8015a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015a0c:	4a14      	ldr	r2, [pc, #80]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 8015a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015a12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015a16:	4b12      	ldr	r3, [pc, #72]	; (8015a60 <HAL_PCD_MspInit+0x140>)
 8015a18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015a20:	60bb      	str	r3, [r7, #8]
 8015a22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8015a24:	2200      	movs	r2, #0
 8015a26:	2100      	movs	r1, #0
 8015a28:	2062      	movs	r0, #98	; 0x62
 8015a2a:	f7ee ff8c 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8015a2e:	2062      	movs	r0, #98	; 0x62
 8015a30:	f7ee ffa3 	bl	800497a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 8015a34:	2200      	movs	r2, #0
 8015a36:	2100      	movs	r1, #0
 8015a38:	2063      	movs	r0, #99	; 0x63
 8015a3a:	f7ee ff84 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 8015a3e:	2063      	movs	r0, #99	; 0x63
 8015a40:	f7ee ff9b 	bl	800497a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8015a44:	2200      	movs	r2, #0
 8015a46:	2101      	movs	r1, #1
 8015a48:	2065      	movs	r0, #101	; 0x65
 8015a4a:	f7ee ff7c 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015a4e:	2065      	movs	r0, #101	; 0x65
 8015a50:	f7ee ff93 	bl	800497a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015a54:	bf00      	nop
 8015a56:	37e8      	adds	r7, #232	; 0xe8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	40080000 	.word	0x40080000
 8015a60:	58024400 	.word	0x58024400
 8015a64:	58020000 	.word	0x58020000

08015a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	4610      	mov	r0, r2
 8015a80:	f7fe fb5d 	bl	801413e <USBD_LL_SetupStage>
}
 8015a84:	bf00      	nop
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	460b      	mov	r3, r1
 8015a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8015a9e:	78fa      	ldrb	r2, [r7, #3]
 8015aa0:	6879      	ldr	r1, [r7, #4]
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	00db      	lsls	r3, r3, #3
 8015aa6:	4413      	add	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	440b      	add	r3, r1
 8015aac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	78fb      	ldrb	r3, [r7, #3]
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	f7fe fb97 	bl	80141e8 <USBD_LL_DataOutStage>
}
 8015aba:	bf00      	nop
 8015abc:	3708      	adds	r7, #8
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}

08015ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ac2:	b580      	push	{r7, lr}
 8015ac4:	b082      	sub	sp, #8
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	6078      	str	r0, [r7, #4]
 8015aca:	460b      	mov	r3, r1
 8015acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8015ad4:	78fa      	ldrb	r2, [r7, #3]
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	4613      	mov	r3, r2
 8015ada:	00db      	lsls	r3, r3, #3
 8015adc:	4413      	add	r3, r2
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	440b      	add	r3, r1
 8015ae2:	3320      	adds	r3, #32
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	78fb      	ldrb	r3, [r7, #3]
 8015ae8:	4619      	mov	r1, r3
 8015aea:	f7fe fc30 	bl	801434e <USBD_LL_DataInStage>
}
 8015aee:	bf00      	nop
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}

08015af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015af6:	b580      	push	{r7, lr}
 8015af8:	b082      	sub	sp, #8
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7fe fd6a 	bl	80145de <USBD_LL_SOF>
}
 8015b0a:	bf00      	nop
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b12:	b580      	push	{r7, lr}
 8015b14:	b084      	sub	sp, #16
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	79db      	ldrb	r3, [r3, #7]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d102      	bne.n	8015b2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015b26:	2300      	movs	r3, #0
 8015b28:	73fb      	strb	r3, [r7, #15]
 8015b2a:	e008      	b.n	8015b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	79db      	ldrb	r3, [r3, #7]
 8015b30:	2b02      	cmp	r3, #2
 8015b32:	d102      	bne.n	8015b3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015b34:	2301      	movs	r3, #1
 8015b36:	73fb      	strb	r3, [r7, #15]
 8015b38:	e001      	b.n	8015b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015b3a:	f7eb fc49 	bl	80013d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b44:	7bfa      	ldrb	r2, [r7, #15]
 8015b46:	4611      	mov	r1, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fe fd04 	bl	8014556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fe fcac 	bl	80144b2 <USBD_LL_Reset>
}
 8015b5a:	bf00      	nop
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
	...

08015b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fe fcff 	bl	8014576 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	687a      	ldr	r2, [r7, #4]
 8015b84:	6812      	ldr	r2, [r2, #0]
 8015b86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015b8a:	f043 0301 	orr.w	r3, r3, #1
 8015b8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	7adb      	ldrb	r3, [r3, #11]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d005      	beq.n	8015ba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b98:	4b04      	ldr	r3, [pc, #16]	; (8015bac <HAL_PCD_SuspendCallback+0x48>)
 8015b9a:	691b      	ldr	r3, [r3, #16]
 8015b9c:	4a03      	ldr	r2, [pc, #12]	; (8015bac <HAL_PCD_SuspendCallback+0x48>)
 8015b9e:	f043 0306 	orr.w	r3, r3, #6
 8015ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015ba4:	bf00      	nop
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	e000ed00 	.word	0xe000ed00

08015bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fe fcf5 	bl	80145ae <USBD_LL_Resume>
}
 8015bc4:	bf00      	nop
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015bde:	78fa      	ldrb	r2, [r7, #3]
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fe fd4d 	bl	8014682 <USBD_LL_IsoOUTIncomplete>
}
 8015be8:	bf00      	nop
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015c02:	78fa      	ldrb	r2, [r7, #3]
 8015c04:	4611      	mov	r1, r2
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7fe fd09 	bl	801461e <USBD_LL_IsoINIncomplete>
}
 8015c0c:	bf00      	nop
 8015c0e:	3708      	adds	r7, #8
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fe fd5f 	bl	80146e6 <USBD_LL_DevConnected>
}
 8015c28:	bf00      	nop
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7fe fd5c 	bl	80146fc <USBD_LL_DevDisconnected>
}
 8015c44:	bf00      	nop
 8015c46:	3708      	adds	r7, #8
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d13e      	bne.n	8015cda <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015c5c:	4a21      	ldr	r2, [pc, #132]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	4a1f      	ldr	r2, [pc, #124]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015c6c:	4b1d      	ldr	r3, [pc, #116]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c6e:	4a1e      	ldr	r2, [pc, #120]	; (8015ce8 <USBD_LL_Init+0x9c>)
 8015c70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015c72:	4b1c      	ldr	r3, [pc, #112]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c74:	2209      	movs	r2, #9
 8015c76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015c78:	4b1a      	ldr	r3, [pc, #104]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c7a:	2202      	movs	r2, #2
 8015c7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015c7e:	4b19      	ldr	r3, [pc, #100]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c80:	2200      	movs	r2, #0
 8015c82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015c84:	4b17      	ldr	r3, [pc, #92]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c86:	2202      	movs	r2, #2
 8015c88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8015c8a:	4b16      	ldr	r3, [pc, #88]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015c90:	4b14      	ldr	r3, [pc, #80]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c92:	2200      	movs	r2, #0
 8015c94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015c96:	4b13      	ldr	r3, [pc, #76]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c98:	2200      	movs	r2, #0
 8015c9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8015c9c:	4b11      	ldr	r3, [pc, #68]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8015ca2:	4b10      	ldr	r3, [pc, #64]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015ca8:	4b0e      	ldr	r3, [pc, #56]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015caa:	2200      	movs	r2, #0
 8015cac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015cae:	480d      	ldr	r0, [pc, #52]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015cb0:	f7f3 ff79 	bl	8009ba6 <HAL_PCD_Init>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d001      	beq.n	8015cbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015cba:	f7eb fb89 	bl	80013d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015cbe:	2180      	movs	r1, #128	; 0x80
 8015cc0:	4808      	ldr	r0, [pc, #32]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015cc2:	f7f5 f9ce 	bl	800b062 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015cc6:	2240      	movs	r2, #64	; 0x40
 8015cc8:	2100      	movs	r1, #0
 8015cca:	4806      	ldr	r0, [pc, #24]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015ccc:	f7f5 f982 	bl	800afd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015cd0:	2280      	movs	r2, #128	; 0x80
 8015cd2:	2101      	movs	r1, #1
 8015cd4:	4803      	ldr	r0, [pc, #12]	; (8015ce4 <USBD_LL_Init+0x98>)
 8015cd6:	f7f5 f97d 	bl	800afd4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015cda:	2300      	movs	r3, #0
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}
 8015ce4:	240071fc 	.word	0x240071fc
 8015ce8:	40080000 	.word	0x40080000

08015cec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7f4 f85b 	bl	8009dbe <HAL_PCD_Start>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d0c:	7bfb      	ldrb	r3, [r7, #15]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 f942 	bl	8015f98 <USBD_Get_USB_Status>
 8015d14:	4603      	mov	r3, r0
 8015d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015d22:	b580      	push	{r7, lr}
 8015d24:	b084      	sub	sp, #16
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	4608      	mov	r0, r1
 8015d2c:	4611      	mov	r1, r2
 8015d2e:	461a      	mov	r2, r3
 8015d30:	4603      	mov	r3, r0
 8015d32:	70fb      	strb	r3, [r7, #3]
 8015d34:	460b      	mov	r3, r1
 8015d36:	70bb      	strb	r3, [r7, #2]
 8015d38:	4613      	mov	r3, r2
 8015d3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d40:	2300      	movs	r3, #0
 8015d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015d4a:	78bb      	ldrb	r3, [r7, #2]
 8015d4c:	883a      	ldrh	r2, [r7, #0]
 8015d4e:	78f9      	ldrb	r1, [r7, #3]
 8015d50:	f7f4 fd5c 	bl	800a80c <HAL_PCD_EP_Open>
 8015d54:	4603      	mov	r3, r0
 8015d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d58:	7bfb      	ldrb	r3, [r7, #15]
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f000 f91c 	bl	8015f98 <USBD_Get_USB_Status>
 8015d60:	4603      	mov	r3, r0
 8015d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3710      	adds	r7, #16
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b084      	sub	sp, #16
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
 8015d76:	460b      	mov	r3, r1
 8015d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015d88:	78fa      	ldrb	r2, [r7, #3]
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7f4 fda5 	bl	800a8dc <HAL_PCD_EP_Close>
 8015d92:	4603      	mov	r3, r0
 8015d94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d96:	7bfb      	ldrb	r3, [r7, #15]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f000 f8fd 	bl	8015f98 <USBD_Get_USB_Status>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015da4:	4618      	mov	r0, r3
 8015da6:	3710      	adds	r7, #16
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b084      	sub	sp, #16
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015db8:	2300      	movs	r3, #0
 8015dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015dc6:	78fa      	ldrb	r2, [r7, #3]
 8015dc8:	4611      	mov	r1, r2
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7f4 fe5d 	bl	800aa8a <HAL_PCD_EP_SetStall>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f000 f8de 	bl	8015f98 <USBD_Get_USB_Status>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
 8015df2:	460b      	mov	r3, r1
 8015df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015df6:	2300      	movs	r3, #0
 8015df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e04:	78fa      	ldrb	r2, [r7, #3]
 8015e06:	4611      	mov	r1, r2
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7f4 fea1 	bl	800ab50 <HAL_PCD_EP_ClrStall>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e12:	7bfb      	ldrb	r3, [r7, #15]
 8015e14:	4618      	mov	r0, r3
 8015e16:	f000 f8bf 	bl	8015f98 <USBD_Get_USB_Status>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3710      	adds	r7, #16
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e28:	b480      	push	{r7}
 8015e2a:	b085      	sub	sp, #20
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	da0b      	bge.n	8015e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015e44:	78fb      	ldrb	r3, [r7, #3]
 8015e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e4a:	68f9      	ldr	r1, [r7, #12]
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	00db      	lsls	r3, r3, #3
 8015e50:	4413      	add	r3, r2
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	440b      	add	r3, r1
 8015e56:	3316      	adds	r3, #22
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	e00b      	b.n	8015e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e5c:	78fb      	ldrb	r3, [r7, #3]
 8015e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e62:	68f9      	ldr	r1, [r7, #12]
 8015e64:	4613      	mov	r3, r2
 8015e66:	00db      	lsls	r3, r3, #3
 8015e68:	4413      	add	r3, r2
 8015e6a:	009b      	lsls	r3, r3, #2
 8015e6c:	440b      	add	r3, r1
 8015e6e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8015e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3714      	adds	r7, #20
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7e:	4770      	bx	lr

08015e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b084      	sub	sp, #16
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	460b      	mov	r3, r1
 8015e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e90:	2300      	movs	r3, #0
 8015e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015e9a:	78fa      	ldrb	r2, [r7, #3]
 8015e9c:	4611      	mov	r1, r2
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f7f4 fc90 	bl	800a7c4 <HAL_PCD_SetAddress>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ea8:	7bfb      	ldrb	r3, [r7, #15]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f000 f874 	bl	8015f98 <USBD_Get_USB_Status>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b086      	sub	sp, #24
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	60f8      	str	r0, [r7, #12]
 8015ec6:	607a      	str	r2, [r7, #4]
 8015ec8:	603b      	str	r3, [r7, #0]
 8015eca:	460b      	mov	r3, r1
 8015ecc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015edc:	7af9      	ldrb	r1, [r7, #11]
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	f7f4 fd98 	bl	800aa16 <HAL_PCD_EP_Transmit>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015eea:	7dfb      	ldrb	r3, [r7, #23]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f000 f853 	bl	8015f98 <USBD_Get_USB_Status>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3718      	adds	r7, #24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}

08015f00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b086      	sub	sp, #24
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	607a      	str	r2, [r7, #4]
 8015f0a:	603b      	str	r3, [r7, #0]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f10:	2300      	movs	r3, #0
 8015f12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f14:	2300      	movs	r3, #0
 8015f16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015f1e:	7af9      	ldrb	r1, [r7, #11]
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	f7f4 fd24 	bl	800a970 <HAL_PCD_EP_Receive>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f2c:	7dfb      	ldrb	r3, [r7, #23]
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f000 f832 	bl	8015f98 <USBD_Get_USB_Status>
 8015f34:	4603      	mov	r3, r0
 8015f36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015f38:	7dbb      	ldrb	r3, [r7, #22]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b082      	sub	sp, #8
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
 8015f4a:	460b      	mov	r3, r1
 8015f4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f54:	78fa      	ldrb	r2, [r7, #3]
 8015f56:	4611      	mov	r1, r2
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f4 fd44 	bl	800a9e6 <HAL_PCD_EP_GetRxCount>
 8015f5e:	4603      	mov	r3, r0
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015f70:	4b03      	ldr	r3, [pc, #12]	; (8015f80 <USBD_static_malloc+0x18>)
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	370c      	adds	r7, #12
 8015f76:	46bd      	mov	sp, r7
 8015f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7c:	4770      	bx	lr
 8015f7e:	bf00      	nop
 8015f80:	240076e0 	.word	0x240076e0

08015f84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015f8c:	bf00      	nop
 8015f8e:	370c      	adds	r7, #12
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr

08015f98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b085      	sub	sp, #20
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015fa6:	79fb      	ldrb	r3, [r7, #7]
 8015fa8:	2b03      	cmp	r3, #3
 8015faa:	d817      	bhi.n	8015fdc <USBD_Get_USB_Status+0x44>
 8015fac:	a201      	add	r2, pc, #4	; (adr r2, 8015fb4 <USBD_Get_USB_Status+0x1c>)
 8015fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fb2:	bf00      	nop
 8015fb4:	08015fc5 	.word	0x08015fc5
 8015fb8:	08015fcb 	.word	0x08015fcb
 8015fbc:	08015fd1 	.word	0x08015fd1
 8015fc0:	08015fd7 	.word	0x08015fd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8015fc8:	e00b      	b.n	8015fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8015fce:	e008      	b.n	8015fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8015fd4:	e005      	b.n	8015fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015fd6:	2303      	movs	r3, #3
 8015fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8015fda:	e002      	b.n	8015fe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015fdc:	2303      	movs	r3, #3
 8015fde:	73fb      	strb	r3, [r7, #15]
    break;
 8015fe0:	bf00      	nop
  }
  return usb_status;
 8015fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3714      	adds	r7, #20
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <arm_sin_f32>:
 8015ff0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016070 <arm_sin_f32+0x80>
 8015ff4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015ff8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015ffc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016004:	d504      	bpl.n	8016010 <arm_sin_f32+0x20>
 8016006:	ee17 3a90 	vmov	r3, s15
 801600a:	3b01      	subs	r3, #1
 801600c:	ee07 3a90 	vmov	s15, r3
 8016010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016014:	eddf 6a17 	vldr	s13, [pc, #92]	; 8016074 <arm_sin_f32+0x84>
 8016018:	ee70 7a67 	vsub.f32	s15, s0, s15
 801601c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016020:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8016024:	ee17 3a10 	vmov	r3, s14
 8016028:	b29b      	uxth	r3, r3
 801602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801602e:	d21a      	bcs.n	8016066 <arm_sin_f32+0x76>
 8016030:	ee07 3a10 	vmov	s14, r3
 8016034:	1c59      	adds	r1, r3, #1
 8016036:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801603a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801603e:	4a0e      	ldr	r2, [pc, #56]	; (8016078 <arm_sin_f32+0x88>)
 8016040:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016048:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801604c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016050:	edd3 6a00 	vldr	s13, [r3]
 8016054:	ed92 7a00 	vldr	s14, [r2]
 8016058:	ee20 0a26 	vmul.f32	s0, s0, s13
 801605c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016060:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016064:	4770      	bx	lr
 8016066:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801606a:	2101      	movs	r1, #1
 801606c:	2300      	movs	r3, #0
 801606e:	e7e6      	b.n	801603e <arm_sin_f32+0x4e>
 8016070:	3e22f983 	.word	0x3e22f983
 8016074:	44000000 	.word	0x44000000
 8016078:	0801ad90 	.word	0x0801ad90

0801607c <atof>:
 801607c:	2100      	movs	r1, #0
 801607e:	f000 be8d 	b.w	8016d9c <strtod>

08016082 <atoi>:
 8016082:	220a      	movs	r2, #10
 8016084:	2100      	movs	r1, #0
 8016086:	f000 bf17 	b.w	8016eb8 <strtol>
	...

0801608c <malloc>:
 801608c:	4b02      	ldr	r3, [pc, #8]	; (8016098 <malloc+0xc>)
 801608e:	4601      	mov	r1, r0
 8016090:	6818      	ldr	r0, [r3, #0]
 8016092:	f000 b82b 	b.w	80160ec <_malloc_r>
 8016096:	bf00      	nop
 8016098:	240003c4 	.word	0x240003c4

0801609c <free>:
 801609c:	4b02      	ldr	r3, [pc, #8]	; (80160a8 <free+0xc>)
 801609e:	4601      	mov	r1, r0
 80160a0:	6818      	ldr	r0, [r3, #0]
 80160a2:	f002 bb25 	b.w	80186f0 <_free_r>
 80160a6:	bf00      	nop
 80160a8:	240003c4 	.word	0x240003c4

080160ac <sbrk_aligned>:
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	4e0e      	ldr	r6, [pc, #56]	; (80160e8 <sbrk_aligned+0x3c>)
 80160b0:	460c      	mov	r4, r1
 80160b2:	6831      	ldr	r1, [r6, #0]
 80160b4:	4605      	mov	r5, r0
 80160b6:	b911      	cbnz	r1, 80160be <sbrk_aligned+0x12>
 80160b8:	f001 fcbc 	bl	8017a34 <_sbrk_r>
 80160bc:	6030      	str	r0, [r6, #0]
 80160be:	4621      	mov	r1, r4
 80160c0:	4628      	mov	r0, r5
 80160c2:	f001 fcb7 	bl	8017a34 <_sbrk_r>
 80160c6:	1c43      	adds	r3, r0, #1
 80160c8:	d00a      	beq.n	80160e0 <sbrk_aligned+0x34>
 80160ca:	1cc4      	adds	r4, r0, #3
 80160cc:	f024 0403 	bic.w	r4, r4, #3
 80160d0:	42a0      	cmp	r0, r4
 80160d2:	d007      	beq.n	80160e4 <sbrk_aligned+0x38>
 80160d4:	1a21      	subs	r1, r4, r0
 80160d6:	4628      	mov	r0, r5
 80160d8:	f001 fcac 	bl	8017a34 <_sbrk_r>
 80160dc:	3001      	adds	r0, #1
 80160de:	d101      	bne.n	80160e4 <sbrk_aligned+0x38>
 80160e0:	f04f 34ff 	mov.w	r4, #4294967295
 80160e4:	4620      	mov	r0, r4
 80160e6:	bd70      	pop	{r4, r5, r6, pc}
 80160e8:	2400b338 	.word	0x2400b338

080160ec <_malloc_r>:
 80160ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160f0:	1ccd      	adds	r5, r1, #3
 80160f2:	f025 0503 	bic.w	r5, r5, #3
 80160f6:	3508      	adds	r5, #8
 80160f8:	2d0c      	cmp	r5, #12
 80160fa:	bf38      	it	cc
 80160fc:	250c      	movcc	r5, #12
 80160fe:	2d00      	cmp	r5, #0
 8016100:	4607      	mov	r7, r0
 8016102:	db01      	blt.n	8016108 <_malloc_r+0x1c>
 8016104:	42a9      	cmp	r1, r5
 8016106:	d905      	bls.n	8016114 <_malloc_r+0x28>
 8016108:	230c      	movs	r3, #12
 801610a:	603b      	str	r3, [r7, #0]
 801610c:	2600      	movs	r6, #0
 801610e:	4630      	mov	r0, r6
 8016110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016114:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80161e8 <_malloc_r+0xfc>
 8016118:	f000 f868 	bl	80161ec <__malloc_lock>
 801611c:	f8d8 3000 	ldr.w	r3, [r8]
 8016120:	461c      	mov	r4, r3
 8016122:	bb5c      	cbnz	r4, 801617c <_malloc_r+0x90>
 8016124:	4629      	mov	r1, r5
 8016126:	4638      	mov	r0, r7
 8016128:	f7ff ffc0 	bl	80160ac <sbrk_aligned>
 801612c:	1c43      	adds	r3, r0, #1
 801612e:	4604      	mov	r4, r0
 8016130:	d155      	bne.n	80161de <_malloc_r+0xf2>
 8016132:	f8d8 4000 	ldr.w	r4, [r8]
 8016136:	4626      	mov	r6, r4
 8016138:	2e00      	cmp	r6, #0
 801613a:	d145      	bne.n	80161c8 <_malloc_r+0xdc>
 801613c:	2c00      	cmp	r4, #0
 801613e:	d048      	beq.n	80161d2 <_malloc_r+0xe6>
 8016140:	6823      	ldr	r3, [r4, #0]
 8016142:	4631      	mov	r1, r6
 8016144:	4638      	mov	r0, r7
 8016146:	eb04 0903 	add.w	r9, r4, r3
 801614a:	f001 fc73 	bl	8017a34 <_sbrk_r>
 801614e:	4581      	cmp	r9, r0
 8016150:	d13f      	bne.n	80161d2 <_malloc_r+0xe6>
 8016152:	6821      	ldr	r1, [r4, #0]
 8016154:	1a6d      	subs	r5, r5, r1
 8016156:	4629      	mov	r1, r5
 8016158:	4638      	mov	r0, r7
 801615a:	f7ff ffa7 	bl	80160ac <sbrk_aligned>
 801615e:	3001      	adds	r0, #1
 8016160:	d037      	beq.n	80161d2 <_malloc_r+0xe6>
 8016162:	6823      	ldr	r3, [r4, #0]
 8016164:	442b      	add	r3, r5
 8016166:	6023      	str	r3, [r4, #0]
 8016168:	f8d8 3000 	ldr.w	r3, [r8]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d038      	beq.n	80161e2 <_malloc_r+0xf6>
 8016170:	685a      	ldr	r2, [r3, #4]
 8016172:	42a2      	cmp	r2, r4
 8016174:	d12b      	bne.n	80161ce <_malloc_r+0xe2>
 8016176:	2200      	movs	r2, #0
 8016178:	605a      	str	r2, [r3, #4]
 801617a:	e00f      	b.n	801619c <_malloc_r+0xb0>
 801617c:	6822      	ldr	r2, [r4, #0]
 801617e:	1b52      	subs	r2, r2, r5
 8016180:	d41f      	bmi.n	80161c2 <_malloc_r+0xd6>
 8016182:	2a0b      	cmp	r2, #11
 8016184:	d917      	bls.n	80161b6 <_malloc_r+0xca>
 8016186:	1961      	adds	r1, r4, r5
 8016188:	42a3      	cmp	r3, r4
 801618a:	6025      	str	r5, [r4, #0]
 801618c:	bf18      	it	ne
 801618e:	6059      	strne	r1, [r3, #4]
 8016190:	6863      	ldr	r3, [r4, #4]
 8016192:	bf08      	it	eq
 8016194:	f8c8 1000 	streq.w	r1, [r8]
 8016198:	5162      	str	r2, [r4, r5]
 801619a:	604b      	str	r3, [r1, #4]
 801619c:	4638      	mov	r0, r7
 801619e:	f104 060b 	add.w	r6, r4, #11
 80161a2:	f000 f829 	bl	80161f8 <__malloc_unlock>
 80161a6:	f026 0607 	bic.w	r6, r6, #7
 80161aa:	1d23      	adds	r3, r4, #4
 80161ac:	1af2      	subs	r2, r6, r3
 80161ae:	d0ae      	beq.n	801610e <_malloc_r+0x22>
 80161b0:	1b9b      	subs	r3, r3, r6
 80161b2:	50a3      	str	r3, [r4, r2]
 80161b4:	e7ab      	b.n	801610e <_malloc_r+0x22>
 80161b6:	42a3      	cmp	r3, r4
 80161b8:	6862      	ldr	r2, [r4, #4]
 80161ba:	d1dd      	bne.n	8016178 <_malloc_r+0x8c>
 80161bc:	f8c8 2000 	str.w	r2, [r8]
 80161c0:	e7ec      	b.n	801619c <_malloc_r+0xb0>
 80161c2:	4623      	mov	r3, r4
 80161c4:	6864      	ldr	r4, [r4, #4]
 80161c6:	e7ac      	b.n	8016122 <_malloc_r+0x36>
 80161c8:	4634      	mov	r4, r6
 80161ca:	6876      	ldr	r6, [r6, #4]
 80161cc:	e7b4      	b.n	8016138 <_malloc_r+0x4c>
 80161ce:	4613      	mov	r3, r2
 80161d0:	e7cc      	b.n	801616c <_malloc_r+0x80>
 80161d2:	230c      	movs	r3, #12
 80161d4:	603b      	str	r3, [r7, #0]
 80161d6:	4638      	mov	r0, r7
 80161d8:	f000 f80e 	bl	80161f8 <__malloc_unlock>
 80161dc:	e797      	b.n	801610e <_malloc_r+0x22>
 80161de:	6025      	str	r5, [r4, #0]
 80161e0:	e7dc      	b.n	801619c <_malloc_r+0xb0>
 80161e2:	605b      	str	r3, [r3, #4]
 80161e4:	deff      	udf	#255	; 0xff
 80161e6:	bf00      	nop
 80161e8:	2400b334 	.word	0x2400b334

080161ec <__malloc_lock>:
 80161ec:	4801      	ldr	r0, [pc, #4]	; (80161f4 <__malloc_lock+0x8>)
 80161ee:	f7eb be2e 	b.w	8001e4e <__retarget_lock_acquire_recursive>
 80161f2:	bf00      	nop
 80161f4:	24000c10 	.word	0x24000c10

080161f8 <__malloc_unlock>:
 80161f8:	4801      	ldr	r0, [pc, #4]	; (8016200 <__malloc_unlock+0x8>)
 80161fa:	f7eb be3c 	b.w	8001e76 <__retarget_lock_release_recursive>
 80161fe:	bf00      	nop
 8016200:	24000c10 	.word	0x24000c10

08016204 <sulp>:
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	4604      	mov	r4, r0
 8016208:	460d      	mov	r5, r1
 801620a:	4616      	mov	r6, r2
 801620c:	ec45 4b10 	vmov	d0, r4, r5
 8016210:	f003 f990 	bl	8019534 <__ulp>
 8016214:	b17e      	cbz	r6, 8016236 <sulp+0x32>
 8016216:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801621a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801621e:	2b00      	cmp	r3, #0
 8016220:	dd09      	ble.n	8016236 <sulp+0x32>
 8016222:	051b      	lsls	r3, r3, #20
 8016224:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016228:	2000      	movs	r0, #0
 801622a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801622e:	ec41 0b17 	vmov	d7, r0, r1
 8016232:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016236:	bd70      	pop	{r4, r5, r6, pc}

08016238 <_strtod_l>:
 8016238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623c:	ed2d 8b0e 	vpush	{d8-d14}
 8016240:	b097      	sub	sp, #92	; 0x5c
 8016242:	4604      	mov	r4, r0
 8016244:	920d      	str	r2, [sp, #52]	; 0x34
 8016246:	2200      	movs	r2, #0
 8016248:	9212      	str	r2, [sp, #72]	; 0x48
 801624a:	468a      	mov	sl, r1
 801624c:	f04f 0800 	mov.w	r8, #0
 8016250:	f04f 0900 	mov.w	r9, #0
 8016254:	460a      	mov	r2, r1
 8016256:	9211      	str	r2, [sp, #68]	; 0x44
 8016258:	7811      	ldrb	r1, [r2, #0]
 801625a:	292b      	cmp	r1, #43	; 0x2b
 801625c:	d04c      	beq.n	80162f8 <_strtod_l+0xc0>
 801625e:	d839      	bhi.n	80162d4 <_strtod_l+0x9c>
 8016260:	290d      	cmp	r1, #13
 8016262:	d833      	bhi.n	80162cc <_strtod_l+0x94>
 8016264:	2908      	cmp	r1, #8
 8016266:	d833      	bhi.n	80162d0 <_strtod_l+0x98>
 8016268:	2900      	cmp	r1, #0
 801626a:	d03c      	beq.n	80162e6 <_strtod_l+0xae>
 801626c:	2200      	movs	r2, #0
 801626e:	9208      	str	r2, [sp, #32]
 8016270:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016272:	7832      	ldrb	r2, [r6, #0]
 8016274:	2a30      	cmp	r2, #48	; 0x30
 8016276:	f040 80b8 	bne.w	80163ea <_strtod_l+0x1b2>
 801627a:	7872      	ldrb	r2, [r6, #1]
 801627c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016280:	2a58      	cmp	r2, #88	; 0x58
 8016282:	d170      	bne.n	8016366 <_strtod_l+0x12e>
 8016284:	9302      	str	r3, [sp, #8]
 8016286:	9b08      	ldr	r3, [sp, #32]
 8016288:	9301      	str	r3, [sp, #4]
 801628a:	ab12      	add	r3, sp, #72	; 0x48
 801628c:	9300      	str	r3, [sp, #0]
 801628e:	4a91      	ldr	r2, [pc, #580]	; (80164d4 <_strtod_l+0x29c>)
 8016290:	ab13      	add	r3, sp, #76	; 0x4c
 8016292:	a911      	add	r1, sp, #68	; 0x44
 8016294:	4620      	mov	r0, r4
 8016296:	f002 fadf 	bl	8018858 <__gethex>
 801629a:	f010 070f 	ands.w	r7, r0, #15
 801629e:	4605      	mov	r5, r0
 80162a0:	d005      	beq.n	80162ae <_strtod_l+0x76>
 80162a2:	2f06      	cmp	r7, #6
 80162a4:	d12a      	bne.n	80162fc <_strtod_l+0xc4>
 80162a6:	3601      	adds	r6, #1
 80162a8:	2300      	movs	r3, #0
 80162aa:	9611      	str	r6, [sp, #68]	; 0x44
 80162ac:	9308      	str	r3, [sp, #32]
 80162ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	f040 8555 	bne.w	8016d60 <_strtod_l+0xb28>
 80162b6:	9b08      	ldr	r3, [sp, #32]
 80162b8:	ec49 8b10 	vmov	d0, r8, r9
 80162bc:	b1cb      	cbz	r3, 80162f2 <_strtod_l+0xba>
 80162be:	eeb1 0b40 	vneg.f64	d0, d0
 80162c2:	b017      	add	sp, #92	; 0x5c
 80162c4:	ecbd 8b0e 	vpop	{d8-d14}
 80162c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162cc:	2920      	cmp	r1, #32
 80162ce:	d1cd      	bne.n	801626c <_strtod_l+0x34>
 80162d0:	3201      	adds	r2, #1
 80162d2:	e7c0      	b.n	8016256 <_strtod_l+0x1e>
 80162d4:	292d      	cmp	r1, #45	; 0x2d
 80162d6:	d1c9      	bne.n	801626c <_strtod_l+0x34>
 80162d8:	2101      	movs	r1, #1
 80162da:	9108      	str	r1, [sp, #32]
 80162dc:	1c51      	adds	r1, r2, #1
 80162de:	9111      	str	r1, [sp, #68]	; 0x44
 80162e0:	7852      	ldrb	r2, [r2, #1]
 80162e2:	2a00      	cmp	r2, #0
 80162e4:	d1c4      	bne.n	8016270 <_strtod_l+0x38>
 80162e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162e8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f040 8535 	bne.w	8016d5c <_strtod_l+0xb24>
 80162f2:	ec49 8b10 	vmov	d0, r8, r9
 80162f6:	e7e4      	b.n	80162c2 <_strtod_l+0x8a>
 80162f8:	2100      	movs	r1, #0
 80162fa:	e7ee      	b.n	80162da <_strtod_l+0xa2>
 80162fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162fe:	b13a      	cbz	r2, 8016310 <_strtod_l+0xd8>
 8016300:	2135      	movs	r1, #53	; 0x35
 8016302:	a814      	add	r0, sp, #80	; 0x50
 8016304:	f003 fa10 	bl	8019728 <__copybits>
 8016308:	9912      	ldr	r1, [sp, #72]	; 0x48
 801630a:	4620      	mov	r0, r4
 801630c:	f002 fde6 	bl	8018edc <_Bfree>
 8016310:	1e7b      	subs	r3, r7, #1
 8016312:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016314:	2b04      	cmp	r3, #4
 8016316:	d806      	bhi.n	8016326 <_strtod_l+0xee>
 8016318:	e8df f003 	tbb	[pc, r3]
 801631c:	201d0314 	.word	0x201d0314
 8016320:	14          	.byte	0x14
 8016321:	00          	.byte	0x00
 8016322:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8016326:	05eb      	lsls	r3, r5, #23
 8016328:	bf48      	it	mi
 801632a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801632e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016332:	0d1b      	lsrs	r3, r3, #20
 8016334:	051b      	lsls	r3, r3, #20
 8016336:	2b00      	cmp	r3, #0
 8016338:	d1b9      	bne.n	80162ae <_strtod_l+0x76>
 801633a:	f001 fb9d 	bl	8017a78 <__errno>
 801633e:	2322      	movs	r3, #34	; 0x22
 8016340:	6003      	str	r3, [r0, #0]
 8016342:	e7b4      	b.n	80162ae <_strtod_l+0x76>
 8016344:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8016348:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801634c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016350:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016354:	e7e7      	b.n	8016326 <_strtod_l+0xee>
 8016356:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80164dc <_strtod_l+0x2a4>
 801635a:	e7e4      	b.n	8016326 <_strtod_l+0xee>
 801635c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016360:	f04f 38ff 	mov.w	r8, #4294967295
 8016364:	e7df      	b.n	8016326 <_strtod_l+0xee>
 8016366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016368:	1c5a      	adds	r2, r3, #1
 801636a:	9211      	str	r2, [sp, #68]	; 0x44
 801636c:	785b      	ldrb	r3, [r3, #1]
 801636e:	2b30      	cmp	r3, #48	; 0x30
 8016370:	d0f9      	beq.n	8016366 <_strtod_l+0x12e>
 8016372:	2b00      	cmp	r3, #0
 8016374:	d09b      	beq.n	80162ae <_strtod_l+0x76>
 8016376:	2301      	movs	r3, #1
 8016378:	9306      	str	r3, [sp, #24]
 801637a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801637c:	9309      	str	r3, [sp, #36]	; 0x24
 801637e:	2300      	movs	r3, #0
 8016380:	9305      	str	r3, [sp, #20]
 8016382:	9307      	str	r3, [sp, #28]
 8016384:	461e      	mov	r6, r3
 8016386:	220a      	movs	r2, #10
 8016388:	9811      	ldr	r0, [sp, #68]	; 0x44
 801638a:	7805      	ldrb	r5, [r0, #0]
 801638c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8016390:	b2d9      	uxtb	r1, r3
 8016392:	2909      	cmp	r1, #9
 8016394:	d92b      	bls.n	80163ee <_strtod_l+0x1b6>
 8016396:	4950      	ldr	r1, [pc, #320]	; (80164d8 <_strtod_l+0x2a0>)
 8016398:	2201      	movs	r2, #1
 801639a:	f001 fb00 	bl	801799e <strncmp>
 801639e:	2800      	cmp	r0, #0
 80163a0:	d035      	beq.n	801640e <_strtod_l+0x1d6>
 80163a2:	2000      	movs	r0, #0
 80163a4:	462a      	mov	r2, r5
 80163a6:	4633      	mov	r3, r6
 80163a8:	4683      	mov	fp, r0
 80163aa:	4601      	mov	r1, r0
 80163ac:	2a65      	cmp	r2, #101	; 0x65
 80163ae:	d001      	beq.n	80163b4 <_strtod_l+0x17c>
 80163b0:	2a45      	cmp	r2, #69	; 0x45
 80163b2:	d118      	bne.n	80163e6 <_strtod_l+0x1ae>
 80163b4:	b91b      	cbnz	r3, 80163be <_strtod_l+0x186>
 80163b6:	9b06      	ldr	r3, [sp, #24]
 80163b8:	4303      	orrs	r3, r0
 80163ba:	d094      	beq.n	80162e6 <_strtod_l+0xae>
 80163bc:	2300      	movs	r3, #0
 80163be:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80163c2:	f10a 0201 	add.w	r2, sl, #1
 80163c6:	9211      	str	r2, [sp, #68]	; 0x44
 80163c8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80163cc:	2a2b      	cmp	r2, #43	; 0x2b
 80163ce:	d075      	beq.n	80164bc <_strtod_l+0x284>
 80163d0:	2a2d      	cmp	r2, #45	; 0x2d
 80163d2:	d07b      	beq.n	80164cc <_strtod_l+0x294>
 80163d4:	f04f 0e00 	mov.w	lr, #0
 80163d8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80163dc:	2d09      	cmp	r5, #9
 80163de:	f240 8083 	bls.w	80164e8 <_strtod_l+0x2b0>
 80163e2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80163e6:	2500      	movs	r5, #0
 80163e8:	e09e      	b.n	8016528 <_strtod_l+0x2f0>
 80163ea:	2300      	movs	r3, #0
 80163ec:	e7c4      	b.n	8016378 <_strtod_l+0x140>
 80163ee:	2e08      	cmp	r6, #8
 80163f0:	bfd5      	itete	le
 80163f2:	9907      	ldrle	r1, [sp, #28]
 80163f4:	9905      	ldrgt	r1, [sp, #20]
 80163f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80163fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80163fe:	f100 0001 	add.w	r0, r0, #1
 8016402:	bfd4      	ite	le
 8016404:	9307      	strle	r3, [sp, #28]
 8016406:	9305      	strgt	r3, [sp, #20]
 8016408:	3601      	adds	r6, #1
 801640a:	9011      	str	r0, [sp, #68]	; 0x44
 801640c:	e7bc      	b.n	8016388 <_strtod_l+0x150>
 801640e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016410:	1c5a      	adds	r2, r3, #1
 8016412:	9211      	str	r2, [sp, #68]	; 0x44
 8016414:	785a      	ldrb	r2, [r3, #1]
 8016416:	b3ae      	cbz	r6, 8016484 <_strtod_l+0x24c>
 8016418:	4683      	mov	fp, r0
 801641a:	4633      	mov	r3, r6
 801641c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016420:	2909      	cmp	r1, #9
 8016422:	d912      	bls.n	801644a <_strtod_l+0x212>
 8016424:	2101      	movs	r1, #1
 8016426:	e7c1      	b.n	80163ac <_strtod_l+0x174>
 8016428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801642a:	1c5a      	adds	r2, r3, #1
 801642c:	9211      	str	r2, [sp, #68]	; 0x44
 801642e:	785a      	ldrb	r2, [r3, #1]
 8016430:	3001      	adds	r0, #1
 8016432:	2a30      	cmp	r2, #48	; 0x30
 8016434:	d0f8      	beq.n	8016428 <_strtod_l+0x1f0>
 8016436:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801643a:	2b08      	cmp	r3, #8
 801643c:	f200 8495 	bhi.w	8016d6a <_strtod_l+0xb32>
 8016440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016442:	9309      	str	r3, [sp, #36]	; 0x24
 8016444:	4683      	mov	fp, r0
 8016446:	2000      	movs	r0, #0
 8016448:	4603      	mov	r3, r0
 801644a:	3a30      	subs	r2, #48	; 0x30
 801644c:	f100 0101 	add.w	r1, r0, #1
 8016450:	d012      	beq.n	8016478 <_strtod_l+0x240>
 8016452:	448b      	add	fp, r1
 8016454:	eb00 0c03 	add.w	ip, r0, r3
 8016458:	4619      	mov	r1, r3
 801645a:	250a      	movs	r5, #10
 801645c:	4561      	cmp	r1, ip
 801645e:	d113      	bne.n	8016488 <_strtod_l+0x250>
 8016460:	1819      	adds	r1, r3, r0
 8016462:	2908      	cmp	r1, #8
 8016464:	f103 0301 	add.w	r3, r3, #1
 8016468:	4403      	add	r3, r0
 801646a:	dc1b      	bgt.n	80164a4 <_strtod_l+0x26c>
 801646c:	9807      	ldr	r0, [sp, #28]
 801646e:	210a      	movs	r1, #10
 8016470:	fb01 2200 	mla	r2, r1, r0, r2
 8016474:	9207      	str	r2, [sp, #28]
 8016476:	2100      	movs	r1, #0
 8016478:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801647a:	1c50      	adds	r0, r2, #1
 801647c:	9011      	str	r0, [sp, #68]	; 0x44
 801647e:	7852      	ldrb	r2, [r2, #1]
 8016480:	4608      	mov	r0, r1
 8016482:	e7cb      	b.n	801641c <_strtod_l+0x1e4>
 8016484:	4630      	mov	r0, r6
 8016486:	e7d4      	b.n	8016432 <_strtod_l+0x1fa>
 8016488:	2908      	cmp	r1, #8
 801648a:	f101 0101 	add.w	r1, r1, #1
 801648e:	dc03      	bgt.n	8016498 <_strtod_l+0x260>
 8016490:	9f07      	ldr	r7, [sp, #28]
 8016492:	436f      	muls	r7, r5
 8016494:	9707      	str	r7, [sp, #28]
 8016496:	e7e1      	b.n	801645c <_strtod_l+0x224>
 8016498:	2910      	cmp	r1, #16
 801649a:	bfde      	ittt	le
 801649c:	9f05      	ldrle	r7, [sp, #20]
 801649e:	436f      	mulle	r7, r5
 80164a0:	9705      	strle	r7, [sp, #20]
 80164a2:	e7db      	b.n	801645c <_strtod_l+0x224>
 80164a4:	2b10      	cmp	r3, #16
 80164a6:	bfdf      	itttt	le
 80164a8:	9805      	ldrle	r0, [sp, #20]
 80164aa:	210a      	movle	r1, #10
 80164ac:	fb01 2200 	mlale	r2, r1, r0, r2
 80164b0:	9205      	strle	r2, [sp, #20]
 80164b2:	e7e0      	b.n	8016476 <_strtod_l+0x23e>
 80164b4:	f04f 0b00 	mov.w	fp, #0
 80164b8:	2101      	movs	r1, #1
 80164ba:	e77c      	b.n	80163b6 <_strtod_l+0x17e>
 80164bc:	f04f 0e00 	mov.w	lr, #0
 80164c0:	f10a 0202 	add.w	r2, sl, #2
 80164c4:	9211      	str	r2, [sp, #68]	; 0x44
 80164c6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80164ca:	e785      	b.n	80163d8 <_strtod_l+0x1a0>
 80164cc:	f04f 0e01 	mov.w	lr, #1
 80164d0:	e7f6      	b.n	80164c0 <_strtod_l+0x288>
 80164d2:	bf00      	nop
 80164d4:	0801b598 	.word	0x0801b598
 80164d8:	0801b594 	.word	0x0801b594
 80164dc:	7ff00000 	.word	0x7ff00000
 80164e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80164e2:	1c55      	adds	r5, r2, #1
 80164e4:	9511      	str	r5, [sp, #68]	; 0x44
 80164e6:	7852      	ldrb	r2, [r2, #1]
 80164e8:	2a30      	cmp	r2, #48	; 0x30
 80164ea:	d0f9      	beq.n	80164e0 <_strtod_l+0x2a8>
 80164ec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80164f0:	2d08      	cmp	r5, #8
 80164f2:	f63f af78 	bhi.w	80163e6 <_strtod_l+0x1ae>
 80164f6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80164fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80164fc:	920a      	str	r2, [sp, #40]	; 0x28
 80164fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016500:	1c55      	adds	r5, r2, #1
 8016502:	9511      	str	r5, [sp, #68]	; 0x44
 8016504:	7852      	ldrb	r2, [r2, #1]
 8016506:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801650a:	2f09      	cmp	r7, #9
 801650c:	d937      	bls.n	801657e <_strtod_l+0x346>
 801650e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016510:	1bed      	subs	r5, r5, r7
 8016512:	2d08      	cmp	r5, #8
 8016514:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016518:	dc02      	bgt.n	8016520 <_strtod_l+0x2e8>
 801651a:	4565      	cmp	r5, ip
 801651c:	bfa8      	it	ge
 801651e:	4665      	movge	r5, ip
 8016520:	f1be 0f00 	cmp.w	lr, #0
 8016524:	d000      	beq.n	8016528 <_strtod_l+0x2f0>
 8016526:	426d      	negs	r5, r5
 8016528:	2b00      	cmp	r3, #0
 801652a:	d14d      	bne.n	80165c8 <_strtod_l+0x390>
 801652c:	9b06      	ldr	r3, [sp, #24]
 801652e:	4303      	orrs	r3, r0
 8016530:	f47f aebd 	bne.w	80162ae <_strtod_l+0x76>
 8016534:	2900      	cmp	r1, #0
 8016536:	f47f aed6 	bne.w	80162e6 <_strtod_l+0xae>
 801653a:	2a69      	cmp	r2, #105	; 0x69
 801653c:	d027      	beq.n	801658e <_strtod_l+0x356>
 801653e:	dc24      	bgt.n	801658a <_strtod_l+0x352>
 8016540:	2a49      	cmp	r2, #73	; 0x49
 8016542:	d024      	beq.n	801658e <_strtod_l+0x356>
 8016544:	2a4e      	cmp	r2, #78	; 0x4e
 8016546:	f47f aece 	bne.w	80162e6 <_strtod_l+0xae>
 801654a:	4995      	ldr	r1, [pc, #596]	; (80167a0 <_strtod_l+0x568>)
 801654c:	a811      	add	r0, sp, #68	; 0x44
 801654e:	f002 fbc3 	bl	8018cd8 <__match>
 8016552:	2800      	cmp	r0, #0
 8016554:	f43f aec7 	beq.w	80162e6 <_strtod_l+0xae>
 8016558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	2b28      	cmp	r3, #40	; 0x28
 801655e:	d12d      	bne.n	80165bc <_strtod_l+0x384>
 8016560:	4990      	ldr	r1, [pc, #576]	; (80167a4 <_strtod_l+0x56c>)
 8016562:	aa14      	add	r2, sp, #80	; 0x50
 8016564:	a811      	add	r0, sp, #68	; 0x44
 8016566:	f002 fbcb 	bl	8018d00 <__hexnan>
 801656a:	2805      	cmp	r0, #5
 801656c:	d126      	bne.n	80165bc <_strtod_l+0x384>
 801656e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016570:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016574:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016578:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801657c:	e697      	b.n	80162ae <_strtod_l+0x76>
 801657e:	250a      	movs	r5, #10
 8016580:	fb05 2c0c 	mla	ip, r5, ip, r2
 8016584:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8016588:	e7b9      	b.n	80164fe <_strtod_l+0x2c6>
 801658a:	2a6e      	cmp	r2, #110	; 0x6e
 801658c:	e7db      	b.n	8016546 <_strtod_l+0x30e>
 801658e:	4986      	ldr	r1, [pc, #536]	; (80167a8 <_strtod_l+0x570>)
 8016590:	a811      	add	r0, sp, #68	; 0x44
 8016592:	f002 fba1 	bl	8018cd8 <__match>
 8016596:	2800      	cmp	r0, #0
 8016598:	f43f aea5 	beq.w	80162e6 <_strtod_l+0xae>
 801659c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801659e:	4983      	ldr	r1, [pc, #524]	; (80167ac <_strtod_l+0x574>)
 80165a0:	3b01      	subs	r3, #1
 80165a2:	a811      	add	r0, sp, #68	; 0x44
 80165a4:	9311      	str	r3, [sp, #68]	; 0x44
 80165a6:	f002 fb97 	bl	8018cd8 <__match>
 80165aa:	b910      	cbnz	r0, 80165b2 <_strtod_l+0x37a>
 80165ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165ae:	3301      	adds	r3, #1
 80165b0:	9311      	str	r3, [sp, #68]	; 0x44
 80165b2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80167c0 <_strtod_l+0x588>
 80165b6:	f04f 0800 	mov.w	r8, #0
 80165ba:	e678      	b.n	80162ae <_strtod_l+0x76>
 80165bc:	487c      	ldr	r0, [pc, #496]	; (80167b0 <_strtod_l+0x578>)
 80165be:	f001 fa9b 	bl	8017af8 <nan>
 80165c2:	ec59 8b10 	vmov	r8, r9, d0
 80165c6:	e672      	b.n	80162ae <_strtod_l+0x76>
 80165c8:	eddd 7a07 	vldr	s15, [sp, #28]
 80165cc:	eba5 020b 	sub.w	r2, r5, fp
 80165d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80165d4:	2e00      	cmp	r6, #0
 80165d6:	bf08      	it	eq
 80165d8:	461e      	moveq	r6, r3
 80165da:	2b10      	cmp	r3, #16
 80165dc:	9206      	str	r2, [sp, #24]
 80165de:	461a      	mov	r2, r3
 80165e0:	bfa8      	it	ge
 80165e2:	2210      	movge	r2, #16
 80165e4:	2b09      	cmp	r3, #9
 80165e6:	ec59 8b17 	vmov	r8, r9, d7
 80165ea:	dd0c      	ble.n	8016606 <_strtod_l+0x3ce>
 80165ec:	4971      	ldr	r1, [pc, #452]	; (80167b4 <_strtod_l+0x57c>)
 80165ee:	eddd 6a05 	vldr	s13, [sp, #20]
 80165f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80165f6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80165fa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80165fe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016602:	ec59 8b16 	vmov	r8, r9, d6
 8016606:	2b0f      	cmp	r3, #15
 8016608:	dc37      	bgt.n	801667a <_strtod_l+0x442>
 801660a:	9906      	ldr	r1, [sp, #24]
 801660c:	2900      	cmp	r1, #0
 801660e:	f43f ae4e 	beq.w	80162ae <_strtod_l+0x76>
 8016612:	dd23      	ble.n	801665c <_strtod_l+0x424>
 8016614:	2916      	cmp	r1, #22
 8016616:	dc0b      	bgt.n	8016630 <_strtod_l+0x3f8>
 8016618:	4b66      	ldr	r3, [pc, #408]	; (80167b4 <_strtod_l+0x57c>)
 801661a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801661e:	ed93 7b00 	vldr	d7, [r3]
 8016622:	ec49 8b16 	vmov	d6, r8, r9
 8016626:	ee27 7b06 	vmul.f64	d7, d7, d6
 801662a:	ec59 8b17 	vmov	r8, r9, d7
 801662e:	e63e      	b.n	80162ae <_strtod_l+0x76>
 8016630:	9806      	ldr	r0, [sp, #24]
 8016632:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016636:	4281      	cmp	r1, r0
 8016638:	db1f      	blt.n	801667a <_strtod_l+0x442>
 801663a:	4a5e      	ldr	r2, [pc, #376]	; (80167b4 <_strtod_l+0x57c>)
 801663c:	f1c3 030f 	rsb	r3, r3, #15
 8016640:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016644:	ed91 7b00 	vldr	d7, [r1]
 8016648:	ec49 8b16 	vmov	d6, r8, r9
 801664c:	1ac3      	subs	r3, r0, r3
 801664e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016656:	ed92 6b00 	vldr	d6, [r2]
 801665a:	e7e4      	b.n	8016626 <_strtod_l+0x3ee>
 801665c:	9906      	ldr	r1, [sp, #24]
 801665e:	3116      	adds	r1, #22
 8016660:	db0b      	blt.n	801667a <_strtod_l+0x442>
 8016662:	4b54      	ldr	r3, [pc, #336]	; (80167b4 <_strtod_l+0x57c>)
 8016664:	ebab 0505 	sub.w	r5, fp, r5
 8016668:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801666c:	ed95 7b00 	vldr	d7, [r5]
 8016670:	ec49 8b16 	vmov	d6, r8, r9
 8016674:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016678:	e7d7      	b.n	801662a <_strtod_l+0x3f2>
 801667a:	9906      	ldr	r1, [sp, #24]
 801667c:	1a9a      	subs	r2, r3, r2
 801667e:	440a      	add	r2, r1
 8016680:	2a00      	cmp	r2, #0
 8016682:	dd6e      	ble.n	8016762 <_strtod_l+0x52a>
 8016684:	f012 000f 	ands.w	r0, r2, #15
 8016688:	d00a      	beq.n	80166a0 <_strtod_l+0x468>
 801668a:	494a      	ldr	r1, [pc, #296]	; (80167b4 <_strtod_l+0x57c>)
 801668c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016690:	ed91 7b00 	vldr	d7, [r1]
 8016694:	ec49 8b16 	vmov	d6, r8, r9
 8016698:	ee27 7b06 	vmul.f64	d7, d7, d6
 801669c:	ec59 8b17 	vmov	r8, r9, d7
 80166a0:	f032 020f 	bics.w	r2, r2, #15
 80166a4:	d04e      	beq.n	8016744 <_strtod_l+0x50c>
 80166a6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80166aa:	dd22      	ble.n	80166f2 <_strtod_l+0x4ba>
 80166ac:	2500      	movs	r5, #0
 80166ae:	462e      	mov	r6, r5
 80166b0:	9507      	str	r5, [sp, #28]
 80166b2:	462f      	mov	r7, r5
 80166b4:	2322      	movs	r3, #34	; 0x22
 80166b6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80167c0 <_strtod_l+0x588>
 80166ba:	6023      	str	r3, [r4, #0]
 80166bc:	f04f 0800 	mov.w	r8, #0
 80166c0:	9b07      	ldr	r3, [sp, #28]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	f43f adf3 	beq.w	80162ae <_strtod_l+0x76>
 80166c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80166ca:	4620      	mov	r0, r4
 80166cc:	f002 fc06 	bl	8018edc <_Bfree>
 80166d0:	4639      	mov	r1, r7
 80166d2:	4620      	mov	r0, r4
 80166d4:	f002 fc02 	bl	8018edc <_Bfree>
 80166d8:	4631      	mov	r1, r6
 80166da:	4620      	mov	r0, r4
 80166dc:	f002 fbfe 	bl	8018edc <_Bfree>
 80166e0:	9907      	ldr	r1, [sp, #28]
 80166e2:	4620      	mov	r0, r4
 80166e4:	f002 fbfa 	bl	8018edc <_Bfree>
 80166e8:	4629      	mov	r1, r5
 80166ea:	4620      	mov	r0, r4
 80166ec:	f002 fbf6 	bl	8018edc <_Bfree>
 80166f0:	e5dd      	b.n	80162ae <_strtod_l+0x76>
 80166f2:	2000      	movs	r0, #0
 80166f4:	ec49 8b17 	vmov	d7, r8, r9
 80166f8:	4f2f      	ldr	r7, [pc, #188]	; (80167b8 <_strtod_l+0x580>)
 80166fa:	1112      	asrs	r2, r2, #4
 80166fc:	4601      	mov	r1, r0
 80166fe:	2a01      	cmp	r2, #1
 8016700:	dc23      	bgt.n	801674a <_strtod_l+0x512>
 8016702:	b108      	cbz	r0, 8016708 <_strtod_l+0x4d0>
 8016704:	ec59 8b17 	vmov	r8, r9, d7
 8016708:	4a2b      	ldr	r2, [pc, #172]	; (80167b8 <_strtod_l+0x580>)
 801670a:	482c      	ldr	r0, [pc, #176]	; (80167bc <_strtod_l+0x584>)
 801670c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016710:	ed92 7b00 	vldr	d7, [r2]
 8016714:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016718:	ec49 8b16 	vmov	d6, r8, r9
 801671c:	4a28      	ldr	r2, [pc, #160]	; (80167c0 <_strtod_l+0x588>)
 801671e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016722:	ee17 1a90 	vmov	r1, s15
 8016726:	400a      	ands	r2, r1
 8016728:	4282      	cmp	r2, r0
 801672a:	ec59 8b17 	vmov	r8, r9, d7
 801672e:	d8bd      	bhi.n	80166ac <_strtod_l+0x474>
 8016730:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016734:	4282      	cmp	r2, r0
 8016736:	bf86      	itte	hi
 8016738:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80167c4 <_strtod_l+0x58c>
 801673c:	f04f 38ff 	movhi.w	r8, #4294967295
 8016740:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016744:	2200      	movs	r2, #0
 8016746:	9205      	str	r2, [sp, #20]
 8016748:	e076      	b.n	8016838 <_strtod_l+0x600>
 801674a:	f012 0f01 	tst.w	r2, #1
 801674e:	d004      	beq.n	801675a <_strtod_l+0x522>
 8016750:	ed97 6b00 	vldr	d6, [r7]
 8016754:	2001      	movs	r0, #1
 8016756:	ee27 7b06 	vmul.f64	d7, d7, d6
 801675a:	3101      	adds	r1, #1
 801675c:	1052      	asrs	r2, r2, #1
 801675e:	3708      	adds	r7, #8
 8016760:	e7cd      	b.n	80166fe <_strtod_l+0x4c6>
 8016762:	d0ef      	beq.n	8016744 <_strtod_l+0x50c>
 8016764:	4252      	negs	r2, r2
 8016766:	f012 000f 	ands.w	r0, r2, #15
 801676a:	d00a      	beq.n	8016782 <_strtod_l+0x54a>
 801676c:	4911      	ldr	r1, [pc, #68]	; (80167b4 <_strtod_l+0x57c>)
 801676e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016772:	ed91 7b00 	vldr	d7, [r1]
 8016776:	ec49 8b16 	vmov	d6, r8, r9
 801677a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801677e:	ec59 8b17 	vmov	r8, r9, d7
 8016782:	1112      	asrs	r2, r2, #4
 8016784:	d0de      	beq.n	8016744 <_strtod_l+0x50c>
 8016786:	2a1f      	cmp	r2, #31
 8016788:	dd1e      	ble.n	80167c8 <_strtod_l+0x590>
 801678a:	2500      	movs	r5, #0
 801678c:	462e      	mov	r6, r5
 801678e:	9507      	str	r5, [sp, #28]
 8016790:	462f      	mov	r7, r5
 8016792:	2322      	movs	r3, #34	; 0x22
 8016794:	f04f 0800 	mov.w	r8, #0
 8016798:	f04f 0900 	mov.w	r9, #0
 801679c:	6023      	str	r3, [r4, #0]
 801679e:	e78f      	b.n	80166c0 <_strtod_l+0x488>
 80167a0:	0801b6f6 	.word	0x0801b6f6
 80167a4:	0801b5ac 	.word	0x0801b5ac
 80167a8:	0801b6ee 	.word	0x0801b6ee
 80167ac:	0801b728 	.word	0x0801b728
 80167b0:	0801b9b8 	.word	0x0801b9b8
 80167b4:	0801b898 	.word	0x0801b898
 80167b8:	0801b870 	.word	0x0801b870
 80167bc:	7ca00000 	.word	0x7ca00000
 80167c0:	7ff00000 	.word	0x7ff00000
 80167c4:	7fefffff 	.word	0x7fefffff
 80167c8:	f012 0110 	ands.w	r1, r2, #16
 80167cc:	bf18      	it	ne
 80167ce:	216a      	movne	r1, #106	; 0x6a
 80167d0:	9105      	str	r1, [sp, #20]
 80167d2:	ec49 8b17 	vmov	d7, r8, r9
 80167d6:	49be      	ldr	r1, [pc, #760]	; (8016ad0 <_strtod_l+0x898>)
 80167d8:	2000      	movs	r0, #0
 80167da:	07d7      	lsls	r7, r2, #31
 80167dc:	d504      	bpl.n	80167e8 <_strtod_l+0x5b0>
 80167de:	ed91 6b00 	vldr	d6, [r1]
 80167e2:	2001      	movs	r0, #1
 80167e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167e8:	1052      	asrs	r2, r2, #1
 80167ea:	f101 0108 	add.w	r1, r1, #8
 80167ee:	d1f4      	bne.n	80167da <_strtod_l+0x5a2>
 80167f0:	b108      	cbz	r0, 80167f6 <_strtod_l+0x5be>
 80167f2:	ec59 8b17 	vmov	r8, r9, d7
 80167f6:	9a05      	ldr	r2, [sp, #20]
 80167f8:	b1ba      	cbz	r2, 801682a <_strtod_l+0x5f2>
 80167fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80167fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8016802:	2a00      	cmp	r2, #0
 8016804:	4648      	mov	r0, r9
 8016806:	dd10      	ble.n	801682a <_strtod_l+0x5f2>
 8016808:	2a1f      	cmp	r2, #31
 801680a:	f340 812c 	ble.w	8016a66 <_strtod_l+0x82e>
 801680e:	2a34      	cmp	r2, #52	; 0x34
 8016810:	bfde      	ittt	le
 8016812:	f04f 32ff 	movle.w	r2, #4294967295
 8016816:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801681a:	408a      	lslle	r2, r1
 801681c:	f04f 0800 	mov.w	r8, #0
 8016820:	bfcc      	ite	gt
 8016822:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016826:	ea02 0900 	andle.w	r9, r2, r0
 801682a:	ec49 8b17 	vmov	d7, r8, r9
 801682e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016836:	d0a8      	beq.n	801678a <_strtod_l+0x552>
 8016838:	9a07      	ldr	r2, [sp, #28]
 801683a:	9200      	str	r2, [sp, #0]
 801683c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801683e:	4632      	mov	r2, r6
 8016840:	4620      	mov	r0, r4
 8016842:	f002 fbb3 	bl	8018fac <__s2b>
 8016846:	9007      	str	r0, [sp, #28]
 8016848:	2800      	cmp	r0, #0
 801684a:	f43f af2f 	beq.w	80166ac <_strtod_l+0x474>
 801684e:	9a06      	ldr	r2, [sp, #24]
 8016850:	2a00      	cmp	r2, #0
 8016852:	ebab 0305 	sub.w	r3, fp, r5
 8016856:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016ab0 <_strtod_l+0x878>
 801685a:	bfa8      	it	ge
 801685c:	2300      	movge	r3, #0
 801685e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016ab8 <_strtod_l+0x880>
 8016862:	ed9f bb97 	vldr	d11, [pc, #604]	; 8016ac0 <_strtod_l+0x888>
 8016866:	9309      	str	r3, [sp, #36]	; 0x24
 8016868:	2500      	movs	r5, #0
 801686a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801686e:	930c      	str	r3, [sp, #48]	; 0x30
 8016870:	462e      	mov	r6, r5
 8016872:	9b07      	ldr	r3, [sp, #28]
 8016874:	4620      	mov	r0, r4
 8016876:	6859      	ldr	r1, [r3, #4]
 8016878:	f002 faf0 	bl	8018e5c <_Balloc>
 801687c:	4607      	mov	r7, r0
 801687e:	2800      	cmp	r0, #0
 8016880:	f43f af18 	beq.w	80166b4 <_strtod_l+0x47c>
 8016884:	9b07      	ldr	r3, [sp, #28]
 8016886:	691a      	ldr	r2, [r3, #16]
 8016888:	3202      	adds	r2, #2
 801688a:	f103 010c 	add.w	r1, r3, #12
 801688e:	0092      	lsls	r2, r2, #2
 8016890:	300c      	adds	r0, #12
 8016892:	f001 f923 	bl	8017adc <memcpy>
 8016896:	ec49 8b10 	vmov	d0, r8, r9
 801689a:	aa14      	add	r2, sp, #80	; 0x50
 801689c:	a913      	add	r1, sp, #76	; 0x4c
 801689e:	4620      	mov	r0, r4
 80168a0:	f002 feb8 	bl	8019614 <__d2b>
 80168a4:	ec49 8b18 	vmov	d8, r8, r9
 80168a8:	9012      	str	r0, [sp, #72]	; 0x48
 80168aa:	2800      	cmp	r0, #0
 80168ac:	f43f af02 	beq.w	80166b4 <_strtod_l+0x47c>
 80168b0:	2101      	movs	r1, #1
 80168b2:	4620      	mov	r0, r4
 80168b4:	f002 fc12 	bl	80190dc <__i2b>
 80168b8:	4606      	mov	r6, r0
 80168ba:	2800      	cmp	r0, #0
 80168bc:	f43f aefa 	beq.w	80166b4 <_strtod_l+0x47c>
 80168c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	bfab      	itete	ge
 80168c8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80168ca:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80168cc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80168d0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80168d4:	bfac      	ite	ge
 80168d6:	eb03 0b02 	addge.w	fp, r3, r2
 80168da:	eba2 0a03 	sublt.w	sl, r2, r3
 80168de:	9a05      	ldr	r2, [sp, #20]
 80168e0:	1a9b      	subs	r3, r3, r2
 80168e2:	440b      	add	r3, r1
 80168e4:	4a7b      	ldr	r2, [pc, #492]	; (8016ad4 <_strtod_l+0x89c>)
 80168e6:	3b01      	subs	r3, #1
 80168e8:	4293      	cmp	r3, r2
 80168ea:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80168ee:	f280 80cd 	bge.w	8016a8c <_strtod_l+0x854>
 80168f2:	1ad2      	subs	r2, r2, r3
 80168f4:	2a1f      	cmp	r2, #31
 80168f6:	eba1 0102 	sub.w	r1, r1, r2
 80168fa:	f04f 0001 	mov.w	r0, #1
 80168fe:	f300 80b9 	bgt.w	8016a74 <_strtod_l+0x83c>
 8016902:	fa00 f302 	lsl.w	r3, r0, r2
 8016906:	930b      	str	r3, [sp, #44]	; 0x2c
 8016908:	2300      	movs	r3, #0
 801690a:	930a      	str	r3, [sp, #40]	; 0x28
 801690c:	eb0b 0301 	add.w	r3, fp, r1
 8016910:	9a05      	ldr	r2, [sp, #20]
 8016912:	459b      	cmp	fp, r3
 8016914:	448a      	add	sl, r1
 8016916:	4492      	add	sl, r2
 8016918:	465a      	mov	r2, fp
 801691a:	bfa8      	it	ge
 801691c:	461a      	movge	r2, r3
 801691e:	4552      	cmp	r2, sl
 8016920:	bfa8      	it	ge
 8016922:	4652      	movge	r2, sl
 8016924:	2a00      	cmp	r2, #0
 8016926:	bfc2      	ittt	gt
 8016928:	1a9b      	subgt	r3, r3, r2
 801692a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801692e:	ebab 0b02 	subgt.w	fp, fp, r2
 8016932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016934:	2a00      	cmp	r2, #0
 8016936:	dd18      	ble.n	801696a <_strtod_l+0x732>
 8016938:	4631      	mov	r1, r6
 801693a:	4620      	mov	r0, r4
 801693c:	930f      	str	r3, [sp, #60]	; 0x3c
 801693e:	f002 fc8d 	bl	801925c <__pow5mult>
 8016942:	4606      	mov	r6, r0
 8016944:	2800      	cmp	r0, #0
 8016946:	f43f aeb5 	beq.w	80166b4 <_strtod_l+0x47c>
 801694a:	4601      	mov	r1, r0
 801694c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801694e:	4620      	mov	r0, r4
 8016950:	f002 fbda 	bl	8019108 <__multiply>
 8016954:	900e      	str	r0, [sp, #56]	; 0x38
 8016956:	2800      	cmp	r0, #0
 8016958:	f43f aeac 	beq.w	80166b4 <_strtod_l+0x47c>
 801695c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801695e:	4620      	mov	r0, r4
 8016960:	f002 fabc 	bl	8018edc <_Bfree>
 8016964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016968:	9212      	str	r2, [sp, #72]	; 0x48
 801696a:	2b00      	cmp	r3, #0
 801696c:	f300 8093 	bgt.w	8016a96 <_strtod_l+0x85e>
 8016970:	9b06      	ldr	r3, [sp, #24]
 8016972:	2b00      	cmp	r3, #0
 8016974:	dd08      	ble.n	8016988 <_strtod_l+0x750>
 8016976:	4639      	mov	r1, r7
 8016978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801697a:	4620      	mov	r0, r4
 801697c:	f002 fc6e 	bl	801925c <__pow5mult>
 8016980:	4607      	mov	r7, r0
 8016982:	2800      	cmp	r0, #0
 8016984:	f43f ae96 	beq.w	80166b4 <_strtod_l+0x47c>
 8016988:	f1ba 0f00 	cmp.w	sl, #0
 801698c:	dd08      	ble.n	80169a0 <_strtod_l+0x768>
 801698e:	4639      	mov	r1, r7
 8016990:	4652      	mov	r2, sl
 8016992:	4620      	mov	r0, r4
 8016994:	f002 fcbc 	bl	8019310 <__lshift>
 8016998:	4607      	mov	r7, r0
 801699a:	2800      	cmp	r0, #0
 801699c:	f43f ae8a 	beq.w	80166b4 <_strtod_l+0x47c>
 80169a0:	f1bb 0f00 	cmp.w	fp, #0
 80169a4:	dd08      	ble.n	80169b8 <_strtod_l+0x780>
 80169a6:	4631      	mov	r1, r6
 80169a8:	465a      	mov	r2, fp
 80169aa:	4620      	mov	r0, r4
 80169ac:	f002 fcb0 	bl	8019310 <__lshift>
 80169b0:	4606      	mov	r6, r0
 80169b2:	2800      	cmp	r0, #0
 80169b4:	f43f ae7e 	beq.w	80166b4 <_strtod_l+0x47c>
 80169b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80169ba:	463a      	mov	r2, r7
 80169bc:	4620      	mov	r0, r4
 80169be:	f002 fd2f 	bl	8019420 <__mdiff>
 80169c2:	4605      	mov	r5, r0
 80169c4:	2800      	cmp	r0, #0
 80169c6:	f43f ae75 	beq.w	80166b4 <_strtod_l+0x47c>
 80169ca:	2300      	movs	r3, #0
 80169cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80169d0:	60c3      	str	r3, [r0, #12]
 80169d2:	4631      	mov	r1, r6
 80169d4:	f002 fd08 	bl	80193e8 <__mcmp>
 80169d8:	2800      	cmp	r0, #0
 80169da:	da7f      	bge.n	8016adc <_strtod_l+0x8a4>
 80169dc:	ea5a 0a08 	orrs.w	sl, sl, r8
 80169e0:	f040 80a5 	bne.w	8016b2e <_strtod_l+0x8f6>
 80169e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	f040 80a0 	bne.w	8016b2e <_strtod_l+0x8f6>
 80169ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80169f2:	0d1b      	lsrs	r3, r3, #20
 80169f4:	051b      	lsls	r3, r3, #20
 80169f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80169fa:	f240 8098 	bls.w	8016b2e <_strtod_l+0x8f6>
 80169fe:	696b      	ldr	r3, [r5, #20]
 8016a00:	b91b      	cbnz	r3, 8016a0a <_strtod_l+0x7d2>
 8016a02:	692b      	ldr	r3, [r5, #16]
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	f340 8092 	ble.w	8016b2e <_strtod_l+0x8f6>
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	2201      	movs	r2, #1
 8016a0e:	4620      	mov	r0, r4
 8016a10:	f002 fc7e 	bl	8019310 <__lshift>
 8016a14:	4631      	mov	r1, r6
 8016a16:	4605      	mov	r5, r0
 8016a18:	f002 fce6 	bl	80193e8 <__mcmp>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	f340 8086 	ble.w	8016b2e <_strtod_l+0x8f6>
 8016a22:	9905      	ldr	r1, [sp, #20]
 8016a24:	4a2c      	ldr	r2, [pc, #176]	; (8016ad8 <_strtod_l+0x8a0>)
 8016a26:	464b      	mov	r3, r9
 8016a28:	2900      	cmp	r1, #0
 8016a2a:	f000 809f 	beq.w	8016b6c <_strtod_l+0x934>
 8016a2e:	ea02 0109 	and.w	r1, r2, r9
 8016a32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016a36:	f300 8099 	bgt.w	8016b6c <_strtod_l+0x934>
 8016a3a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016a3e:	f77f aea8 	ble.w	8016792 <_strtod_l+0x55a>
 8016a42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016ac8 <_strtod_l+0x890>
 8016a46:	ec49 8b16 	vmov	d6, r8, r9
 8016a4a:	4b23      	ldr	r3, [pc, #140]	; (8016ad8 <_strtod_l+0x8a0>)
 8016a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016a50:	ee17 2a90 	vmov	r2, s15
 8016a54:	4013      	ands	r3, r2
 8016a56:	ec59 8b17 	vmov	r8, r9, d7
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f47f ae34 	bne.w	80166c8 <_strtod_l+0x490>
 8016a60:	2322      	movs	r3, #34	; 0x22
 8016a62:	6023      	str	r3, [r4, #0]
 8016a64:	e630      	b.n	80166c8 <_strtod_l+0x490>
 8016a66:	f04f 31ff 	mov.w	r1, #4294967295
 8016a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8016a6e:	ea02 0808 	and.w	r8, r2, r8
 8016a72:	e6da      	b.n	801682a <_strtod_l+0x5f2>
 8016a74:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016a78:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016a7c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016a80:	33e2      	adds	r3, #226	; 0xe2
 8016a82:	fa00 f303 	lsl.w	r3, r0, r3
 8016a86:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8016a8a:	e73f      	b.n	801690c <_strtod_l+0x6d4>
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	2301      	movs	r3, #1
 8016a90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a94:	e73a      	b.n	801690c <_strtod_l+0x6d4>
 8016a96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016a98:	461a      	mov	r2, r3
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	f002 fc38 	bl	8019310 <__lshift>
 8016aa0:	9012      	str	r0, [sp, #72]	; 0x48
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	f47f af64 	bne.w	8016970 <_strtod_l+0x738>
 8016aa8:	e604      	b.n	80166b4 <_strtod_l+0x47c>
 8016aaa:	bf00      	nop
 8016aac:	f3af 8000 	nop.w
 8016ab0:	94a03595 	.word	0x94a03595
 8016ab4:	3fcfffff 	.word	0x3fcfffff
 8016ab8:	94a03595 	.word	0x94a03595
 8016abc:	3fdfffff 	.word	0x3fdfffff
 8016ac0:	35afe535 	.word	0x35afe535
 8016ac4:	3fe00000 	.word	0x3fe00000
 8016ac8:	00000000 	.word	0x00000000
 8016acc:	39500000 	.word	0x39500000
 8016ad0:	0801b5c0 	.word	0x0801b5c0
 8016ad4:	fffffc02 	.word	0xfffffc02
 8016ad8:	7ff00000 	.word	0x7ff00000
 8016adc:	46cb      	mov	fp, r9
 8016ade:	d15f      	bne.n	8016ba0 <_strtod_l+0x968>
 8016ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ae4:	f1ba 0f00 	cmp.w	sl, #0
 8016ae8:	d02a      	beq.n	8016b40 <_strtod_l+0x908>
 8016aea:	4aa7      	ldr	r2, [pc, #668]	; (8016d88 <_strtod_l+0xb50>)
 8016aec:	4293      	cmp	r3, r2
 8016aee:	d12b      	bne.n	8016b48 <_strtod_l+0x910>
 8016af0:	9b05      	ldr	r3, [sp, #20]
 8016af2:	4642      	mov	r2, r8
 8016af4:	b1fb      	cbz	r3, 8016b36 <_strtod_l+0x8fe>
 8016af6:	4ba5      	ldr	r3, [pc, #660]	; (8016d8c <_strtod_l+0xb54>)
 8016af8:	ea09 0303 	and.w	r3, r9, r3
 8016afc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016b00:	f04f 31ff 	mov.w	r1, #4294967295
 8016b04:	d81a      	bhi.n	8016b3c <_strtod_l+0x904>
 8016b06:	0d1b      	lsrs	r3, r3, #20
 8016b08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8016b10:	429a      	cmp	r2, r3
 8016b12:	d119      	bne.n	8016b48 <_strtod_l+0x910>
 8016b14:	4b9e      	ldr	r3, [pc, #632]	; (8016d90 <_strtod_l+0xb58>)
 8016b16:	459b      	cmp	fp, r3
 8016b18:	d102      	bne.n	8016b20 <_strtod_l+0x8e8>
 8016b1a:	3201      	adds	r2, #1
 8016b1c:	f43f adca 	beq.w	80166b4 <_strtod_l+0x47c>
 8016b20:	4b9a      	ldr	r3, [pc, #616]	; (8016d8c <_strtod_l+0xb54>)
 8016b22:	ea0b 0303 	and.w	r3, fp, r3
 8016b26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016b2a:	f04f 0800 	mov.w	r8, #0
 8016b2e:	9b05      	ldr	r3, [sp, #20]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d186      	bne.n	8016a42 <_strtod_l+0x80a>
 8016b34:	e5c8      	b.n	80166c8 <_strtod_l+0x490>
 8016b36:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3a:	e7e9      	b.n	8016b10 <_strtod_l+0x8d8>
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	e7e7      	b.n	8016b10 <_strtod_l+0x8d8>
 8016b40:	ea53 0308 	orrs.w	r3, r3, r8
 8016b44:	f43f af6d 	beq.w	8016a22 <_strtod_l+0x7ea>
 8016b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b4a:	b1cb      	cbz	r3, 8016b80 <_strtod_l+0x948>
 8016b4c:	ea13 0f0b 	tst.w	r3, fp
 8016b50:	d0ed      	beq.n	8016b2e <_strtod_l+0x8f6>
 8016b52:	9a05      	ldr	r2, [sp, #20]
 8016b54:	4640      	mov	r0, r8
 8016b56:	4649      	mov	r1, r9
 8016b58:	f1ba 0f00 	cmp.w	sl, #0
 8016b5c:	d014      	beq.n	8016b88 <_strtod_l+0x950>
 8016b5e:	f7ff fb51 	bl	8016204 <sulp>
 8016b62:	ee38 7b00 	vadd.f64	d7, d8, d0
 8016b66:	ec59 8b17 	vmov	r8, r9, d7
 8016b6a:	e7e0      	b.n	8016b2e <_strtod_l+0x8f6>
 8016b6c:	4013      	ands	r3, r2
 8016b6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016b76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016b7a:	f04f 38ff 	mov.w	r8, #4294967295
 8016b7e:	e7d6      	b.n	8016b2e <_strtod_l+0x8f6>
 8016b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b82:	ea13 0f08 	tst.w	r3, r8
 8016b86:	e7e3      	b.n	8016b50 <_strtod_l+0x918>
 8016b88:	f7ff fb3c 	bl	8016204 <sulp>
 8016b8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016b90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b98:	ec59 8b10 	vmov	r8, r9, d0
 8016b9c:	d1c7      	bne.n	8016b2e <_strtod_l+0x8f6>
 8016b9e:	e5f8      	b.n	8016792 <_strtod_l+0x55a>
 8016ba0:	4631      	mov	r1, r6
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	f002 fd90 	bl	80196c8 <__ratio>
 8016ba8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016bac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb4:	d85f      	bhi.n	8016c76 <_strtod_l+0xa3e>
 8016bb6:	f1ba 0f00 	cmp.w	sl, #0
 8016bba:	d166      	bne.n	8016c8a <_strtod_l+0xa52>
 8016bbc:	f1b8 0f00 	cmp.w	r8, #0
 8016bc0:	d14d      	bne.n	8016c5e <_strtod_l+0xa26>
 8016bc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016bc6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d162      	bne.n	8016c94 <_strtod_l+0xa5c>
 8016bce:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8016bd2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bda:	d401      	bmi.n	8016be0 <_strtod_l+0x9a8>
 8016bdc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016be0:	eeb1 cb4d 	vneg.f64	d12, d13
 8016be4:	4869      	ldr	r0, [pc, #420]	; (8016d8c <_strtod_l+0xb54>)
 8016be6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8016d98 <_strtod_l+0xb60>
 8016bea:	ea0b 0100 	and.w	r1, fp, r0
 8016bee:	4561      	cmp	r1, ip
 8016bf0:	ec53 2b1c 	vmov	r2, r3, d12
 8016bf4:	d17a      	bne.n	8016cec <_strtod_l+0xab4>
 8016bf6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8016bfa:	ec49 8b10 	vmov	d0, r8, r9
 8016bfe:	910a      	str	r1, [sp, #40]	; 0x28
 8016c00:	f002 fc98 	bl	8019534 <__ulp>
 8016c04:	ec49 8b1e 	vmov	d14, r8, r9
 8016c08:	4860      	ldr	r0, [pc, #384]	; (8016d8c <_strtod_l+0xb54>)
 8016c0a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8016c0e:	ee1e 3a90 	vmov	r3, s29
 8016c12:	4a60      	ldr	r2, [pc, #384]	; (8016d94 <_strtod_l+0xb5c>)
 8016c14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c16:	4018      	ands	r0, r3
 8016c18:	4290      	cmp	r0, r2
 8016c1a:	ec59 8b1e 	vmov	r8, r9, d14
 8016c1e:	d93c      	bls.n	8016c9a <_strtod_l+0xa62>
 8016c20:	ee18 2a90 	vmov	r2, s17
 8016c24:	4b5a      	ldr	r3, [pc, #360]	; (8016d90 <_strtod_l+0xb58>)
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d104      	bne.n	8016c34 <_strtod_l+0x9fc>
 8016c2a:	ee18 3a10 	vmov	r3, s16
 8016c2e:	3301      	adds	r3, #1
 8016c30:	f43f ad40 	beq.w	80166b4 <_strtod_l+0x47c>
 8016c34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8016d90 <_strtod_l+0xb58>
 8016c38:	f04f 38ff 	mov.w	r8, #4294967295
 8016c3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f002 f94c 	bl	8018edc <_Bfree>
 8016c44:	4639      	mov	r1, r7
 8016c46:	4620      	mov	r0, r4
 8016c48:	f002 f948 	bl	8018edc <_Bfree>
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	4620      	mov	r0, r4
 8016c50:	f002 f944 	bl	8018edc <_Bfree>
 8016c54:	4629      	mov	r1, r5
 8016c56:	4620      	mov	r0, r4
 8016c58:	f002 f940 	bl	8018edc <_Bfree>
 8016c5c:	e609      	b.n	8016872 <_strtod_l+0x63a>
 8016c5e:	f1b8 0f01 	cmp.w	r8, #1
 8016c62:	d103      	bne.n	8016c6c <_strtod_l+0xa34>
 8016c64:	f1b9 0f00 	cmp.w	r9, #0
 8016c68:	f43f ad93 	beq.w	8016792 <_strtod_l+0x55a>
 8016c6c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016c70:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016c74:	e7b6      	b.n	8016be4 <_strtod_l+0x9ac>
 8016c76:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016c7a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016c7e:	f1ba 0f00 	cmp.w	sl, #0
 8016c82:	d0ad      	beq.n	8016be0 <_strtod_l+0x9a8>
 8016c84:	eeb0 cb4d 	vmov.f64	d12, d13
 8016c88:	e7ac      	b.n	8016be4 <_strtod_l+0x9ac>
 8016c8a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8016c8e:	eeb0 db4c 	vmov.f64	d13, d12
 8016c92:	e7a7      	b.n	8016be4 <_strtod_l+0x9ac>
 8016c94:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016c98:	e7a4      	b.n	8016be4 <_strtod_l+0x9ac>
 8016c9a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016c9e:	9b05      	ldr	r3, [sp, #20]
 8016ca0:	46cb      	mov	fp, r9
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d1ca      	bne.n	8016c3c <_strtod_l+0xa04>
 8016ca6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016caa:	0d1b      	lsrs	r3, r3, #20
 8016cac:	051b      	lsls	r3, r3, #20
 8016cae:	4299      	cmp	r1, r3
 8016cb0:	d1c4      	bne.n	8016c3c <_strtod_l+0xa04>
 8016cb2:	ec51 0b1d 	vmov	r0, r1, d13
 8016cb6:	f7e9 fd4f 	bl	8000758 <__aeabi_d2lz>
 8016cba:	f7e9 fd07 	bl	80006cc <__aeabi_l2d>
 8016cbe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8016cc2:	ec41 0b17 	vmov	d7, r0, r1
 8016cc6:	ea4b 0b08 	orr.w	fp, fp, r8
 8016cca:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8016cce:	ee3d db47 	vsub.f64	d13, d13, d7
 8016cd2:	d03c      	beq.n	8016d4e <_strtod_l+0xb16>
 8016cd4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8016cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cdc:	f53f acf4 	bmi.w	80166c8 <_strtod_l+0x490>
 8016ce0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8016ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce8:	dda8      	ble.n	8016c3c <_strtod_l+0xa04>
 8016cea:	e4ed      	b.n	80166c8 <_strtod_l+0x490>
 8016cec:	9805      	ldr	r0, [sp, #20]
 8016cee:	b1f0      	cbz	r0, 8016d2e <_strtod_l+0xaf6>
 8016cf0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8016cf4:	d81b      	bhi.n	8016d2e <_strtod_l+0xaf6>
 8016cf6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016d80 <_strtod_l+0xb48>
 8016cfa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8016cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d02:	d811      	bhi.n	8016d28 <_strtod_l+0xaf0>
 8016d04:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8016d08:	ee1d 3a10 	vmov	r3, s26
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	bf38      	it	cc
 8016d10:	2301      	movcc	r3, #1
 8016d12:	ee0d 3a10 	vmov	s26, r3
 8016d16:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8016d1a:	f1ba 0f00 	cmp.w	sl, #0
 8016d1e:	d113      	bne.n	8016d48 <_strtod_l+0xb10>
 8016d20:	eeb1 7b4d 	vneg.f64	d7, d13
 8016d24:	ec53 2b17 	vmov	r2, r3, d7
 8016d28:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8016d2c:	1a43      	subs	r3, r0, r1
 8016d2e:	eeb0 0b48 	vmov.f64	d0, d8
 8016d32:	ec43 2b1c 	vmov	d12, r2, r3
 8016d36:	910a      	str	r1, [sp, #40]	; 0x28
 8016d38:	f002 fbfc 	bl	8019534 <__ulp>
 8016d3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d3e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8016d42:	ec59 8b18 	vmov	r8, r9, d8
 8016d46:	e7aa      	b.n	8016c9e <_strtod_l+0xa66>
 8016d48:	eeb0 7b4d 	vmov.f64	d7, d13
 8016d4c:	e7ea      	b.n	8016d24 <_strtod_l+0xaec>
 8016d4e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8016d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d56:	f57f af71 	bpl.w	8016c3c <_strtod_l+0xa04>
 8016d5a:	e4b5      	b.n	80166c8 <_strtod_l+0x490>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	9308      	str	r3, [sp, #32]
 8016d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d64:	6013      	str	r3, [r2, #0]
 8016d66:	f7ff baa6 	b.w	80162b6 <_strtod_l+0x7e>
 8016d6a:	2a65      	cmp	r2, #101	; 0x65
 8016d6c:	f43f aba2 	beq.w	80164b4 <_strtod_l+0x27c>
 8016d70:	2a45      	cmp	r2, #69	; 0x45
 8016d72:	f43f ab9f 	beq.w	80164b4 <_strtod_l+0x27c>
 8016d76:	2101      	movs	r1, #1
 8016d78:	f7ff bbd8 	b.w	801652c <_strtod_l+0x2f4>
 8016d7c:	f3af 8000 	nop.w
 8016d80:	ffc00000 	.word	0xffc00000
 8016d84:	41dfffff 	.word	0x41dfffff
 8016d88:	000fffff 	.word	0x000fffff
 8016d8c:	7ff00000 	.word	0x7ff00000
 8016d90:	7fefffff 	.word	0x7fefffff
 8016d94:	7c9fffff 	.word	0x7c9fffff
 8016d98:	7fe00000 	.word	0x7fe00000

08016d9c <strtod>:
 8016d9c:	460a      	mov	r2, r1
 8016d9e:	4601      	mov	r1, r0
 8016da0:	4802      	ldr	r0, [pc, #8]	; (8016dac <strtod+0x10>)
 8016da2:	4b03      	ldr	r3, [pc, #12]	; (8016db0 <strtod+0x14>)
 8016da4:	6800      	ldr	r0, [r0, #0]
 8016da6:	f7ff ba47 	b.w	8016238 <_strtod_l>
 8016daa:	bf00      	nop
 8016dac:	240003c4 	.word	0x240003c4
 8016db0:	2400020c 	.word	0x2400020c

08016db4 <_strtol_l.constprop.0>:
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dba:	d001      	beq.n	8016dc0 <_strtol_l.constprop.0+0xc>
 8016dbc:	2b24      	cmp	r3, #36	; 0x24
 8016dbe:	d906      	bls.n	8016dce <_strtol_l.constprop.0+0x1a>
 8016dc0:	f000 fe5a 	bl	8017a78 <__errno>
 8016dc4:	2316      	movs	r3, #22
 8016dc6:	6003      	str	r3, [r0, #0]
 8016dc8:	2000      	movs	r0, #0
 8016dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016eb4 <_strtol_l.constprop.0+0x100>
 8016dd2:	460d      	mov	r5, r1
 8016dd4:	462e      	mov	r6, r5
 8016dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016dda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016dde:	f017 0708 	ands.w	r7, r7, #8
 8016de2:	d1f7      	bne.n	8016dd4 <_strtol_l.constprop.0+0x20>
 8016de4:	2c2d      	cmp	r4, #45	; 0x2d
 8016de6:	d132      	bne.n	8016e4e <_strtol_l.constprop.0+0x9a>
 8016de8:	782c      	ldrb	r4, [r5, #0]
 8016dea:	2701      	movs	r7, #1
 8016dec:	1cb5      	adds	r5, r6, #2
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d05b      	beq.n	8016eaa <_strtol_l.constprop.0+0xf6>
 8016df2:	2b10      	cmp	r3, #16
 8016df4:	d109      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016df6:	2c30      	cmp	r4, #48	; 0x30
 8016df8:	d107      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016dfa:	782c      	ldrb	r4, [r5, #0]
 8016dfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016e00:	2c58      	cmp	r4, #88	; 0x58
 8016e02:	d14d      	bne.n	8016ea0 <_strtol_l.constprop.0+0xec>
 8016e04:	786c      	ldrb	r4, [r5, #1]
 8016e06:	2310      	movs	r3, #16
 8016e08:	3502      	adds	r5, #2
 8016e0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016e0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e12:	f04f 0e00 	mov.w	lr, #0
 8016e16:	fbb8 f9f3 	udiv	r9, r8, r3
 8016e1a:	4676      	mov	r6, lr
 8016e1c:	fb03 8a19 	mls	sl, r3, r9, r8
 8016e20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016e24:	f1bc 0f09 	cmp.w	ip, #9
 8016e28:	d816      	bhi.n	8016e58 <_strtol_l.constprop.0+0xa4>
 8016e2a:	4664      	mov	r4, ip
 8016e2c:	42a3      	cmp	r3, r4
 8016e2e:	dd24      	ble.n	8016e7a <_strtol_l.constprop.0+0xc6>
 8016e30:	f1be 3fff 	cmp.w	lr, #4294967295
 8016e34:	d008      	beq.n	8016e48 <_strtol_l.constprop.0+0x94>
 8016e36:	45b1      	cmp	r9, r6
 8016e38:	d31c      	bcc.n	8016e74 <_strtol_l.constprop.0+0xc0>
 8016e3a:	d101      	bne.n	8016e40 <_strtol_l.constprop.0+0x8c>
 8016e3c:	45a2      	cmp	sl, r4
 8016e3e:	db19      	blt.n	8016e74 <_strtol_l.constprop.0+0xc0>
 8016e40:	fb06 4603 	mla	r6, r6, r3, r4
 8016e44:	f04f 0e01 	mov.w	lr, #1
 8016e48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e4c:	e7e8      	b.n	8016e20 <_strtol_l.constprop.0+0x6c>
 8016e4e:	2c2b      	cmp	r4, #43	; 0x2b
 8016e50:	bf04      	itt	eq
 8016e52:	782c      	ldrbeq	r4, [r5, #0]
 8016e54:	1cb5      	addeq	r5, r6, #2
 8016e56:	e7ca      	b.n	8016dee <_strtol_l.constprop.0+0x3a>
 8016e58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016e5c:	f1bc 0f19 	cmp.w	ip, #25
 8016e60:	d801      	bhi.n	8016e66 <_strtol_l.constprop.0+0xb2>
 8016e62:	3c37      	subs	r4, #55	; 0x37
 8016e64:	e7e2      	b.n	8016e2c <_strtol_l.constprop.0+0x78>
 8016e66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016e6a:	f1bc 0f19 	cmp.w	ip, #25
 8016e6e:	d804      	bhi.n	8016e7a <_strtol_l.constprop.0+0xc6>
 8016e70:	3c57      	subs	r4, #87	; 0x57
 8016e72:	e7db      	b.n	8016e2c <_strtol_l.constprop.0+0x78>
 8016e74:	f04f 3eff 	mov.w	lr, #4294967295
 8016e78:	e7e6      	b.n	8016e48 <_strtol_l.constprop.0+0x94>
 8016e7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8016e7e:	d105      	bne.n	8016e8c <_strtol_l.constprop.0+0xd8>
 8016e80:	2322      	movs	r3, #34	; 0x22
 8016e82:	6003      	str	r3, [r0, #0]
 8016e84:	4646      	mov	r6, r8
 8016e86:	b942      	cbnz	r2, 8016e9a <_strtol_l.constprop.0+0xe6>
 8016e88:	4630      	mov	r0, r6
 8016e8a:	e79e      	b.n	8016dca <_strtol_l.constprop.0+0x16>
 8016e8c:	b107      	cbz	r7, 8016e90 <_strtol_l.constprop.0+0xdc>
 8016e8e:	4276      	negs	r6, r6
 8016e90:	2a00      	cmp	r2, #0
 8016e92:	d0f9      	beq.n	8016e88 <_strtol_l.constprop.0+0xd4>
 8016e94:	f1be 0f00 	cmp.w	lr, #0
 8016e98:	d000      	beq.n	8016e9c <_strtol_l.constprop.0+0xe8>
 8016e9a:	1e69      	subs	r1, r5, #1
 8016e9c:	6011      	str	r1, [r2, #0]
 8016e9e:	e7f3      	b.n	8016e88 <_strtol_l.constprop.0+0xd4>
 8016ea0:	2430      	movs	r4, #48	; 0x30
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d1b1      	bne.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016ea6:	2308      	movs	r3, #8
 8016ea8:	e7af      	b.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016eaa:	2c30      	cmp	r4, #48	; 0x30
 8016eac:	d0a5      	beq.n	8016dfa <_strtol_l.constprop.0+0x46>
 8016eae:	230a      	movs	r3, #10
 8016eb0:	e7ab      	b.n	8016e0a <_strtol_l.constprop.0+0x56>
 8016eb2:	bf00      	nop
 8016eb4:	0801b5e9 	.word	0x0801b5e9

08016eb8 <strtol>:
 8016eb8:	4613      	mov	r3, r2
 8016eba:	460a      	mov	r2, r1
 8016ebc:	4601      	mov	r1, r0
 8016ebe:	4802      	ldr	r0, [pc, #8]	; (8016ec8 <strtol+0x10>)
 8016ec0:	6800      	ldr	r0, [r0, #0]
 8016ec2:	f7ff bf77 	b.w	8016db4 <_strtol_l.constprop.0>
 8016ec6:	bf00      	nop
 8016ec8:	240003c4 	.word	0x240003c4

08016ecc <__cvt>:
 8016ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ece:	ed2d 8b02 	vpush	{d8}
 8016ed2:	eeb0 8b40 	vmov.f64	d8, d0
 8016ed6:	b085      	sub	sp, #20
 8016ed8:	4617      	mov	r7, r2
 8016eda:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016edc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016ede:	ee18 2a90 	vmov	r2, s17
 8016ee2:	f025 0520 	bic.w	r5, r5, #32
 8016ee6:	2a00      	cmp	r2, #0
 8016ee8:	bfb6      	itet	lt
 8016eea:	222d      	movlt	r2, #45	; 0x2d
 8016eec:	2200      	movge	r2, #0
 8016eee:	eeb1 8b40 	vneglt.f64	d8, d0
 8016ef2:	2d46      	cmp	r5, #70	; 0x46
 8016ef4:	460c      	mov	r4, r1
 8016ef6:	701a      	strb	r2, [r3, #0]
 8016ef8:	d004      	beq.n	8016f04 <__cvt+0x38>
 8016efa:	2d45      	cmp	r5, #69	; 0x45
 8016efc:	d100      	bne.n	8016f00 <__cvt+0x34>
 8016efe:	3401      	adds	r4, #1
 8016f00:	2102      	movs	r1, #2
 8016f02:	e000      	b.n	8016f06 <__cvt+0x3a>
 8016f04:	2103      	movs	r1, #3
 8016f06:	ab03      	add	r3, sp, #12
 8016f08:	9301      	str	r3, [sp, #4]
 8016f0a:	ab02      	add	r3, sp, #8
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	4622      	mov	r2, r4
 8016f10:	4633      	mov	r3, r6
 8016f12:	eeb0 0b48 	vmov.f64	d0, d8
 8016f16:	f000 fe7f 	bl	8017c18 <_dtoa_r>
 8016f1a:	2d47      	cmp	r5, #71	; 0x47
 8016f1c:	d101      	bne.n	8016f22 <__cvt+0x56>
 8016f1e:	07fb      	lsls	r3, r7, #31
 8016f20:	d51a      	bpl.n	8016f58 <__cvt+0x8c>
 8016f22:	2d46      	cmp	r5, #70	; 0x46
 8016f24:	eb00 0204 	add.w	r2, r0, r4
 8016f28:	d10c      	bne.n	8016f44 <__cvt+0x78>
 8016f2a:	7803      	ldrb	r3, [r0, #0]
 8016f2c:	2b30      	cmp	r3, #48	; 0x30
 8016f2e:	d107      	bne.n	8016f40 <__cvt+0x74>
 8016f30:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f38:	bf1c      	itt	ne
 8016f3a:	f1c4 0401 	rsbne	r4, r4, #1
 8016f3e:	6034      	strne	r4, [r6, #0]
 8016f40:	6833      	ldr	r3, [r6, #0]
 8016f42:	441a      	add	r2, r3
 8016f44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f4c:	bf08      	it	eq
 8016f4e:	9203      	streq	r2, [sp, #12]
 8016f50:	2130      	movs	r1, #48	; 0x30
 8016f52:	9b03      	ldr	r3, [sp, #12]
 8016f54:	4293      	cmp	r3, r2
 8016f56:	d307      	bcc.n	8016f68 <__cvt+0x9c>
 8016f58:	9b03      	ldr	r3, [sp, #12]
 8016f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016f5c:	1a1b      	subs	r3, r3, r0
 8016f5e:	6013      	str	r3, [r2, #0]
 8016f60:	b005      	add	sp, #20
 8016f62:	ecbd 8b02 	vpop	{d8}
 8016f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f68:	1c5c      	adds	r4, r3, #1
 8016f6a:	9403      	str	r4, [sp, #12]
 8016f6c:	7019      	strb	r1, [r3, #0]
 8016f6e:	e7f0      	b.n	8016f52 <__cvt+0x86>

08016f70 <__exponent>:
 8016f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f72:	4603      	mov	r3, r0
 8016f74:	2900      	cmp	r1, #0
 8016f76:	bfb8      	it	lt
 8016f78:	4249      	neglt	r1, r1
 8016f7a:	f803 2b02 	strb.w	r2, [r3], #2
 8016f7e:	bfb4      	ite	lt
 8016f80:	222d      	movlt	r2, #45	; 0x2d
 8016f82:	222b      	movge	r2, #43	; 0x2b
 8016f84:	2909      	cmp	r1, #9
 8016f86:	7042      	strb	r2, [r0, #1]
 8016f88:	dd2a      	ble.n	8016fe0 <__exponent+0x70>
 8016f8a:	f10d 0207 	add.w	r2, sp, #7
 8016f8e:	4617      	mov	r7, r2
 8016f90:	260a      	movs	r6, #10
 8016f92:	4694      	mov	ip, r2
 8016f94:	fb91 f5f6 	sdiv	r5, r1, r6
 8016f98:	fb06 1415 	mls	r4, r6, r5, r1
 8016f9c:	3430      	adds	r4, #48	; 0x30
 8016f9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016fa2:	460c      	mov	r4, r1
 8016fa4:	2c63      	cmp	r4, #99	; 0x63
 8016fa6:	f102 32ff 	add.w	r2, r2, #4294967295
 8016faa:	4629      	mov	r1, r5
 8016fac:	dcf1      	bgt.n	8016f92 <__exponent+0x22>
 8016fae:	3130      	adds	r1, #48	; 0x30
 8016fb0:	f1ac 0402 	sub.w	r4, ip, #2
 8016fb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016fb8:	1c41      	adds	r1, r0, #1
 8016fba:	4622      	mov	r2, r4
 8016fbc:	42ba      	cmp	r2, r7
 8016fbe:	d30a      	bcc.n	8016fd6 <__exponent+0x66>
 8016fc0:	f10d 0209 	add.w	r2, sp, #9
 8016fc4:	eba2 020c 	sub.w	r2, r2, ip
 8016fc8:	42bc      	cmp	r4, r7
 8016fca:	bf88      	it	hi
 8016fcc:	2200      	movhi	r2, #0
 8016fce:	4413      	add	r3, r2
 8016fd0:	1a18      	subs	r0, r3, r0
 8016fd2:	b003      	add	sp, #12
 8016fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fd6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016fda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016fde:	e7ed      	b.n	8016fbc <__exponent+0x4c>
 8016fe0:	2330      	movs	r3, #48	; 0x30
 8016fe2:	3130      	adds	r1, #48	; 0x30
 8016fe4:	7083      	strb	r3, [r0, #2]
 8016fe6:	70c1      	strb	r1, [r0, #3]
 8016fe8:	1d03      	adds	r3, r0, #4
 8016fea:	e7f1      	b.n	8016fd0 <__exponent+0x60>
 8016fec:	0000      	movs	r0, r0
	...

08016ff0 <_printf_float>:
 8016ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff4:	b08b      	sub	sp, #44	; 0x2c
 8016ff6:	460c      	mov	r4, r1
 8016ff8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016ffc:	4616      	mov	r6, r2
 8016ffe:	461f      	mov	r7, r3
 8017000:	4605      	mov	r5, r0
 8017002:	f000 fcdf 	bl	80179c4 <_localeconv_r>
 8017006:	f8d0 b000 	ldr.w	fp, [r0]
 801700a:	4658      	mov	r0, fp
 801700c:	f7e9 f9c8 	bl	80003a0 <strlen>
 8017010:	2300      	movs	r3, #0
 8017012:	9308      	str	r3, [sp, #32]
 8017014:	f8d8 3000 	ldr.w	r3, [r8]
 8017018:	f894 9018 	ldrb.w	r9, [r4, #24]
 801701c:	6822      	ldr	r2, [r4, #0]
 801701e:	3307      	adds	r3, #7
 8017020:	f023 0307 	bic.w	r3, r3, #7
 8017024:	f103 0108 	add.w	r1, r3, #8
 8017028:	f8c8 1000 	str.w	r1, [r8]
 801702c:	ed93 0b00 	vldr	d0, [r3]
 8017030:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017290 <_printf_float+0x2a0>
 8017034:	eeb0 7bc0 	vabs.f64	d7, d0
 8017038:	eeb4 7b46 	vcmp.f64	d7, d6
 801703c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017040:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8017044:	4682      	mov	sl, r0
 8017046:	dd24      	ble.n	8017092 <_printf_float+0xa2>
 8017048:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801704c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017050:	d502      	bpl.n	8017058 <_printf_float+0x68>
 8017052:	232d      	movs	r3, #45	; 0x2d
 8017054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017058:	498f      	ldr	r1, [pc, #572]	; (8017298 <_printf_float+0x2a8>)
 801705a:	4b90      	ldr	r3, [pc, #576]	; (801729c <_printf_float+0x2ac>)
 801705c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017060:	bf94      	ite	ls
 8017062:	4688      	movls	r8, r1
 8017064:	4698      	movhi	r8, r3
 8017066:	2303      	movs	r3, #3
 8017068:	6123      	str	r3, [r4, #16]
 801706a:	f022 0204 	bic.w	r2, r2, #4
 801706e:	2300      	movs	r3, #0
 8017070:	6022      	str	r2, [r4, #0]
 8017072:	9304      	str	r3, [sp, #16]
 8017074:	9700      	str	r7, [sp, #0]
 8017076:	4633      	mov	r3, r6
 8017078:	aa09      	add	r2, sp, #36	; 0x24
 801707a:	4621      	mov	r1, r4
 801707c:	4628      	mov	r0, r5
 801707e:	f000 f9d1 	bl	8017424 <_printf_common>
 8017082:	3001      	adds	r0, #1
 8017084:	f040 808a 	bne.w	801719c <_printf_float+0x1ac>
 8017088:	f04f 30ff 	mov.w	r0, #4294967295
 801708c:	b00b      	add	sp, #44	; 0x2c
 801708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017092:	eeb4 0b40 	vcmp.f64	d0, d0
 8017096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709a:	d709      	bvc.n	80170b0 <_printf_float+0xc0>
 801709c:	ee10 3a90 	vmov	r3, s1
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	bfbc      	itt	lt
 80170a4:	232d      	movlt	r3, #45	; 0x2d
 80170a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80170aa:	497d      	ldr	r1, [pc, #500]	; (80172a0 <_printf_float+0x2b0>)
 80170ac:	4b7d      	ldr	r3, [pc, #500]	; (80172a4 <_printf_float+0x2b4>)
 80170ae:	e7d5      	b.n	801705c <_printf_float+0x6c>
 80170b0:	6863      	ldr	r3, [r4, #4]
 80170b2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80170b6:	9104      	str	r1, [sp, #16]
 80170b8:	1c59      	adds	r1, r3, #1
 80170ba:	d13c      	bne.n	8017136 <_printf_float+0x146>
 80170bc:	2306      	movs	r3, #6
 80170be:	6063      	str	r3, [r4, #4]
 80170c0:	2300      	movs	r3, #0
 80170c2:	9303      	str	r3, [sp, #12]
 80170c4:	ab08      	add	r3, sp, #32
 80170c6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80170ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80170ce:	ab07      	add	r3, sp, #28
 80170d0:	6861      	ldr	r1, [r4, #4]
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	6022      	str	r2, [r4, #0]
 80170d6:	f10d 031b 	add.w	r3, sp, #27
 80170da:	4628      	mov	r0, r5
 80170dc:	f7ff fef6 	bl	8016ecc <__cvt>
 80170e0:	9b04      	ldr	r3, [sp, #16]
 80170e2:	9907      	ldr	r1, [sp, #28]
 80170e4:	2b47      	cmp	r3, #71	; 0x47
 80170e6:	4680      	mov	r8, r0
 80170e8:	d108      	bne.n	80170fc <_printf_float+0x10c>
 80170ea:	1cc8      	adds	r0, r1, #3
 80170ec:	db02      	blt.n	80170f4 <_printf_float+0x104>
 80170ee:	6863      	ldr	r3, [r4, #4]
 80170f0:	4299      	cmp	r1, r3
 80170f2:	dd41      	ble.n	8017178 <_printf_float+0x188>
 80170f4:	f1a9 0902 	sub.w	r9, r9, #2
 80170f8:	fa5f f989 	uxtb.w	r9, r9
 80170fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017100:	d820      	bhi.n	8017144 <_printf_float+0x154>
 8017102:	3901      	subs	r1, #1
 8017104:	464a      	mov	r2, r9
 8017106:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801710a:	9107      	str	r1, [sp, #28]
 801710c:	f7ff ff30 	bl	8016f70 <__exponent>
 8017110:	9a08      	ldr	r2, [sp, #32]
 8017112:	9004      	str	r0, [sp, #16]
 8017114:	1813      	adds	r3, r2, r0
 8017116:	2a01      	cmp	r2, #1
 8017118:	6123      	str	r3, [r4, #16]
 801711a:	dc02      	bgt.n	8017122 <_printf_float+0x132>
 801711c:	6822      	ldr	r2, [r4, #0]
 801711e:	07d2      	lsls	r2, r2, #31
 8017120:	d501      	bpl.n	8017126 <_printf_float+0x136>
 8017122:	3301      	adds	r3, #1
 8017124:	6123      	str	r3, [r4, #16]
 8017126:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d0a2      	beq.n	8017074 <_printf_float+0x84>
 801712e:	232d      	movs	r3, #45	; 0x2d
 8017130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017134:	e79e      	b.n	8017074 <_printf_float+0x84>
 8017136:	9904      	ldr	r1, [sp, #16]
 8017138:	2947      	cmp	r1, #71	; 0x47
 801713a:	d1c1      	bne.n	80170c0 <_printf_float+0xd0>
 801713c:	2b00      	cmp	r3, #0
 801713e:	d1bf      	bne.n	80170c0 <_printf_float+0xd0>
 8017140:	2301      	movs	r3, #1
 8017142:	e7bc      	b.n	80170be <_printf_float+0xce>
 8017144:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017148:	d118      	bne.n	801717c <_printf_float+0x18c>
 801714a:	2900      	cmp	r1, #0
 801714c:	6863      	ldr	r3, [r4, #4]
 801714e:	dd0b      	ble.n	8017168 <_printf_float+0x178>
 8017150:	6121      	str	r1, [r4, #16]
 8017152:	b913      	cbnz	r3, 801715a <_printf_float+0x16a>
 8017154:	6822      	ldr	r2, [r4, #0]
 8017156:	07d0      	lsls	r0, r2, #31
 8017158:	d502      	bpl.n	8017160 <_printf_float+0x170>
 801715a:	3301      	adds	r3, #1
 801715c:	440b      	add	r3, r1
 801715e:	6123      	str	r3, [r4, #16]
 8017160:	2300      	movs	r3, #0
 8017162:	65a1      	str	r1, [r4, #88]	; 0x58
 8017164:	9304      	str	r3, [sp, #16]
 8017166:	e7de      	b.n	8017126 <_printf_float+0x136>
 8017168:	b913      	cbnz	r3, 8017170 <_printf_float+0x180>
 801716a:	6822      	ldr	r2, [r4, #0]
 801716c:	07d2      	lsls	r2, r2, #31
 801716e:	d501      	bpl.n	8017174 <_printf_float+0x184>
 8017170:	3302      	adds	r3, #2
 8017172:	e7f4      	b.n	801715e <_printf_float+0x16e>
 8017174:	2301      	movs	r3, #1
 8017176:	e7f2      	b.n	801715e <_printf_float+0x16e>
 8017178:	f04f 0967 	mov.w	r9, #103	; 0x67
 801717c:	9b08      	ldr	r3, [sp, #32]
 801717e:	4299      	cmp	r1, r3
 8017180:	db05      	blt.n	801718e <_printf_float+0x19e>
 8017182:	6823      	ldr	r3, [r4, #0]
 8017184:	6121      	str	r1, [r4, #16]
 8017186:	07d8      	lsls	r0, r3, #31
 8017188:	d5ea      	bpl.n	8017160 <_printf_float+0x170>
 801718a:	1c4b      	adds	r3, r1, #1
 801718c:	e7e7      	b.n	801715e <_printf_float+0x16e>
 801718e:	2900      	cmp	r1, #0
 8017190:	bfd4      	ite	le
 8017192:	f1c1 0202 	rsble	r2, r1, #2
 8017196:	2201      	movgt	r2, #1
 8017198:	4413      	add	r3, r2
 801719a:	e7e0      	b.n	801715e <_printf_float+0x16e>
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	055a      	lsls	r2, r3, #21
 80171a0:	d407      	bmi.n	80171b2 <_printf_float+0x1c2>
 80171a2:	6923      	ldr	r3, [r4, #16]
 80171a4:	4642      	mov	r2, r8
 80171a6:	4631      	mov	r1, r6
 80171a8:	4628      	mov	r0, r5
 80171aa:	47b8      	blx	r7
 80171ac:	3001      	adds	r0, #1
 80171ae:	d12a      	bne.n	8017206 <_printf_float+0x216>
 80171b0:	e76a      	b.n	8017088 <_printf_float+0x98>
 80171b2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80171b6:	f240 80e0 	bls.w	801737a <_printf_float+0x38a>
 80171ba:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80171be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80171c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c6:	d133      	bne.n	8017230 <_printf_float+0x240>
 80171c8:	4a37      	ldr	r2, [pc, #220]	; (80172a8 <_printf_float+0x2b8>)
 80171ca:	2301      	movs	r3, #1
 80171cc:	4631      	mov	r1, r6
 80171ce:	4628      	mov	r0, r5
 80171d0:	47b8      	blx	r7
 80171d2:	3001      	adds	r0, #1
 80171d4:	f43f af58 	beq.w	8017088 <_printf_float+0x98>
 80171d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80171dc:	429a      	cmp	r2, r3
 80171de:	db02      	blt.n	80171e6 <_printf_float+0x1f6>
 80171e0:	6823      	ldr	r3, [r4, #0]
 80171e2:	07d8      	lsls	r0, r3, #31
 80171e4:	d50f      	bpl.n	8017206 <_printf_float+0x216>
 80171e6:	4653      	mov	r3, sl
 80171e8:	465a      	mov	r2, fp
 80171ea:	4631      	mov	r1, r6
 80171ec:	4628      	mov	r0, r5
 80171ee:	47b8      	blx	r7
 80171f0:	3001      	adds	r0, #1
 80171f2:	f43f af49 	beq.w	8017088 <_printf_float+0x98>
 80171f6:	f04f 0800 	mov.w	r8, #0
 80171fa:	f104 091a 	add.w	r9, r4, #26
 80171fe:	9b08      	ldr	r3, [sp, #32]
 8017200:	3b01      	subs	r3, #1
 8017202:	4543      	cmp	r3, r8
 8017204:	dc09      	bgt.n	801721a <_printf_float+0x22a>
 8017206:	6823      	ldr	r3, [r4, #0]
 8017208:	079b      	lsls	r3, r3, #30
 801720a:	f100 8106 	bmi.w	801741a <_printf_float+0x42a>
 801720e:	68e0      	ldr	r0, [r4, #12]
 8017210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017212:	4298      	cmp	r0, r3
 8017214:	bfb8      	it	lt
 8017216:	4618      	movlt	r0, r3
 8017218:	e738      	b.n	801708c <_printf_float+0x9c>
 801721a:	2301      	movs	r3, #1
 801721c:	464a      	mov	r2, r9
 801721e:	4631      	mov	r1, r6
 8017220:	4628      	mov	r0, r5
 8017222:	47b8      	blx	r7
 8017224:	3001      	adds	r0, #1
 8017226:	f43f af2f 	beq.w	8017088 <_printf_float+0x98>
 801722a:	f108 0801 	add.w	r8, r8, #1
 801722e:	e7e6      	b.n	80171fe <_printf_float+0x20e>
 8017230:	9b07      	ldr	r3, [sp, #28]
 8017232:	2b00      	cmp	r3, #0
 8017234:	dc3a      	bgt.n	80172ac <_printf_float+0x2bc>
 8017236:	4a1c      	ldr	r2, [pc, #112]	; (80172a8 <_printf_float+0x2b8>)
 8017238:	2301      	movs	r3, #1
 801723a:	4631      	mov	r1, r6
 801723c:	4628      	mov	r0, r5
 801723e:	47b8      	blx	r7
 8017240:	3001      	adds	r0, #1
 8017242:	f43f af21 	beq.w	8017088 <_printf_float+0x98>
 8017246:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801724a:	4313      	orrs	r3, r2
 801724c:	d102      	bne.n	8017254 <_printf_float+0x264>
 801724e:	6823      	ldr	r3, [r4, #0]
 8017250:	07d9      	lsls	r1, r3, #31
 8017252:	d5d8      	bpl.n	8017206 <_printf_float+0x216>
 8017254:	4653      	mov	r3, sl
 8017256:	465a      	mov	r2, fp
 8017258:	4631      	mov	r1, r6
 801725a:	4628      	mov	r0, r5
 801725c:	47b8      	blx	r7
 801725e:	3001      	adds	r0, #1
 8017260:	f43f af12 	beq.w	8017088 <_printf_float+0x98>
 8017264:	f04f 0900 	mov.w	r9, #0
 8017268:	f104 0a1a 	add.w	sl, r4, #26
 801726c:	9b07      	ldr	r3, [sp, #28]
 801726e:	425b      	negs	r3, r3
 8017270:	454b      	cmp	r3, r9
 8017272:	dc01      	bgt.n	8017278 <_printf_float+0x288>
 8017274:	9b08      	ldr	r3, [sp, #32]
 8017276:	e795      	b.n	80171a4 <_printf_float+0x1b4>
 8017278:	2301      	movs	r3, #1
 801727a:	4652      	mov	r2, sl
 801727c:	4631      	mov	r1, r6
 801727e:	4628      	mov	r0, r5
 8017280:	47b8      	blx	r7
 8017282:	3001      	adds	r0, #1
 8017284:	f43f af00 	beq.w	8017088 <_printf_float+0x98>
 8017288:	f109 0901 	add.w	r9, r9, #1
 801728c:	e7ee      	b.n	801726c <_printf_float+0x27c>
 801728e:	bf00      	nop
 8017290:	ffffffff 	.word	0xffffffff
 8017294:	7fefffff 	.word	0x7fefffff
 8017298:	0801b6e9 	.word	0x0801b6e9
 801729c:	0801b6ed 	.word	0x0801b6ed
 80172a0:	0801b6f1 	.word	0x0801b6f1
 80172a4:	0801b6f5 	.word	0x0801b6f5
 80172a8:	0801b6f9 	.word	0x0801b6f9
 80172ac:	9a08      	ldr	r2, [sp, #32]
 80172ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80172b0:	429a      	cmp	r2, r3
 80172b2:	bfa8      	it	ge
 80172b4:	461a      	movge	r2, r3
 80172b6:	2a00      	cmp	r2, #0
 80172b8:	4691      	mov	r9, r2
 80172ba:	dc38      	bgt.n	801732e <_printf_float+0x33e>
 80172bc:	2300      	movs	r3, #0
 80172be:	9305      	str	r3, [sp, #20]
 80172c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80172c4:	f104 021a 	add.w	r2, r4, #26
 80172c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80172ca:	9905      	ldr	r1, [sp, #20]
 80172cc:	9304      	str	r3, [sp, #16]
 80172ce:	eba3 0309 	sub.w	r3, r3, r9
 80172d2:	428b      	cmp	r3, r1
 80172d4:	dc33      	bgt.n	801733e <_printf_float+0x34e>
 80172d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80172da:	429a      	cmp	r2, r3
 80172dc:	db3c      	blt.n	8017358 <_printf_float+0x368>
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	07da      	lsls	r2, r3, #31
 80172e2:	d439      	bmi.n	8017358 <_printf_float+0x368>
 80172e4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80172e8:	eba2 0903 	sub.w	r9, r2, r3
 80172ec:	9b04      	ldr	r3, [sp, #16]
 80172ee:	1ad2      	subs	r2, r2, r3
 80172f0:	4591      	cmp	r9, r2
 80172f2:	bfa8      	it	ge
 80172f4:	4691      	movge	r9, r2
 80172f6:	f1b9 0f00 	cmp.w	r9, #0
 80172fa:	dc35      	bgt.n	8017368 <_printf_float+0x378>
 80172fc:	f04f 0800 	mov.w	r8, #0
 8017300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017304:	f104 0a1a 	add.w	sl, r4, #26
 8017308:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801730c:	1a9b      	subs	r3, r3, r2
 801730e:	eba3 0309 	sub.w	r3, r3, r9
 8017312:	4543      	cmp	r3, r8
 8017314:	f77f af77 	ble.w	8017206 <_printf_float+0x216>
 8017318:	2301      	movs	r3, #1
 801731a:	4652      	mov	r2, sl
 801731c:	4631      	mov	r1, r6
 801731e:	4628      	mov	r0, r5
 8017320:	47b8      	blx	r7
 8017322:	3001      	adds	r0, #1
 8017324:	f43f aeb0 	beq.w	8017088 <_printf_float+0x98>
 8017328:	f108 0801 	add.w	r8, r8, #1
 801732c:	e7ec      	b.n	8017308 <_printf_float+0x318>
 801732e:	4613      	mov	r3, r2
 8017330:	4631      	mov	r1, r6
 8017332:	4642      	mov	r2, r8
 8017334:	4628      	mov	r0, r5
 8017336:	47b8      	blx	r7
 8017338:	3001      	adds	r0, #1
 801733a:	d1bf      	bne.n	80172bc <_printf_float+0x2cc>
 801733c:	e6a4      	b.n	8017088 <_printf_float+0x98>
 801733e:	2301      	movs	r3, #1
 8017340:	4631      	mov	r1, r6
 8017342:	4628      	mov	r0, r5
 8017344:	9204      	str	r2, [sp, #16]
 8017346:	47b8      	blx	r7
 8017348:	3001      	adds	r0, #1
 801734a:	f43f ae9d 	beq.w	8017088 <_printf_float+0x98>
 801734e:	9b05      	ldr	r3, [sp, #20]
 8017350:	9a04      	ldr	r2, [sp, #16]
 8017352:	3301      	adds	r3, #1
 8017354:	9305      	str	r3, [sp, #20]
 8017356:	e7b7      	b.n	80172c8 <_printf_float+0x2d8>
 8017358:	4653      	mov	r3, sl
 801735a:	465a      	mov	r2, fp
 801735c:	4631      	mov	r1, r6
 801735e:	4628      	mov	r0, r5
 8017360:	47b8      	blx	r7
 8017362:	3001      	adds	r0, #1
 8017364:	d1be      	bne.n	80172e4 <_printf_float+0x2f4>
 8017366:	e68f      	b.n	8017088 <_printf_float+0x98>
 8017368:	9a04      	ldr	r2, [sp, #16]
 801736a:	464b      	mov	r3, r9
 801736c:	4442      	add	r2, r8
 801736e:	4631      	mov	r1, r6
 8017370:	4628      	mov	r0, r5
 8017372:	47b8      	blx	r7
 8017374:	3001      	adds	r0, #1
 8017376:	d1c1      	bne.n	80172fc <_printf_float+0x30c>
 8017378:	e686      	b.n	8017088 <_printf_float+0x98>
 801737a:	9a08      	ldr	r2, [sp, #32]
 801737c:	2a01      	cmp	r2, #1
 801737e:	dc01      	bgt.n	8017384 <_printf_float+0x394>
 8017380:	07db      	lsls	r3, r3, #31
 8017382:	d537      	bpl.n	80173f4 <_printf_float+0x404>
 8017384:	2301      	movs	r3, #1
 8017386:	4642      	mov	r2, r8
 8017388:	4631      	mov	r1, r6
 801738a:	4628      	mov	r0, r5
 801738c:	47b8      	blx	r7
 801738e:	3001      	adds	r0, #1
 8017390:	f43f ae7a 	beq.w	8017088 <_printf_float+0x98>
 8017394:	4653      	mov	r3, sl
 8017396:	465a      	mov	r2, fp
 8017398:	4631      	mov	r1, r6
 801739a:	4628      	mov	r0, r5
 801739c:	47b8      	blx	r7
 801739e:	3001      	adds	r0, #1
 80173a0:	f43f ae72 	beq.w	8017088 <_printf_float+0x98>
 80173a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80173a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80173ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173b0:	9b08      	ldr	r3, [sp, #32]
 80173b2:	d01a      	beq.n	80173ea <_printf_float+0x3fa>
 80173b4:	3b01      	subs	r3, #1
 80173b6:	f108 0201 	add.w	r2, r8, #1
 80173ba:	4631      	mov	r1, r6
 80173bc:	4628      	mov	r0, r5
 80173be:	47b8      	blx	r7
 80173c0:	3001      	adds	r0, #1
 80173c2:	d10e      	bne.n	80173e2 <_printf_float+0x3f2>
 80173c4:	e660      	b.n	8017088 <_printf_float+0x98>
 80173c6:	2301      	movs	r3, #1
 80173c8:	464a      	mov	r2, r9
 80173ca:	4631      	mov	r1, r6
 80173cc:	4628      	mov	r0, r5
 80173ce:	47b8      	blx	r7
 80173d0:	3001      	adds	r0, #1
 80173d2:	f43f ae59 	beq.w	8017088 <_printf_float+0x98>
 80173d6:	f108 0801 	add.w	r8, r8, #1
 80173da:	9b08      	ldr	r3, [sp, #32]
 80173dc:	3b01      	subs	r3, #1
 80173de:	4543      	cmp	r3, r8
 80173e0:	dcf1      	bgt.n	80173c6 <_printf_float+0x3d6>
 80173e2:	9b04      	ldr	r3, [sp, #16]
 80173e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80173e8:	e6dd      	b.n	80171a6 <_printf_float+0x1b6>
 80173ea:	f04f 0800 	mov.w	r8, #0
 80173ee:	f104 091a 	add.w	r9, r4, #26
 80173f2:	e7f2      	b.n	80173da <_printf_float+0x3ea>
 80173f4:	2301      	movs	r3, #1
 80173f6:	4642      	mov	r2, r8
 80173f8:	e7df      	b.n	80173ba <_printf_float+0x3ca>
 80173fa:	2301      	movs	r3, #1
 80173fc:	464a      	mov	r2, r9
 80173fe:	4631      	mov	r1, r6
 8017400:	4628      	mov	r0, r5
 8017402:	47b8      	blx	r7
 8017404:	3001      	adds	r0, #1
 8017406:	f43f ae3f 	beq.w	8017088 <_printf_float+0x98>
 801740a:	f108 0801 	add.w	r8, r8, #1
 801740e:	68e3      	ldr	r3, [r4, #12]
 8017410:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017412:	1a5b      	subs	r3, r3, r1
 8017414:	4543      	cmp	r3, r8
 8017416:	dcf0      	bgt.n	80173fa <_printf_float+0x40a>
 8017418:	e6f9      	b.n	801720e <_printf_float+0x21e>
 801741a:	f04f 0800 	mov.w	r8, #0
 801741e:	f104 0919 	add.w	r9, r4, #25
 8017422:	e7f4      	b.n	801740e <_printf_float+0x41e>

08017424 <_printf_common>:
 8017424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017428:	4616      	mov	r6, r2
 801742a:	4699      	mov	r9, r3
 801742c:	688a      	ldr	r2, [r1, #8]
 801742e:	690b      	ldr	r3, [r1, #16]
 8017430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017434:	4293      	cmp	r3, r2
 8017436:	bfb8      	it	lt
 8017438:	4613      	movlt	r3, r2
 801743a:	6033      	str	r3, [r6, #0]
 801743c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017440:	4607      	mov	r7, r0
 8017442:	460c      	mov	r4, r1
 8017444:	b10a      	cbz	r2, 801744a <_printf_common+0x26>
 8017446:	3301      	adds	r3, #1
 8017448:	6033      	str	r3, [r6, #0]
 801744a:	6823      	ldr	r3, [r4, #0]
 801744c:	0699      	lsls	r1, r3, #26
 801744e:	bf42      	ittt	mi
 8017450:	6833      	ldrmi	r3, [r6, #0]
 8017452:	3302      	addmi	r3, #2
 8017454:	6033      	strmi	r3, [r6, #0]
 8017456:	6825      	ldr	r5, [r4, #0]
 8017458:	f015 0506 	ands.w	r5, r5, #6
 801745c:	d106      	bne.n	801746c <_printf_common+0x48>
 801745e:	f104 0a19 	add.w	sl, r4, #25
 8017462:	68e3      	ldr	r3, [r4, #12]
 8017464:	6832      	ldr	r2, [r6, #0]
 8017466:	1a9b      	subs	r3, r3, r2
 8017468:	42ab      	cmp	r3, r5
 801746a:	dc26      	bgt.n	80174ba <_printf_common+0x96>
 801746c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017470:	1e13      	subs	r3, r2, #0
 8017472:	6822      	ldr	r2, [r4, #0]
 8017474:	bf18      	it	ne
 8017476:	2301      	movne	r3, #1
 8017478:	0692      	lsls	r2, r2, #26
 801747a:	d42b      	bmi.n	80174d4 <_printf_common+0xb0>
 801747c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017480:	4649      	mov	r1, r9
 8017482:	4638      	mov	r0, r7
 8017484:	47c0      	blx	r8
 8017486:	3001      	adds	r0, #1
 8017488:	d01e      	beq.n	80174c8 <_printf_common+0xa4>
 801748a:	6823      	ldr	r3, [r4, #0]
 801748c:	6922      	ldr	r2, [r4, #16]
 801748e:	f003 0306 	and.w	r3, r3, #6
 8017492:	2b04      	cmp	r3, #4
 8017494:	bf02      	ittt	eq
 8017496:	68e5      	ldreq	r5, [r4, #12]
 8017498:	6833      	ldreq	r3, [r6, #0]
 801749a:	1aed      	subeq	r5, r5, r3
 801749c:	68a3      	ldr	r3, [r4, #8]
 801749e:	bf0c      	ite	eq
 80174a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174a4:	2500      	movne	r5, #0
 80174a6:	4293      	cmp	r3, r2
 80174a8:	bfc4      	itt	gt
 80174aa:	1a9b      	subgt	r3, r3, r2
 80174ac:	18ed      	addgt	r5, r5, r3
 80174ae:	2600      	movs	r6, #0
 80174b0:	341a      	adds	r4, #26
 80174b2:	42b5      	cmp	r5, r6
 80174b4:	d11a      	bne.n	80174ec <_printf_common+0xc8>
 80174b6:	2000      	movs	r0, #0
 80174b8:	e008      	b.n	80174cc <_printf_common+0xa8>
 80174ba:	2301      	movs	r3, #1
 80174bc:	4652      	mov	r2, sl
 80174be:	4649      	mov	r1, r9
 80174c0:	4638      	mov	r0, r7
 80174c2:	47c0      	blx	r8
 80174c4:	3001      	adds	r0, #1
 80174c6:	d103      	bne.n	80174d0 <_printf_common+0xac>
 80174c8:	f04f 30ff 	mov.w	r0, #4294967295
 80174cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d0:	3501      	adds	r5, #1
 80174d2:	e7c6      	b.n	8017462 <_printf_common+0x3e>
 80174d4:	18e1      	adds	r1, r4, r3
 80174d6:	1c5a      	adds	r2, r3, #1
 80174d8:	2030      	movs	r0, #48	; 0x30
 80174da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80174de:	4422      	add	r2, r4
 80174e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80174e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80174e8:	3302      	adds	r3, #2
 80174ea:	e7c7      	b.n	801747c <_printf_common+0x58>
 80174ec:	2301      	movs	r3, #1
 80174ee:	4622      	mov	r2, r4
 80174f0:	4649      	mov	r1, r9
 80174f2:	4638      	mov	r0, r7
 80174f4:	47c0      	blx	r8
 80174f6:	3001      	adds	r0, #1
 80174f8:	d0e6      	beq.n	80174c8 <_printf_common+0xa4>
 80174fa:	3601      	adds	r6, #1
 80174fc:	e7d9      	b.n	80174b2 <_printf_common+0x8e>
	...

08017500 <_printf_i>:
 8017500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017504:	7e0f      	ldrb	r7, [r1, #24]
 8017506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017508:	2f78      	cmp	r7, #120	; 0x78
 801750a:	4691      	mov	r9, r2
 801750c:	4680      	mov	r8, r0
 801750e:	460c      	mov	r4, r1
 8017510:	469a      	mov	sl, r3
 8017512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017516:	d807      	bhi.n	8017528 <_printf_i+0x28>
 8017518:	2f62      	cmp	r7, #98	; 0x62
 801751a:	d80a      	bhi.n	8017532 <_printf_i+0x32>
 801751c:	2f00      	cmp	r7, #0
 801751e:	f000 80d4 	beq.w	80176ca <_printf_i+0x1ca>
 8017522:	2f58      	cmp	r7, #88	; 0x58
 8017524:	f000 80c0 	beq.w	80176a8 <_printf_i+0x1a8>
 8017528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801752c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017530:	e03a      	b.n	80175a8 <_printf_i+0xa8>
 8017532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017536:	2b15      	cmp	r3, #21
 8017538:	d8f6      	bhi.n	8017528 <_printf_i+0x28>
 801753a:	a101      	add	r1, pc, #4	; (adr r1, 8017540 <_printf_i+0x40>)
 801753c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017540:	08017599 	.word	0x08017599
 8017544:	080175ad 	.word	0x080175ad
 8017548:	08017529 	.word	0x08017529
 801754c:	08017529 	.word	0x08017529
 8017550:	08017529 	.word	0x08017529
 8017554:	08017529 	.word	0x08017529
 8017558:	080175ad 	.word	0x080175ad
 801755c:	08017529 	.word	0x08017529
 8017560:	08017529 	.word	0x08017529
 8017564:	08017529 	.word	0x08017529
 8017568:	08017529 	.word	0x08017529
 801756c:	080176b1 	.word	0x080176b1
 8017570:	080175d9 	.word	0x080175d9
 8017574:	0801766b 	.word	0x0801766b
 8017578:	08017529 	.word	0x08017529
 801757c:	08017529 	.word	0x08017529
 8017580:	080176d3 	.word	0x080176d3
 8017584:	08017529 	.word	0x08017529
 8017588:	080175d9 	.word	0x080175d9
 801758c:	08017529 	.word	0x08017529
 8017590:	08017529 	.word	0x08017529
 8017594:	08017673 	.word	0x08017673
 8017598:	682b      	ldr	r3, [r5, #0]
 801759a:	1d1a      	adds	r2, r3, #4
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	602a      	str	r2, [r5, #0]
 80175a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175a8:	2301      	movs	r3, #1
 80175aa:	e09f      	b.n	80176ec <_printf_i+0x1ec>
 80175ac:	6820      	ldr	r0, [r4, #0]
 80175ae:	682b      	ldr	r3, [r5, #0]
 80175b0:	0607      	lsls	r7, r0, #24
 80175b2:	f103 0104 	add.w	r1, r3, #4
 80175b6:	6029      	str	r1, [r5, #0]
 80175b8:	d501      	bpl.n	80175be <_printf_i+0xbe>
 80175ba:	681e      	ldr	r6, [r3, #0]
 80175bc:	e003      	b.n	80175c6 <_printf_i+0xc6>
 80175be:	0646      	lsls	r6, r0, #25
 80175c0:	d5fb      	bpl.n	80175ba <_printf_i+0xba>
 80175c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80175c6:	2e00      	cmp	r6, #0
 80175c8:	da03      	bge.n	80175d2 <_printf_i+0xd2>
 80175ca:	232d      	movs	r3, #45	; 0x2d
 80175cc:	4276      	negs	r6, r6
 80175ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175d2:	485a      	ldr	r0, [pc, #360]	; (801773c <_printf_i+0x23c>)
 80175d4:	230a      	movs	r3, #10
 80175d6:	e012      	b.n	80175fe <_printf_i+0xfe>
 80175d8:	682b      	ldr	r3, [r5, #0]
 80175da:	6820      	ldr	r0, [r4, #0]
 80175dc:	1d19      	adds	r1, r3, #4
 80175de:	6029      	str	r1, [r5, #0]
 80175e0:	0605      	lsls	r5, r0, #24
 80175e2:	d501      	bpl.n	80175e8 <_printf_i+0xe8>
 80175e4:	681e      	ldr	r6, [r3, #0]
 80175e6:	e002      	b.n	80175ee <_printf_i+0xee>
 80175e8:	0641      	lsls	r1, r0, #25
 80175ea:	d5fb      	bpl.n	80175e4 <_printf_i+0xe4>
 80175ec:	881e      	ldrh	r6, [r3, #0]
 80175ee:	4853      	ldr	r0, [pc, #332]	; (801773c <_printf_i+0x23c>)
 80175f0:	2f6f      	cmp	r7, #111	; 0x6f
 80175f2:	bf0c      	ite	eq
 80175f4:	2308      	moveq	r3, #8
 80175f6:	230a      	movne	r3, #10
 80175f8:	2100      	movs	r1, #0
 80175fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80175fe:	6865      	ldr	r5, [r4, #4]
 8017600:	60a5      	str	r5, [r4, #8]
 8017602:	2d00      	cmp	r5, #0
 8017604:	bfa2      	ittt	ge
 8017606:	6821      	ldrge	r1, [r4, #0]
 8017608:	f021 0104 	bicge.w	r1, r1, #4
 801760c:	6021      	strge	r1, [r4, #0]
 801760e:	b90e      	cbnz	r6, 8017614 <_printf_i+0x114>
 8017610:	2d00      	cmp	r5, #0
 8017612:	d04b      	beq.n	80176ac <_printf_i+0x1ac>
 8017614:	4615      	mov	r5, r2
 8017616:	fbb6 f1f3 	udiv	r1, r6, r3
 801761a:	fb03 6711 	mls	r7, r3, r1, r6
 801761e:	5dc7      	ldrb	r7, [r0, r7]
 8017620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017624:	4637      	mov	r7, r6
 8017626:	42bb      	cmp	r3, r7
 8017628:	460e      	mov	r6, r1
 801762a:	d9f4      	bls.n	8017616 <_printf_i+0x116>
 801762c:	2b08      	cmp	r3, #8
 801762e:	d10b      	bne.n	8017648 <_printf_i+0x148>
 8017630:	6823      	ldr	r3, [r4, #0]
 8017632:	07de      	lsls	r6, r3, #31
 8017634:	d508      	bpl.n	8017648 <_printf_i+0x148>
 8017636:	6923      	ldr	r3, [r4, #16]
 8017638:	6861      	ldr	r1, [r4, #4]
 801763a:	4299      	cmp	r1, r3
 801763c:	bfde      	ittt	le
 801763e:	2330      	movle	r3, #48	; 0x30
 8017640:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017644:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017648:	1b52      	subs	r2, r2, r5
 801764a:	6122      	str	r2, [r4, #16]
 801764c:	f8cd a000 	str.w	sl, [sp]
 8017650:	464b      	mov	r3, r9
 8017652:	aa03      	add	r2, sp, #12
 8017654:	4621      	mov	r1, r4
 8017656:	4640      	mov	r0, r8
 8017658:	f7ff fee4 	bl	8017424 <_printf_common>
 801765c:	3001      	adds	r0, #1
 801765e:	d14a      	bne.n	80176f6 <_printf_i+0x1f6>
 8017660:	f04f 30ff 	mov.w	r0, #4294967295
 8017664:	b004      	add	sp, #16
 8017666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801766a:	6823      	ldr	r3, [r4, #0]
 801766c:	f043 0320 	orr.w	r3, r3, #32
 8017670:	6023      	str	r3, [r4, #0]
 8017672:	4833      	ldr	r0, [pc, #204]	; (8017740 <_printf_i+0x240>)
 8017674:	2778      	movs	r7, #120	; 0x78
 8017676:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801767a:	6823      	ldr	r3, [r4, #0]
 801767c:	6829      	ldr	r1, [r5, #0]
 801767e:	061f      	lsls	r7, r3, #24
 8017680:	f851 6b04 	ldr.w	r6, [r1], #4
 8017684:	d402      	bmi.n	801768c <_printf_i+0x18c>
 8017686:	065f      	lsls	r7, r3, #25
 8017688:	bf48      	it	mi
 801768a:	b2b6      	uxthmi	r6, r6
 801768c:	07df      	lsls	r7, r3, #31
 801768e:	bf48      	it	mi
 8017690:	f043 0320 	orrmi.w	r3, r3, #32
 8017694:	6029      	str	r1, [r5, #0]
 8017696:	bf48      	it	mi
 8017698:	6023      	strmi	r3, [r4, #0]
 801769a:	b91e      	cbnz	r6, 80176a4 <_printf_i+0x1a4>
 801769c:	6823      	ldr	r3, [r4, #0]
 801769e:	f023 0320 	bic.w	r3, r3, #32
 80176a2:	6023      	str	r3, [r4, #0]
 80176a4:	2310      	movs	r3, #16
 80176a6:	e7a7      	b.n	80175f8 <_printf_i+0xf8>
 80176a8:	4824      	ldr	r0, [pc, #144]	; (801773c <_printf_i+0x23c>)
 80176aa:	e7e4      	b.n	8017676 <_printf_i+0x176>
 80176ac:	4615      	mov	r5, r2
 80176ae:	e7bd      	b.n	801762c <_printf_i+0x12c>
 80176b0:	682b      	ldr	r3, [r5, #0]
 80176b2:	6826      	ldr	r6, [r4, #0]
 80176b4:	6961      	ldr	r1, [r4, #20]
 80176b6:	1d18      	adds	r0, r3, #4
 80176b8:	6028      	str	r0, [r5, #0]
 80176ba:	0635      	lsls	r5, r6, #24
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	d501      	bpl.n	80176c4 <_printf_i+0x1c4>
 80176c0:	6019      	str	r1, [r3, #0]
 80176c2:	e002      	b.n	80176ca <_printf_i+0x1ca>
 80176c4:	0670      	lsls	r0, r6, #25
 80176c6:	d5fb      	bpl.n	80176c0 <_printf_i+0x1c0>
 80176c8:	8019      	strh	r1, [r3, #0]
 80176ca:	2300      	movs	r3, #0
 80176cc:	6123      	str	r3, [r4, #16]
 80176ce:	4615      	mov	r5, r2
 80176d0:	e7bc      	b.n	801764c <_printf_i+0x14c>
 80176d2:	682b      	ldr	r3, [r5, #0]
 80176d4:	1d1a      	adds	r2, r3, #4
 80176d6:	602a      	str	r2, [r5, #0]
 80176d8:	681d      	ldr	r5, [r3, #0]
 80176da:	6862      	ldr	r2, [r4, #4]
 80176dc:	2100      	movs	r1, #0
 80176de:	4628      	mov	r0, r5
 80176e0:	f7e8 fe0e 	bl	8000300 <memchr>
 80176e4:	b108      	cbz	r0, 80176ea <_printf_i+0x1ea>
 80176e6:	1b40      	subs	r0, r0, r5
 80176e8:	6060      	str	r0, [r4, #4]
 80176ea:	6863      	ldr	r3, [r4, #4]
 80176ec:	6123      	str	r3, [r4, #16]
 80176ee:	2300      	movs	r3, #0
 80176f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80176f4:	e7aa      	b.n	801764c <_printf_i+0x14c>
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	462a      	mov	r2, r5
 80176fa:	4649      	mov	r1, r9
 80176fc:	4640      	mov	r0, r8
 80176fe:	47d0      	blx	sl
 8017700:	3001      	adds	r0, #1
 8017702:	d0ad      	beq.n	8017660 <_printf_i+0x160>
 8017704:	6823      	ldr	r3, [r4, #0]
 8017706:	079b      	lsls	r3, r3, #30
 8017708:	d413      	bmi.n	8017732 <_printf_i+0x232>
 801770a:	68e0      	ldr	r0, [r4, #12]
 801770c:	9b03      	ldr	r3, [sp, #12]
 801770e:	4298      	cmp	r0, r3
 8017710:	bfb8      	it	lt
 8017712:	4618      	movlt	r0, r3
 8017714:	e7a6      	b.n	8017664 <_printf_i+0x164>
 8017716:	2301      	movs	r3, #1
 8017718:	4632      	mov	r2, r6
 801771a:	4649      	mov	r1, r9
 801771c:	4640      	mov	r0, r8
 801771e:	47d0      	blx	sl
 8017720:	3001      	adds	r0, #1
 8017722:	d09d      	beq.n	8017660 <_printf_i+0x160>
 8017724:	3501      	adds	r5, #1
 8017726:	68e3      	ldr	r3, [r4, #12]
 8017728:	9903      	ldr	r1, [sp, #12]
 801772a:	1a5b      	subs	r3, r3, r1
 801772c:	42ab      	cmp	r3, r5
 801772e:	dcf2      	bgt.n	8017716 <_printf_i+0x216>
 8017730:	e7eb      	b.n	801770a <_printf_i+0x20a>
 8017732:	2500      	movs	r5, #0
 8017734:	f104 0619 	add.w	r6, r4, #25
 8017738:	e7f5      	b.n	8017726 <_printf_i+0x226>
 801773a:	bf00      	nop
 801773c:	0801b6fb 	.word	0x0801b6fb
 8017740:	0801b70c 	.word	0x0801b70c

08017744 <std>:
 8017744:	2300      	movs	r3, #0
 8017746:	b510      	push	{r4, lr}
 8017748:	4604      	mov	r4, r0
 801774a:	e9c0 3300 	strd	r3, r3, [r0]
 801774e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017752:	6083      	str	r3, [r0, #8]
 8017754:	8181      	strh	r1, [r0, #12]
 8017756:	6643      	str	r3, [r0, #100]	; 0x64
 8017758:	81c2      	strh	r2, [r0, #14]
 801775a:	6183      	str	r3, [r0, #24]
 801775c:	4619      	mov	r1, r3
 801775e:	2208      	movs	r2, #8
 8017760:	305c      	adds	r0, #92	; 0x5c
 8017762:	f000 f914 	bl	801798e <memset>
 8017766:	4b0d      	ldr	r3, [pc, #52]	; (801779c <std+0x58>)
 8017768:	6263      	str	r3, [r4, #36]	; 0x24
 801776a:	4b0d      	ldr	r3, [pc, #52]	; (80177a0 <std+0x5c>)
 801776c:	62a3      	str	r3, [r4, #40]	; 0x28
 801776e:	4b0d      	ldr	r3, [pc, #52]	; (80177a4 <std+0x60>)
 8017770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017772:	4b0d      	ldr	r3, [pc, #52]	; (80177a8 <std+0x64>)
 8017774:	6323      	str	r3, [r4, #48]	; 0x30
 8017776:	4b0d      	ldr	r3, [pc, #52]	; (80177ac <std+0x68>)
 8017778:	6224      	str	r4, [r4, #32]
 801777a:	429c      	cmp	r4, r3
 801777c:	d006      	beq.n	801778c <std+0x48>
 801777e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017782:	4294      	cmp	r4, r2
 8017784:	d002      	beq.n	801778c <std+0x48>
 8017786:	33d0      	adds	r3, #208	; 0xd0
 8017788:	429c      	cmp	r4, r3
 801778a:	d105      	bne.n	8017798 <std+0x54>
 801778c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017794:	f7ea bb35 	b.w	8001e02 <__retarget_lock_init_recursive>
 8017798:	bd10      	pop	{r4, pc}
 801779a:	bf00      	nop
 801779c:	08017909 	.word	0x08017909
 80177a0:	0801792b 	.word	0x0801792b
 80177a4:	08017963 	.word	0x08017963
 80177a8:	08017987 	.word	0x08017987
 80177ac:	2400b33c 	.word	0x2400b33c

080177b0 <stdio_exit_handler>:
 80177b0:	4a02      	ldr	r2, [pc, #8]	; (80177bc <stdio_exit_handler+0xc>)
 80177b2:	4903      	ldr	r1, [pc, #12]	; (80177c0 <stdio_exit_handler+0x10>)
 80177b4:	4803      	ldr	r0, [pc, #12]	; (80177c4 <stdio_exit_handler+0x14>)
 80177b6:	f000 b869 	b.w	801788c <_fwalk_sglue>
 80177ba:	bf00      	nop
 80177bc:	24000200 	.word	0x24000200
 80177c0:	08019b89 	.word	0x08019b89
 80177c4:	24000378 	.word	0x24000378

080177c8 <cleanup_stdio>:
 80177c8:	6841      	ldr	r1, [r0, #4]
 80177ca:	4b0c      	ldr	r3, [pc, #48]	; (80177fc <cleanup_stdio+0x34>)
 80177cc:	4299      	cmp	r1, r3
 80177ce:	b510      	push	{r4, lr}
 80177d0:	4604      	mov	r4, r0
 80177d2:	d001      	beq.n	80177d8 <cleanup_stdio+0x10>
 80177d4:	f002 f9d8 	bl	8019b88 <_fflush_r>
 80177d8:	68a1      	ldr	r1, [r4, #8]
 80177da:	4b09      	ldr	r3, [pc, #36]	; (8017800 <cleanup_stdio+0x38>)
 80177dc:	4299      	cmp	r1, r3
 80177de:	d002      	beq.n	80177e6 <cleanup_stdio+0x1e>
 80177e0:	4620      	mov	r0, r4
 80177e2:	f002 f9d1 	bl	8019b88 <_fflush_r>
 80177e6:	68e1      	ldr	r1, [r4, #12]
 80177e8:	4b06      	ldr	r3, [pc, #24]	; (8017804 <cleanup_stdio+0x3c>)
 80177ea:	4299      	cmp	r1, r3
 80177ec:	d004      	beq.n	80177f8 <cleanup_stdio+0x30>
 80177ee:	4620      	mov	r0, r4
 80177f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f4:	f002 b9c8 	b.w	8019b88 <_fflush_r>
 80177f8:	bd10      	pop	{r4, pc}
 80177fa:	bf00      	nop
 80177fc:	2400b33c 	.word	0x2400b33c
 8017800:	2400b3a4 	.word	0x2400b3a4
 8017804:	2400b40c 	.word	0x2400b40c

08017808 <global_stdio_init.part.0>:
 8017808:	b510      	push	{r4, lr}
 801780a:	4b0b      	ldr	r3, [pc, #44]	; (8017838 <global_stdio_init.part.0+0x30>)
 801780c:	4c0b      	ldr	r4, [pc, #44]	; (801783c <global_stdio_init.part.0+0x34>)
 801780e:	4a0c      	ldr	r2, [pc, #48]	; (8017840 <global_stdio_init.part.0+0x38>)
 8017810:	601a      	str	r2, [r3, #0]
 8017812:	4620      	mov	r0, r4
 8017814:	2200      	movs	r2, #0
 8017816:	2104      	movs	r1, #4
 8017818:	f7ff ff94 	bl	8017744 <std>
 801781c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017820:	2201      	movs	r2, #1
 8017822:	2109      	movs	r1, #9
 8017824:	f7ff ff8e 	bl	8017744 <std>
 8017828:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801782c:	2202      	movs	r2, #2
 801782e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017832:	2112      	movs	r1, #18
 8017834:	f7ff bf86 	b.w	8017744 <std>
 8017838:	2400b474 	.word	0x2400b474
 801783c:	2400b33c 	.word	0x2400b33c
 8017840:	080177b1 	.word	0x080177b1

08017844 <__sfp_lock_acquire>:
 8017844:	4801      	ldr	r0, [pc, #4]	; (801784c <__sfp_lock_acquire+0x8>)
 8017846:	f7ea bb02 	b.w	8001e4e <__retarget_lock_acquire_recursive>
 801784a:	bf00      	nop
 801784c:	24000c0c 	.word	0x24000c0c

08017850 <__sfp_lock_release>:
 8017850:	4801      	ldr	r0, [pc, #4]	; (8017858 <__sfp_lock_release+0x8>)
 8017852:	f7ea bb10 	b.w	8001e76 <__retarget_lock_release_recursive>
 8017856:	bf00      	nop
 8017858:	24000c0c 	.word	0x24000c0c

0801785c <__sinit>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	f7ff fff0 	bl	8017844 <__sfp_lock_acquire>
 8017864:	6a23      	ldr	r3, [r4, #32]
 8017866:	b11b      	cbz	r3, 8017870 <__sinit+0x14>
 8017868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801786c:	f7ff bff0 	b.w	8017850 <__sfp_lock_release>
 8017870:	4b04      	ldr	r3, [pc, #16]	; (8017884 <__sinit+0x28>)
 8017872:	6223      	str	r3, [r4, #32]
 8017874:	4b04      	ldr	r3, [pc, #16]	; (8017888 <__sinit+0x2c>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d1f5      	bne.n	8017868 <__sinit+0xc>
 801787c:	f7ff ffc4 	bl	8017808 <global_stdio_init.part.0>
 8017880:	e7f2      	b.n	8017868 <__sinit+0xc>
 8017882:	bf00      	nop
 8017884:	080177c9 	.word	0x080177c9
 8017888:	2400b474 	.word	0x2400b474

0801788c <_fwalk_sglue>:
 801788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017890:	4607      	mov	r7, r0
 8017892:	4688      	mov	r8, r1
 8017894:	4614      	mov	r4, r2
 8017896:	2600      	movs	r6, #0
 8017898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801789c:	f1b9 0901 	subs.w	r9, r9, #1
 80178a0:	d505      	bpl.n	80178ae <_fwalk_sglue+0x22>
 80178a2:	6824      	ldr	r4, [r4, #0]
 80178a4:	2c00      	cmp	r4, #0
 80178a6:	d1f7      	bne.n	8017898 <_fwalk_sglue+0xc>
 80178a8:	4630      	mov	r0, r6
 80178aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178ae:	89ab      	ldrh	r3, [r5, #12]
 80178b0:	2b01      	cmp	r3, #1
 80178b2:	d907      	bls.n	80178c4 <_fwalk_sglue+0x38>
 80178b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178b8:	3301      	adds	r3, #1
 80178ba:	d003      	beq.n	80178c4 <_fwalk_sglue+0x38>
 80178bc:	4629      	mov	r1, r5
 80178be:	4638      	mov	r0, r7
 80178c0:	47c0      	blx	r8
 80178c2:	4306      	orrs	r6, r0
 80178c4:	3568      	adds	r5, #104	; 0x68
 80178c6:	e7e9      	b.n	801789c <_fwalk_sglue+0x10>

080178c8 <siprintf>:
 80178c8:	b40e      	push	{r1, r2, r3}
 80178ca:	b500      	push	{lr}
 80178cc:	b09c      	sub	sp, #112	; 0x70
 80178ce:	ab1d      	add	r3, sp, #116	; 0x74
 80178d0:	9002      	str	r0, [sp, #8]
 80178d2:	9006      	str	r0, [sp, #24]
 80178d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178d8:	4809      	ldr	r0, [pc, #36]	; (8017900 <siprintf+0x38>)
 80178da:	9107      	str	r1, [sp, #28]
 80178dc:	9104      	str	r1, [sp, #16]
 80178de:	4909      	ldr	r1, [pc, #36]	; (8017904 <siprintf+0x3c>)
 80178e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80178e4:	9105      	str	r1, [sp, #20]
 80178e6:	6800      	ldr	r0, [r0, #0]
 80178e8:	9301      	str	r3, [sp, #4]
 80178ea:	a902      	add	r1, sp, #8
 80178ec:	f001 ffc8 	bl	8019880 <_svfiprintf_r>
 80178f0:	9b02      	ldr	r3, [sp, #8]
 80178f2:	2200      	movs	r2, #0
 80178f4:	701a      	strb	r2, [r3, #0]
 80178f6:	b01c      	add	sp, #112	; 0x70
 80178f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80178fc:	b003      	add	sp, #12
 80178fe:	4770      	bx	lr
 8017900:	240003c4 	.word	0x240003c4
 8017904:	ffff0208 	.word	0xffff0208

08017908 <__sread>:
 8017908:	b510      	push	{r4, lr}
 801790a:	460c      	mov	r4, r1
 801790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017910:	f000 f87e 	bl	8017a10 <_read_r>
 8017914:	2800      	cmp	r0, #0
 8017916:	bfab      	itete	ge
 8017918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801791a:	89a3      	ldrhlt	r3, [r4, #12]
 801791c:	181b      	addge	r3, r3, r0
 801791e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017922:	bfac      	ite	ge
 8017924:	6563      	strge	r3, [r4, #84]	; 0x54
 8017926:	81a3      	strhlt	r3, [r4, #12]
 8017928:	bd10      	pop	{r4, pc}

0801792a <__swrite>:
 801792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801792e:	461f      	mov	r7, r3
 8017930:	898b      	ldrh	r3, [r1, #12]
 8017932:	05db      	lsls	r3, r3, #23
 8017934:	4605      	mov	r5, r0
 8017936:	460c      	mov	r4, r1
 8017938:	4616      	mov	r6, r2
 801793a:	d505      	bpl.n	8017948 <__swrite+0x1e>
 801793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017940:	2302      	movs	r3, #2
 8017942:	2200      	movs	r2, #0
 8017944:	f000 f852 	bl	80179ec <_lseek_r>
 8017948:	89a3      	ldrh	r3, [r4, #12]
 801794a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801794e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017952:	81a3      	strh	r3, [r4, #12]
 8017954:	4632      	mov	r2, r6
 8017956:	463b      	mov	r3, r7
 8017958:	4628      	mov	r0, r5
 801795a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801795e:	f000 b879 	b.w	8017a54 <_write_r>

08017962 <__sseek>:
 8017962:	b510      	push	{r4, lr}
 8017964:	460c      	mov	r4, r1
 8017966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801796a:	f000 f83f 	bl	80179ec <_lseek_r>
 801796e:	1c43      	adds	r3, r0, #1
 8017970:	89a3      	ldrh	r3, [r4, #12]
 8017972:	bf15      	itete	ne
 8017974:	6560      	strne	r0, [r4, #84]	; 0x54
 8017976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801797a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801797e:	81a3      	strheq	r3, [r4, #12]
 8017980:	bf18      	it	ne
 8017982:	81a3      	strhne	r3, [r4, #12]
 8017984:	bd10      	pop	{r4, pc}

08017986 <__sclose>:
 8017986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801798a:	f000 b81f 	b.w	80179cc <_close_r>

0801798e <memset>:
 801798e:	4402      	add	r2, r0
 8017990:	4603      	mov	r3, r0
 8017992:	4293      	cmp	r3, r2
 8017994:	d100      	bne.n	8017998 <memset+0xa>
 8017996:	4770      	bx	lr
 8017998:	f803 1b01 	strb.w	r1, [r3], #1
 801799c:	e7f9      	b.n	8017992 <memset+0x4>

0801799e <strncmp>:
 801799e:	b510      	push	{r4, lr}
 80179a0:	b16a      	cbz	r2, 80179be <strncmp+0x20>
 80179a2:	3901      	subs	r1, #1
 80179a4:	1884      	adds	r4, r0, r2
 80179a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d103      	bne.n	80179ba <strncmp+0x1c>
 80179b2:	42a0      	cmp	r0, r4
 80179b4:	d001      	beq.n	80179ba <strncmp+0x1c>
 80179b6:	2a00      	cmp	r2, #0
 80179b8:	d1f5      	bne.n	80179a6 <strncmp+0x8>
 80179ba:	1ad0      	subs	r0, r2, r3
 80179bc:	bd10      	pop	{r4, pc}
 80179be:	4610      	mov	r0, r2
 80179c0:	e7fc      	b.n	80179bc <strncmp+0x1e>
	...

080179c4 <_localeconv_r>:
 80179c4:	4800      	ldr	r0, [pc, #0]	; (80179c8 <_localeconv_r+0x4>)
 80179c6:	4770      	bx	lr
 80179c8:	240002fc 	.word	0x240002fc

080179cc <_close_r>:
 80179cc:	b538      	push	{r3, r4, r5, lr}
 80179ce:	4d06      	ldr	r5, [pc, #24]	; (80179e8 <_close_r+0x1c>)
 80179d0:	2300      	movs	r3, #0
 80179d2:	4604      	mov	r4, r0
 80179d4:	4608      	mov	r0, r1
 80179d6:	602b      	str	r3, [r5, #0]
 80179d8:	f7ea f909 	bl	8001bee <_close>
 80179dc:	1c43      	adds	r3, r0, #1
 80179de:	d102      	bne.n	80179e6 <_close_r+0x1a>
 80179e0:	682b      	ldr	r3, [r5, #0]
 80179e2:	b103      	cbz	r3, 80179e6 <_close_r+0x1a>
 80179e4:	6023      	str	r3, [r4, #0]
 80179e6:	bd38      	pop	{r3, r4, r5, pc}
 80179e8:	2400b478 	.word	0x2400b478

080179ec <_lseek_r>:
 80179ec:	b538      	push	{r3, r4, r5, lr}
 80179ee:	4d07      	ldr	r5, [pc, #28]	; (8017a0c <_lseek_r+0x20>)
 80179f0:	4604      	mov	r4, r0
 80179f2:	4608      	mov	r0, r1
 80179f4:	4611      	mov	r1, r2
 80179f6:	2200      	movs	r2, #0
 80179f8:	602a      	str	r2, [r5, #0]
 80179fa:	461a      	mov	r2, r3
 80179fc:	f7ea f91e 	bl	8001c3c <_lseek>
 8017a00:	1c43      	adds	r3, r0, #1
 8017a02:	d102      	bne.n	8017a0a <_lseek_r+0x1e>
 8017a04:	682b      	ldr	r3, [r5, #0]
 8017a06:	b103      	cbz	r3, 8017a0a <_lseek_r+0x1e>
 8017a08:	6023      	str	r3, [r4, #0]
 8017a0a:	bd38      	pop	{r3, r4, r5, pc}
 8017a0c:	2400b478 	.word	0x2400b478

08017a10 <_read_r>:
 8017a10:	b538      	push	{r3, r4, r5, lr}
 8017a12:	4d07      	ldr	r5, [pc, #28]	; (8017a30 <_read_r+0x20>)
 8017a14:	4604      	mov	r4, r0
 8017a16:	4608      	mov	r0, r1
 8017a18:	4611      	mov	r1, r2
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	602a      	str	r2, [r5, #0]
 8017a1e:	461a      	mov	r2, r3
 8017a20:	f7ea f8ac 	bl	8001b7c <_read>
 8017a24:	1c43      	adds	r3, r0, #1
 8017a26:	d102      	bne.n	8017a2e <_read_r+0x1e>
 8017a28:	682b      	ldr	r3, [r5, #0]
 8017a2a:	b103      	cbz	r3, 8017a2e <_read_r+0x1e>
 8017a2c:	6023      	str	r3, [r4, #0]
 8017a2e:	bd38      	pop	{r3, r4, r5, pc}
 8017a30:	2400b478 	.word	0x2400b478

08017a34 <_sbrk_r>:
 8017a34:	b538      	push	{r3, r4, r5, lr}
 8017a36:	4d06      	ldr	r5, [pc, #24]	; (8017a50 <_sbrk_r+0x1c>)
 8017a38:	2300      	movs	r3, #0
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	4608      	mov	r0, r1
 8017a3e:	602b      	str	r3, [r5, #0]
 8017a40:	f7ea f90a 	bl	8001c58 <_sbrk>
 8017a44:	1c43      	adds	r3, r0, #1
 8017a46:	d102      	bne.n	8017a4e <_sbrk_r+0x1a>
 8017a48:	682b      	ldr	r3, [r5, #0]
 8017a4a:	b103      	cbz	r3, 8017a4e <_sbrk_r+0x1a>
 8017a4c:	6023      	str	r3, [r4, #0]
 8017a4e:	bd38      	pop	{r3, r4, r5, pc}
 8017a50:	2400b478 	.word	0x2400b478

08017a54 <_write_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4d07      	ldr	r5, [pc, #28]	; (8017a74 <_write_r+0x20>)
 8017a58:	4604      	mov	r4, r0
 8017a5a:	4608      	mov	r0, r1
 8017a5c:	4611      	mov	r1, r2
 8017a5e:	2200      	movs	r2, #0
 8017a60:	602a      	str	r2, [r5, #0]
 8017a62:	461a      	mov	r2, r3
 8017a64:	f7ea f8a7 	bl	8001bb6 <_write>
 8017a68:	1c43      	adds	r3, r0, #1
 8017a6a:	d102      	bne.n	8017a72 <_write_r+0x1e>
 8017a6c:	682b      	ldr	r3, [r5, #0]
 8017a6e:	b103      	cbz	r3, 8017a72 <_write_r+0x1e>
 8017a70:	6023      	str	r3, [r4, #0]
 8017a72:	bd38      	pop	{r3, r4, r5, pc}
 8017a74:	2400b478 	.word	0x2400b478

08017a78 <__errno>:
 8017a78:	4b01      	ldr	r3, [pc, #4]	; (8017a80 <__errno+0x8>)
 8017a7a:	6818      	ldr	r0, [r3, #0]
 8017a7c:	4770      	bx	lr
 8017a7e:	bf00      	nop
 8017a80:	240003c4 	.word	0x240003c4

08017a84 <__libc_init_array>:
 8017a84:	b570      	push	{r4, r5, r6, lr}
 8017a86:	4d0d      	ldr	r5, [pc, #52]	; (8017abc <__libc_init_array+0x38>)
 8017a88:	4c0d      	ldr	r4, [pc, #52]	; (8017ac0 <__libc_init_array+0x3c>)
 8017a8a:	1b64      	subs	r4, r4, r5
 8017a8c:	10a4      	asrs	r4, r4, #2
 8017a8e:	2600      	movs	r6, #0
 8017a90:	42a6      	cmp	r6, r4
 8017a92:	d109      	bne.n	8017aa8 <__libc_init_array+0x24>
 8017a94:	4d0b      	ldr	r5, [pc, #44]	; (8017ac4 <__libc_init_array+0x40>)
 8017a96:	4c0c      	ldr	r4, [pc, #48]	; (8017ac8 <__libc_init_array+0x44>)
 8017a98:	f002 fbde 	bl	801a258 <_init>
 8017a9c:	1b64      	subs	r4, r4, r5
 8017a9e:	10a4      	asrs	r4, r4, #2
 8017aa0:	2600      	movs	r6, #0
 8017aa2:	42a6      	cmp	r6, r4
 8017aa4:	d105      	bne.n	8017ab2 <__libc_init_array+0x2e>
 8017aa6:	bd70      	pop	{r4, r5, r6, pc}
 8017aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8017aac:	4798      	blx	r3
 8017aae:	3601      	adds	r6, #1
 8017ab0:	e7ee      	b.n	8017a90 <__libc_init_array+0xc>
 8017ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ab6:	4798      	blx	r3
 8017ab8:	3601      	adds	r6, #1
 8017aba:	e7f2      	b.n	8017aa2 <__libc_init_array+0x1e>
 8017abc:	0801b9c4 	.word	0x0801b9c4
 8017ac0:	0801b9c4 	.word	0x0801b9c4
 8017ac4:	0801b9c4 	.word	0x0801b9c4
 8017ac8:	0801b9c8 	.word	0x0801b9c8

08017acc <strcpy>:
 8017acc:	4603      	mov	r3, r0
 8017ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017ad2:	f803 2b01 	strb.w	r2, [r3], #1
 8017ad6:	2a00      	cmp	r2, #0
 8017ad8:	d1f9      	bne.n	8017ace <strcpy+0x2>
 8017ada:	4770      	bx	lr

08017adc <memcpy>:
 8017adc:	440a      	add	r2, r1
 8017ade:	4291      	cmp	r1, r2
 8017ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ae4:	d100      	bne.n	8017ae8 <memcpy+0xc>
 8017ae6:	4770      	bx	lr
 8017ae8:	b510      	push	{r4, lr}
 8017aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017af2:	4291      	cmp	r1, r2
 8017af4:	d1f9      	bne.n	8017aea <memcpy+0xe>
 8017af6:	bd10      	pop	{r4, pc}

08017af8 <nan>:
 8017af8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017b00 <nan+0x8>
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	00000000 	.word	0x00000000
 8017b04:	7ff80000 	.word	0x7ff80000

08017b08 <quorem>:
 8017b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b0c:	6903      	ldr	r3, [r0, #16]
 8017b0e:	690c      	ldr	r4, [r1, #16]
 8017b10:	42a3      	cmp	r3, r4
 8017b12:	4607      	mov	r7, r0
 8017b14:	db7e      	blt.n	8017c14 <quorem+0x10c>
 8017b16:	3c01      	subs	r4, #1
 8017b18:	f101 0814 	add.w	r8, r1, #20
 8017b1c:	f100 0514 	add.w	r5, r0, #20
 8017b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b24:	9301      	str	r3, [sp, #4]
 8017b26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b2e:	3301      	adds	r3, #1
 8017b30:	429a      	cmp	r2, r3
 8017b32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017b36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017b3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8017b3e:	d331      	bcc.n	8017ba4 <quorem+0x9c>
 8017b40:	f04f 0e00 	mov.w	lr, #0
 8017b44:	4640      	mov	r0, r8
 8017b46:	46ac      	mov	ip, r5
 8017b48:	46f2      	mov	sl, lr
 8017b4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8017b4e:	b293      	uxth	r3, r2
 8017b50:	fb06 e303 	mla	r3, r6, r3, lr
 8017b54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b58:	0c1a      	lsrs	r2, r3, #16
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8017b60:	f8dc a000 	ldr.w	sl, [ip]
 8017b64:	fa13 f38a 	uxtah	r3, r3, sl
 8017b68:	fb06 220e 	mla	r2, r6, lr, r2
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	9b00      	ldr	r3, [sp, #0]
 8017b70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b74:	b292      	uxth	r2, r2
 8017b76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b7e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b82:	4581      	cmp	r9, r0
 8017b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b88:	f84c 3b04 	str.w	r3, [ip], #4
 8017b8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b90:	d2db      	bcs.n	8017b4a <quorem+0x42>
 8017b92:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b96:	b92b      	cbnz	r3, 8017ba4 <quorem+0x9c>
 8017b98:	9b01      	ldr	r3, [sp, #4]
 8017b9a:	3b04      	subs	r3, #4
 8017b9c:	429d      	cmp	r5, r3
 8017b9e:	461a      	mov	r2, r3
 8017ba0:	d32c      	bcc.n	8017bfc <quorem+0xf4>
 8017ba2:	613c      	str	r4, [r7, #16]
 8017ba4:	4638      	mov	r0, r7
 8017ba6:	f001 fc1f 	bl	80193e8 <__mcmp>
 8017baa:	2800      	cmp	r0, #0
 8017bac:	db22      	blt.n	8017bf4 <quorem+0xec>
 8017bae:	3601      	adds	r6, #1
 8017bb0:	4629      	mov	r1, r5
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8017bb8:	f8d1 c000 	ldr.w	ip, [r1]
 8017bbc:	b293      	uxth	r3, r2
 8017bbe:	1ac3      	subs	r3, r0, r3
 8017bc0:	0c12      	lsrs	r2, r2, #16
 8017bc2:	fa13 f38c 	uxtah	r3, r3, ip
 8017bc6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017bd4:	45c1      	cmp	r9, r8
 8017bd6:	f841 3b04 	str.w	r3, [r1], #4
 8017bda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017bde:	d2e9      	bcs.n	8017bb4 <quorem+0xac>
 8017be0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017be4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017be8:	b922      	cbnz	r2, 8017bf4 <quorem+0xec>
 8017bea:	3b04      	subs	r3, #4
 8017bec:	429d      	cmp	r5, r3
 8017bee:	461a      	mov	r2, r3
 8017bf0:	d30a      	bcc.n	8017c08 <quorem+0x100>
 8017bf2:	613c      	str	r4, [r7, #16]
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	b003      	add	sp, #12
 8017bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bfc:	6812      	ldr	r2, [r2, #0]
 8017bfe:	3b04      	subs	r3, #4
 8017c00:	2a00      	cmp	r2, #0
 8017c02:	d1ce      	bne.n	8017ba2 <quorem+0x9a>
 8017c04:	3c01      	subs	r4, #1
 8017c06:	e7c9      	b.n	8017b9c <quorem+0x94>
 8017c08:	6812      	ldr	r2, [r2, #0]
 8017c0a:	3b04      	subs	r3, #4
 8017c0c:	2a00      	cmp	r2, #0
 8017c0e:	d1f0      	bne.n	8017bf2 <quorem+0xea>
 8017c10:	3c01      	subs	r4, #1
 8017c12:	e7eb      	b.n	8017bec <quorem+0xe4>
 8017c14:	2000      	movs	r0, #0
 8017c16:	e7ee      	b.n	8017bf6 <quorem+0xee>

08017c18 <_dtoa_r>:
 8017c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1c:	ed2d 8b02 	vpush	{d8}
 8017c20:	69c5      	ldr	r5, [r0, #28]
 8017c22:	b091      	sub	sp, #68	; 0x44
 8017c24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017c28:	ec59 8b10 	vmov	r8, r9, d0
 8017c2c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017c2e:	9106      	str	r1, [sp, #24]
 8017c30:	4606      	mov	r6, r0
 8017c32:	9208      	str	r2, [sp, #32]
 8017c34:	930c      	str	r3, [sp, #48]	; 0x30
 8017c36:	b975      	cbnz	r5, 8017c56 <_dtoa_r+0x3e>
 8017c38:	2010      	movs	r0, #16
 8017c3a:	f7fe fa27 	bl	801608c <malloc>
 8017c3e:	4602      	mov	r2, r0
 8017c40:	61f0      	str	r0, [r6, #28]
 8017c42:	b920      	cbnz	r0, 8017c4e <_dtoa_r+0x36>
 8017c44:	4ba6      	ldr	r3, [pc, #664]	; (8017ee0 <_dtoa_r+0x2c8>)
 8017c46:	21ef      	movs	r1, #239	; 0xef
 8017c48:	48a6      	ldr	r0, [pc, #664]	; (8017ee4 <_dtoa_r+0x2cc>)
 8017c4a:	f001 ffdf 	bl	8019c0c <__assert_func>
 8017c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017c52:	6005      	str	r5, [r0, #0]
 8017c54:	60c5      	str	r5, [r0, #12]
 8017c56:	69f3      	ldr	r3, [r6, #28]
 8017c58:	6819      	ldr	r1, [r3, #0]
 8017c5a:	b151      	cbz	r1, 8017c72 <_dtoa_r+0x5a>
 8017c5c:	685a      	ldr	r2, [r3, #4]
 8017c5e:	604a      	str	r2, [r1, #4]
 8017c60:	2301      	movs	r3, #1
 8017c62:	4093      	lsls	r3, r2
 8017c64:	608b      	str	r3, [r1, #8]
 8017c66:	4630      	mov	r0, r6
 8017c68:	f001 f938 	bl	8018edc <_Bfree>
 8017c6c:	69f3      	ldr	r3, [r6, #28]
 8017c6e:	2200      	movs	r2, #0
 8017c70:	601a      	str	r2, [r3, #0]
 8017c72:	f1b9 0300 	subs.w	r3, r9, #0
 8017c76:	bfbb      	ittet	lt
 8017c78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c7c:	9303      	strlt	r3, [sp, #12]
 8017c7e:	2300      	movge	r3, #0
 8017c80:	2201      	movlt	r2, #1
 8017c82:	bfac      	ite	ge
 8017c84:	6023      	strge	r3, [r4, #0]
 8017c86:	6022      	strlt	r2, [r4, #0]
 8017c88:	4b97      	ldr	r3, [pc, #604]	; (8017ee8 <_dtoa_r+0x2d0>)
 8017c8a:	9c03      	ldr	r4, [sp, #12]
 8017c8c:	43a3      	bics	r3, r4
 8017c8e:	d11c      	bne.n	8017cca <_dtoa_r+0xb2>
 8017c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c92:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c96:	6013      	str	r3, [r2, #0]
 8017c98:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017c9c:	ea53 0308 	orrs.w	r3, r3, r8
 8017ca0:	f000 84fb 	beq.w	801869a <_dtoa_r+0xa82>
 8017ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ca6:	b963      	cbnz	r3, 8017cc2 <_dtoa_r+0xaa>
 8017ca8:	4b90      	ldr	r3, [pc, #576]	; (8017eec <_dtoa_r+0x2d4>)
 8017caa:	e020      	b.n	8017cee <_dtoa_r+0xd6>
 8017cac:	4b90      	ldr	r3, [pc, #576]	; (8017ef0 <_dtoa_r+0x2d8>)
 8017cae:	9301      	str	r3, [sp, #4]
 8017cb0:	3308      	adds	r3, #8
 8017cb2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017cb4:	6013      	str	r3, [r2, #0]
 8017cb6:	9801      	ldr	r0, [sp, #4]
 8017cb8:	b011      	add	sp, #68	; 0x44
 8017cba:	ecbd 8b02 	vpop	{d8}
 8017cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc2:	4b8a      	ldr	r3, [pc, #552]	; (8017eec <_dtoa_r+0x2d4>)
 8017cc4:	9301      	str	r3, [sp, #4]
 8017cc6:	3303      	adds	r3, #3
 8017cc8:	e7f3      	b.n	8017cb2 <_dtoa_r+0x9a>
 8017cca:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017cce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd6:	d10c      	bne.n	8017cf2 <_dtoa_r+0xda>
 8017cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017cda:	2301      	movs	r3, #1
 8017cdc:	6013      	str	r3, [r2, #0]
 8017cde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f000 84d7 	beq.w	8018694 <_dtoa_r+0xa7c>
 8017ce6:	4b83      	ldr	r3, [pc, #524]	; (8017ef4 <_dtoa_r+0x2dc>)
 8017ce8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017cea:	6013      	str	r3, [r2, #0]
 8017cec:	3b01      	subs	r3, #1
 8017cee:	9301      	str	r3, [sp, #4]
 8017cf0:	e7e1      	b.n	8017cb6 <_dtoa_r+0x9e>
 8017cf2:	aa0e      	add	r2, sp, #56	; 0x38
 8017cf4:	a90f      	add	r1, sp, #60	; 0x3c
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	eeb0 0b48 	vmov.f64	d0, d8
 8017cfc:	f001 fc8a 	bl	8019614 <__d2b>
 8017d00:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8017d04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017d06:	4605      	mov	r5, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d046      	beq.n	8017d9a <_dtoa_r+0x182>
 8017d0c:	eeb0 7b48 	vmov.f64	d7, d8
 8017d10:	ee18 1a90 	vmov	r1, s17
 8017d14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8017d18:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8017d1c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8017d20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017d24:	2000      	movs	r0, #0
 8017d26:	ee07 1a90 	vmov	s15, r1
 8017d2a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8017d2e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8017ec8 <_dtoa_r+0x2b0>
 8017d32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017d36:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017ed0 <_dtoa_r+0x2b8>
 8017d3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017d3e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8017ed8 <_dtoa_r+0x2c0>
 8017d42:	ee07 3a90 	vmov	s15, r3
 8017d46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8017d4a:	eeb0 7b46 	vmov.f64	d7, d6
 8017d4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017d52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017d56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d5e:	ee16 ba90 	vmov	fp, s13
 8017d62:	9009      	str	r0, [sp, #36]	; 0x24
 8017d64:	d508      	bpl.n	8017d78 <_dtoa_r+0x160>
 8017d66:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017d6a:	eeb4 6b47 	vcmp.f64	d6, d7
 8017d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d72:	bf18      	it	ne
 8017d74:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017d78:	f1bb 0f16 	cmp.w	fp, #22
 8017d7c:	d82b      	bhi.n	8017dd6 <_dtoa_r+0x1be>
 8017d7e:	495e      	ldr	r1, [pc, #376]	; (8017ef8 <_dtoa_r+0x2e0>)
 8017d80:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8017d84:	ed91 7b00 	vldr	d7, [r1]
 8017d88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d90:	d501      	bpl.n	8017d96 <_dtoa_r+0x17e>
 8017d92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d96:	2100      	movs	r1, #0
 8017d98:	e01e      	b.n	8017dd8 <_dtoa_r+0x1c0>
 8017d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d9c:	4413      	add	r3, r2
 8017d9e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8017da2:	2920      	cmp	r1, #32
 8017da4:	bfc1      	itttt	gt
 8017da6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8017daa:	408c      	lslgt	r4, r1
 8017dac:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8017db0:	fa28 f101 	lsrgt.w	r1, r8, r1
 8017db4:	bfd6      	itet	le
 8017db6:	f1c1 0120 	rsble	r1, r1, #32
 8017dba:	4321      	orrgt	r1, r4
 8017dbc:	fa08 f101 	lslle.w	r1, r8, r1
 8017dc0:	ee07 1a90 	vmov	s15, r1
 8017dc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017dc8:	3b01      	subs	r3, #1
 8017dca:	ee17 1a90 	vmov	r1, s15
 8017dce:	2001      	movs	r0, #1
 8017dd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8017dd4:	e7a7      	b.n	8017d26 <_dtoa_r+0x10e>
 8017dd6:	2101      	movs	r1, #1
 8017dd8:	1ad2      	subs	r2, r2, r3
 8017dda:	1e53      	subs	r3, r2, #1
 8017ddc:	9305      	str	r3, [sp, #20]
 8017dde:	bf45      	ittet	mi
 8017de0:	f1c2 0301 	rsbmi	r3, r2, #1
 8017de4:	9304      	strmi	r3, [sp, #16]
 8017de6:	2300      	movpl	r3, #0
 8017de8:	2300      	movmi	r3, #0
 8017dea:	bf4c      	ite	mi
 8017dec:	9305      	strmi	r3, [sp, #20]
 8017dee:	9304      	strpl	r3, [sp, #16]
 8017df0:	f1bb 0f00 	cmp.w	fp, #0
 8017df4:	910b      	str	r1, [sp, #44]	; 0x2c
 8017df6:	db18      	blt.n	8017e2a <_dtoa_r+0x212>
 8017df8:	9b05      	ldr	r3, [sp, #20]
 8017dfa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017dfe:	445b      	add	r3, fp
 8017e00:	9305      	str	r3, [sp, #20]
 8017e02:	2300      	movs	r3, #0
 8017e04:	9a06      	ldr	r2, [sp, #24]
 8017e06:	2a09      	cmp	r2, #9
 8017e08:	d848      	bhi.n	8017e9c <_dtoa_r+0x284>
 8017e0a:	2a05      	cmp	r2, #5
 8017e0c:	bfc4      	itt	gt
 8017e0e:	3a04      	subgt	r2, #4
 8017e10:	9206      	strgt	r2, [sp, #24]
 8017e12:	9a06      	ldr	r2, [sp, #24]
 8017e14:	f1a2 0202 	sub.w	r2, r2, #2
 8017e18:	bfcc      	ite	gt
 8017e1a:	2400      	movgt	r4, #0
 8017e1c:	2401      	movle	r4, #1
 8017e1e:	2a03      	cmp	r2, #3
 8017e20:	d847      	bhi.n	8017eb2 <_dtoa_r+0x29a>
 8017e22:	e8df f002 	tbb	[pc, r2]
 8017e26:	2d0b      	.short	0x2d0b
 8017e28:	392b      	.short	0x392b
 8017e2a:	9b04      	ldr	r3, [sp, #16]
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	eba3 030b 	sub.w	r3, r3, fp
 8017e32:	9304      	str	r3, [sp, #16]
 8017e34:	920a      	str	r2, [sp, #40]	; 0x28
 8017e36:	f1cb 0300 	rsb	r3, fp, #0
 8017e3a:	e7e3      	b.n	8017e04 <_dtoa_r+0x1ec>
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	9207      	str	r2, [sp, #28]
 8017e40:	9a08      	ldr	r2, [sp, #32]
 8017e42:	2a00      	cmp	r2, #0
 8017e44:	dc38      	bgt.n	8017eb8 <_dtoa_r+0x2a0>
 8017e46:	f04f 0a01 	mov.w	sl, #1
 8017e4a:	46d1      	mov	r9, sl
 8017e4c:	4652      	mov	r2, sl
 8017e4e:	f8cd a020 	str.w	sl, [sp, #32]
 8017e52:	69f7      	ldr	r7, [r6, #28]
 8017e54:	2100      	movs	r1, #0
 8017e56:	2004      	movs	r0, #4
 8017e58:	f100 0c14 	add.w	ip, r0, #20
 8017e5c:	4594      	cmp	ip, r2
 8017e5e:	d930      	bls.n	8017ec2 <_dtoa_r+0x2aa>
 8017e60:	6079      	str	r1, [r7, #4]
 8017e62:	4630      	mov	r0, r6
 8017e64:	930d      	str	r3, [sp, #52]	; 0x34
 8017e66:	f000 fff9 	bl	8018e5c <_Balloc>
 8017e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e6c:	9001      	str	r0, [sp, #4]
 8017e6e:	4602      	mov	r2, r0
 8017e70:	2800      	cmp	r0, #0
 8017e72:	d145      	bne.n	8017f00 <_dtoa_r+0x2e8>
 8017e74:	4b21      	ldr	r3, [pc, #132]	; (8017efc <_dtoa_r+0x2e4>)
 8017e76:	f240 11af 	movw	r1, #431	; 0x1af
 8017e7a:	e6e5      	b.n	8017c48 <_dtoa_r+0x30>
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	e7de      	b.n	8017e3e <_dtoa_r+0x226>
 8017e80:	2200      	movs	r2, #0
 8017e82:	9207      	str	r2, [sp, #28]
 8017e84:	9a08      	ldr	r2, [sp, #32]
 8017e86:	eb0b 0a02 	add.w	sl, fp, r2
 8017e8a:	f10a 0901 	add.w	r9, sl, #1
 8017e8e:	464a      	mov	r2, r9
 8017e90:	2a01      	cmp	r2, #1
 8017e92:	bfb8      	it	lt
 8017e94:	2201      	movlt	r2, #1
 8017e96:	e7dc      	b.n	8017e52 <_dtoa_r+0x23a>
 8017e98:	2201      	movs	r2, #1
 8017e9a:	e7f2      	b.n	8017e82 <_dtoa_r+0x26a>
 8017e9c:	2401      	movs	r4, #1
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8017ea4:	f04f 3aff 	mov.w	sl, #4294967295
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	46d1      	mov	r9, sl
 8017eac:	2212      	movs	r2, #18
 8017eae:	9108      	str	r1, [sp, #32]
 8017eb0:	e7cf      	b.n	8017e52 <_dtoa_r+0x23a>
 8017eb2:	2201      	movs	r2, #1
 8017eb4:	9207      	str	r2, [sp, #28]
 8017eb6:	e7f5      	b.n	8017ea4 <_dtoa_r+0x28c>
 8017eb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017ebc:	46d1      	mov	r9, sl
 8017ebe:	4652      	mov	r2, sl
 8017ec0:	e7c7      	b.n	8017e52 <_dtoa_r+0x23a>
 8017ec2:	3101      	adds	r1, #1
 8017ec4:	0040      	lsls	r0, r0, #1
 8017ec6:	e7c7      	b.n	8017e58 <_dtoa_r+0x240>
 8017ec8:	636f4361 	.word	0x636f4361
 8017ecc:	3fd287a7 	.word	0x3fd287a7
 8017ed0:	8b60c8b3 	.word	0x8b60c8b3
 8017ed4:	3fc68a28 	.word	0x3fc68a28
 8017ed8:	509f79fb 	.word	0x509f79fb
 8017edc:	3fd34413 	.word	0x3fd34413
 8017ee0:	0801b732 	.word	0x0801b732
 8017ee4:	0801b749 	.word	0x0801b749
 8017ee8:	7ff00000 	.word	0x7ff00000
 8017eec:	0801b72e 	.word	0x0801b72e
 8017ef0:	0801b725 	.word	0x0801b725
 8017ef4:	0801b6fa 	.word	0x0801b6fa
 8017ef8:	0801b898 	.word	0x0801b898
 8017efc:	0801b7a1 	.word	0x0801b7a1
 8017f00:	69f2      	ldr	r2, [r6, #28]
 8017f02:	9901      	ldr	r1, [sp, #4]
 8017f04:	6011      	str	r1, [r2, #0]
 8017f06:	f1b9 0f0e 	cmp.w	r9, #14
 8017f0a:	d86c      	bhi.n	8017fe6 <_dtoa_r+0x3ce>
 8017f0c:	2c00      	cmp	r4, #0
 8017f0e:	d06a      	beq.n	8017fe6 <_dtoa_r+0x3ce>
 8017f10:	f1bb 0f00 	cmp.w	fp, #0
 8017f14:	f340 80a0 	ble.w	8018058 <_dtoa_r+0x440>
 8017f18:	4ac1      	ldr	r2, [pc, #772]	; (8018220 <_dtoa_r+0x608>)
 8017f1a:	f00b 010f 	and.w	r1, fp, #15
 8017f1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017f22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017f26:	ed92 7b00 	vldr	d7, [r2]
 8017f2a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8017f2e:	f000 8087 	beq.w	8018040 <_dtoa_r+0x428>
 8017f32:	49bc      	ldr	r1, [pc, #752]	; (8018224 <_dtoa_r+0x60c>)
 8017f34:	ed91 6b08 	vldr	d6, [r1, #32]
 8017f38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8017f3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017f40:	f002 020f 	and.w	r2, r2, #15
 8017f44:	2103      	movs	r1, #3
 8017f46:	48b7      	ldr	r0, [pc, #732]	; (8018224 <_dtoa_r+0x60c>)
 8017f48:	2a00      	cmp	r2, #0
 8017f4a:	d17b      	bne.n	8018044 <_dtoa_r+0x42c>
 8017f4c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017f50:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017f54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017f5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f5e:	2a00      	cmp	r2, #0
 8017f60:	f000 80a0 	beq.w	80180a4 <_dtoa_r+0x48c>
 8017f64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f70:	f140 8098 	bpl.w	80180a4 <_dtoa_r+0x48c>
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	f000 8094 	beq.w	80180a4 <_dtoa_r+0x48c>
 8017f7c:	f1ba 0f00 	cmp.w	sl, #0
 8017f80:	dd2f      	ble.n	8017fe2 <_dtoa_r+0x3ca>
 8017f82:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017f8e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8017f92:	3101      	adds	r1, #1
 8017f94:	4654      	mov	r4, sl
 8017f96:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017f9a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8017f9e:	ee07 1a90 	vmov	s15, r1
 8017fa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017fa6:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017faa:	ee15 7a90 	vmov	r7, s11
 8017fae:	ec51 0b15 	vmov	r0, r1, d5
 8017fb2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8017fb6:	2c00      	cmp	r4, #0
 8017fb8:	d177      	bne.n	80180aa <_dtoa_r+0x492>
 8017fba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017fbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017fc2:	ec41 0b17 	vmov	d7, r0, r1
 8017fc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fce:	f300 826a 	bgt.w	80184a6 <_dtoa_r+0x88e>
 8017fd2:	eeb1 7b47 	vneg.f64	d7, d7
 8017fd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fde:	f100 8260 	bmi.w	80184a2 <_dtoa_r+0x88a>
 8017fe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017fe8:	2a00      	cmp	r2, #0
 8017fea:	f2c0 811d 	blt.w	8018228 <_dtoa_r+0x610>
 8017fee:	f1bb 0f0e 	cmp.w	fp, #14
 8017ff2:	f300 8119 	bgt.w	8018228 <_dtoa_r+0x610>
 8017ff6:	4b8a      	ldr	r3, [pc, #552]	; (8018220 <_dtoa_r+0x608>)
 8017ff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017ffc:	ed93 6b00 	vldr	d6, [r3]
 8018000:	9b08      	ldr	r3, [sp, #32]
 8018002:	2b00      	cmp	r3, #0
 8018004:	f280 80b7 	bge.w	8018176 <_dtoa_r+0x55e>
 8018008:	f1b9 0f00 	cmp.w	r9, #0
 801800c:	f300 80b3 	bgt.w	8018176 <_dtoa_r+0x55e>
 8018010:	f040 8246 	bne.w	80184a0 <_dtoa_r+0x888>
 8018014:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018018:	ee26 6b07 	vmul.f64	d6, d6, d7
 801801c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018028:	464c      	mov	r4, r9
 801802a:	464f      	mov	r7, r9
 801802c:	f280 821c 	bge.w	8018468 <_dtoa_r+0x850>
 8018030:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018034:	2331      	movs	r3, #49	; 0x31
 8018036:	f808 3b01 	strb.w	r3, [r8], #1
 801803a:	f10b 0b01 	add.w	fp, fp, #1
 801803e:	e218      	b.n	8018472 <_dtoa_r+0x85a>
 8018040:	2102      	movs	r1, #2
 8018042:	e780      	b.n	8017f46 <_dtoa_r+0x32e>
 8018044:	07d4      	lsls	r4, r2, #31
 8018046:	d504      	bpl.n	8018052 <_dtoa_r+0x43a>
 8018048:	ed90 6b00 	vldr	d6, [r0]
 801804c:	3101      	adds	r1, #1
 801804e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018052:	1052      	asrs	r2, r2, #1
 8018054:	3008      	adds	r0, #8
 8018056:	e777      	b.n	8017f48 <_dtoa_r+0x330>
 8018058:	d022      	beq.n	80180a0 <_dtoa_r+0x488>
 801805a:	f1cb 0200 	rsb	r2, fp, #0
 801805e:	4970      	ldr	r1, [pc, #448]	; (8018220 <_dtoa_r+0x608>)
 8018060:	f002 000f 	and.w	r0, r2, #15
 8018064:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018068:	ed91 7b00 	vldr	d7, [r1]
 801806c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018074:	486b      	ldr	r0, [pc, #428]	; (8018224 <_dtoa_r+0x60c>)
 8018076:	1112      	asrs	r2, r2, #4
 8018078:	2400      	movs	r4, #0
 801807a:	2102      	movs	r1, #2
 801807c:	b92a      	cbnz	r2, 801808a <_dtoa_r+0x472>
 801807e:	2c00      	cmp	r4, #0
 8018080:	f43f af6a 	beq.w	8017f58 <_dtoa_r+0x340>
 8018084:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018088:	e766      	b.n	8017f58 <_dtoa_r+0x340>
 801808a:	07d7      	lsls	r7, r2, #31
 801808c:	d505      	bpl.n	801809a <_dtoa_r+0x482>
 801808e:	ed90 6b00 	vldr	d6, [r0]
 8018092:	3101      	adds	r1, #1
 8018094:	2401      	movs	r4, #1
 8018096:	ee27 7b06 	vmul.f64	d7, d7, d6
 801809a:	1052      	asrs	r2, r2, #1
 801809c:	3008      	adds	r0, #8
 801809e:	e7ed      	b.n	801807c <_dtoa_r+0x464>
 80180a0:	2102      	movs	r1, #2
 80180a2:	e759      	b.n	8017f58 <_dtoa_r+0x340>
 80180a4:	465a      	mov	r2, fp
 80180a6:	464c      	mov	r4, r9
 80180a8:	e775      	b.n	8017f96 <_dtoa_r+0x37e>
 80180aa:	ec41 0b17 	vmov	d7, r0, r1
 80180ae:	495c      	ldr	r1, [pc, #368]	; (8018220 <_dtoa_r+0x608>)
 80180b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80180b4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80180b8:	9901      	ldr	r1, [sp, #4]
 80180ba:	440c      	add	r4, r1
 80180bc:	9907      	ldr	r1, [sp, #28]
 80180be:	b351      	cbz	r1, 8018116 <_dtoa_r+0x4fe>
 80180c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80180c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80180c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80180cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80180d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80180d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80180d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80180dc:	ee14 1a90 	vmov	r1, s9
 80180e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80180e4:	3130      	adds	r1, #48	; 0x30
 80180e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80180ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80180ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f2:	f808 1b01 	strb.w	r1, [r8], #1
 80180f6:	d439      	bmi.n	801816c <_dtoa_r+0x554>
 80180f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80180fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018104:	d472      	bmi.n	80181ec <_dtoa_r+0x5d4>
 8018106:	45a0      	cmp	r8, r4
 8018108:	f43f af6b 	beq.w	8017fe2 <_dtoa_r+0x3ca>
 801810c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018110:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018114:	e7e0      	b.n	80180d8 <_dtoa_r+0x4c0>
 8018116:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801811a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801811e:	4620      	mov	r0, r4
 8018120:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018124:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018128:	ee14 1a90 	vmov	r1, s9
 801812c:	3130      	adds	r1, #48	; 0x30
 801812e:	f808 1b01 	strb.w	r1, [r8], #1
 8018132:	45a0      	cmp	r8, r4
 8018134:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018138:	ee36 6b45 	vsub.f64	d6, d6, d5
 801813c:	d118      	bne.n	8018170 <_dtoa_r+0x558>
 801813e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018142:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018146:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801814e:	dc4d      	bgt.n	80181ec <_dtoa_r+0x5d4>
 8018150:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018154:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815c:	f57f af41 	bpl.w	8017fe2 <_dtoa_r+0x3ca>
 8018160:	4680      	mov	r8, r0
 8018162:	3801      	subs	r0, #1
 8018164:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018168:	2b30      	cmp	r3, #48	; 0x30
 801816a:	d0f9      	beq.n	8018160 <_dtoa_r+0x548>
 801816c:	4693      	mov	fp, r2
 801816e:	e02a      	b.n	80181c6 <_dtoa_r+0x5ae>
 8018170:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018174:	e7d6      	b.n	8018124 <_dtoa_r+0x50c>
 8018176:	ed9d 7b02 	vldr	d7, [sp, #8]
 801817a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801817e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018182:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018186:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801818a:	ee15 3a10 	vmov	r3, s10
 801818e:	3330      	adds	r3, #48	; 0x30
 8018190:	f808 3b01 	strb.w	r3, [r8], #1
 8018194:	9b01      	ldr	r3, [sp, #4]
 8018196:	eba8 0303 	sub.w	r3, r8, r3
 801819a:	4599      	cmp	r9, r3
 801819c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80181a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80181a4:	d133      	bne.n	801820e <_dtoa_r+0x5f6>
 80181a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80181aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80181ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b2:	dc1a      	bgt.n	80181ea <_dtoa_r+0x5d2>
 80181b4:	eeb4 7b46 	vcmp.f64	d7, d6
 80181b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181bc:	d103      	bne.n	80181c6 <_dtoa_r+0x5ae>
 80181be:	ee15 3a10 	vmov	r3, s10
 80181c2:	07d9      	lsls	r1, r3, #31
 80181c4:	d411      	bmi.n	80181ea <_dtoa_r+0x5d2>
 80181c6:	4629      	mov	r1, r5
 80181c8:	4630      	mov	r0, r6
 80181ca:	f000 fe87 	bl	8018edc <_Bfree>
 80181ce:	2300      	movs	r3, #0
 80181d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181d2:	f888 3000 	strb.w	r3, [r8]
 80181d6:	f10b 0301 	add.w	r3, fp, #1
 80181da:	6013      	str	r3, [r2, #0]
 80181dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181de:	2b00      	cmp	r3, #0
 80181e0:	f43f ad69 	beq.w	8017cb6 <_dtoa_r+0x9e>
 80181e4:	f8c3 8000 	str.w	r8, [r3]
 80181e8:	e565      	b.n	8017cb6 <_dtoa_r+0x9e>
 80181ea:	465a      	mov	r2, fp
 80181ec:	4643      	mov	r3, r8
 80181ee:	4698      	mov	r8, r3
 80181f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80181f4:	2939      	cmp	r1, #57	; 0x39
 80181f6:	d106      	bne.n	8018206 <_dtoa_r+0x5ee>
 80181f8:	9901      	ldr	r1, [sp, #4]
 80181fa:	4299      	cmp	r1, r3
 80181fc:	d1f7      	bne.n	80181ee <_dtoa_r+0x5d6>
 80181fe:	9801      	ldr	r0, [sp, #4]
 8018200:	2130      	movs	r1, #48	; 0x30
 8018202:	3201      	adds	r2, #1
 8018204:	7001      	strb	r1, [r0, #0]
 8018206:	7819      	ldrb	r1, [r3, #0]
 8018208:	3101      	adds	r1, #1
 801820a:	7019      	strb	r1, [r3, #0]
 801820c:	e7ae      	b.n	801816c <_dtoa_r+0x554>
 801820e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821a:	d1b2      	bne.n	8018182 <_dtoa_r+0x56a>
 801821c:	e7d3      	b.n	80181c6 <_dtoa_r+0x5ae>
 801821e:	bf00      	nop
 8018220:	0801b898 	.word	0x0801b898
 8018224:	0801b870 	.word	0x0801b870
 8018228:	9907      	ldr	r1, [sp, #28]
 801822a:	2900      	cmp	r1, #0
 801822c:	f000 80d0 	beq.w	80183d0 <_dtoa_r+0x7b8>
 8018230:	9906      	ldr	r1, [sp, #24]
 8018232:	2901      	cmp	r1, #1
 8018234:	f300 80b4 	bgt.w	80183a0 <_dtoa_r+0x788>
 8018238:	9909      	ldr	r1, [sp, #36]	; 0x24
 801823a:	2900      	cmp	r1, #0
 801823c:	f000 80ac 	beq.w	8018398 <_dtoa_r+0x780>
 8018240:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018244:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018248:	461c      	mov	r4, r3
 801824a:	9309      	str	r3, [sp, #36]	; 0x24
 801824c:	9b04      	ldr	r3, [sp, #16]
 801824e:	4413      	add	r3, r2
 8018250:	9304      	str	r3, [sp, #16]
 8018252:	9b05      	ldr	r3, [sp, #20]
 8018254:	2101      	movs	r1, #1
 8018256:	4413      	add	r3, r2
 8018258:	4630      	mov	r0, r6
 801825a:	9305      	str	r3, [sp, #20]
 801825c:	f000 ff3e 	bl	80190dc <__i2b>
 8018260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018262:	4607      	mov	r7, r0
 8018264:	f1b8 0f00 	cmp.w	r8, #0
 8018268:	d00d      	beq.n	8018286 <_dtoa_r+0x66e>
 801826a:	9a05      	ldr	r2, [sp, #20]
 801826c:	2a00      	cmp	r2, #0
 801826e:	dd0a      	ble.n	8018286 <_dtoa_r+0x66e>
 8018270:	4542      	cmp	r2, r8
 8018272:	9904      	ldr	r1, [sp, #16]
 8018274:	bfa8      	it	ge
 8018276:	4642      	movge	r2, r8
 8018278:	1a89      	subs	r1, r1, r2
 801827a:	9104      	str	r1, [sp, #16]
 801827c:	9905      	ldr	r1, [sp, #20]
 801827e:	eba8 0802 	sub.w	r8, r8, r2
 8018282:	1a8a      	subs	r2, r1, r2
 8018284:	9205      	str	r2, [sp, #20]
 8018286:	b303      	cbz	r3, 80182ca <_dtoa_r+0x6b2>
 8018288:	9a07      	ldr	r2, [sp, #28]
 801828a:	2a00      	cmp	r2, #0
 801828c:	f000 80a5 	beq.w	80183da <_dtoa_r+0x7c2>
 8018290:	2c00      	cmp	r4, #0
 8018292:	dd13      	ble.n	80182bc <_dtoa_r+0x6a4>
 8018294:	4639      	mov	r1, r7
 8018296:	4622      	mov	r2, r4
 8018298:	4630      	mov	r0, r6
 801829a:	930d      	str	r3, [sp, #52]	; 0x34
 801829c:	f000 ffde 	bl	801925c <__pow5mult>
 80182a0:	462a      	mov	r2, r5
 80182a2:	4601      	mov	r1, r0
 80182a4:	4607      	mov	r7, r0
 80182a6:	4630      	mov	r0, r6
 80182a8:	f000 ff2e 	bl	8019108 <__multiply>
 80182ac:	4629      	mov	r1, r5
 80182ae:	9009      	str	r0, [sp, #36]	; 0x24
 80182b0:	4630      	mov	r0, r6
 80182b2:	f000 fe13 	bl	8018edc <_Bfree>
 80182b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80182b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182ba:	4615      	mov	r5, r2
 80182bc:	1b1a      	subs	r2, r3, r4
 80182be:	d004      	beq.n	80182ca <_dtoa_r+0x6b2>
 80182c0:	4629      	mov	r1, r5
 80182c2:	4630      	mov	r0, r6
 80182c4:	f000 ffca 	bl	801925c <__pow5mult>
 80182c8:	4605      	mov	r5, r0
 80182ca:	2101      	movs	r1, #1
 80182cc:	4630      	mov	r0, r6
 80182ce:	f000 ff05 	bl	80190dc <__i2b>
 80182d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	4604      	mov	r4, r0
 80182d8:	f340 8081 	ble.w	80183de <_dtoa_r+0x7c6>
 80182dc:	461a      	mov	r2, r3
 80182de:	4601      	mov	r1, r0
 80182e0:	4630      	mov	r0, r6
 80182e2:	f000 ffbb 	bl	801925c <__pow5mult>
 80182e6:	9b06      	ldr	r3, [sp, #24]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	4604      	mov	r4, r0
 80182ec:	dd7a      	ble.n	80183e4 <_dtoa_r+0x7cc>
 80182ee:	2300      	movs	r3, #0
 80182f0:	9309      	str	r3, [sp, #36]	; 0x24
 80182f2:	6922      	ldr	r2, [r4, #16]
 80182f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80182f8:	6910      	ldr	r0, [r2, #16]
 80182fa:	f000 fea1 	bl	8019040 <__hi0bits>
 80182fe:	f1c0 0020 	rsb	r0, r0, #32
 8018302:	9b05      	ldr	r3, [sp, #20]
 8018304:	4418      	add	r0, r3
 8018306:	f010 001f 	ands.w	r0, r0, #31
 801830a:	f000 8093 	beq.w	8018434 <_dtoa_r+0x81c>
 801830e:	f1c0 0220 	rsb	r2, r0, #32
 8018312:	2a04      	cmp	r2, #4
 8018314:	f340 8085 	ble.w	8018422 <_dtoa_r+0x80a>
 8018318:	9b04      	ldr	r3, [sp, #16]
 801831a:	f1c0 001c 	rsb	r0, r0, #28
 801831e:	4403      	add	r3, r0
 8018320:	9304      	str	r3, [sp, #16]
 8018322:	9b05      	ldr	r3, [sp, #20]
 8018324:	4480      	add	r8, r0
 8018326:	4403      	add	r3, r0
 8018328:	9305      	str	r3, [sp, #20]
 801832a:	9b04      	ldr	r3, [sp, #16]
 801832c:	2b00      	cmp	r3, #0
 801832e:	dd05      	ble.n	801833c <_dtoa_r+0x724>
 8018330:	4629      	mov	r1, r5
 8018332:	461a      	mov	r2, r3
 8018334:	4630      	mov	r0, r6
 8018336:	f000 ffeb 	bl	8019310 <__lshift>
 801833a:	4605      	mov	r5, r0
 801833c:	9b05      	ldr	r3, [sp, #20]
 801833e:	2b00      	cmp	r3, #0
 8018340:	dd05      	ble.n	801834e <_dtoa_r+0x736>
 8018342:	4621      	mov	r1, r4
 8018344:	461a      	mov	r2, r3
 8018346:	4630      	mov	r0, r6
 8018348:	f000 ffe2 	bl	8019310 <__lshift>
 801834c:	4604      	mov	r4, r0
 801834e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018350:	2b00      	cmp	r3, #0
 8018352:	d071      	beq.n	8018438 <_dtoa_r+0x820>
 8018354:	4621      	mov	r1, r4
 8018356:	4628      	mov	r0, r5
 8018358:	f001 f846 	bl	80193e8 <__mcmp>
 801835c:	2800      	cmp	r0, #0
 801835e:	da6b      	bge.n	8018438 <_dtoa_r+0x820>
 8018360:	2300      	movs	r3, #0
 8018362:	4629      	mov	r1, r5
 8018364:	220a      	movs	r2, #10
 8018366:	4630      	mov	r0, r6
 8018368:	f000 fdda 	bl	8018f20 <__multadd>
 801836c:	9b07      	ldr	r3, [sp, #28]
 801836e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018372:	4605      	mov	r5, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	f000 8197 	beq.w	80186a8 <_dtoa_r+0xa90>
 801837a:	4639      	mov	r1, r7
 801837c:	2300      	movs	r3, #0
 801837e:	220a      	movs	r2, #10
 8018380:	4630      	mov	r0, r6
 8018382:	f000 fdcd 	bl	8018f20 <__multadd>
 8018386:	f1ba 0f00 	cmp.w	sl, #0
 801838a:	4607      	mov	r7, r0
 801838c:	f300 8093 	bgt.w	80184b6 <_dtoa_r+0x89e>
 8018390:	9b06      	ldr	r3, [sp, #24]
 8018392:	2b02      	cmp	r3, #2
 8018394:	dc57      	bgt.n	8018446 <_dtoa_r+0x82e>
 8018396:	e08e      	b.n	80184b6 <_dtoa_r+0x89e>
 8018398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801839a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801839e:	e751      	b.n	8018244 <_dtoa_r+0x62c>
 80183a0:	f109 34ff 	add.w	r4, r9, #4294967295
 80183a4:	42a3      	cmp	r3, r4
 80183a6:	bfbf      	itttt	lt
 80183a8:	1ae2      	sublt	r2, r4, r3
 80183aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80183ac:	189b      	addlt	r3, r3, r2
 80183ae:	930a      	strlt	r3, [sp, #40]	; 0x28
 80183b0:	bfae      	itee	ge
 80183b2:	1b1c      	subge	r4, r3, r4
 80183b4:	4623      	movlt	r3, r4
 80183b6:	2400      	movlt	r4, #0
 80183b8:	f1b9 0f00 	cmp.w	r9, #0
 80183bc:	bfb5      	itete	lt
 80183be:	9a04      	ldrlt	r2, [sp, #16]
 80183c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80183c4:	eba2 0809 	sublt.w	r8, r2, r9
 80183c8:	464a      	movge	r2, r9
 80183ca:	bfb8      	it	lt
 80183cc:	2200      	movlt	r2, #0
 80183ce:	e73c      	b.n	801824a <_dtoa_r+0x632>
 80183d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80183d4:	9f07      	ldr	r7, [sp, #28]
 80183d6:	461c      	mov	r4, r3
 80183d8:	e744      	b.n	8018264 <_dtoa_r+0x64c>
 80183da:	461a      	mov	r2, r3
 80183dc:	e770      	b.n	80182c0 <_dtoa_r+0x6a8>
 80183de:	9b06      	ldr	r3, [sp, #24]
 80183e0:	2b01      	cmp	r3, #1
 80183e2:	dc18      	bgt.n	8018416 <_dtoa_r+0x7fe>
 80183e4:	9b02      	ldr	r3, [sp, #8]
 80183e6:	b9b3      	cbnz	r3, 8018416 <_dtoa_r+0x7fe>
 80183e8:	9b03      	ldr	r3, [sp, #12]
 80183ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80183ee:	b9a2      	cbnz	r2, 801841a <_dtoa_r+0x802>
 80183f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80183f4:	0d12      	lsrs	r2, r2, #20
 80183f6:	0512      	lsls	r2, r2, #20
 80183f8:	b18a      	cbz	r2, 801841e <_dtoa_r+0x806>
 80183fa:	9b04      	ldr	r3, [sp, #16]
 80183fc:	3301      	adds	r3, #1
 80183fe:	9304      	str	r3, [sp, #16]
 8018400:	9b05      	ldr	r3, [sp, #20]
 8018402:	3301      	adds	r3, #1
 8018404:	9305      	str	r3, [sp, #20]
 8018406:	2301      	movs	r3, #1
 8018408:	9309      	str	r3, [sp, #36]	; 0x24
 801840a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801840c:	2b00      	cmp	r3, #0
 801840e:	f47f af70 	bne.w	80182f2 <_dtoa_r+0x6da>
 8018412:	2001      	movs	r0, #1
 8018414:	e775      	b.n	8018302 <_dtoa_r+0x6ea>
 8018416:	2300      	movs	r3, #0
 8018418:	e7f6      	b.n	8018408 <_dtoa_r+0x7f0>
 801841a:	9b02      	ldr	r3, [sp, #8]
 801841c:	e7f4      	b.n	8018408 <_dtoa_r+0x7f0>
 801841e:	9209      	str	r2, [sp, #36]	; 0x24
 8018420:	e7f3      	b.n	801840a <_dtoa_r+0x7f2>
 8018422:	d082      	beq.n	801832a <_dtoa_r+0x712>
 8018424:	9b04      	ldr	r3, [sp, #16]
 8018426:	321c      	adds	r2, #28
 8018428:	4413      	add	r3, r2
 801842a:	9304      	str	r3, [sp, #16]
 801842c:	9b05      	ldr	r3, [sp, #20]
 801842e:	4490      	add	r8, r2
 8018430:	4413      	add	r3, r2
 8018432:	e779      	b.n	8018328 <_dtoa_r+0x710>
 8018434:	4602      	mov	r2, r0
 8018436:	e7f5      	b.n	8018424 <_dtoa_r+0x80c>
 8018438:	f1b9 0f00 	cmp.w	r9, #0
 801843c:	dc36      	bgt.n	80184ac <_dtoa_r+0x894>
 801843e:	9b06      	ldr	r3, [sp, #24]
 8018440:	2b02      	cmp	r3, #2
 8018442:	dd33      	ble.n	80184ac <_dtoa_r+0x894>
 8018444:	46ca      	mov	sl, r9
 8018446:	f1ba 0f00 	cmp.w	sl, #0
 801844a:	d10d      	bne.n	8018468 <_dtoa_r+0x850>
 801844c:	4621      	mov	r1, r4
 801844e:	4653      	mov	r3, sl
 8018450:	2205      	movs	r2, #5
 8018452:	4630      	mov	r0, r6
 8018454:	f000 fd64 	bl	8018f20 <__multadd>
 8018458:	4601      	mov	r1, r0
 801845a:	4604      	mov	r4, r0
 801845c:	4628      	mov	r0, r5
 801845e:	f000 ffc3 	bl	80193e8 <__mcmp>
 8018462:	2800      	cmp	r0, #0
 8018464:	f73f ade4 	bgt.w	8018030 <_dtoa_r+0x418>
 8018468:	9b08      	ldr	r3, [sp, #32]
 801846a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801846e:	ea6f 0b03 	mvn.w	fp, r3
 8018472:	f04f 0900 	mov.w	r9, #0
 8018476:	4621      	mov	r1, r4
 8018478:	4630      	mov	r0, r6
 801847a:	f000 fd2f 	bl	8018edc <_Bfree>
 801847e:	2f00      	cmp	r7, #0
 8018480:	f43f aea1 	beq.w	80181c6 <_dtoa_r+0x5ae>
 8018484:	f1b9 0f00 	cmp.w	r9, #0
 8018488:	d005      	beq.n	8018496 <_dtoa_r+0x87e>
 801848a:	45b9      	cmp	r9, r7
 801848c:	d003      	beq.n	8018496 <_dtoa_r+0x87e>
 801848e:	4649      	mov	r1, r9
 8018490:	4630      	mov	r0, r6
 8018492:	f000 fd23 	bl	8018edc <_Bfree>
 8018496:	4639      	mov	r1, r7
 8018498:	4630      	mov	r0, r6
 801849a:	f000 fd1f 	bl	8018edc <_Bfree>
 801849e:	e692      	b.n	80181c6 <_dtoa_r+0x5ae>
 80184a0:	2400      	movs	r4, #0
 80184a2:	4627      	mov	r7, r4
 80184a4:	e7e0      	b.n	8018468 <_dtoa_r+0x850>
 80184a6:	4693      	mov	fp, r2
 80184a8:	4627      	mov	r7, r4
 80184aa:	e5c1      	b.n	8018030 <_dtoa_r+0x418>
 80184ac:	9b07      	ldr	r3, [sp, #28]
 80184ae:	46ca      	mov	sl, r9
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	f000 8100 	beq.w	80186b6 <_dtoa_r+0xa9e>
 80184b6:	f1b8 0f00 	cmp.w	r8, #0
 80184ba:	dd05      	ble.n	80184c8 <_dtoa_r+0x8b0>
 80184bc:	4639      	mov	r1, r7
 80184be:	4642      	mov	r2, r8
 80184c0:	4630      	mov	r0, r6
 80184c2:	f000 ff25 	bl	8019310 <__lshift>
 80184c6:	4607      	mov	r7, r0
 80184c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d05d      	beq.n	801858a <_dtoa_r+0x972>
 80184ce:	6879      	ldr	r1, [r7, #4]
 80184d0:	4630      	mov	r0, r6
 80184d2:	f000 fcc3 	bl	8018e5c <_Balloc>
 80184d6:	4680      	mov	r8, r0
 80184d8:	b928      	cbnz	r0, 80184e6 <_dtoa_r+0x8ce>
 80184da:	4b82      	ldr	r3, [pc, #520]	; (80186e4 <_dtoa_r+0xacc>)
 80184dc:	4602      	mov	r2, r0
 80184de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80184e2:	f7ff bbb1 	b.w	8017c48 <_dtoa_r+0x30>
 80184e6:	693a      	ldr	r2, [r7, #16]
 80184e8:	3202      	adds	r2, #2
 80184ea:	0092      	lsls	r2, r2, #2
 80184ec:	f107 010c 	add.w	r1, r7, #12
 80184f0:	300c      	adds	r0, #12
 80184f2:	f7ff faf3 	bl	8017adc <memcpy>
 80184f6:	2201      	movs	r2, #1
 80184f8:	4641      	mov	r1, r8
 80184fa:	4630      	mov	r0, r6
 80184fc:	f000 ff08 	bl	8019310 <__lshift>
 8018500:	9b01      	ldr	r3, [sp, #4]
 8018502:	3301      	adds	r3, #1
 8018504:	9304      	str	r3, [sp, #16]
 8018506:	9b01      	ldr	r3, [sp, #4]
 8018508:	4453      	add	r3, sl
 801850a:	9308      	str	r3, [sp, #32]
 801850c:	9b02      	ldr	r3, [sp, #8]
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	46b9      	mov	r9, r7
 8018514:	9307      	str	r3, [sp, #28]
 8018516:	4607      	mov	r7, r0
 8018518:	9b04      	ldr	r3, [sp, #16]
 801851a:	4621      	mov	r1, r4
 801851c:	3b01      	subs	r3, #1
 801851e:	4628      	mov	r0, r5
 8018520:	9302      	str	r3, [sp, #8]
 8018522:	f7ff faf1 	bl	8017b08 <quorem>
 8018526:	4603      	mov	r3, r0
 8018528:	3330      	adds	r3, #48	; 0x30
 801852a:	9005      	str	r0, [sp, #20]
 801852c:	4649      	mov	r1, r9
 801852e:	4628      	mov	r0, r5
 8018530:	9309      	str	r3, [sp, #36]	; 0x24
 8018532:	f000 ff59 	bl	80193e8 <__mcmp>
 8018536:	463a      	mov	r2, r7
 8018538:	4682      	mov	sl, r0
 801853a:	4621      	mov	r1, r4
 801853c:	4630      	mov	r0, r6
 801853e:	f000 ff6f 	bl	8019420 <__mdiff>
 8018542:	68c2      	ldr	r2, [r0, #12]
 8018544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018546:	4680      	mov	r8, r0
 8018548:	bb0a      	cbnz	r2, 801858e <_dtoa_r+0x976>
 801854a:	4601      	mov	r1, r0
 801854c:	4628      	mov	r0, r5
 801854e:	f000 ff4b 	bl	80193e8 <__mcmp>
 8018552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018554:	4602      	mov	r2, r0
 8018556:	4641      	mov	r1, r8
 8018558:	4630      	mov	r0, r6
 801855a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801855e:	f000 fcbd 	bl	8018edc <_Bfree>
 8018562:	9b06      	ldr	r3, [sp, #24]
 8018564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018566:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801856a:	ea43 0102 	orr.w	r1, r3, r2
 801856e:	9b07      	ldr	r3, [sp, #28]
 8018570:	4319      	orrs	r1, r3
 8018572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018574:	d10d      	bne.n	8018592 <_dtoa_r+0x97a>
 8018576:	2b39      	cmp	r3, #57	; 0x39
 8018578:	d029      	beq.n	80185ce <_dtoa_r+0x9b6>
 801857a:	f1ba 0f00 	cmp.w	sl, #0
 801857e:	dd01      	ble.n	8018584 <_dtoa_r+0x96c>
 8018580:	9b05      	ldr	r3, [sp, #20]
 8018582:	3331      	adds	r3, #49	; 0x31
 8018584:	9a02      	ldr	r2, [sp, #8]
 8018586:	7013      	strb	r3, [r2, #0]
 8018588:	e775      	b.n	8018476 <_dtoa_r+0x85e>
 801858a:	4638      	mov	r0, r7
 801858c:	e7b8      	b.n	8018500 <_dtoa_r+0x8e8>
 801858e:	2201      	movs	r2, #1
 8018590:	e7e1      	b.n	8018556 <_dtoa_r+0x93e>
 8018592:	f1ba 0f00 	cmp.w	sl, #0
 8018596:	db06      	blt.n	80185a6 <_dtoa_r+0x98e>
 8018598:	9906      	ldr	r1, [sp, #24]
 801859a:	ea41 0a0a 	orr.w	sl, r1, sl
 801859e:	9907      	ldr	r1, [sp, #28]
 80185a0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80185a4:	d120      	bne.n	80185e8 <_dtoa_r+0x9d0>
 80185a6:	2a00      	cmp	r2, #0
 80185a8:	ddec      	ble.n	8018584 <_dtoa_r+0x96c>
 80185aa:	4629      	mov	r1, r5
 80185ac:	2201      	movs	r2, #1
 80185ae:	4630      	mov	r0, r6
 80185b0:	9304      	str	r3, [sp, #16]
 80185b2:	f000 fead 	bl	8019310 <__lshift>
 80185b6:	4621      	mov	r1, r4
 80185b8:	4605      	mov	r5, r0
 80185ba:	f000 ff15 	bl	80193e8 <__mcmp>
 80185be:	2800      	cmp	r0, #0
 80185c0:	9b04      	ldr	r3, [sp, #16]
 80185c2:	dc02      	bgt.n	80185ca <_dtoa_r+0x9b2>
 80185c4:	d1de      	bne.n	8018584 <_dtoa_r+0x96c>
 80185c6:	07da      	lsls	r2, r3, #31
 80185c8:	d5dc      	bpl.n	8018584 <_dtoa_r+0x96c>
 80185ca:	2b39      	cmp	r3, #57	; 0x39
 80185cc:	d1d8      	bne.n	8018580 <_dtoa_r+0x968>
 80185ce:	9a02      	ldr	r2, [sp, #8]
 80185d0:	2339      	movs	r3, #57	; 0x39
 80185d2:	7013      	strb	r3, [r2, #0]
 80185d4:	4643      	mov	r3, r8
 80185d6:	4698      	mov	r8, r3
 80185d8:	3b01      	subs	r3, #1
 80185da:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80185de:	2a39      	cmp	r2, #57	; 0x39
 80185e0:	d051      	beq.n	8018686 <_dtoa_r+0xa6e>
 80185e2:	3201      	adds	r2, #1
 80185e4:	701a      	strb	r2, [r3, #0]
 80185e6:	e746      	b.n	8018476 <_dtoa_r+0x85e>
 80185e8:	2a00      	cmp	r2, #0
 80185ea:	dd03      	ble.n	80185f4 <_dtoa_r+0x9dc>
 80185ec:	2b39      	cmp	r3, #57	; 0x39
 80185ee:	d0ee      	beq.n	80185ce <_dtoa_r+0x9b6>
 80185f0:	3301      	adds	r3, #1
 80185f2:	e7c7      	b.n	8018584 <_dtoa_r+0x96c>
 80185f4:	9a04      	ldr	r2, [sp, #16]
 80185f6:	9908      	ldr	r1, [sp, #32]
 80185f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80185fc:	428a      	cmp	r2, r1
 80185fe:	d02b      	beq.n	8018658 <_dtoa_r+0xa40>
 8018600:	4629      	mov	r1, r5
 8018602:	2300      	movs	r3, #0
 8018604:	220a      	movs	r2, #10
 8018606:	4630      	mov	r0, r6
 8018608:	f000 fc8a 	bl	8018f20 <__multadd>
 801860c:	45b9      	cmp	r9, r7
 801860e:	4605      	mov	r5, r0
 8018610:	f04f 0300 	mov.w	r3, #0
 8018614:	f04f 020a 	mov.w	r2, #10
 8018618:	4649      	mov	r1, r9
 801861a:	4630      	mov	r0, r6
 801861c:	d107      	bne.n	801862e <_dtoa_r+0xa16>
 801861e:	f000 fc7f 	bl	8018f20 <__multadd>
 8018622:	4681      	mov	r9, r0
 8018624:	4607      	mov	r7, r0
 8018626:	9b04      	ldr	r3, [sp, #16]
 8018628:	3301      	adds	r3, #1
 801862a:	9304      	str	r3, [sp, #16]
 801862c:	e774      	b.n	8018518 <_dtoa_r+0x900>
 801862e:	f000 fc77 	bl	8018f20 <__multadd>
 8018632:	4639      	mov	r1, r7
 8018634:	4681      	mov	r9, r0
 8018636:	2300      	movs	r3, #0
 8018638:	220a      	movs	r2, #10
 801863a:	4630      	mov	r0, r6
 801863c:	f000 fc70 	bl	8018f20 <__multadd>
 8018640:	4607      	mov	r7, r0
 8018642:	e7f0      	b.n	8018626 <_dtoa_r+0xa0e>
 8018644:	f1ba 0f00 	cmp.w	sl, #0
 8018648:	9a01      	ldr	r2, [sp, #4]
 801864a:	bfcc      	ite	gt
 801864c:	46d0      	movgt	r8, sl
 801864e:	f04f 0801 	movle.w	r8, #1
 8018652:	4490      	add	r8, r2
 8018654:	f04f 0900 	mov.w	r9, #0
 8018658:	4629      	mov	r1, r5
 801865a:	2201      	movs	r2, #1
 801865c:	4630      	mov	r0, r6
 801865e:	9302      	str	r3, [sp, #8]
 8018660:	f000 fe56 	bl	8019310 <__lshift>
 8018664:	4621      	mov	r1, r4
 8018666:	4605      	mov	r5, r0
 8018668:	f000 febe 	bl	80193e8 <__mcmp>
 801866c:	2800      	cmp	r0, #0
 801866e:	dcb1      	bgt.n	80185d4 <_dtoa_r+0x9bc>
 8018670:	d102      	bne.n	8018678 <_dtoa_r+0xa60>
 8018672:	9b02      	ldr	r3, [sp, #8]
 8018674:	07db      	lsls	r3, r3, #31
 8018676:	d4ad      	bmi.n	80185d4 <_dtoa_r+0x9bc>
 8018678:	4643      	mov	r3, r8
 801867a:	4698      	mov	r8, r3
 801867c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018680:	2a30      	cmp	r2, #48	; 0x30
 8018682:	d0fa      	beq.n	801867a <_dtoa_r+0xa62>
 8018684:	e6f7      	b.n	8018476 <_dtoa_r+0x85e>
 8018686:	9a01      	ldr	r2, [sp, #4]
 8018688:	429a      	cmp	r2, r3
 801868a:	d1a4      	bne.n	80185d6 <_dtoa_r+0x9be>
 801868c:	f10b 0b01 	add.w	fp, fp, #1
 8018690:	2331      	movs	r3, #49	; 0x31
 8018692:	e778      	b.n	8018586 <_dtoa_r+0x96e>
 8018694:	4b14      	ldr	r3, [pc, #80]	; (80186e8 <_dtoa_r+0xad0>)
 8018696:	f7ff bb2a 	b.w	8017cee <_dtoa_r+0xd6>
 801869a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801869c:	2b00      	cmp	r3, #0
 801869e:	f47f ab05 	bne.w	8017cac <_dtoa_r+0x94>
 80186a2:	4b12      	ldr	r3, [pc, #72]	; (80186ec <_dtoa_r+0xad4>)
 80186a4:	f7ff bb23 	b.w	8017cee <_dtoa_r+0xd6>
 80186a8:	f1ba 0f00 	cmp.w	sl, #0
 80186ac:	dc03      	bgt.n	80186b6 <_dtoa_r+0xa9e>
 80186ae:	9b06      	ldr	r3, [sp, #24]
 80186b0:	2b02      	cmp	r3, #2
 80186b2:	f73f aec8 	bgt.w	8018446 <_dtoa_r+0x82e>
 80186b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80186ba:	4621      	mov	r1, r4
 80186bc:	4628      	mov	r0, r5
 80186be:	f7ff fa23 	bl	8017b08 <quorem>
 80186c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80186c6:	f808 3b01 	strb.w	r3, [r8], #1
 80186ca:	9a01      	ldr	r2, [sp, #4]
 80186cc:	eba8 0202 	sub.w	r2, r8, r2
 80186d0:	4592      	cmp	sl, r2
 80186d2:	ddb7      	ble.n	8018644 <_dtoa_r+0xa2c>
 80186d4:	4629      	mov	r1, r5
 80186d6:	2300      	movs	r3, #0
 80186d8:	220a      	movs	r2, #10
 80186da:	4630      	mov	r0, r6
 80186dc:	f000 fc20 	bl	8018f20 <__multadd>
 80186e0:	4605      	mov	r5, r0
 80186e2:	e7ea      	b.n	80186ba <_dtoa_r+0xaa2>
 80186e4:	0801b7a1 	.word	0x0801b7a1
 80186e8:	0801b6f9 	.word	0x0801b6f9
 80186ec:	0801b725 	.word	0x0801b725

080186f0 <_free_r>:
 80186f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186f2:	2900      	cmp	r1, #0
 80186f4:	d044      	beq.n	8018780 <_free_r+0x90>
 80186f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186fa:	9001      	str	r0, [sp, #4]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	f1a1 0404 	sub.w	r4, r1, #4
 8018702:	bfb8      	it	lt
 8018704:	18e4      	addlt	r4, r4, r3
 8018706:	f7fd fd71 	bl	80161ec <__malloc_lock>
 801870a:	4a1e      	ldr	r2, [pc, #120]	; (8018784 <_free_r+0x94>)
 801870c:	9801      	ldr	r0, [sp, #4]
 801870e:	6813      	ldr	r3, [r2, #0]
 8018710:	b933      	cbnz	r3, 8018720 <_free_r+0x30>
 8018712:	6063      	str	r3, [r4, #4]
 8018714:	6014      	str	r4, [r2, #0]
 8018716:	b003      	add	sp, #12
 8018718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801871c:	f7fd bd6c 	b.w	80161f8 <__malloc_unlock>
 8018720:	42a3      	cmp	r3, r4
 8018722:	d908      	bls.n	8018736 <_free_r+0x46>
 8018724:	6825      	ldr	r5, [r4, #0]
 8018726:	1961      	adds	r1, r4, r5
 8018728:	428b      	cmp	r3, r1
 801872a:	bf01      	itttt	eq
 801872c:	6819      	ldreq	r1, [r3, #0]
 801872e:	685b      	ldreq	r3, [r3, #4]
 8018730:	1949      	addeq	r1, r1, r5
 8018732:	6021      	streq	r1, [r4, #0]
 8018734:	e7ed      	b.n	8018712 <_free_r+0x22>
 8018736:	461a      	mov	r2, r3
 8018738:	685b      	ldr	r3, [r3, #4]
 801873a:	b10b      	cbz	r3, 8018740 <_free_r+0x50>
 801873c:	42a3      	cmp	r3, r4
 801873e:	d9fa      	bls.n	8018736 <_free_r+0x46>
 8018740:	6811      	ldr	r1, [r2, #0]
 8018742:	1855      	adds	r5, r2, r1
 8018744:	42a5      	cmp	r5, r4
 8018746:	d10b      	bne.n	8018760 <_free_r+0x70>
 8018748:	6824      	ldr	r4, [r4, #0]
 801874a:	4421      	add	r1, r4
 801874c:	1854      	adds	r4, r2, r1
 801874e:	42a3      	cmp	r3, r4
 8018750:	6011      	str	r1, [r2, #0]
 8018752:	d1e0      	bne.n	8018716 <_free_r+0x26>
 8018754:	681c      	ldr	r4, [r3, #0]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	6053      	str	r3, [r2, #4]
 801875a:	440c      	add	r4, r1
 801875c:	6014      	str	r4, [r2, #0]
 801875e:	e7da      	b.n	8018716 <_free_r+0x26>
 8018760:	d902      	bls.n	8018768 <_free_r+0x78>
 8018762:	230c      	movs	r3, #12
 8018764:	6003      	str	r3, [r0, #0]
 8018766:	e7d6      	b.n	8018716 <_free_r+0x26>
 8018768:	6825      	ldr	r5, [r4, #0]
 801876a:	1961      	adds	r1, r4, r5
 801876c:	428b      	cmp	r3, r1
 801876e:	bf04      	itt	eq
 8018770:	6819      	ldreq	r1, [r3, #0]
 8018772:	685b      	ldreq	r3, [r3, #4]
 8018774:	6063      	str	r3, [r4, #4]
 8018776:	bf04      	itt	eq
 8018778:	1949      	addeq	r1, r1, r5
 801877a:	6021      	streq	r1, [r4, #0]
 801877c:	6054      	str	r4, [r2, #4]
 801877e:	e7ca      	b.n	8018716 <_free_r+0x26>
 8018780:	b003      	add	sp, #12
 8018782:	bd30      	pop	{r4, r5, pc}
 8018784:	2400b334 	.word	0x2400b334

08018788 <rshift>:
 8018788:	6903      	ldr	r3, [r0, #16]
 801878a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801878e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018792:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018796:	f100 0414 	add.w	r4, r0, #20
 801879a:	dd45      	ble.n	8018828 <rshift+0xa0>
 801879c:	f011 011f 	ands.w	r1, r1, #31
 80187a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80187a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80187a8:	d10c      	bne.n	80187c4 <rshift+0x3c>
 80187aa:	f100 0710 	add.w	r7, r0, #16
 80187ae:	4629      	mov	r1, r5
 80187b0:	42b1      	cmp	r1, r6
 80187b2:	d334      	bcc.n	801881e <rshift+0x96>
 80187b4:	1a9b      	subs	r3, r3, r2
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	1eea      	subs	r2, r5, #3
 80187ba:	4296      	cmp	r6, r2
 80187bc:	bf38      	it	cc
 80187be:	2300      	movcc	r3, #0
 80187c0:	4423      	add	r3, r4
 80187c2:	e015      	b.n	80187f0 <rshift+0x68>
 80187c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80187c8:	f1c1 0820 	rsb	r8, r1, #32
 80187cc:	40cf      	lsrs	r7, r1
 80187ce:	f105 0e04 	add.w	lr, r5, #4
 80187d2:	46a1      	mov	r9, r4
 80187d4:	4576      	cmp	r6, lr
 80187d6:	46f4      	mov	ip, lr
 80187d8:	d815      	bhi.n	8018806 <rshift+0x7e>
 80187da:	1a9a      	subs	r2, r3, r2
 80187dc:	0092      	lsls	r2, r2, #2
 80187de:	3a04      	subs	r2, #4
 80187e0:	3501      	adds	r5, #1
 80187e2:	42ae      	cmp	r6, r5
 80187e4:	bf38      	it	cc
 80187e6:	2200      	movcc	r2, #0
 80187e8:	18a3      	adds	r3, r4, r2
 80187ea:	50a7      	str	r7, [r4, r2]
 80187ec:	b107      	cbz	r7, 80187f0 <rshift+0x68>
 80187ee:	3304      	adds	r3, #4
 80187f0:	1b1a      	subs	r2, r3, r4
 80187f2:	42a3      	cmp	r3, r4
 80187f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80187f8:	bf08      	it	eq
 80187fa:	2300      	moveq	r3, #0
 80187fc:	6102      	str	r2, [r0, #16]
 80187fe:	bf08      	it	eq
 8018800:	6143      	streq	r3, [r0, #20]
 8018802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018806:	f8dc c000 	ldr.w	ip, [ip]
 801880a:	fa0c fc08 	lsl.w	ip, ip, r8
 801880e:	ea4c 0707 	orr.w	r7, ip, r7
 8018812:	f849 7b04 	str.w	r7, [r9], #4
 8018816:	f85e 7b04 	ldr.w	r7, [lr], #4
 801881a:	40cf      	lsrs	r7, r1
 801881c:	e7da      	b.n	80187d4 <rshift+0x4c>
 801881e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018822:	f847 cf04 	str.w	ip, [r7, #4]!
 8018826:	e7c3      	b.n	80187b0 <rshift+0x28>
 8018828:	4623      	mov	r3, r4
 801882a:	e7e1      	b.n	80187f0 <rshift+0x68>

0801882c <__hexdig_fun>:
 801882c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018830:	2b09      	cmp	r3, #9
 8018832:	d802      	bhi.n	801883a <__hexdig_fun+0xe>
 8018834:	3820      	subs	r0, #32
 8018836:	b2c0      	uxtb	r0, r0
 8018838:	4770      	bx	lr
 801883a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801883e:	2b05      	cmp	r3, #5
 8018840:	d801      	bhi.n	8018846 <__hexdig_fun+0x1a>
 8018842:	3847      	subs	r0, #71	; 0x47
 8018844:	e7f7      	b.n	8018836 <__hexdig_fun+0xa>
 8018846:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801884a:	2b05      	cmp	r3, #5
 801884c:	d801      	bhi.n	8018852 <__hexdig_fun+0x26>
 801884e:	3827      	subs	r0, #39	; 0x27
 8018850:	e7f1      	b.n	8018836 <__hexdig_fun+0xa>
 8018852:	2000      	movs	r0, #0
 8018854:	4770      	bx	lr
	...

08018858 <__gethex>:
 8018858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801885c:	4617      	mov	r7, r2
 801885e:	680a      	ldr	r2, [r1, #0]
 8018860:	b085      	sub	sp, #20
 8018862:	f102 0b02 	add.w	fp, r2, #2
 8018866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801886a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801886e:	4681      	mov	r9, r0
 8018870:	468a      	mov	sl, r1
 8018872:	9302      	str	r3, [sp, #8]
 8018874:	32fe      	adds	r2, #254	; 0xfe
 8018876:	eb02 030b 	add.w	r3, r2, fp
 801887a:	46d8      	mov	r8, fp
 801887c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018880:	9301      	str	r3, [sp, #4]
 8018882:	2830      	cmp	r0, #48	; 0x30
 8018884:	d0f7      	beq.n	8018876 <__gethex+0x1e>
 8018886:	f7ff ffd1 	bl	801882c <__hexdig_fun>
 801888a:	4604      	mov	r4, r0
 801888c:	2800      	cmp	r0, #0
 801888e:	d138      	bne.n	8018902 <__gethex+0xaa>
 8018890:	49a7      	ldr	r1, [pc, #668]	; (8018b30 <__gethex+0x2d8>)
 8018892:	2201      	movs	r2, #1
 8018894:	4640      	mov	r0, r8
 8018896:	f7ff f882 	bl	801799e <strncmp>
 801889a:	4606      	mov	r6, r0
 801889c:	2800      	cmp	r0, #0
 801889e:	d169      	bne.n	8018974 <__gethex+0x11c>
 80188a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80188a4:	465d      	mov	r5, fp
 80188a6:	f7ff ffc1 	bl	801882c <__hexdig_fun>
 80188aa:	2800      	cmp	r0, #0
 80188ac:	d064      	beq.n	8018978 <__gethex+0x120>
 80188ae:	465a      	mov	r2, fp
 80188b0:	7810      	ldrb	r0, [r2, #0]
 80188b2:	2830      	cmp	r0, #48	; 0x30
 80188b4:	4690      	mov	r8, r2
 80188b6:	f102 0201 	add.w	r2, r2, #1
 80188ba:	d0f9      	beq.n	80188b0 <__gethex+0x58>
 80188bc:	f7ff ffb6 	bl	801882c <__hexdig_fun>
 80188c0:	2301      	movs	r3, #1
 80188c2:	fab0 f480 	clz	r4, r0
 80188c6:	0964      	lsrs	r4, r4, #5
 80188c8:	465e      	mov	r6, fp
 80188ca:	9301      	str	r3, [sp, #4]
 80188cc:	4642      	mov	r2, r8
 80188ce:	4615      	mov	r5, r2
 80188d0:	3201      	adds	r2, #1
 80188d2:	7828      	ldrb	r0, [r5, #0]
 80188d4:	f7ff ffaa 	bl	801882c <__hexdig_fun>
 80188d8:	2800      	cmp	r0, #0
 80188da:	d1f8      	bne.n	80188ce <__gethex+0x76>
 80188dc:	4994      	ldr	r1, [pc, #592]	; (8018b30 <__gethex+0x2d8>)
 80188de:	2201      	movs	r2, #1
 80188e0:	4628      	mov	r0, r5
 80188e2:	f7ff f85c 	bl	801799e <strncmp>
 80188e6:	b978      	cbnz	r0, 8018908 <__gethex+0xb0>
 80188e8:	b946      	cbnz	r6, 80188fc <__gethex+0xa4>
 80188ea:	1c6e      	adds	r6, r5, #1
 80188ec:	4632      	mov	r2, r6
 80188ee:	4615      	mov	r5, r2
 80188f0:	3201      	adds	r2, #1
 80188f2:	7828      	ldrb	r0, [r5, #0]
 80188f4:	f7ff ff9a 	bl	801882c <__hexdig_fun>
 80188f8:	2800      	cmp	r0, #0
 80188fa:	d1f8      	bne.n	80188ee <__gethex+0x96>
 80188fc:	1b73      	subs	r3, r6, r5
 80188fe:	009e      	lsls	r6, r3, #2
 8018900:	e004      	b.n	801890c <__gethex+0xb4>
 8018902:	2400      	movs	r4, #0
 8018904:	4626      	mov	r6, r4
 8018906:	e7e1      	b.n	80188cc <__gethex+0x74>
 8018908:	2e00      	cmp	r6, #0
 801890a:	d1f7      	bne.n	80188fc <__gethex+0xa4>
 801890c:	782b      	ldrb	r3, [r5, #0]
 801890e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018912:	2b50      	cmp	r3, #80	; 0x50
 8018914:	d13d      	bne.n	8018992 <__gethex+0x13a>
 8018916:	786b      	ldrb	r3, [r5, #1]
 8018918:	2b2b      	cmp	r3, #43	; 0x2b
 801891a:	d02f      	beq.n	801897c <__gethex+0x124>
 801891c:	2b2d      	cmp	r3, #45	; 0x2d
 801891e:	d031      	beq.n	8018984 <__gethex+0x12c>
 8018920:	1c69      	adds	r1, r5, #1
 8018922:	f04f 0b00 	mov.w	fp, #0
 8018926:	7808      	ldrb	r0, [r1, #0]
 8018928:	f7ff ff80 	bl	801882c <__hexdig_fun>
 801892c:	1e42      	subs	r2, r0, #1
 801892e:	b2d2      	uxtb	r2, r2
 8018930:	2a18      	cmp	r2, #24
 8018932:	d82e      	bhi.n	8018992 <__gethex+0x13a>
 8018934:	f1a0 0210 	sub.w	r2, r0, #16
 8018938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801893c:	f7ff ff76 	bl	801882c <__hexdig_fun>
 8018940:	f100 3cff 	add.w	ip, r0, #4294967295
 8018944:	fa5f fc8c 	uxtb.w	ip, ip
 8018948:	f1bc 0f18 	cmp.w	ip, #24
 801894c:	d91d      	bls.n	801898a <__gethex+0x132>
 801894e:	f1bb 0f00 	cmp.w	fp, #0
 8018952:	d000      	beq.n	8018956 <__gethex+0xfe>
 8018954:	4252      	negs	r2, r2
 8018956:	4416      	add	r6, r2
 8018958:	f8ca 1000 	str.w	r1, [sl]
 801895c:	b1dc      	cbz	r4, 8018996 <__gethex+0x13e>
 801895e:	9b01      	ldr	r3, [sp, #4]
 8018960:	2b00      	cmp	r3, #0
 8018962:	bf14      	ite	ne
 8018964:	f04f 0800 	movne.w	r8, #0
 8018968:	f04f 0806 	moveq.w	r8, #6
 801896c:	4640      	mov	r0, r8
 801896e:	b005      	add	sp, #20
 8018970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018974:	4645      	mov	r5, r8
 8018976:	4626      	mov	r6, r4
 8018978:	2401      	movs	r4, #1
 801897a:	e7c7      	b.n	801890c <__gethex+0xb4>
 801897c:	f04f 0b00 	mov.w	fp, #0
 8018980:	1ca9      	adds	r1, r5, #2
 8018982:	e7d0      	b.n	8018926 <__gethex+0xce>
 8018984:	f04f 0b01 	mov.w	fp, #1
 8018988:	e7fa      	b.n	8018980 <__gethex+0x128>
 801898a:	230a      	movs	r3, #10
 801898c:	fb03 0002 	mla	r0, r3, r2, r0
 8018990:	e7d0      	b.n	8018934 <__gethex+0xdc>
 8018992:	4629      	mov	r1, r5
 8018994:	e7e0      	b.n	8018958 <__gethex+0x100>
 8018996:	eba5 0308 	sub.w	r3, r5, r8
 801899a:	3b01      	subs	r3, #1
 801899c:	4621      	mov	r1, r4
 801899e:	2b07      	cmp	r3, #7
 80189a0:	dc0a      	bgt.n	80189b8 <__gethex+0x160>
 80189a2:	4648      	mov	r0, r9
 80189a4:	f000 fa5a 	bl	8018e5c <_Balloc>
 80189a8:	4604      	mov	r4, r0
 80189aa:	b940      	cbnz	r0, 80189be <__gethex+0x166>
 80189ac:	4b61      	ldr	r3, [pc, #388]	; (8018b34 <__gethex+0x2dc>)
 80189ae:	4602      	mov	r2, r0
 80189b0:	21e4      	movs	r1, #228	; 0xe4
 80189b2:	4861      	ldr	r0, [pc, #388]	; (8018b38 <__gethex+0x2e0>)
 80189b4:	f001 f92a 	bl	8019c0c <__assert_func>
 80189b8:	3101      	adds	r1, #1
 80189ba:	105b      	asrs	r3, r3, #1
 80189bc:	e7ef      	b.n	801899e <__gethex+0x146>
 80189be:	f100 0a14 	add.w	sl, r0, #20
 80189c2:	2300      	movs	r3, #0
 80189c4:	495a      	ldr	r1, [pc, #360]	; (8018b30 <__gethex+0x2d8>)
 80189c6:	f8cd a004 	str.w	sl, [sp, #4]
 80189ca:	469b      	mov	fp, r3
 80189cc:	45a8      	cmp	r8, r5
 80189ce:	d342      	bcc.n	8018a56 <__gethex+0x1fe>
 80189d0:	9801      	ldr	r0, [sp, #4]
 80189d2:	f840 bb04 	str.w	fp, [r0], #4
 80189d6:	eba0 000a 	sub.w	r0, r0, sl
 80189da:	1080      	asrs	r0, r0, #2
 80189dc:	6120      	str	r0, [r4, #16]
 80189de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80189e2:	4658      	mov	r0, fp
 80189e4:	f000 fb2c 	bl	8019040 <__hi0bits>
 80189e8:	683d      	ldr	r5, [r7, #0]
 80189ea:	eba8 0000 	sub.w	r0, r8, r0
 80189ee:	42a8      	cmp	r0, r5
 80189f0:	dd59      	ble.n	8018aa6 <__gethex+0x24e>
 80189f2:	eba0 0805 	sub.w	r8, r0, r5
 80189f6:	4641      	mov	r1, r8
 80189f8:	4620      	mov	r0, r4
 80189fa:	f000 feb8 	bl	801976e <__any_on>
 80189fe:	4683      	mov	fp, r0
 8018a00:	b1b8      	cbz	r0, 8018a32 <__gethex+0x1da>
 8018a02:	f108 33ff 	add.w	r3, r8, #4294967295
 8018a06:	1159      	asrs	r1, r3, #5
 8018a08:	f003 021f 	and.w	r2, r3, #31
 8018a0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018a10:	f04f 0b01 	mov.w	fp, #1
 8018a14:	fa0b f202 	lsl.w	r2, fp, r2
 8018a18:	420a      	tst	r2, r1
 8018a1a:	d00a      	beq.n	8018a32 <__gethex+0x1da>
 8018a1c:	455b      	cmp	r3, fp
 8018a1e:	dd06      	ble.n	8018a2e <__gethex+0x1d6>
 8018a20:	f1a8 0102 	sub.w	r1, r8, #2
 8018a24:	4620      	mov	r0, r4
 8018a26:	f000 fea2 	bl	801976e <__any_on>
 8018a2a:	2800      	cmp	r0, #0
 8018a2c:	d138      	bne.n	8018aa0 <__gethex+0x248>
 8018a2e:	f04f 0b02 	mov.w	fp, #2
 8018a32:	4641      	mov	r1, r8
 8018a34:	4620      	mov	r0, r4
 8018a36:	f7ff fea7 	bl	8018788 <rshift>
 8018a3a:	4446      	add	r6, r8
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	42b3      	cmp	r3, r6
 8018a40:	da41      	bge.n	8018ac6 <__gethex+0x26e>
 8018a42:	4621      	mov	r1, r4
 8018a44:	4648      	mov	r0, r9
 8018a46:	f000 fa49 	bl	8018edc <_Bfree>
 8018a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	6013      	str	r3, [r2, #0]
 8018a50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018a54:	e78a      	b.n	801896c <__gethex+0x114>
 8018a56:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8018a5a:	2a2e      	cmp	r2, #46	; 0x2e
 8018a5c:	d014      	beq.n	8018a88 <__gethex+0x230>
 8018a5e:	2b20      	cmp	r3, #32
 8018a60:	d106      	bne.n	8018a70 <__gethex+0x218>
 8018a62:	9b01      	ldr	r3, [sp, #4]
 8018a64:	f843 bb04 	str.w	fp, [r3], #4
 8018a68:	f04f 0b00 	mov.w	fp, #0
 8018a6c:	9301      	str	r3, [sp, #4]
 8018a6e:	465b      	mov	r3, fp
 8018a70:	7828      	ldrb	r0, [r5, #0]
 8018a72:	9303      	str	r3, [sp, #12]
 8018a74:	f7ff feda 	bl	801882c <__hexdig_fun>
 8018a78:	9b03      	ldr	r3, [sp, #12]
 8018a7a:	f000 000f 	and.w	r0, r0, #15
 8018a7e:	4098      	lsls	r0, r3
 8018a80:	ea4b 0b00 	orr.w	fp, fp, r0
 8018a84:	3304      	adds	r3, #4
 8018a86:	e7a1      	b.n	80189cc <__gethex+0x174>
 8018a88:	45a8      	cmp	r8, r5
 8018a8a:	d8e8      	bhi.n	8018a5e <__gethex+0x206>
 8018a8c:	2201      	movs	r2, #1
 8018a8e:	4628      	mov	r0, r5
 8018a90:	9303      	str	r3, [sp, #12]
 8018a92:	f7fe ff84 	bl	801799e <strncmp>
 8018a96:	4926      	ldr	r1, [pc, #152]	; (8018b30 <__gethex+0x2d8>)
 8018a98:	9b03      	ldr	r3, [sp, #12]
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	d1df      	bne.n	8018a5e <__gethex+0x206>
 8018a9e:	e795      	b.n	80189cc <__gethex+0x174>
 8018aa0:	f04f 0b03 	mov.w	fp, #3
 8018aa4:	e7c5      	b.n	8018a32 <__gethex+0x1da>
 8018aa6:	da0b      	bge.n	8018ac0 <__gethex+0x268>
 8018aa8:	eba5 0800 	sub.w	r8, r5, r0
 8018aac:	4621      	mov	r1, r4
 8018aae:	4642      	mov	r2, r8
 8018ab0:	4648      	mov	r0, r9
 8018ab2:	f000 fc2d 	bl	8019310 <__lshift>
 8018ab6:	eba6 0608 	sub.w	r6, r6, r8
 8018aba:	4604      	mov	r4, r0
 8018abc:	f100 0a14 	add.w	sl, r0, #20
 8018ac0:	f04f 0b00 	mov.w	fp, #0
 8018ac4:	e7ba      	b.n	8018a3c <__gethex+0x1e4>
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	42b3      	cmp	r3, r6
 8018aca:	dd73      	ble.n	8018bb4 <__gethex+0x35c>
 8018acc:	1b9e      	subs	r6, r3, r6
 8018ace:	42b5      	cmp	r5, r6
 8018ad0:	dc34      	bgt.n	8018b3c <__gethex+0x2e4>
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	2b02      	cmp	r3, #2
 8018ad6:	d023      	beq.n	8018b20 <__gethex+0x2c8>
 8018ad8:	2b03      	cmp	r3, #3
 8018ada:	d025      	beq.n	8018b28 <__gethex+0x2d0>
 8018adc:	2b01      	cmp	r3, #1
 8018ade:	d115      	bne.n	8018b0c <__gethex+0x2b4>
 8018ae0:	42b5      	cmp	r5, r6
 8018ae2:	d113      	bne.n	8018b0c <__gethex+0x2b4>
 8018ae4:	2d01      	cmp	r5, #1
 8018ae6:	d10b      	bne.n	8018b00 <__gethex+0x2a8>
 8018ae8:	9a02      	ldr	r2, [sp, #8]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6013      	str	r3, [r2, #0]
 8018aee:	2301      	movs	r3, #1
 8018af0:	6123      	str	r3, [r4, #16]
 8018af2:	f8ca 3000 	str.w	r3, [sl]
 8018af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018af8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8018afc:	601c      	str	r4, [r3, #0]
 8018afe:	e735      	b.n	801896c <__gethex+0x114>
 8018b00:	1e69      	subs	r1, r5, #1
 8018b02:	4620      	mov	r0, r4
 8018b04:	f000 fe33 	bl	801976e <__any_on>
 8018b08:	2800      	cmp	r0, #0
 8018b0a:	d1ed      	bne.n	8018ae8 <__gethex+0x290>
 8018b0c:	4621      	mov	r1, r4
 8018b0e:	4648      	mov	r0, r9
 8018b10:	f000 f9e4 	bl	8018edc <_Bfree>
 8018b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b16:	2300      	movs	r3, #0
 8018b18:	6013      	str	r3, [r2, #0]
 8018b1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8018b1e:	e725      	b.n	801896c <__gethex+0x114>
 8018b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1f2      	bne.n	8018b0c <__gethex+0x2b4>
 8018b26:	e7df      	b.n	8018ae8 <__gethex+0x290>
 8018b28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d1dc      	bne.n	8018ae8 <__gethex+0x290>
 8018b2e:	e7ed      	b.n	8018b0c <__gethex+0x2b4>
 8018b30:	0801b594 	.word	0x0801b594
 8018b34:	0801b7a1 	.word	0x0801b7a1
 8018b38:	0801b7b2 	.word	0x0801b7b2
 8018b3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8018b40:	f1bb 0f00 	cmp.w	fp, #0
 8018b44:	d133      	bne.n	8018bae <__gethex+0x356>
 8018b46:	f1b8 0f00 	cmp.w	r8, #0
 8018b4a:	d004      	beq.n	8018b56 <__gethex+0x2fe>
 8018b4c:	4641      	mov	r1, r8
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f000 fe0d 	bl	801976e <__any_on>
 8018b54:	4683      	mov	fp, r0
 8018b56:	ea4f 1268 	mov.w	r2, r8, asr #5
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018b60:	f008 081f 	and.w	r8, r8, #31
 8018b64:	fa03 f308 	lsl.w	r3, r3, r8
 8018b68:	4213      	tst	r3, r2
 8018b6a:	4631      	mov	r1, r6
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	bf18      	it	ne
 8018b70:	f04b 0b02 	orrne.w	fp, fp, #2
 8018b74:	1bad      	subs	r5, r5, r6
 8018b76:	f7ff fe07 	bl	8018788 <rshift>
 8018b7a:	687e      	ldr	r6, [r7, #4]
 8018b7c:	f04f 0802 	mov.w	r8, #2
 8018b80:	f1bb 0f00 	cmp.w	fp, #0
 8018b84:	d04a      	beq.n	8018c1c <__gethex+0x3c4>
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	2b02      	cmp	r3, #2
 8018b8a:	d016      	beq.n	8018bba <__gethex+0x362>
 8018b8c:	2b03      	cmp	r3, #3
 8018b8e:	d018      	beq.n	8018bc2 <__gethex+0x36a>
 8018b90:	2b01      	cmp	r3, #1
 8018b92:	d109      	bne.n	8018ba8 <__gethex+0x350>
 8018b94:	f01b 0f02 	tst.w	fp, #2
 8018b98:	d006      	beq.n	8018ba8 <__gethex+0x350>
 8018b9a:	f8da 3000 	ldr.w	r3, [sl]
 8018b9e:	ea4b 0b03 	orr.w	fp, fp, r3
 8018ba2:	f01b 0f01 	tst.w	fp, #1
 8018ba6:	d10f      	bne.n	8018bc8 <__gethex+0x370>
 8018ba8:	f048 0810 	orr.w	r8, r8, #16
 8018bac:	e036      	b.n	8018c1c <__gethex+0x3c4>
 8018bae:	f04f 0b01 	mov.w	fp, #1
 8018bb2:	e7d0      	b.n	8018b56 <__gethex+0x2fe>
 8018bb4:	f04f 0801 	mov.w	r8, #1
 8018bb8:	e7e2      	b.n	8018b80 <__gethex+0x328>
 8018bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bbc:	f1c3 0301 	rsb	r3, r3, #1
 8018bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8018bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d0ef      	beq.n	8018ba8 <__gethex+0x350>
 8018bc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018bcc:	f104 0214 	add.w	r2, r4, #20
 8018bd0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018bd4:	9301      	str	r3, [sp, #4]
 8018bd6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8018bda:	2300      	movs	r3, #0
 8018bdc:	4694      	mov	ip, r2
 8018bde:	f852 1b04 	ldr.w	r1, [r2], #4
 8018be2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8018be6:	d01e      	beq.n	8018c26 <__gethex+0x3ce>
 8018be8:	3101      	adds	r1, #1
 8018bea:	f8cc 1000 	str.w	r1, [ip]
 8018bee:	f1b8 0f02 	cmp.w	r8, #2
 8018bf2:	f104 0214 	add.w	r2, r4, #20
 8018bf6:	d13d      	bne.n	8018c74 <__gethex+0x41c>
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	3b01      	subs	r3, #1
 8018bfc:	42ab      	cmp	r3, r5
 8018bfe:	d10b      	bne.n	8018c18 <__gethex+0x3c0>
 8018c00:	1169      	asrs	r1, r5, #5
 8018c02:	2301      	movs	r3, #1
 8018c04:	f005 051f 	and.w	r5, r5, #31
 8018c08:	fa03 f505 	lsl.w	r5, r3, r5
 8018c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c10:	421d      	tst	r5, r3
 8018c12:	bf18      	it	ne
 8018c14:	f04f 0801 	movne.w	r8, #1
 8018c18:	f048 0820 	orr.w	r8, r8, #32
 8018c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c1e:	601c      	str	r4, [r3, #0]
 8018c20:	9b02      	ldr	r3, [sp, #8]
 8018c22:	601e      	str	r6, [r3, #0]
 8018c24:	e6a2      	b.n	801896c <__gethex+0x114>
 8018c26:	4290      	cmp	r0, r2
 8018c28:	f842 3c04 	str.w	r3, [r2, #-4]
 8018c2c:	d8d6      	bhi.n	8018bdc <__gethex+0x384>
 8018c2e:	68a2      	ldr	r2, [r4, #8]
 8018c30:	4593      	cmp	fp, r2
 8018c32:	db17      	blt.n	8018c64 <__gethex+0x40c>
 8018c34:	6861      	ldr	r1, [r4, #4]
 8018c36:	4648      	mov	r0, r9
 8018c38:	3101      	adds	r1, #1
 8018c3a:	f000 f90f 	bl	8018e5c <_Balloc>
 8018c3e:	4682      	mov	sl, r0
 8018c40:	b918      	cbnz	r0, 8018c4a <__gethex+0x3f2>
 8018c42:	4b1b      	ldr	r3, [pc, #108]	; (8018cb0 <__gethex+0x458>)
 8018c44:	4602      	mov	r2, r0
 8018c46:	2184      	movs	r1, #132	; 0x84
 8018c48:	e6b3      	b.n	80189b2 <__gethex+0x15a>
 8018c4a:	6922      	ldr	r2, [r4, #16]
 8018c4c:	3202      	adds	r2, #2
 8018c4e:	f104 010c 	add.w	r1, r4, #12
 8018c52:	0092      	lsls	r2, r2, #2
 8018c54:	300c      	adds	r0, #12
 8018c56:	f7fe ff41 	bl	8017adc <memcpy>
 8018c5a:	4621      	mov	r1, r4
 8018c5c:	4648      	mov	r0, r9
 8018c5e:	f000 f93d 	bl	8018edc <_Bfree>
 8018c62:	4654      	mov	r4, sl
 8018c64:	6922      	ldr	r2, [r4, #16]
 8018c66:	1c51      	adds	r1, r2, #1
 8018c68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c6c:	6121      	str	r1, [r4, #16]
 8018c6e:	2101      	movs	r1, #1
 8018c70:	6151      	str	r1, [r2, #20]
 8018c72:	e7bc      	b.n	8018bee <__gethex+0x396>
 8018c74:	6921      	ldr	r1, [r4, #16]
 8018c76:	4559      	cmp	r1, fp
 8018c78:	dd0b      	ble.n	8018c92 <__gethex+0x43a>
 8018c7a:	2101      	movs	r1, #1
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	f7ff fd83 	bl	8018788 <rshift>
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	3601      	adds	r6, #1
 8018c86:	42b3      	cmp	r3, r6
 8018c88:	f6ff aedb 	blt.w	8018a42 <__gethex+0x1ea>
 8018c8c:	f04f 0801 	mov.w	r8, #1
 8018c90:	e7c2      	b.n	8018c18 <__gethex+0x3c0>
 8018c92:	f015 051f 	ands.w	r5, r5, #31
 8018c96:	d0f9      	beq.n	8018c8c <__gethex+0x434>
 8018c98:	9b01      	ldr	r3, [sp, #4]
 8018c9a:	441a      	add	r2, r3
 8018c9c:	f1c5 0520 	rsb	r5, r5, #32
 8018ca0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018ca4:	f000 f9cc 	bl	8019040 <__hi0bits>
 8018ca8:	42a8      	cmp	r0, r5
 8018caa:	dbe6      	blt.n	8018c7a <__gethex+0x422>
 8018cac:	e7ee      	b.n	8018c8c <__gethex+0x434>
 8018cae:	bf00      	nop
 8018cb0:	0801b7a1 	.word	0x0801b7a1

08018cb4 <L_shift>:
 8018cb4:	f1c2 0208 	rsb	r2, r2, #8
 8018cb8:	0092      	lsls	r2, r2, #2
 8018cba:	b570      	push	{r4, r5, r6, lr}
 8018cbc:	f1c2 0620 	rsb	r6, r2, #32
 8018cc0:	6843      	ldr	r3, [r0, #4]
 8018cc2:	6804      	ldr	r4, [r0, #0]
 8018cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8018cc8:	432c      	orrs	r4, r5
 8018cca:	40d3      	lsrs	r3, r2
 8018ccc:	6004      	str	r4, [r0, #0]
 8018cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8018cd2:	4288      	cmp	r0, r1
 8018cd4:	d3f4      	bcc.n	8018cc0 <L_shift+0xc>
 8018cd6:	bd70      	pop	{r4, r5, r6, pc}

08018cd8 <__match>:
 8018cd8:	b530      	push	{r4, r5, lr}
 8018cda:	6803      	ldr	r3, [r0, #0]
 8018cdc:	3301      	adds	r3, #1
 8018cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ce2:	b914      	cbnz	r4, 8018cea <__match+0x12>
 8018ce4:	6003      	str	r3, [r0, #0]
 8018ce6:	2001      	movs	r0, #1
 8018ce8:	bd30      	pop	{r4, r5, pc}
 8018cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018cf2:	2d19      	cmp	r5, #25
 8018cf4:	bf98      	it	ls
 8018cf6:	3220      	addls	r2, #32
 8018cf8:	42a2      	cmp	r2, r4
 8018cfa:	d0f0      	beq.n	8018cde <__match+0x6>
 8018cfc:	2000      	movs	r0, #0
 8018cfe:	e7f3      	b.n	8018ce8 <__match+0x10>

08018d00 <__hexnan>:
 8018d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d04:	680b      	ldr	r3, [r1, #0]
 8018d06:	6801      	ldr	r1, [r0, #0]
 8018d08:	115e      	asrs	r6, r3, #5
 8018d0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018d0e:	f013 031f 	ands.w	r3, r3, #31
 8018d12:	b087      	sub	sp, #28
 8018d14:	bf18      	it	ne
 8018d16:	3604      	addne	r6, #4
 8018d18:	2500      	movs	r5, #0
 8018d1a:	1f37      	subs	r7, r6, #4
 8018d1c:	4682      	mov	sl, r0
 8018d1e:	4690      	mov	r8, r2
 8018d20:	9301      	str	r3, [sp, #4]
 8018d22:	f846 5c04 	str.w	r5, [r6, #-4]
 8018d26:	46b9      	mov	r9, r7
 8018d28:	463c      	mov	r4, r7
 8018d2a:	9502      	str	r5, [sp, #8]
 8018d2c:	46ab      	mov	fp, r5
 8018d2e:	784a      	ldrb	r2, [r1, #1]
 8018d30:	1c4b      	adds	r3, r1, #1
 8018d32:	9303      	str	r3, [sp, #12]
 8018d34:	b342      	cbz	r2, 8018d88 <__hexnan+0x88>
 8018d36:	4610      	mov	r0, r2
 8018d38:	9105      	str	r1, [sp, #20]
 8018d3a:	9204      	str	r2, [sp, #16]
 8018d3c:	f7ff fd76 	bl	801882c <__hexdig_fun>
 8018d40:	2800      	cmp	r0, #0
 8018d42:	d14f      	bne.n	8018de4 <__hexnan+0xe4>
 8018d44:	9a04      	ldr	r2, [sp, #16]
 8018d46:	9905      	ldr	r1, [sp, #20]
 8018d48:	2a20      	cmp	r2, #32
 8018d4a:	d818      	bhi.n	8018d7e <__hexnan+0x7e>
 8018d4c:	9b02      	ldr	r3, [sp, #8]
 8018d4e:	459b      	cmp	fp, r3
 8018d50:	dd13      	ble.n	8018d7a <__hexnan+0x7a>
 8018d52:	454c      	cmp	r4, r9
 8018d54:	d206      	bcs.n	8018d64 <__hexnan+0x64>
 8018d56:	2d07      	cmp	r5, #7
 8018d58:	dc04      	bgt.n	8018d64 <__hexnan+0x64>
 8018d5a:	462a      	mov	r2, r5
 8018d5c:	4649      	mov	r1, r9
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f7ff ffa8 	bl	8018cb4 <L_shift>
 8018d64:	4544      	cmp	r4, r8
 8018d66:	d950      	bls.n	8018e0a <__hexnan+0x10a>
 8018d68:	2300      	movs	r3, #0
 8018d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8018d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d72:	f8cd b008 	str.w	fp, [sp, #8]
 8018d76:	464c      	mov	r4, r9
 8018d78:	461d      	mov	r5, r3
 8018d7a:	9903      	ldr	r1, [sp, #12]
 8018d7c:	e7d7      	b.n	8018d2e <__hexnan+0x2e>
 8018d7e:	2a29      	cmp	r2, #41	; 0x29
 8018d80:	d155      	bne.n	8018e2e <__hexnan+0x12e>
 8018d82:	3102      	adds	r1, #2
 8018d84:	f8ca 1000 	str.w	r1, [sl]
 8018d88:	f1bb 0f00 	cmp.w	fp, #0
 8018d8c:	d04f      	beq.n	8018e2e <__hexnan+0x12e>
 8018d8e:	454c      	cmp	r4, r9
 8018d90:	d206      	bcs.n	8018da0 <__hexnan+0xa0>
 8018d92:	2d07      	cmp	r5, #7
 8018d94:	dc04      	bgt.n	8018da0 <__hexnan+0xa0>
 8018d96:	462a      	mov	r2, r5
 8018d98:	4649      	mov	r1, r9
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	f7ff ff8a 	bl	8018cb4 <L_shift>
 8018da0:	4544      	cmp	r4, r8
 8018da2:	d934      	bls.n	8018e0e <__hexnan+0x10e>
 8018da4:	f1a8 0204 	sub.w	r2, r8, #4
 8018da8:	4623      	mov	r3, r4
 8018daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8018dae:	f842 1f04 	str.w	r1, [r2, #4]!
 8018db2:	429f      	cmp	r7, r3
 8018db4:	d2f9      	bcs.n	8018daa <__hexnan+0xaa>
 8018db6:	1b3b      	subs	r3, r7, r4
 8018db8:	f023 0303 	bic.w	r3, r3, #3
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	3e03      	subs	r6, #3
 8018dc0:	3401      	adds	r4, #1
 8018dc2:	42a6      	cmp	r6, r4
 8018dc4:	bf38      	it	cc
 8018dc6:	2304      	movcc	r3, #4
 8018dc8:	4443      	add	r3, r8
 8018dca:	2200      	movs	r2, #0
 8018dcc:	f843 2b04 	str.w	r2, [r3], #4
 8018dd0:	429f      	cmp	r7, r3
 8018dd2:	d2fb      	bcs.n	8018dcc <__hexnan+0xcc>
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	b91b      	cbnz	r3, 8018de0 <__hexnan+0xe0>
 8018dd8:	4547      	cmp	r7, r8
 8018dda:	d126      	bne.n	8018e2a <__hexnan+0x12a>
 8018ddc:	2301      	movs	r3, #1
 8018dde:	603b      	str	r3, [r7, #0]
 8018de0:	2005      	movs	r0, #5
 8018de2:	e025      	b.n	8018e30 <__hexnan+0x130>
 8018de4:	3501      	adds	r5, #1
 8018de6:	2d08      	cmp	r5, #8
 8018de8:	f10b 0b01 	add.w	fp, fp, #1
 8018dec:	dd06      	ble.n	8018dfc <__hexnan+0xfc>
 8018dee:	4544      	cmp	r4, r8
 8018df0:	d9c3      	bls.n	8018d7a <__hexnan+0x7a>
 8018df2:	2300      	movs	r3, #0
 8018df4:	f844 3c04 	str.w	r3, [r4, #-4]
 8018df8:	2501      	movs	r5, #1
 8018dfa:	3c04      	subs	r4, #4
 8018dfc:	6822      	ldr	r2, [r4, #0]
 8018dfe:	f000 000f 	and.w	r0, r0, #15
 8018e02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018e06:	6020      	str	r0, [r4, #0]
 8018e08:	e7b7      	b.n	8018d7a <__hexnan+0x7a>
 8018e0a:	2508      	movs	r5, #8
 8018e0c:	e7b5      	b.n	8018d7a <__hexnan+0x7a>
 8018e0e:	9b01      	ldr	r3, [sp, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d0df      	beq.n	8018dd4 <__hexnan+0xd4>
 8018e14:	f1c3 0320 	rsb	r3, r3, #32
 8018e18:	f04f 32ff 	mov.w	r2, #4294967295
 8018e1c:	40da      	lsrs	r2, r3
 8018e1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018e22:	4013      	ands	r3, r2
 8018e24:	f846 3c04 	str.w	r3, [r6, #-4]
 8018e28:	e7d4      	b.n	8018dd4 <__hexnan+0xd4>
 8018e2a:	3f04      	subs	r7, #4
 8018e2c:	e7d2      	b.n	8018dd4 <__hexnan+0xd4>
 8018e2e:	2004      	movs	r0, #4
 8018e30:	b007      	add	sp, #28
 8018e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e36 <__ascii_mbtowc>:
 8018e36:	b082      	sub	sp, #8
 8018e38:	b901      	cbnz	r1, 8018e3c <__ascii_mbtowc+0x6>
 8018e3a:	a901      	add	r1, sp, #4
 8018e3c:	b142      	cbz	r2, 8018e50 <__ascii_mbtowc+0x1a>
 8018e3e:	b14b      	cbz	r3, 8018e54 <__ascii_mbtowc+0x1e>
 8018e40:	7813      	ldrb	r3, [r2, #0]
 8018e42:	600b      	str	r3, [r1, #0]
 8018e44:	7812      	ldrb	r2, [r2, #0]
 8018e46:	1e10      	subs	r0, r2, #0
 8018e48:	bf18      	it	ne
 8018e4a:	2001      	movne	r0, #1
 8018e4c:	b002      	add	sp, #8
 8018e4e:	4770      	bx	lr
 8018e50:	4610      	mov	r0, r2
 8018e52:	e7fb      	b.n	8018e4c <__ascii_mbtowc+0x16>
 8018e54:	f06f 0001 	mvn.w	r0, #1
 8018e58:	e7f8      	b.n	8018e4c <__ascii_mbtowc+0x16>
	...

08018e5c <_Balloc>:
 8018e5c:	b570      	push	{r4, r5, r6, lr}
 8018e5e:	69c6      	ldr	r6, [r0, #28]
 8018e60:	4604      	mov	r4, r0
 8018e62:	460d      	mov	r5, r1
 8018e64:	b976      	cbnz	r6, 8018e84 <_Balloc+0x28>
 8018e66:	2010      	movs	r0, #16
 8018e68:	f7fd f910 	bl	801608c <malloc>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	61e0      	str	r0, [r4, #28]
 8018e70:	b920      	cbnz	r0, 8018e7c <_Balloc+0x20>
 8018e72:	4b18      	ldr	r3, [pc, #96]	; (8018ed4 <_Balloc+0x78>)
 8018e74:	4818      	ldr	r0, [pc, #96]	; (8018ed8 <_Balloc+0x7c>)
 8018e76:	216b      	movs	r1, #107	; 0x6b
 8018e78:	f000 fec8 	bl	8019c0c <__assert_func>
 8018e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e80:	6006      	str	r6, [r0, #0]
 8018e82:	60c6      	str	r6, [r0, #12]
 8018e84:	69e6      	ldr	r6, [r4, #28]
 8018e86:	68f3      	ldr	r3, [r6, #12]
 8018e88:	b183      	cbz	r3, 8018eac <_Balloc+0x50>
 8018e8a:	69e3      	ldr	r3, [r4, #28]
 8018e8c:	68db      	ldr	r3, [r3, #12]
 8018e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e92:	b9b8      	cbnz	r0, 8018ec4 <_Balloc+0x68>
 8018e94:	2101      	movs	r1, #1
 8018e96:	fa01 f605 	lsl.w	r6, r1, r5
 8018e9a:	1d72      	adds	r2, r6, #5
 8018e9c:	0092      	lsls	r2, r2, #2
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	f000 fed2 	bl	8019c48 <_calloc_r>
 8018ea4:	b160      	cbz	r0, 8018ec0 <_Balloc+0x64>
 8018ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018eaa:	e00e      	b.n	8018eca <_Balloc+0x6e>
 8018eac:	2221      	movs	r2, #33	; 0x21
 8018eae:	2104      	movs	r1, #4
 8018eb0:	4620      	mov	r0, r4
 8018eb2:	f000 fec9 	bl	8019c48 <_calloc_r>
 8018eb6:	69e3      	ldr	r3, [r4, #28]
 8018eb8:	60f0      	str	r0, [r6, #12]
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d1e4      	bne.n	8018e8a <_Balloc+0x2e>
 8018ec0:	2000      	movs	r0, #0
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}
 8018ec4:	6802      	ldr	r2, [r0, #0]
 8018ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018eca:	2300      	movs	r3, #0
 8018ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ed0:	e7f7      	b.n	8018ec2 <_Balloc+0x66>
 8018ed2:	bf00      	nop
 8018ed4:	0801b732 	.word	0x0801b732
 8018ed8:	0801b812 	.word	0x0801b812

08018edc <_Bfree>:
 8018edc:	b570      	push	{r4, r5, r6, lr}
 8018ede:	69c6      	ldr	r6, [r0, #28]
 8018ee0:	4605      	mov	r5, r0
 8018ee2:	460c      	mov	r4, r1
 8018ee4:	b976      	cbnz	r6, 8018f04 <_Bfree+0x28>
 8018ee6:	2010      	movs	r0, #16
 8018ee8:	f7fd f8d0 	bl	801608c <malloc>
 8018eec:	4602      	mov	r2, r0
 8018eee:	61e8      	str	r0, [r5, #28]
 8018ef0:	b920      	cbnz	r0, 8018efc <_Bfree+0x20>
 8018ef2:	4b09      	ldr	r3, [pc, #36]	; (8018f18 <_Bfree+0x3c>)
 8018ef4:	4809      	ldr	r0, [pc, #36]	; (8018f1c <_Bfree+0x40>)
 8018ef6:	218f      	movs	r1, #143	; 0x8f
 8018ef8:	f000 fe88 	bl	8019c0c <__assert_func>
 8018efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f00:	6006      	str	r6, [r0, #0]
 8018f02:	60c6      	str	r6, [r0, #12]
 8018f04:	b13c      	cbz	r4, 8018f16 <_Bfree+0x3a>
 8018f06:	69eb      	ldr	r3, [r5, #28]
 8018f08:	6862      	ldr	r2, [r4, #4]
 8018f0a:	68db      	ldr	r3, [r3, #12]
 8018f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f10:	6021      	str	r1, [r4, #0]
 8018f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f16:	bd70      	pop	{r4, r5, r6, pc}
 8018f18:	0801b732 	.word	0x0801b732
 8018f1c:	0801b812 	.word	0x0801b812

08018f20 <__multadd>:
 8018f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f24:	690d      	ldr	r5, [r1, #16]
 8018f26:	4607      	mov	r7, r0
 8018f28:	460c      	mov	r4, r1
 8018f2a:	461e      	mov	r6, r3
 8018f2c:	f101 0c14 	add.w	ip, r1, #20
 8018f30:	2000      	movs	r0, #0
 8018f32:	f8dc 3000 	ldr.w	r3, [ip]
 8018f36:	b299      	uxth	r1, r3
 8018f38:	fb02 6101 	mla	r1, r2, r1, r6
 8018f3c:	0c1e      	lsrs	r6, r3, #16
 8018f3e:	0c0b      	lsrs	r3, r1, #16
 8018f40:	fb02 3306 	mla	r3, r2, r6, r3
 8018f44:	b289      	uxth	r1, r1
 8018f46:	3001      	adds	r0, #1
 8018f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018f4c:	4285      	cmp	r5, r0
 8018f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8018f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018f56:	dcec      	bgt.n	8018f32 <__multadd+0x12>
 8018f58:	b30e      	cbz	r6, 8018f9e <__multadd+0x7e>
 8018f5a:	68a3      	ldr	r3, [r4, #8]
 8018f5c:	42ab      	cmp	r3, r5
 8018f5e:	dc19      	bgt.n	8018f94 <__multadd+0x74>
 8018f60:	6861      	ldr	r1, [r4, #4]
 8018f62:	4638      	mov	r0, r7
 8018f64:	3101      	adds	r1, #1
 8018f66:	f7ff ff79 	bl	8018e5c <_Balloc>
 8018f6a:	4680      	mov	r8, r0
 8018f6c:	b928      	cbnz	r0, 8018f7a <__multadd+0x5a>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	4b0c      	ldr	r3, [pc, #48]	; (8018fa4 <__multadd+0x84>)
 8018f72:	480d      	ldr	r0, [pc, #52]	; (8018fa8 <__multadd+0x88>)
 8018f74:	21ba      	movs	r1, #186	; 0xba
 8018f76:	f000 fe49 	bl	8019c0c <__assert_func>
 8018f7a:	6922      	ldr	r2, [r4, #16]
 8018f7c:	3202      	adds	r2, #2
 8018f7e:	f104 010c 	add.w	r1, r4, #12
 8018f82:	0092      	lsls	r2, r2, #2
 8018f84:	300c      	adds	r0, #12
 8018f86:	f7fe fda9 	bl	8017adc <memcpy>
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	4638      	mov	r0, r7
 8018f8e:	f7ff ffa5 	bl	8018edc <_Bfree>
 8018f92:	4644      	mov	r4, r8
 8018f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f98:	3501      	adds	r5, #1
 8018f9a:	615e      	str	r6, [r3, #20]
 8018f9c:	6125      	str	r5, [r4, #16]
 8018f9e:	4620      	mov	r0, r4
 8018fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fa4:	0801b7a1 	.word	0x0801b7a1
 8018fa8:	0801b812 	.word	0x0801b812

08018fac <__s2b>:
 8018fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fb0:	460c      	mov	r4, r1
 8018fb2:	4615      	mov	r5, r2
 8018fb4:	461f      	mov	r7, r3
 8018fb6:	2209      	movs	r2, #9
 8018fb8:	3308      	adds	r3, #8
 8018fba:	4606      	mov	r6, r0
 8018fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	db09      	blt.n	8018fdc <__s2b+0x30>
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f7ff ff47 	bl	8018e5c <_Balloc>
 8018fce:	b940      	cbnz	r0, 8018fe2 <__s2b+0x36>
 8018fd0:	4602      	mov	r2, r0
 8018fd2:	4b19      	ldr	r3, [pc, #100]	; (8019038 <__s2b+0x8c>)
 8018fd4:	4819      	ldr	r0, [pc, #100]	; (801903c <__s2b+0x90>)
 8018fd6:	21d3      	movs	r1, #211	; 0xd3
 8018fd8:	f000 fe18 	bl	8019c0c <__assert_func>
 8018fdc:	0052      	lsls	r2, r2, #1
 8018fde:	3101      	adds	r1, #1
 8018fe0:	e7f0      	b.n	8018fc4 <__s2b+0x18>
 8018fe2:	9b08      	ldr	r3, [sp, #32]
 8018fe4:	6143      	str	r3, [r0, #20]
 8018fe6:	2d09      	cmp	r5, #9
 8018fe8:	f04f 0301 	mov.w	r3, #1
 8018fec:	6103      	str	r3, [r0, #16]
 8018fee:	dd16      	ble.n	801901e <__s2b+0x72>
 8018ff0:	f104 0909 	add.w	r9, r4, #9
 8018ff4:	46c8      	mov	r8, r9
 8018ff6:	442c      	add	r4, r5
 8018ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018ffc:	4601      	mov	r1, r0
 8018ffe:	3b30      	subs	r3, #48	; 0x30
 8019000:	220a      	movs	r2, #10
 8019002:	4630      	mov	r0, r6
 8019004:	f7ff ff8c 	bl	8018f20 <__multadd>
 8019008:	45a0      	cmp	r8, r4
 801900a:	d1f5      	bne.n	8018ff8 <__s2b+0x4c>
 801900c:	f1a5 0408 	sub.w	r4, r5, #8
 8019010:	444c      	add	r4, r9
 8019012:	1b2d      	subs	r5, r5, r4
 8019014:	1963      	adds	r3, r4, r5
 8019016:	42bb      	cmp	r3, r7
 8019018:	db04      	blt.n	8019024 <__s2b+0x78>
 801901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801901e:	340a      	adds	r4, #10
 8019020:	2509      	movs	r5, #9
 8019022:	e7f6      	b.n	8019012 <__s2b+0x66>
 8019024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019028:	4601      	mov	r1, r0
 801902a:	3b30      	subs	r3, #48	; 0x30
 801902c:	220a      	movs	r2, #10
 801902e:	4630      	mov	r0, r6
 8019030:	f7ff ff76 	bl	8018f20 <__multadd>
 8019034:	e7ee      	b.n	8019014 <__s2b+0x68>
 8019036:	bf00      	nop
 8019038:	0801b7a1 	.word	0x0801b7a1
 801903c:	0801b812 	.word	0x0801b812

08019040 <__hi0bits>:
 8019040:	0c03      	lsrs	r3, r0, #16
 8019042:	041b      	lsls	r3, r3, #16
 8019044:	b9d3      	cbnz	r3, 801907c <__hi0bits+0x3c>
 8019046:	0400      	lsls	r0, r0, #16
 8019048:	2310      	movs	r3, #16
 801904a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801904e:	bf04      	itt	eq
 8019050:	0200      	lsleq	r0, r0, #8
 8019052:	3308      	addeq	r3, #8
 8019054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019058:	bf04      	itt	eq
 801905a:	0100      	lsleq	r0, r0, #4
 801905c:	3304      	addeq	r3, #4
 801905e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019062:	bf04      	itt	eq
 8019064:	0080      	lsleq	r0, r0, #2
 8019066:	3302      	addeq	r3, #2
 8019068:	2800      	cmp	r0, #0
 801906a:	db05      	blt.n	8019078 <__hi0bits+0x38>
 801906c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019070:	f103 0301 	add.w	r3, r3, #1
 8019074:	bf08      	it	eq
 8019076:	2320      	moveq	r3, #32
 8019078:	4618      	mov	r0, r3
 801907a:	4770      	bx	lr
 801907c:	2300      	movs	r3, #0
 801907e:	e7e4      	b.n	801904a <__hi0bits+0xa>

08019080 <__lo0bits>:
 8019080:	6803      	ldr	r3, [r0, #0]
 8019082:	f013 0207 	ands.w	r2, r3, #7
 8019086:	d00c      	beq.n	80190a2 <__lo0bits+0x22>
 8019088:	07d9      	lsls	r1, r3, #31
 801908a:	d422      	bmi.n	80190d2 <__lo0bits+0x52>
 801908c:	079a      	lsls	r2, r3, #30
 801908e:	bf49      	itett	mi
 8019090:	085b      	lsrmi	r3, r3, #1
 8019092:	089b      	lsrpl	r3, r3, #2
 8019094:	6003      	strmi	r3, [r0, #0]
 8019096:	2201      	movmi	r2, #1
 8019098:	bf5c      	itt	pl
 801909a:	6003      	strpl	r3, [r0, #0]
 801909c:	2202      	movpl	r2, #2
 801909e:	4610      	mov	r0, r2
 80190a0:	4770      	bx	lr
 80190a2:	b299      	uxth	r1, r3
 80190a4:	b909      	cbnz	r1, 80190aa <__lo0bits+0x2a>
 80190a6:	0c1b      	lsrs	r3, r3, #16
 80190a8:	2210      	movs	r2, #16
 80190aa:	b2d9      	uxtb	r1, r3
 80190ac:	b909      	cbnz	r1, 80190b2 <__lo0bits+0x32>
 80190ae:	3208      	adds	r2, #8
 80190b0:	0a1b      	lsrs	r3, r3, #8
 80190b2:	0719      	lsls	r1, r3, #28
 80190b4:	bf04      	itt	eq
 80190b6:	091b      	lsreq	r3, r3, #4
 80190b8:	3204      	addeq	r2, #4
 80190ba:	0799      	lsls	r1, r3, #30
 80190bc:	bf04      	itt	eq
 80190be:	089b      	lsreq	r3, r3, #2
 80190c0:	3202      	addeq	r2, #2
 80190c2:	07d9      	lsls	r1, r3, #31
 80190c4:	d403      	bmi.n	80190ce <__lo0bits+0x4e>
 80190c6:	085b      	lsrs	r3, r3, #1
 80190c8:	f102 0201 	add.w	r2, r2, #1
 80190cc:	d003      	beq.n	80190d6 <__lo0bits+0x56>
 80190ce:	6003      	str	r3, [r0, #0]
 80190d0:	e7e5      	b.n	801909e <__lo0bits+0x1e>
 80190d2:	2200      	movs	r2, #0
 80190d4:	e7e3      	b.n	801909e <__lo0bits+0x1e>
 80190d6:	2220      	movs	r2, #32
 80190d8:	e7e1      	b.n	801909e <__lo0bits+0x1e>
	...

080190dc <__i2b>:
 80190dc:	b510      	push	{r4, lr}
 80190de:	460c      	mov	r4, r1
 80190e0:	2101      	movs	r1, #1
 80190e2:	f7ff febb 	bl	8018e5c <_Balloc>
 80190e6:	4602      	mov	r2, r0
 80190e8:	b928      	cbnz	r0, 80190f6 <__i2b+0x1a>
 80190ea:	4b05      	ldr	r3, [pc, #20]	; (8019100 <__i2b+0x24>)
 80190ec:	4805      	ldr	r0, [pc, #20]	; (8019104 <__i2b+0x28>)
 80190ee:	f240 1145 	movw	r1, #325	; 0x145
 80190f2:	f000 fd8b 	bl	8019c0c <__assert_func>
 80190f6:	2301      	movs	r3, #1
 80190f8:	6144      	str	r4, [r0, #20]
 80190fa:	6103      	str	r3, [r0, #16]
 80190fc:	bd10      	pop	{r4, pc}
 80190fe:	bf00      	nop
 8019100:	0801b7a1 	.word	0x0801b7a1
 8019104:	0801b812 	.word	0x0801b812

08019108 <__multiply>:
 8019108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801910c:	4691      	mov	r9, r2
 801910e:	690a      	ldr	r2, [r1, #16]
 8019110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019114:	429a      	cmp	r2, r3
 8019116:	bfb8      	it	lt
 8019118:	460b      	movlt	r3, r1
 801911a:	460c      	mov	r4, r1
 801911c:	bfbc      	itt	lt
 801911e:	464c      	movlt	r4, r9
 8019120:	4699      	movlt	r9, r3
 8019122:	6927      	ldr	r7, [r4, #16]
 8019124:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019128:	68a3      	ldr	r3, [r4, #8]
 801912a:	6861      	ldr	r1, [r4, #4]
 801912c:	eb07 060a 	add.w	r6, r7, sl
 8019130:	42b3      	cmp	r3, r6
 8019132:	b085      	sub	sp, #20
 8019134:	bfb8      	it	lt
 8019136:	3101      	addlt	r1, #1
 8019138:	f7ff fe90 	bl	8018e5c <_Balloc>
 801913c:	b930      	cbnz	r0, 801914c <__multiply+0x44>
 801913e:	4602      	mov	r2, r0
 8019140:	4b44      	ldr	r3, [pc, #272]	; (8019254 <__multiply+0x14c>)
 8019142:	4845      	ldr	r0, [pc, #276]	; (8019258 <__multiply+0x150>)
 8019144:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019148:	f000 fd60 	bl	8019c0c <__assert_func>
 801914c:	f100 0514 	add.w	r5, r0, #20
 8019150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019154:	462b      	mov	r3, r5
 8019156:	2200      	movs	r2, #0
 8019158:	4543      	cmp	r3, r8
 801915a:	d321      	bcc.n	80191a0 <__multiply+0x98>
 801915c:	f104 0314 	add.w	r3, r4, #20
 8019160:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019164:	f109 0314 	add.w	r3, r9, #20
 8019168:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801916c:	9202      	str	r2, [sp, #8]
 801916e:	1b3a      	subs	r2, r7, r4
 8019170:	3a15      	subs	r2, #21
 8019172:	f022 0203 	bic.w	r2, r2, #3
 8019176:	3204      	adds	r2, #4
 8019178:	f104 0115 	add.w	r1, r4, #21
 801917c:	428f      	cmp	r7, r1
 801917e:	bf38      	it	cc
 8019180:	2204      	movcc	r2, #4
 8019182:	9201      	str	r2, [sp, #4]
 8019184:	9a02      	ldr	r2, [sp, #8]
 8019186:	9303      	str	r3, [sp, #12]
 8019188:	429a      	cmp	r2, r3
 801918a:	d80c      	bhi.n	80191a6 <__multiply+0x9e>
 801918c:	2e00      	cmp	r6, #0
 801918e:	dd03      	ble.n	8019198 <__multiply+0x90>
 8019190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019194:	2b00      	cmp	r3, #0
 8019196:	d05b      	beq.n	8019250 <__multiply+0x148>
 8019198:	6106      	str	r6, [r0, #16]
 801919a:	b005      	add	sp, #20
 801919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a0:	f843 2b04 	str.w	r2, [r3], #4
 80191a4:	e7d8      	b.n	8019158 <__multiply+0x50>
 80191a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80191aa:	f1ba 0f00 	cmp.w	sl, #0
 80191ae:	d024      	beq.n	80191fa <__multiply+0xf2>
 80191b0:	f104 0e14 	add.w	lr, r4, #20
 80191b4:	46a9      	mov	r9, r5
 80191b6:	f04f 0c00 	mov.w	ip, #0
 80191ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80191be:	f8d9 1000 	ldr.w	r1, [r9]
 80191c2:	fa1f fb82 	uxth.w	fp, r2
 80191c6:	b289      	uxth	r1, r1
 80191c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80191cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80191d0:	f8d9 2000 	ldr.w	r2, [r9]
 80191d4:	4461      	add	r1, ip
 80191d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191da:	fb0a c20b 	mla	r2, sl, fp, ip
 80191de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80191e2:	b289      	uxth	r1, r1
 80191e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80191e8:	4577      	cmp	r7, lr
 80191ea:	f849 1b04 	str.w	r1, [r9], #4
 80191ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80191f2:	d8e2      	bhi.n	80191ba <__multiply+0xb2>
 80191f4:	9a01      	ldr	r2, [sp, #4]
 80191f6:	f845 c002 	str.w	ip, [r5, r2]
 80191fa:	9a03      	ldr	r2, [sp, #12]
 80191fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019200:	3304      	adds	r3, #4
 8019202:	f1b9 0f00 	cmp.w	r9, #0
 8019206:	d021      	beq.n	801924c <__multiply+0x144>
 8019208:	6829      	ldr	r1, [r5, #0]
 801920a:	f104 0c14 	add.w	ip, r4, #20
 801920e:	46ae      	mov	lr, r5
 8019210:	f04f 0a00 	mov.w	sl, #0
 8019214:	f8bc b000 	ldrh.w	fp, [ip]
 8019218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801921c:	fb09 220b 	mla	r2, r9, fp, r2
 8019220:	4452      	add	r2, sl
 8019222:	b289      	uxth	r1, r1
 8019224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019228:	f84e 1b04 	str.w	r1, [lr], #4
 801922c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019234:	f8be 1000 	ldrh.w	r1, [lr]
 8019238:	fb09 110a 	mla	r1, r9, sl, r1
 801923c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019240:	4567      	cmp	r7, ip
 8019242:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019246:	d8e5      	bhi.n	8019214 <__multiply+0x10c>
 8019248:	9a01      	ldr	r2, [sp, #4]
 801924a:	50a9      	str	r1, [r5, r2]
 801924c:	3504      	adds	r5, #4
 801924e:	e799      	b.n	8019184 <__multiply+0x7c>
 8019250:	3e01      	subs	r6, #1
 8019252:	e79b      	b.n	801918c <__multiply+0x84>
 8019254:	0801b7a1 	.word	0x0801b7a1
 8019258:	0801b812 	.word	0x0801b812

0801925c <__pow5mult>:
 801925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019260:	4615      	mov	r5, r2
 8019262:	f012 0203 	ands.w	r2, r2, #3
 8019266:	4606      	mov	r6, r0
 8019268:	460f      	mov	r7, r1
 801926a:	d007      	beq.n	801927c <__pow5mult+0x20>
 801926c:	4c25      	ldr	r4, [pc, #148]	; (8019304 <__pow5mult+0xa8>)
 801926e:	3a01      	subs	r2, #1
 8019270:	2300      	movs	r3, #0
 8019272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019276:	f7ff fe53 	bl	8018f20 <__multadd>
 801927a:	4607      	mov	r7, r0
 801927c:	10ad      	asrs	r5, r5, #2
 801927e:	d03d      	beq.n	80192fc <__pow5mult+0xa0>
 8019280:	69f4      	ldr	r4, [r6, #28]
 8019282:	b97c      	cbnz	r4, 80192a4 <__pow5mult+0x48>
 8019284:	2010      	movs	r0, #16
 8019286:	f7fc ff01 	bl	801608c <malloc>
 801928a:	4602      	mov	r2, r0
 801928c:	61f0      	str	r0, [r6, #28]
 801928e:	b928      	cbnz	r0, 801929c <__pow5mult+0x40>
 8019290:	4b1d      	ldr	r3, [pc, #116]	; (8019308 <__pow5mult+0xac>)
 8019292:	481e      	ldr	r0, [pc, #120]	; (801930c <__pow5mult+0xb0>)
 8019294:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019298:	f000 fcb8 	bl	8019c0c <__assert_func>
 801929c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80192a0:	6004      	str	r4, [r0, #0]
 80192a2:	60c4      	str	r4, [r0, #12]
 80192a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80192a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80192ac:	b94c      	cbnz	r4, 80192c2 <__pow5mult+0x66>
 80192ae:	f240 2171 	movw	r1, #625	; 0x271
 80192b2:	4630      	mov	r0, r6
 80192b4:	f7ff ff12 	bl	80190dc <__i2b>
 80192b8:	2300      	movs	r3, #0
 80192ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80192be:	4604      	mov	r4, r0
 80192c0:	6003      	str	r3, [r0, #0]
 80192c2:	f04f 0900 	mov.w	r9, #0
 80192c6:	07eb      	lsls	r3, r5, #31
 80192c8:	d50a      	bpl.n	80192e0 <__pow5mult+0x84>
 80192ca:	4639      	mov	r1, r7
 80192cc:	4622      	mov	r2, r4
 80192ce:	4630      	mov	r0, r6
 80192d0:	f7ff ff1a 	bl	8019108 <__multiply>
 80192d4:	4639      	mov	r1, r7
 80192d6:	4680      	mov	r8, r0
 80192d8:	4630      	mov	r0, r6
 80192da:	f7ff fdff 	bl	8018edc <_Bfree>
 80192de:	4647      	mov	r7, r8
 80192e0:	106d      	asrs	r5, r5, #1
 80192e2:	d00b      	beq.n	80192fc <__pow5mult+0xa0>
 80192e4:	6820      	ldr	r0, [r4, #0]
 80192e6:	b938      	cbnz	r0, 80192f8 <__pow5mult+0x9c>
 80192e8:	4622      	mov	r2, r4
 80192ea:	4621      	mov	r1, r4
 80192ec:	4630      	mov	r0, r6
 80192ee:	f7ff ff0b 	bl	8019108 <__multiply>
 80192f2:	6020      	str	r0, [r4, #0]
 80192f4:	f8c0 9000 	str.w	r9, [r0]
 80192f8:	4604      	mov	r4, r0
 80192fa:	e7e4      	b.n	80192c6 <__pow5mult+0x6a>
 80192fc:	4638      	mov	r0, r7
 80192fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019302:	bf00      	nop
 8019304:	0801b960 	.word	0x0801b960
 8019308:	0801b732 	.word	0x0801b732
 801930c:	0801b812 	.word	0x0801b812

08019310 <__lshift>:
 8019310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019314:	460c      	mov	r4, r1
 8019316:	6849      	ldr	r1, [r1, #4]
 8019318:	6923      	ldr	r3, [r4, #16]
 801931a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801931e:	68a3      	ldr	r3, [r4, #8]
 8019320:	4607      	mov	r7, r0
 8019322:	4691      	mov	r9, r2
 8019324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019328:	f108 0601 	add.w	r6, r8, #1
 801932c:	42b3      	cmp	r3, r6
 801932e:	db0b      	blt.n	8019348 <__lshift+0x38>
 8019330:	4638      	mov	r0, r7
 8019332:	f7ff fd93 	bl	8018e5c <_Balloc>
 8019336:	4605      	mov	r5, r0
 8019338:	b948      	cbnz	r0, 801934e <__lshift+0x3e>
 801933a:	4602      	mov	r2, r0
 801933c:	4b28      	ldr	r3, [pc, #160]	; (80193e0 <__lshift+0xd0>)
 801933e:	4829      	ldr	r0, [pc, #164]	; (80193e4 <__lshift+0xd4>)
 8019340:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019344:	f000 fc62 	bl	8019c0c <__assert_func>
 8019348:	3101      	adds	r1, #1
 801934a:	005b      	lsls	r3, r3, #1
 801934c:	e7ee      	b.n	801932c <__lshift+0x1c>
 801934e:	2300      	movs	r3, #0
 8019350:	f100 0114 	add.w	r1, r0, #20
 8019354:	f100 0210 	add.w	r2, r0, #16
 8019358:	4618      	mov	r0, r3
 801935a:	4553      	cmp	r3, sl
 801935c:	db33      	blt.n	80193c6 <__lshift+0xb6>
 801935e:	6920      	ldr	r0, [r4, #16]
 8019360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019364:	f104 0314 	add.w	r3, r4, #20
 8019368:	f019 091f 	ands.w	r9, r9, #31
 801936c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019374:	d02b      	beq.n	80193ce <__lshift+0xbe>
 8019376:	f1c9 0e20 	rsb	lr, r9, #32
 801937a:	468a      	mov	sl, r1
 801937c:	2200      	movs	r2, #0
 801937e:	6818      	ldr	r0, [r3, #0]
 8019380:	fa00 f009 	lsl.w	r0, r0, r9
 8019384:	4310      	orrs	r0, r2
 8019386:	f84a 0b04 	str.w	r0, [sl], #4
 801938a:	f853 2b04 	ldr.w	r2, [r3], #4
 801938e:	459c      	cmp	ip, r3
 8019390:	fa22 f20e 	lsr.w	r2, r2, lr
 8019394:	d8f3      	bhi.n	801937e <__lshift+0x6e>
 8019396:	ebac 0304 	sub.w	r3, ip, r4
 801939a:	3b15      	subs	r3, #21
 801939c:	f023 0303 	bic.w	r3, r3, #3
 80193a0:	3304      	adds	r3, #4
 80193a2:	f104 0015 	add.w	r0, r4, #21
 80193a6:	4584      	cmp	ip, r0
 80193a8:	bf38      	it	cc
 80193aa:	2304      	movcc	r3, #4
 80193ac:	50ca      	str	r2, [r1, r3]
 80193ae:	b10a      	cbz	r2, 80193b4 <__lshift+0xa4>
 80193b0:	f108 0602 	add.w	r6, r8, #2
 80193b4:	3e01      	subs	r6, #1
 80193b6:	4638      	mov	r0, r7
 80193b8:	612e      	str	r6, [r5, #16]
 80193ba:	4621      	mov	r1, r4
 80193bc:	f7ff fd8e 	bl	8018edc <_Bfree>
 80193c0:	4628      	mov	r0, r5
 80193c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80193ca:	3301      	adds	r3, #1
 80193cc:	e7c5      	b.n	801935a <__lshift+0x4a>
 80193ce:	3904      	subs	r1, #4
 80193d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80193d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80193d8:	459c      	cmp	ip, r3
 80193da:	d8f9      	bhi.n	80193d0 <__lshift+0xc0>
 80193dc:	e7ea      	b.n	80193b4 <__lshift+0xa4>
 80193de:	bf00      	nop
 80193e0:	0801b7a1 	.word	0x0801b7a1
 80193e4:	0801b812 	.word	0x0801b812

080193e8 <__mcmp>:
 80193e8:	b530      	push	{r4, r5, lr}
 80193ea:	6902      	ldr	r2, [r0, #16]
 80193ec:	690c      	ldr	r4, [r1, #16]
 80193ee:	1b12      	subs	r2, r2, r4
 80193f0:	d10e      	bne.n	8019410 <__mcmp+0x28>
 80193f2:	f100 0314 	add.w	r3, r0, #20
 80193f6:	3114      	adds	r1, #20
 80193f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019408:	42a5      	cmp	r5, r4
 801940a:	d003      	beq.n	8019414 <__mcmp+0x2c>
 801940c:	d305      	bcc.n	801941a <__mcmp+0x32>
 801940e:	2201      	movs	r2, #1
 8019410:	4610      	mov	r0, r2
 8019412:	bd30      	pop	{r4, r5, pc}
 8019414:	4283      	cmp	r3, r0
 8019416:	d3f3      	bcc.n	8019400 <__mcmp+0x18>
 8019418:	e7fa      	b.n	8019410 <__mcmp+0x28>
 801941a:	f04f 32ff 	mov.w	r2, #4294967295
 801941e:	e7f7      	b.n	8019410 <__mcmp+0x28>

08019420 <__mdiff>:
 8019420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019424:	460c      	mov	r4, r1
 8019426:	4606      	mov	r6, r0
 8019428:	4611      	mov	r1, r2
 801942a:	4620      	mov	r0, r4
 801942c:	4690      	mov	r8, r2
 801942e:	f7ff ffdb 	bl	80193e8 <__mcmp>
 8019432:	1e05      	subs	r5, r0, #0
 8019434:	d110      	bne.n	8019458 <__mdiff+0x38>
 8019436:	4629      	mov	r1, r5
 8019438:	4630      	mov	r0, r6
 801943a:	f7ff fd0f 	bl	8018e5c <_Balloc>
 801943e:	b930      	cbnz	r0, 801944e <__mdiff+0x2e>
 8019440:	4b3a      	ldr	r3, [pc, #232]	; (801952c <__mdiff+0x10c>)
 8019442:	4602      	mov	r2, r0
 8019444:	f240 2137 	movw	r1, #567	; 0x237
 8019448:	4839      	ldr	r0, [pc, #228]	; (8019530 <__mdiff+0x110>)
 801944a:	f000 fbdf 	bl	8019c0c <__assert_func>
 801944e:	2301      	movs	r3, #1
 8019450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019458:	bfa4      	itt	ge
 801945a:	4643      	movge	r3, r8
 801945c:	46a0      	movge	r8, r4
 801945e:	4630      	mov	r0, r6
 8019460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019464:	bfa6      	itte	ge
 8019466:	461c      	movge	r4, r3
 8019468:	2500      	movge	r5, #0
 801946a:	2501      	movlt	r5, #1
 801946c:	f7ff fcf6 	bl	8018e5c <_Balloc>
 8019470:	b920      	cbnz	r0, 801947c <__mdiff+0x5c>
 8019472:	4b2e      	ldr	r3, [pc, #184]	; (801952c <__mdiff+0x10c>)
 8019474:	4602      	mov	r2, r0
 8019476:	f240 2145 	movw	r1, #581	; 0x245
 801947a:	e7e5      	b.n	8019448 <__mdiff+0x28>
 801947c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019480:	6926      	ldr	r6, [r4, #16]
 8019482:	60c5      	str	r5, [r0, #12]
 8019484:	f104 0914 	add.w	r9, r4, #20
 8019488:	f108 0514 	add.w	r5, r8, #20
 801948c:	f100 0e14 	add.w	lr, r0, #20
 8019490:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019498:	f108 0210 	add.w	r2, r8, #16
 801949c:	46f2      	mov	sl, lr
 801949e:	2100      	movs	r1, #0
 80194a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80194a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80194a8:	fa11 f88b 	uxtah	r8, r1, fp
 80194ac:	b299      	uxth	r1, r3
 80194ae:	0c1b      	lsrs	r3, r3, #16
 80194b0:	eba8 0801 	sub.w	r8, r8, r1
 80194b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80194b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80194bc:	fa1f f888 	uxth.w	r8, r8
 80194c0:	1419      	asrs	r1, r3, #16
 80194c2:	454e      	cmp	r6, r9
 80194c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80194c8:	f84a 3b04 	str.w	r3, [sl], #4
 80194cc:	d8e8      	bhi.n	80194a0 <__mdiff+0x80>
 80194ce:	1b33      	subs	r3, r6, r4
 80194d0:	3b15      	subs	r3, #21
 80194d2:	f023 0303 	bic.w	r3, r3, #3
 80194d6:	3304      	adds	r3, #4
 80194d8:	3415      	adds	r4, #21
 80194da:	42a6      	cmp	r6, r4
 80194dc:	bf38      	it	cc
 80194de:	2304      	movcc	r3, #4
 80194e0:	441d      	add	r5, r3
 80194e2:	4473      	add	r3, lr
 80194e4:	469e      	mov	lr, r3
 80194e6:	462e      	mov	r6, r5
 80194e8:	4566      	cmp	r6, ip
 80194ea:	d30e      	bcc.n	801950a <__mdiff+0xea>
 80194ec:	f10c 0203 	add.w	r2, ip, #3
 80194f0:	1b52      	subs	r2, r2, r5
 80194f2:	f022 0203 	bic.w	r2, r2, #3
 80194f6:	3d03      	subs	r5, #3
 80194f8:	45ac      	cmp	ip, r5
 80194fa:	bf38      	it	cc
 80194fc:	2200      	movcc	r2, #0
 80194fe:	4413      	add	r3, r2
 8019500:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019504:	b17a      	cbz	r2, 8019526 <__mdiff+0x106>
 8019506:	6107      	str	r7, [r0, #16]
 8019508:	e7a4      	b.n	8019454 <__mdiff+0x34>
 801950a:	f856 8b04 	ldr.w	r8, [r6], #4
 801950e:	fa11 f288 	uxtah	r2, r1, r8
 8019512:	1414      	asrs	r4, r2, #16
 8019514:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019518:	b292      	uxth	r2, r2
 801951a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801951e:	f84e 2b04 	str.w	r2, [lr], #4
 8019522:	1421      	asrs	r1, r4, #16
 8019524:	e7e0      	b.n	80194e8 <__mdiff+0xc8>
 8019526:	3f01      	subs	r7, #1
 8019528:	e7ea      	b.n	8019500 <__mdiff+0xe0>
 801952a:	bf00      	nop
 801952c:	0801b7a1 	.word	0x0801b7a1
 8019530:	0801b812 	.word	0x0801b812

08019534 <__ulp>:
 8019534:	b082      	sub	sp, #8
 8019536:	ed8d 0b00 	vstr	d0, [sp]
 801953a:	9a01      	ldr	r2, [sp, #4]
 801953c:	4b0f      	ldr	r3, [pc, #60]	; (801957c <__ulp+0x48>)
 801953e:	4013      	ands	r3, r2
 8019540:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019544:	2b00      	cmp	r3, #0
 8019546:	dc08      	bgt.n	801955a <__ulp+0x26>
 8019548:	425b      	negs	r3, r3
 801954a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801954e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019552:	da04      	bge.n	801955e <__ulp+0x2a>
 8019554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019558:	4113      	asrs	r3, r2
 801955a:	2200      	movs	r2, #0
 801955c:	e008      	b.n	8019570 <__ulp+0x3c>
 801955e:	f1a2 0314 	sub.w	r3, r2, #20
 8019562:	2b1e      	cmp	r3, #30
 8019564:	bfda      	itte	le
 8019566:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801956a:	40da      	lsrle	r2, r3
 801956c:	2201      	movgt	r2, #1
 801956e:	2300      	movs	r3, #0
 8019570:	4619      	mov	r1, r3
 8019572:	4610      	mov	r0, r2
 8019574:	ec41 0b10 	vmov	d0, r0, r1
 8019578:	b002      	add	sp, #8
 801957a:	4770      	bx	lr
 801957c:	7ff00000 	.word	0x7ff00000

08019580 <__b2d>:
 8019580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019584:	6906      	ldr	r6, [r0, #16]
 8019586:	f100 0814 	add.w	r8, r0, #20
 801958a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801958e:	1f37      	subs	r7, r6, #4
 8019590:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019594:	4610      	mov	r0, r2
 8019596:	f7ff fd53 	bl	8019040 <__hi0bits>
 801959a:	f1c0 0320 	rsb	r3, r0, #32
 801959e:	280a      	cmp	r0, #10
 80195a0:	600b      	str	r3, [r1, #0]
 80195a2:	491b      	ldr	r1, [pc, #108]	; (8019610 <__b2d+0x90>)
 80195a4:	dc15      	bgt.n	80195d2 <__b2d+0x52>
 80195a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80195aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80195ae:	45b8      	cmp	r8, r7
 80195b0:	ea43 0501 	orr.w	r5, r3, r1
 80195b4:	bf34      	ite	cc
 80195b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195ba:	2300      	movcs	r3, #0
 80195bc:	3015      	adds	r0, #21
 80195be:	fa02 f000 	lsl.w	r0, r2, r0
 80195c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80195c6:	4303      	orrs	r3, r0
 80195c8:	461c      	mov	r4, r3
 80195ca:	ec45 4b10 	vmov	d0, r4, r5
 80195ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195d2:	45b8      	cmp	r8, r7
 80195d4:	bf3a      	itte	cc
 80195d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80195da:	f1a6 0708 	subcc.w	r7, r6, #8
 80195de:	2300      	movcs	r3, #0
 80195e0:	380b      	subs	r0, #11
 80195e2:	d012      	beq.n	801960a <__b2d+0x8a>
 80195e4:	f1c0 0120 	rsb	r1, r0, #32
 80195e8:	fa23 f401 	lsr.w	r4, r3, r1
 80195ec:	4082      	lsls	r2, r0
 80195ee:	4322      	orrs	r2, r4
 80195f0:	4547      	cmp	r7, r8
 80195f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80195f6:	bf8c      	ite	hi
 80195f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80195fc:	2200      	movls	r2, #0
 80195fe:	4083      	lsls	r3, r0
 8019600:	40ca      	lsrs	r2, r1
 8019602:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019606:	4313      	orrs	r3, r2
 8019608:	e7de      	b.n	80195c8 <__b2d+0x48>
 801960a:	ea42 0501 	orr.w	r5, r2, r1
 801960e:	e7db      	b.n	80195c8 <__b2d+0x48>
 8019610:	3ff00000 	.word	0x3ff00000

08019614 <__d2b>:
 8019614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019618:	460f      	mov	r7, r1
 801961a:	2101      	movs	r1, #1
 801961c:	ec59 8b10 	vmov	r8, r9, d0
 8019620:	4616      	mov	r6, r2
 8019622:	f7ff fc1b 	bl	8018e5c <_Balloc>
 8019626:	4604      	mov	r4, r0
 8019628:	b930      	cbnz	r0, 8019638 <__d2b+0x24>
 801962a:	4602      	mov	r2, r0
 801962c:	4b24      	ldr	r3, [pc, #144]	; (80196c0 <__d2b+0xac>)
 801962e:	4825      	ldr	r0, [pc, #148]	; (80196c4 <__d2b+0xb0>)
 8019630:	f240 310f 	movw	r1, #783	; 0x30f
 8019634:	f000 faea 	bl	8019c0c <__assert_func>
 8019638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801963c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019640:	bb2d      	cbnz	r5, 801968e <__d2b+0x7a>
 8019642:	9301      	str	r3, [sp, #4]
 8019644:	f1b8 0300 	subs.w	r3, r8, #0
 8019648:	d026      	beq.n	8019698 <__d2b+0x84>
 801964a:	4668      	mov	r0, sp
 801964c:	9300      	str	r3, [sp, #0]
 801964e:	f7ff fd17 	bl	8019080 <__lo0bits>
 8019652:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019656:	b1e8      	cbz	r0, 8019694 <__d2b+0x80>
 8019658:	f1c0 0320 	rsb	r3, r0, #32
 801965c:	fa02 f303 	lsl.w	r3, r2, r3
 8019660:	430b      	orrs	r3, r1
 8019662:	40c2      	lsrs	r2, r0
 8019664:	6163      	str	r3, [r4, #20]
 8019666:	9201      	str	r2, [sp, #4]
 8019668:	9b01      	ldr	r3, [sp, #4]
 801966a:	61a3      	str	r3, [r4, #24]
 801966c:	2b00      	cmp	r3, #0
 801966e:	bf14      	ite	ne
 8019670:	2202      	movne	r2, #2
 8019672:	2201      	moveq	r2, #1
 8019674:	6122      	str	r2, [r4, #16]
 8019676:	b1bd      	cbz	r5, 80196a8 <__d2b+0x94>
 8019678:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801967c:	4405      	add	r5, r0
 801967e:	603d      	str	r5, [r7, #0]
 8019680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019684:	6030      	str	r0, [r6, #0]
 8019686:	4620      	mov	r0, r4
 8019688:	b003      	add	sp, #12
 801968a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801968e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019692:	e7d6      	b.n	8019642 <__d2b+0x2e>
 8019694:	6161      	str	r1, [r4, #20]
 8019696:	e7e7      	b.n	8019668 <__d2b+0x54>
 8019698:	a801      	add	r0, sp, #4
 801969a:	f7ff fcf1 	bl	8019080 <__lo0bits>
 801969e:	9b01      	ldr	r3, [sp, #4]
 80196a0:	6163      	str	r3, [r4, #20]
 80196a2:	3020      	adds	r0, #32
 80196a4:	2201      	movs	r2, #1
 80196a6:	e7e5      	b.n	8019674 <__d2b+0x60>
 80196a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80196ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80196b0:	6038      	str	r0, [r7, #0]
 80196b2:	6918      	ldr	r0, [r3, #16]
 80196b4:	f7ff fcc4 	bl	8019040 <__hi0bits>
 80196b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80196bc:	e7e2      	b.n	8019684 <__d2b+0x70>
 80196be:	bf00      	nop
 80196c0:	0801b7a1 	.word	0x0801b7a1
 80196c4:	0801b812 	.word	0x0801b812

080196c8 <__ratio>:
 80196c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196cc:	4688      	mov	r8, r1
 80196ce:	4669      	mov	r1, sp
 80196d0:	4681      	mov	r9, r0
 80196d2:	f7ff ff55 	bl	8019580 <__b2d>
 80196d6:	a901      	add	r1, sp, #4
 80196d8:	4640      	mov	r0, r8
 80196da:	ec55 4b10 	vmov	r4, r5, d0
 80196de:	ee10 aa10 	vmov	sl, s0
 80196e2:	f7ff ff4d 	bl	8019580 <__b2d>
 80196e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80196ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80196ee:	1ad2      	subs	r2, r2, r3
 80196f0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80196f4:	1a5b      	subs	r3, r3, r1
 80196f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80196fa:	ec57 6b10 	vmov	r6, r7, d0
 80196fe:	2b00      	cmp	r3, #0
 8019700:	bfd6      	itet	le
 8019702:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019706:	462a      	movgt	r2, r5
 8019708:	463a      	movle	r2, r7
 801970a:	46ab      	mov	fp, r5
 801970c:	bfd6      	itet	le
 801970e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019712:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019716:	ee00 3a90 	vmovle	s1, r3
 801971a:	ec4b ab17 	vmov	d7, sl, fp
 801971e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019722:	b003      	add	sp, #12
 8019724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019728 <__copybits>:
 8019728:	3901      	subs	r1, #1
 801972a:	b570      	push	{r4, r5, r6, lr}
 801972c:	1149      	asrs	r1, r1, #5
 801972e:	6914      	ldr	r4, [r2, #16]
 8019730:	3101      	adds	r1, #1
 8019732:	f102 0314 	add.w	r3, r2, #20
 8019736:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801973a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801973e:	1f05      	subs	r5, r0, #4
 8019740:	42a3      	cmp	r3, r4
 8019742:	d30c      	bcc.n	801975e <__copybits+0x36>
 8019744:	1aa3      	subs	r3, r4, r2
 8019746:	3b11      	subs	r3, #17
 8019748:	f023 0303 	bic.w	r3, r3, #3
 801974c:	3211      	adds	r2, #17
 801974e:	42a2      	cmp	r2, r4
 8019750:	bf88      	it	hi
 8019752:	2300      	movhi	r3, #0
 8019754:	4418      	add	r0, r3
 8019756:	2300      	movs	r3, #0
 8019758:	4288      	cmp	r0, r1
 801975a:	d305      	bcc.n	8019768 <__copybits+0x40>
 801975c:	bd70      	pop	{r4, r5, r6, pc}
 801975e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019762:	f845 6f04 	str.w	r6, [r5, #4]!
 8019766:	e7eb      	b.n	8019740 <__copybits+0x18>
 8019768:	f840 3b04 	str.w	r3, [r0], #4
 801976c:	e7f4      	b.n	8019758 <__copybits+0x30>

0801976e <__any_on>:
 801976e:	f100 0214 	add.w	r2, r0, #20
 8019772:	6900      	ldr	r0, [r0, #16]
 8019774:	114b      	asrs	r3, r1, #5
 8019776:	4298      	cmp	r0, r3
 8019778:	b510      	push	{r4, lr}
 801977a:	db11      	blt.n	80197a0 <__any_on+0x32>
 801977c:	dd0a      	ble.n	8019794 <__any_on+0x26>
 801977e:	f011 011f 	ands.w	r1, r1, #31
 8019782:	d007      	beq.n	8019794 <__any_on+0x26>
 8019784:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019788:	fa24 f001 	lsr.w	r0, r4, r1
 801978c:	fa00 f101 	lsl.w	r1, r0, r1
 8019790:	428c      	cmp	r4, r1
 8019792:	d10b      	bne.n	80197ac <__any_on+0x3e>
 8019794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019798:	4293      	cmp	r3, r2
 801979a:	d803      	bhi.n	80197a4 <__any_on+0x36>
 801979c:	2000      	movs	r0, #0
 801979e:	bd10      	pop	{r4, pc}
 80197a0:	4603      	mov	r3, r0
 80197a2:	e7f7      	b.n	8019794 <__any_on+0x26>
 80197a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80197a8:	2900      	cmp	r1, #0
 80197aa:	d0f5      	beq.n	8019798 <__any_on+0x2a>
 80197ac:	2001      	movs	r0, #1
 80197ae:	e7f6      	b.n	801979e <__any_on+0x30>

080197b0 <__ascii_wctomb>:
 80197b0:	b149      	cbz	r1, 80197c6 <__ascii_wctomb+0x16>
 80197b2:	2aff      	cmp	r2, #255	; 0xff
 80197b4:	bf85      	ittet	hi
 80197b6:	238a      	movhi	r3, #138	; 0x8a
 80197b8:	6003      	strhi	r3, [r0, #0]
 80197ba:	700a      	strbls	r2, [r1, #0]
 80197bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80197c0:	bf98      	it	ls
 80197c2:	2001      	movls	r0, #1
 80197c4:	4770      	bx	lr
 80197c6:	4608      	mov	r0, r1
 80197c8:	4770      	bx	lr

080197ca <__ssputs_r>:
 80197ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197ce:	688e      	ldr	r6, [r1, #8]
 80197d0:	461f      	mov	r7, r3
 80197d2:	42be      	cmp	r6, r7
 80197d4:	680b      	ldr	r3, [r1, #0]
 80197d6:	4682      	mov	sl, r0
 80197d8:	460c      	mov	r4, r1
 80197da:	4690      	mov	r8, r2
 80197dc:	d82c      	bhi.n	8019838 <__ssputs_r+0x6e>
 80197de:	898a      	ldrh	r2, [r1, #12]
 80197e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197e4:	d026      	beq.n	8019834 <__ssputs_r+0x6a>
 80197e6:	6965      	ldr	r5, [r4, #20]
 80197e8:	6909      	ldr	r1, [r1, #16]
 80197ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197ee:	eba3 0901 	sub.w	r9, r3, r1
 80197f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80197f6:	1c7b      	adds	r3, r7, #1
 80197f8:	444b      	add	r3, r9
 80197fa:	106d      	asrs	r5, r5, #1
 80197fc:	429d      	cmp	r5, r3
 80197fe:	bf38      	it	cc
 8019800:	461d      	movcc	r5, r3
 8019802:	0553      	lsls	r3, r2, #21
 8019804:	d527      	bpl.n	8019856 <__ssputs_r+0x8c>
 8019806:	4629      	mov	r1, r5
 8019808:	f7fc fc70 	bl	80160ec <_malloc_r>
 801980c:	4606      	mov	r6, r0
 801980e:	b360      	cbz	r0, 801986a <__ssputs_r+0xa0>
 8019810:	6921      	ldr	r1, [r4, #16]
 8019812:	464a      	mov	r2, r9
 8019814:	f7fe f962 	bl	8017adc <memcpy>
 8019818:	89a3      	ldrh	r3, [r4, #12]
 801981a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019822:	81a3      	strh	r3, [r4, #12]
 8019824:	6126      	str	r6, [r4, #16]
 8019826:	6165      	str	r5, [r4, #20]
 8019828:	444e      	add	r6, r9
 801982a:	eba5 0509 	sub.w	r5, r5, r9
 801982e:	6026      	str	r6, [r4, #0]
 8019830:	60a5      	str	r5, [r4, #8]
 8019832:	463e      	mov	r6, r7
 8019834:	42be      	cmp	r6, r7
 8019836:	d900      	bls.n	801983a <__ssputs_r+0x70>
 8019838:	463e      	mov	r6, r7
 801983a:	6820      	ldr	r0, [r4, #0]
 801983c:	4632      	mov	r2, r6
 801983e:	4641      	mov	r1, r8
 8019840:	f000 f9ca 	bl	8019bd8 <memmove>
 8019844:	68a3      	ldr	r3, [r4, #8]
 8019846:	1b9b      	subs	r3, r3, r6
 8019848:	60a3      	str	r3, [r4, #8]
 801984a:	6823      	ldr	r3, [r4, #0]
 801984c:	4433      	add	r3, r6
 801984e:	6023      	str	r3, [r4, #0]
 8019850:	2000      	movs	r0, #0
 8019852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019856:	462a      	mov	r2, r5
 8019858:	f000 fa0c 	bl	8019c74 <_realloc_r>
 801985c:	4606      	mov	r6, r0
 801985e:	2800      	cmp	r0, #0
 8019860:	d1e0      	bne.n	8019824 <__ssputs_r+0x5a>
 8019862:	6921      	ldr	r1, [r4, #16]
 8019864:	4650      	mov	r0, sl
 8019866:	f7fe ff43 	bl	80186f0 <_free_r>
 801986a:	230c      	movs	r3, #12
 801986c:	f8ca 3000 	str.w	r3, [sl]
 8019870:	89a3      	ldrh	r3, [r4, #12]
 8019872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019876:	81a3      	strh	r3, [r4, #12]
 8019878:	f04f 30ff 	mov.w	r0, #4294967295
 801987c:	e7e9      	b.n	8019852 <__ssputs_r+0x88>
	...

08019880 <_svfiprintf_r>:
 8019880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019884:	4698      	mov	r8, r3
 8019886:	898b      	ldrh	r3, [r1, #12]
 8019888:	061b      	lsls	r3, r3, #24
 801988a:	b09d      	sub	sp, #116	; 0x74
 801988c:	4607      	mov	r7, r0
 801988e:	460d      	mov	r5, r1
 8019890:	4614      	mov	r4, r2
 8019892:	d50e      	bpl.n	80198b2 <_svfiprintf_r+0x32>
 8019894:	690b      	ldr	r3, [r1, #16]
 8019896:	b963      	cbnz	r3, 80198b2 <_svfiprintf_r+0x32>
 8019898:	2140      	movs	r1, #64	; 0x40
 801989a:	f7fc fc27 	bl	80160ec <_malloc_r>
 801989e:	6028      	str	r0, [r5, #0]
 80198a0:	6128      	str	r0, [r5, #16]
 80198a2:	b920      	cbnz	r0, 80198ae <_svfiprintf_r+0x2e>
 80198a4:	230c      	movs	r3, #12
 80198a6:	603b      	str	r3, [r7, #0]
 80198a8:	f04f 30ff 	mov.w	r0, #4294967295
 80198ac:	e0d0      	b.n	8019a50 <_svfiprintf_r+0x1d0>
 80198ae:	2340      	movs	r3, #64	; 0x40
 80198b0:	616b      	str	r3, [r5, #20]
 80198b2:	2300      	movs	r3, #0
 80198b4:	9309      	str	r3, [sp, #36]	; 0x24
 80198b6:	2320      	movs	r3, #32
 80198b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80198c0:	2330      	movs	r3, #48	; 0x30
 80198c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019a68 <_svfiprintf_r+0x1e8>
 80198c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198ca:	f04f 0901 	mov.w	r9, #1
 80198ce:	4623      	mov	r3, r4
 80198d0:	469a      	mov	sl, r3
 80198d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198d6:	b10a      	cbz	r2, 80198dc <_svfiprintf_r+0x5c>
 80198d8:	2a25      	cmp	r2, #37	; 0x25
 80198da:	d1f9      	bne.n	80198d0 <_svfiprintf_r+0x50>
 80198dc:	ebba 0b04 	subs.w	fp, sl, r4
 80198e0:	d00b      	beq.n	80198fa <_svfiprintf_r+0x7a>
 80198e2:	465b      	mov	r3, fp
 80198e4:	4622      	mov	r2, r4
 80198e6:	4629      	mov	r1, r5
 80198e8:	4638      	mov	r0, r7
 80198ea:	f7ff ff6e 	bl	80197ca <__ssputs_r>
 80198ee:	3001      	adds	r0, #1
 80198f0:	f000 80a9 	beq.w	8019a46 <_svfiprintf_r+0x1c6>
 80198f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80198f6:	445a      	add	r2, fp
 80198f8:	9209      	str	r2, [sp, #36]	; 0x24
 80198fa:	f89a 3000 	ldrb.w	r3, [sl]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	f000 80a1 	beq.w	8019a46 <_svfiprintf_r+0x1c6>
 8019904:	2300      	movs	r3, #0
 8019906:	f04f 32ff 	mov.w	r2, #4294967295
 801990a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801990e:	f10a 0a01 	add.w	sl, sl, #1
 8019912:	9304      	str	r3, [sp, #16]
 8019914:	9307      	str	r3, [sp, #28]
 8019916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801991a:	931a      	str	r3, [sp, #104]	; 0x68
 801991c:	4654      	mov	r4, sl
 801991e:	2205      	movs	r2, #5
 8019920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019924:	4850      	ldr	r0, [pc, #320]	; (8019a68 <_svfiprintf_r+0x1e8>)
 8019926:	f7e6 fceb 	bl	8000300 <memchr>
 801992a:	9a04      	ldr	r2, [sp, #16]
 801992c:	b9d8      	cbnz	r0, 8019966 <_svfiprintf_r+0xe6>
 801992e:	06d0      	lsls	r0, r2, #27
 8019930:	bf44      	itt	mi
 8019932:	2320      	movmi	r3, #32
 8019934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019938:	0711      	lsls	r1, r2, #28
 801993a:	bf44      	itt	mi
 801993c:	232b      	movmi	r3, #43	; 0x2b
 801993e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019942:	f89a 3000 	ldrb.w	r3, [sl]
 8019946:	2b2a      	cmp	r3, #42	; 0x2a
 8019948:	d015      	beq.n	8019976 <_svfiprintf_r+0xf6>
 801994a:	9a07      	ldr	r2, [sp, #28]
 801994c:	4654      	mov	r4, sl
 801994e:	2000      	movs	r0, #0
 8019950:	f04f 0c0a 	mov.w	ip, #10
 8019954:	4621      	mov	r1, r4
 8019956:	f811 3b01 	ldrb.w	r3, [r1], #1
 801995a:	3b30      	subs	r3, #48	; 0x30
 801995c:	2b09      	cmp	r3, #9
 801995e:	d94d      	bls.n	80199fc <_svfiprintf_r+0x17c>
 8019960:	b1b0      	cbz	r0, 8019990 <_svfiprintf_r+0x110>
 8019962:	9207      	str	r2, [sp, #28]
 8019964:	e014      	b.n	8019990 <_svfiprintf_r+0x110>
 8019966:	eba0 0308 	sub.w	r3, r0, r8
 801996a:	fa09 f303 	lsl.w	r3, r9, r3
 801996e:	4313      	orrs	r3, r2
 8019970:	9304      	str	r3, [sp, #16]
 8019972:	46a2      	mov	sl, r4
 8019974:	e7d2      	b.n	801991c <_svfiprintf_r+0x9c>
 8019976:	9b03      	ldr	r3, [sp, #12]
 8019978:	1d19      	adds	r1, r3, #4
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	9103      	str	r1, [sp, #12]
 801997e:	2b00      	cmp	r3, #0
 8019980:	bfbb      	ittet	lt
 8019982:	425b      	neglt	r3, r3
 8019984:	f042 0202 	orrlt.w	r2, r2, #2
 8019988:	9307      	strge	r3, [sp, #28]
 801998a:	9307      	strlt	r3, [sp, #28]
 801998c:	bfb8      	it	lt
 801998e:	9204      	strlt	r2, [sp, #16]
 8019990:	7823      	ldrb	r3, [r4, #0]
 8019992:	2b2e      	cmp	r3, #46	; 0x2e
 8019994:	d10c      	bne.n	80199b0 <_svfiprintf_r+0x130>
 8019996:	7863      	ldrb	r3, [r4, #1]
 8019998:	2b2a      	cmp	r3, #42	; 0x2a
 801999a:	d134      	bne.n	8019a06 <_svfiprintf_r+0x186>
 801999c:	9b03      	ldr	r3, [sp, #12]
 801999e:	1d1a      	adds	r2, r3, #4
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	9203      	str	r2, [sp, #12]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	bfb8      	it	lt
 80199a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80199ac:	3402      	adds	r4, #2
 80199ae:	9305      	str	r3, [sp, #20]
 80199b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019a78 <_svfiprintf_r+0x1f8>
 80199b4:	7821      	ldrb	r1, [r4, #0]
 80199b6:	2203      	movs	r2, #3
 80199b8:	4650      	mov	r0, sl
 80199ba:	f7e6 fca1 	bl	8000300 <memchr>
 80199be:	b138      	cbz	r0, 80199d0 <_svfiprintf_r+0x150>
 80199c0:	9b04      	ldr	r3, [sp, #16]
 80199c2:	eba0 000a 	sub.w	r0, r0, sl
 80199c6:	2240      	movs	r2, #64	; 0x40
 80199c8:	4082      	lsls	r2, r0
 80199ca:	4313      	orrs	r3, r2
 80199cc:	3401      	adds	r4, #1
 80199ce:	9304      	str	r3, [sp, #16]
 80199d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199d4:	4825      	ldr	r0, [pc, #148]	; (8019a6c <_svfiprintf_r+0x1ec>)
 80199d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199da:	2206      	movs	r2, #6
 80199dc:	f7e6 fc90 	bl	8000300 <memchr>
 80199e0:	2800      	cmp	r0, #0
 80199e2:	d038      	beq.n	8019a56 <_svfiprintf_r+0x1d6>
 80199e4:	4b22      	ldr	r3, [pc, #136]	; (8019a70 <_svfiprintf_r+0x1f0>)
 80199e6:	bb1b      	cbnz	r3, 8019a30 <_svfiprintf_r+0x1b0>
 80199e8:	9b03      	ldr	r3, [sp, #12]
 80199ea:	3307      	adds	r3, #7
 80199ec:	f023 0307 	bic.w	r3, r3, #7
 80199f0:	3308      	adds	r3, #8
 80199f2:	9303      	str	r3, [sp, #12]
 80199f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199f6:	4433      	add	r3, r6
 80199f8:	9309      	str	r3, [sp, #36]	; 0x24
 80199fa:	e768      	b.n	80198ce <_svfiprintf_r+0x4e>
 80199fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a00:	460c      	mov	r4, r1
 8019a02:	2001      	movs	r0, #1
 8019a04:	e7a6      	b.n	8019954 <_svfiprintf_r+0xd4>
 8019a06:	2300      	movs	r3, #0
 8019a08:	3401      	adds	r4, #1
 8019a0a:	9305      	str	r3, [sp, #20]
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	f04f 0c0a 	mov.w	ip, #10
 8019a12:	4620      	mov	r0, r4
 8019a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a18:	3a30      	subs	r2, #48	; 0x30
 8019a1a:	2a09      	cmp	r2, #9
 8019a1c:	d903      	bls.n	8019a26 <_svfiprintf_r+0x1a6>
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d0c6      	beq.n	80199b0 <_svfiprintf_r+0x130>
 8019a22:	9105      	str	r1, [sp, #20]
 8019a24:	e7c4      	b.n	80199b0 <_svfiprintf_r+0x130>
 8019a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	2301      	movs	r3, #1
 8019a2e:	e7f0      	b.n	8019a12 <_svfiprintf_r+0x192>
 8019a30:	ab03      	add	r3, sp, #12
 8019a32:	9300      	str	r3, [sp, #0]
 8019a34:	462a      	mov	r2, r5
 8019a36:	4b0f      	ldr	r3, [pc, #60]	; (8019a74 <_svfiprintf_r+0x1f4>)
 8019a38:	a904      	add	r1, sp, #16
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	f7fd fad8 	bl	8016ff0 <_printf_float>
 8019a40:	1c42      	adds	r2, r0, #1
 8019a42:	4606      	mov	r6, r0
 8019a44:	d1d6      	bne.n	80199f4 <_svfiprintf_r+0x174>
 8019a46:	89ab      	ldrh	r3, [r5, #12]
 8019a48:	065b      	lsls	r3, r3, #25
 8019a4a:	f53f af2d 	bmi.w	80198a8 <_svfiprintf_r+0x28>
 8019a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a50:	b01d      	add	sp, #116	; 0x74
 8019a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a56:	ab03      	add	r3, sp, #12
 8019a58:	9300      	str	r3, [sp, #0]
 8019a5a:	462a      	mov	r2, r5
 8019a5c:	4b05      	ldr	r3, [pc, #20]	; (8019a74 <_svfiprintf_r+0x1f4>)
 8019a5e:	a904      	add	r1, sp, #16
 8019a60:	4638      	mov	r0, r7
 8019a62:	f7fd fd4d 	bl	8017500 <_printf_i>
 8019a66:	e7eb      	b.n	8019a40 <_svfiprintf_r+0x1c0>
 8019a68:	0801b96c 	.word	0x0801b96c
 8019a6c:	0801b976 	.word	0x0801b976
 8019a70:	08016ff1 	.word	0x08016ff1
 8019a74:	080197cb 	.word	0x080197cb
 8019a78:	0801b972 	.word	0x0801b972

08019a7c <__sflush_r>:
 8019a7c:	898a      	ldrh	r2, [r1, #12]
 8019a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a82:	4605      	mov	r5, r0
 8019a84:	0710      	lsls	r0, r2, #28
 8019a86:	460c      	mov	r4, r1
 8019a88:	d458      	bmi.n	8019b3c <__sflush_r+0xc0>
 8019a8a:	684b      	ldr	r3, [r1, #4]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	dc05      	bgt.n	8019a9c <__sflush_r+0x20>
 8019a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	dc02      	bgt.n	8019a9c <__sflush_r+0x20>
 8019a96:	2000      	movs	r0, #0
 8019a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a9e:	2e00      	cmp	r6, #0
 8019aa0:	d0f9      	beq.n	8019a96 <__sflush_r+0x1a>
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019aa8:	682f      	ldr	r7, [r5, #0]
 8019aaa:	6a21      	ldr	r1, [r4, #32]
 8019aac:	602b      	str	r3, [r5, #0]
 8019aae:	d032      	beq.n	8019b16 <__sflush_r+0x9a>
 8019ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019ab2:	89a3      	ldrh	r3, [r4, #12]
 8019ab4:	075a      	lsls	r2, r3, #29
 8019ab6:	d505      	bpl.n	8019ac4 <__sflush_r+0x48>
 8019ab8:	6863      	ldr	r3, [r4, #4]
 8019aba:	1ac0      	subs	r0, r0, r3
 8019abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019abe:	b10b      	cbz	r3, 8019ac4 <__sflush_r+0x48>
 8019ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ac2:	1ac0      	subs	r0, r0, r3
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	4602      	mov	r2, r0
 8019ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019aca:	6a21      	ldr	r1, [r4, #32]
 8019acc:	4628      	mov	r0, r5
 8019ace:	47b0      	blx	r6
 8019ad0:	1c43      	adds	r3, r0, #1
 8019ad2:	89a3      	ldrh	r3, [r4, #12]
 8019ad4:	d106      	bne.n	8019ae4 <__sflush_r+0x68>
 8019ad6:	6829      	ldr	r1, [r5, #0]
 8019ad8:	291d      	cmp	r1, #29
 8019ada:	d82b      	bhi.n	8019b34 <__sflush_r+0xb8>
 8019adc:	4a29      	ldr	r2, [pc, #164]	; (8019b84 <__sflush_r+0x108>)
 8019ade:	410a      	asrs	r2, r1
 8019ae0:	07d6      	lsls	r6, r2, #31
 8019ae2:	d427      	bmi.n	8019b34 <__sflush_r+0xb8>
 8019ae4:	2200      	movs	r2, #0
 8019ae6:	6062      	str	r2, [r4, #4]
 8019ae8:	04d9      	lsls	r1, r3, #19
 8019aea:	6922      	ldr	r2, [r4, #16]
 8019aec:	6022      	str	r2, [r4, #0]
 8019aee:	d504      	bpl.n	8019afa <__sflush_r+0x7e>
 8019af0:	1c42      	adds	r2, r0, #1
 8019af2:	d101      	bne.n	8019af8 <__sflush_r+0x7c>
 8019af4:	682b      	ldr	r3, [r5, #0]
 8019af6:	b903      	cbnz	r3, 8019afa <__sflush_r+0x7e>
 8019af8:	6560      	str	r0, [r4, #84]	; 0x54
 8019afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019afc:	602f      	str	r7, [r5, #0]
 8019afe:	2900      	cmp	r1, #0
 8019b00:	d0c9      	beq.n	8019a96 <__sflush_r+0x1a>
 8019b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b06:	4299      	cmp	r1, r3
 8019b08:	d002      	beq.n	8019b10 <__sflush_r+0x94>
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	f7fe fdf0 	bl	80186f0 <_free_r>
 8019b10:	2000      	movs	r0, #0
 8019b12:	6360      	str	r0, [r4, #52]	; 0x34
 8019b14:	e7c0      	b.n	8019a98 <__sflush_r+0x1c>
 8019b16:	2301      	movs	r3, #1
 8019b18:	4628      	mov	r0, r5
 8019b1a:	47b0      	blx	r6
 8019b1c:	1c41      	adds	r1, r0, #1
 8019b1e:	d1c8      	bne.n	8019ab2 <__sflush_r+0x36>
 8019b20:	682b      	ldr	r3, [r5, #0]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d0c5      	beq.n	8019ab2 <__sflush_r+0x36>
 8019b26:	2b1d      	cmp	r3, #29
 8019b28:	d001      	beq.n	8019b2e <__sflush_r+0xb2>
 8019b2a:	2b16      	cmp	r3, #22
 8019b2c:	d101      	bne.n	8019b32 <__sflush_r+0xb6>
 8019b2e:	602f      	str	r7, [r5, #0]
 8019b30:	e7b1      	b.n	8019a96 <__sflush_r+0x1a>
 8019b32:	89a3      	ldrh	r3, [r4, #12]
 8019b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b38:	81a3      	strh	r3, [r4, #12]
 8019b3a:	e7ad      	b.n	8019a98 <__sflush_r+0x1c>
 8019b3c:	690f      	ldr	r7, [r1, #16]
 8019b3e:	2f00      	cmp	r7, #0
 8019b40:	d0a9      	beq.n	8019a96 <__sflush_r+0x1a>
 8019b42:	0793      	lsls	r3, r2, #30
 8019b44:	680e      	ldr	r6, [r1, #0]
 8019b46:	bf08      	it	eq
 8019b48:	694b      	ldreq	r3, [r1, #20]
 8019b4a:	600f      	str	r7, [r1, #0]
 8019b4c:	bf18      	it	ne
 8019b4e:	2300      	movne	r3, #0
 8019b50:	eba6 0807 	sub.w	r8, r6, r7
 8019b54:	608b      	str	r3, [r1, #8]
 8019b56:	f1b8 0f00 	cmp.w	r8, #0
 8019b5a:	dd9c      	ble.n	8019a96 <__sflush_r+0x1a>
 8019b5c:	6a21      	ldr	r1, [r4, #32]
 8019b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019b60:	4643      	mov	r3, r8
 8019b62:	463a      	mov	r2, r7
 8019b64:	4628      	mov	r0, r5
 8019b66:	47b0      	blx	r6
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	dc06      	bgt.n	8019b7a <__sflush_r+0xfe>
 8019b6c:	89a3      	ldrh	r3, [r4, #12]
 8019b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b72:	81a3      	strh	r3, [r4, #12]
 8019b74:	f04f 30ff 	mov.w	r0, #4294967295
 8019b78:	e78e      	b.n	8019a98 <__sflush_r+0x1c>
 8019b7a:	4407      	add	r7, r0
 8019b7c:	eba8 0800 	sub.w	r8, r8, r0
 8019b80:	e7e9      	b.n	8019b56 <__sflush_r+0xda>
 8019b82:	bf00      	nop
 8019b84:	dfbffffe 	.word	0xdfbffffe

08019b88 <_fflush_r>:
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	690b      	ldr	r3, [r1, #16]
 8019b8c:	4605      	mov	r5, r0
 8019b8e:	460c      	mov	r4, r1
 8019b90:	b913      	cbnz	r3, 8019b98 <_fflush_r+0x10>
 8019b92:	2500      	movs	r5, #0
 8019b94:	4628      	mov	r0, r5
 8019b96:	bd38      	pop	{r3, r4, r5, pc}
 8019b98:	b118      	cbz	r0, 8019ba2 <_fflush_r+0x1a>
 8019b9a:	6a03      	ldr	r3, [r0, #32]
 8019b9c:	b90b      	cbnz	r3, 8019ba2 <_fflush_r+0x1a>
 8019b9e:	f7fd fe5d 	bl	801785c <__sinit>
 8019ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d0f3      	beq.n	8019b92 <_fflush_r+0xa>
 8019baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019bac:	07d0      	lsls	r0, r2, #31
 8019bae:	d404      	bmi.n	8019bba <_fflush_r+0x32>
 8019bb0:	0599      	lsls	r1, r3, #22
 8019bb2:	d402      	bmi.n	8019bba <_fflush_r+0x32>
 8019bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019bb6:	f7e8 f94a 	bl	8001e4e <__retarget_lock_acquire_recursive>
 8019bba:	4628      	mov	r0, r5
 8019bbc:	4621      	mov	r1, r4
 8019bbe:	f7ff ff5d 	bl	8019a7c <__sflush_r>
 8019bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019bc4:	07da      	lsls	r2, r3, #31
 8019bc6:	4605      	mov	r5, r0
 8019bc8:	d4e4      	bmi.n	8019b94 <_fflush_r+0xc>
 8019bca:	89a3      	ldrh	r3, [r4, #12]
 8019bcc:	059b      	lsls	r3, r3, #22
 8019bce:	d4e1      	bmi.n	8019b94 <_fflush_r+0xc>
 8019bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019bd2:	f7e8 f950 	bl	8001e76 <__retarget_lock_release_recursive>
 8019bd6:	e7dd      	b.n	8019b94 <_fflush_r+0xc>

08019bd8 <memmove>:
 8019bd8:	4288      	cmp	r0, r1
 8019bda:	b510      	push	{r4, lr}
 8019bdc:	eb01 0402 	add.w	r4, r1, r2
 8019be0:	d902      	bls.n	8019be8 <memmove+0x10>
 8019be2:	4284      	cmp	r4, r0
 8019be4:	4623      	mov	r3, r4
 8019be6:	d807      	bhi.n	8019bf8 <memmove+0x20>
 8019be8:	1e43      	subs	r3, r0, #1
 8019bea:	42a1      	cmp	r1, r4
 8019bec:	d008      	beq.n	8019c00 <memmove+0x28>
 8019bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bf6:	e7f8      	b.n	8019bea <memmove+0x12>
 8019bf8:	4402      	add	r2, r0
 8019bfa:	4601      	mov	r1, r0
 8019bfc:	428a      	cmp	r2, r1
 8019bfe:	d100      	bne.n	8019c02 <memmove+0x2a>
 8019c00:	bd10      	pop	{r4, pc}
 8019c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c0a:	e7f7      	b.n	8019bfc <memmove+0x24>

08019c0c <__assert_func>:
 8019c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c0e:	4614      	mov	r4, r2
 8019c10:	461a      	mov	r2, r3
 8019c12:	4b09      	ldr	r3, [pc, #36]	; (8019c38 <__assert_func+0x2c>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	4605      	mov	r5, r0
 8019c18:	68d8      	ldr	r0, [r3, #12]
 8019c1a:	b14c      	cbz	r4, 8019c30 <__assert_func+0x24>
 8019c1c:	4b07      	ldr	r3, [pc, #28]	; (8019c3c <__assert_func+0x30>)
 8019c1e:	9100      	str	r1, [sp, #0]
 8019c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c24:	4906      	ldr	r1, [pc, #24]	; (8019c40 <__assert_func+0x34>)
 8019c26:	462b      	mov	r3, r5
 8019c28:	f000 f854 	bl	8019cd4 <fiprintf>
 8019c2c:	f000 f864 	bl	8019cf8 <abort>
 8019c30:	4b04      	ldr	r3, [pc, #16]	; (8019c44 <__assert_func+0x38>)
 8019c32:	461c      	mov	r4, r3
 8019c34:	e7f3      	b.n	8019c1e <__assert_func+0x12>
 8019c36:	bf00      	nop
 8019c38:	240003c4 	.word	0x240003c4
 8019c3c:	0801b97d 	.word	0x0801b97d
 8019c40:	0801b98a 	.word	0x0801b98a
 8019c44:	0801b9b8 	.word	0x0801b9b8

08019c48 <_calloc_r>:
 8019c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c4a:	fba1 2402 	umull	r2, r4, r1, r2
 8019c4e:	b94c      	cbnz	r4, 8019c64 <_calloc_r+0x1c>
 8019c50:	4611      	mov	r1, r2
 8019c52:	9201      	str	r2, [sp, #4]
 8019c54:	f7fc fa4a 	bl	80160ec <_malloc_r>
 8019c58:	9a01      	ldr	r2, [sp, #4]
 8019c5a:	4605      	mov	r5, r0
 8019c5c:	b930      	cbnz	r0, 8019c6c <_calloc_r+0x24>
 8019c5e:	4628      	mov	r0, r5
 8019c60:	b003      	add	sp, #12
 8019c62:	bd30      	pop	{r4, r5, pc}
 8019c64:	220c      	movs	r2, #12
 8019c66:	6002      	str	r2, [r0, #0]
 8019c68:	2500      	movs	r5, #0
 8019c6a:	e7f8      	b.n	8019c5e <_calloc_r+0x16>
 8019c6c:	4621      	mov	r1, r4
 8019c6e:	f7fd fe8e 	bl	801798e <memset>
 8019c72:	e7f4      	b.n	8019c5e <_calloc_r+0x16>

08019c74 <_realloc_r>:
 8019c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c78:	4680      	mov	r8, r0
 8019c7a:	4614      	mov	r4, r2
 8019c7c:	460e      	mov	r6, r1
 8019c7e:	b921      	cbnz	r1, 8019c8a <_realloc_r+0x16>
 8019c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c84:	4611      	mov	r1, r2
 8019c86:	f7fc ba31 	b.w	80160ec <_malloc_r>
 8019c8a:	b92a      	cbnz	r2, 8019c98 <_realloc_r+0x24>
 8019c8c:	f7fe fd30 	bl	80186f0 <_free_r>
 8019c90:	4625      	mov	r5, r4
 8019c92:	4628      	mov	r0, r5
 8019c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c98:	f000 f835 	bl	8019d06 <_malloc_usable_size_r>
 8019c9c:	4284      	cmp	r4, r0
 8019c9e:	4607      	mov	r7, r0
 8019ca0:	d802      	bhi.n	8019ca8 <_realloc_r+0x34>
 8019ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019ca6:	d812      	bhi.n	8019cce <_realloc_r+0x5a>
 8019ca8:	4621      	mov	r1, r4
 8019caa:	4640      	mov	r0, r8
 8019cac:	f7fc fa1e 	bl	80160ec <_malloc_r>
 8019cb0:	4605      	mov	r5, r0
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	d0ed      	beq.n	8019c92 <_realloc_r+0x1e>
 8019cb6:	42bc      	cmp	r4, r7
 8019cb8:	4622      	mov	r2, r4
 8019cba:	4631      	mov	r1, r6
 8019cbc:	bf28      	it	cs
 8019cbe:	463a      	movcs	r2, r7
 8019cc0:	f7fd ff0c 	bl	8017adc <memcpy>
 8019cc4:	4631      	mov	r1, r6
 8019cc6:	4640      	mov	r0, r8
 8019cc8:	f7fe fd12 	bl	80186f0 <_free_r>
 8019ccc:	e7e1      	b.n	8019c92 <_realloc_r+0x1e>
 8019cce:	4635      	mov	r5, r6
 8019cd0:	e7df      	b.n	8019c92 <_realloc_r+0x1e>
	...

08019cd4 <fiprintf>:
 8019cd4:	b40e      	push	{r1, r2, r3}
 8019cd6:	b503      	push	{r0, r1, lr}
 8019cd8:	4601      	mov	r1, r0
 8019cda:	ab03      	add	r3, sp, #12
 8019cdc:	4805      	ldr	r0, [pc, #20]	; (8019cf4 <fiprintf+0x20>)
 8019cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ce2:	6800      	ldr	r0, [r0, #0]
 8019ce4:	9301      	str	r3, [sp, #4]
 8019ce6:	f000 f83f 	bl	8019d68 <_vfiprintf_r>
 8019cea:	b002      	add	sp, #8
 8019cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cf0:	b003      	add	sp, #12
 8019cf2:	4770      	bx	lr
 8019cf4:	240003c4 	.word	0x240003c4

08019cf8 <abort>:
 8019cf8:	b508      	push	{r3, lr}
 8019cfa:	2006      	movs	r0, #6
 8019cfc:	f000 fa0c 	bl	801a118 <raise>
 8019d00:	2001      	movs	r0, #1
 8019d02:	f7e7 ff31 	bl	8001b68 <_exit>

08019d06 <_malloc_usable_size_r>:
 8019d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d0a:	1f18      	subs	r0, r3, #4
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	bfbc      	itt	lt
 8019d10:	580b      	ldrlt	r3, [r1, r0]
 8019d12:	18c0      	addlt	r0, r0, r3
 8019d14:	4770      	bx	lr

08019d16 <__sfputc_r>:
 8019d16:	6893      	ldr	r3, [r2, #8]
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	b410      	push	{r4}
 8019d1e:	6093      	str	r3, [r2, #8]
 8019d20:	da08      	bge.n	8019d34 <__sfputc_r+0x1e>
 8019d22:	6994      	ldr	r4, [r2, #24]
 8019d24:	42a3      	cmp	r3, r4
 8019d26:	db01      	blt.n	8019d2c <__sfputc_r+0x16>
 8019d28:	290a      	cmp	r1, #10
 8019d2a:	d103      	bne.n	8019d34 <__sfputc_r+0x1e>
 8019d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d30:	f000 b934 	b.w	8019f9c <__swbuf_r>
 8019d34:	6813      	ldr	r3, [r2, #0]
 8019d36:	1c58      	adds	r0, r3, #1
 8019d38:	6010      	str	r0, [r2, #0]
 8019d3a:	7019      	strb	r1, [r3, #0]
 8019d3c:	4608      	mov	r0, r1
 8019d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d42:	4770      	bx	lr

08019d44 <__sfputs_r>:
 8019d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d46:	4606      	mov	r6, r0
 8019d48:	460f      	mov	r7, r1
 8019d4a:	4614      	mov	r4, r2
 8019d4c:	18d5      	adds	r5, r2, r3
 8019d4e:	42ac      	cmp	r4, r5
 8019d50:	d101      	bne.n	8019d56 <__sfputs_r+0x12>
 8019d52:	2000      	movs	r0, #0
 8019d54:	e007      	b.n	8019d66 <__sfputs_r+0x22>
 8019d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d5a:	463a      	mov	r2, r7
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	f7ff ffda 	bl	8019d16 <__sfputc_r>
 8019d62:	1c43      	adds	r3, r0, #1
 8019d64:	d1f3      	bne.n	8019d4e <__sfputs_r+0xa>
 8019d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019d68 <_vfiprintf_r>:
 8019d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6c:	460d      	mov	r5, r1
 8019d6e:	b09d      	sub	sp, #116	; 0x74
 8019d70:	4614      	mov	r4, r2
 8019d72:	4698      	mov	r8, r3
 8019d74:	4606      	mov	r6, r0
 8019d76:	b118      	cbz	r0, 8019d80 <_vfiprintf_r+0x18>
 8019d78:	6a03      	ldr	r3, [r0, #32]
 8019d7a:	b90b      	cbnz	r3, 8019d80 <_vfiprintf_r+0x18>
 8019d7c:	f7fd fd6e 	bl	801785c <__sinit>
 8019d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d82:	07d9      	lsls	r1, r3, #31
 8019d84:	d405      	bmi.n	8019d92 <_vfiprintf_r+0x2a>
 8019d86:	89ab      	ldrh	r3, [r5, #12]
 8019d88:	059a      	lsls	r2, r3, #22
 8019d8a:	d402      	bmi.n	8019d92 <_vfiprintf_r+0x2a>
 8019d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d8e:	f7e8 f85e 	bl	8001e4e <__retarget_lock_acquire_recursive>
 8019d92:	89ab      	ldrh	r3, [r5, #12]
 8019d94:	071b      	lsls	r3, r3, #28
 8019d96:	d501      	bpl.n	8019d9c <_vfiprintf_r+0x34>
 8019d98:	692b      	ldr	r3, [r5, #16]
 8019d9a:	b99b      	cbnz	r3, 8019dc4 <_vfiprintf_r+0x5c>
 8019d9c:	4629      	mov	r1, r5
 8019d9e:	4630      	mov	r0, r6
 8019da0:	f000 f93a 	bl	801a018 <__swsetup_r>
 8019da4:	b170      	cbz	r0, 8019dc4 <_vfiprintf_r+0x5c>
 8019da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019da8:	07dc      	lsls	r4, r3, #31
 8019daa:	d504      	bpl.n	8019db6 <_vfiprintf_r+0x4e>
 8019dac:	f04f 30ff 	mov.w	r0, #4294967295
 8019db0:	b01d      	add	sp, #116	; 0x74
 8019db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019db6:	89ab      	ldrh	r3, [r5, #12]
 8019db8:	0598      	lsls	r0, r3, #22
 8019dba:	d4f7      	bmi.n	8019dac <_vfiprintf_r+0x44>
 8019dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dbe:	f7e8 f85a 	bl	8001e76 <__retarget_lock_release_recursive>
 8019dc2:	e7f3      	b.n	8019dac <_vfiprintf_r+0x44>
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8019dc8:	2320      	movs	r3, #32
 8019dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8019dd2:	2330      	movs	r3, #48	; 0x30
 8019dd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019f88 <_vfiprintf_r+0x220>
 8019dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ddc:	f04f 0901 	mov.w	r9, #1
 8019de0:	4623      	mov	r3, r4
 8019de2:	469a      	mov	sl, r3
 8019de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019de8:	b10a      	cbz	r2, 8019dee <_vfiprintf_r+0x86>
 8019dea:	2a25      	cmp	r2, #37	; 0x25
 8019dec:	d1f9      	bne.n	8019de2 <_vfiprintf_r+0x7a>
 8019dee:	ebba 0b04 	subs.w	fp, sl, r4
 8019df2:	d00b      	beq.n	8019e0c <_vfiprintf_r+0xa4>
 8019df4:	465b      	mov	r3, fp
 8019df6:	4622      	mov	r2, r4
 8019df8:	4629      	mov	r1, r5
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f7ff ffa2 	bl	8019d44 <__sfputs_r>
 8019e00:	3001      	adds	r0, #1
 8019e02:	f000 80a9 	beq.w	8019f58 <_vfiprintf_r+0x1f0>
 8019e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e08:	445a      	add	r2, fp
 8019e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8019e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	f000 80a1 	beq.w	8019f58 <_vfiprintf_r+0x1f0>
 8019e16:	2300      	movs	r3, #0
 8019e18:	f04f 32ff 	mov.w	r2, #4294967295
 8019e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e20:	f10a 0a01 	add.w	sl, sl, #1
 8019e24:	9304      	str	r3, [sp, #16]
 8019e26:	9307      	str	r3, [sp, #28]
 8019e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8019e2e:	4654      	mov	r4, sl
 8019e30:	2205      	movs	r2, #5
 8019e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e36:	4854      	ldr	r0, [pc, #336]	; (8019f88 <_vfiprintf_r+0x220>)
 8019e38:	f7e6 fa62 	bl	8000300 <memchr>
 8019e3c:	9a04      	ldr	r2, [sp, #16]
 8019e3e:	b9d8      	cbnz	r0, 8019e78 <_vfiprintf_r+0x110>
 8019e40:	06d1      	lsls	r1, r2, #27
 8019e42:	bf44      	itt	mi
 8019e44:	2320      	movmi	r3, #32
 8019e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e4a:	0713      	lsls	r3, r2, #28
 8019e4c:	bf44      	itt	mi
 8019e4e:	232b      	movmi	r3, #43	; 0x2b
 8019e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e54:	f89a 3000 	ldrb.w	r3, [sl]
 8019e58:	2b2a      	cmp	r3, #42	; 0x2a
 8019e5a:	d015      	beq.n	8019e88 <_vfiprintf_r+0x120>
 8019e5c:	9a07      	ldr	r2, [sp, #28]
 8019e5e:	4654      	mov	r4, sl
 8019e60:	2000      	movs	r0, #0
 8019e62:	f04f 0c0a 	mov.w	ip, #10
 8019e66:	4621      	mov	r1, r4
 8019e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e6c:	3b30      	subs	r3, #48	; 0x30
 8019e6e:	2b09      	cmp	r3, #9
 8019e70:	d94d      	bls.n	8019f0e <_vfiprintf_r+0x1a6>
 8019e72:	b1b0      	cbz	r0, 8019ea2 <_vfiprintf_r+0x13a>
 8019e74:	9207      	str	r2, [sp, #28]
 8019e76:	e014      	b.n	8019ea2 <_vfiprintf_r+0x13a>
 8019e78:	eba0 0308 	sub.w	r3, r0, r8
 8019e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8019e80:	4313      	orrs	r3, r2
 8019e82:	9304      	str	r3, [sp, #16]
 8019e84:	46a2      	mov	sl, r4
 8019e86:	e7d2      	b.n	8019e2e <_vfiprintf_r+0xc6>
 8019e88:	9b03      	ldr	r3, [sp, #12]
 8019e8a:	1d19      	adds	r1, r3, #4
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	9103      	str	r1, [sp, #12]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	bfbb      	ittet	lt
 8019e94:	425b      	neglt	r3, r3
 8019e96:	f042 0202 	orrlt.w	r2, r2, #2
 8019e9a:	9307      	strge	r3, [sp, #28]
 8019e9c:	9307      	strlt	r3, [sp, #28]
 8019e9e:	bfb8      	it	lt
 8019ea0:	9204      	strlt	r2, [sp, #16]
 8019ea2:	7823      	ldrb	r3, [r4, #0]
 8019ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8019ea6:	d10c      	bne.n	8019ec2 <_vfiprintf_r+0x15a>
 8019ea8:	7863      	ldrb	r3, [r4, #1]
 8019eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8019eac:	d134      	bne.n	8019f18 <_vfiprintf_r+0x1b0>
 8019eae:	9b03      	ldr	r3, [sp, #12]
 8019eb0:	1d1a      	adds	r2, r3, #4
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	9203      	str	r2, [sp, #12]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	bfb8      	it	lt
 8019eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ebe:	3402      	adds	r4, #2
 8019ec0:	9305      	str	r3, [sp, #20]
 8019ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019f98 <_vfiprintf_r+0x230>
 8019ec6:	7821      	ldrb	r1, [r4, #0]
 8019ec8:	2203      	movs	r2, #3
 8019eca:	4650      	mov	r0, sl
 8019ecc:	f7e6 fa18 	bl	8000300 <memchr>
 8019ed0:	b138      	cbz	r0, 8019ee2 <_vfiprintf_r+0x17a>
 8019ed2:	9b04      	ldr	r3, [sp, #16]
 8019ed4:	eba0 000a 	sub.w	r0, r0, sl
 8019ed8:	2240      	movs	r2, #64	; 0x40
 8019eda:	4082      	lsls	r2, r0
 8019edc:	4313      	orrs	r3, r2
 8019ede:	3401      	adds	r4, #1
 8019ee0:	9304      	str	r3, [sp, #16]
 8019ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ee6:	4829      	ldr	r0, [pc, #164]	; (8019f8c <_vfiprintf_r+0x224>)
 8019ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019eec:	2206      	movs	r2, #6
 8019eee:	f7e6 fa07 	bl	8000300 <memchr>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	d03f      	beq.n	8019f76 <_vfiprintf_r+0x20e>
 8019ef6:	4b26      	ldr	r3, [pc, #152]	; (8019f90 <_vfiprintf_r+0x228>)
 8019ef8:	bb1b      	cbnz	r3, 8019f42 <_vfiprintf_r+0x1da>
 8019efa:	9b03      	ldr	r3, [sp, #12]
 8019efc:	3307      	adds	r3, #7
 8019efe:	f023 0307 	bic.w	r3, r3, #7
 8019f02:	3308      	adds	r3, #8
 8019f04:	9303      	str	r3, [sp, #12]
 8019f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f08:	443b      	add	r3, r7
 8019f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f0c:	e768      	b.n	8019de0 <_vfiprintf_r+0x78>
 8019f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f12:	460c      	mov	r4, r1
 8019f14:	2001      	movs	r0, #1
 8019f16:	e7a6      	b.n	8019e66 <_vfiprintf_r+0xfe>
 8019f18:	2300      	movs	r3, #0
 8019f1a:	3401      	adds	r4, #1
 8019f1c:	9305      	str	r3, [sp, #20]
 8019f1e:	4619      	mov	r1, r3
 8019f20:	f04f 0c0a 	mov.w	ip, #10
 8019f24:	4620      	mov	r0, r4
 8019f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f2a:	3a30      	subs	r2, #48	; 0x30
 8019f2c:	2a09      	cmp	r2, #9
 8019f2e:	d903      	bls.n	8019f38 <_vfiprintf_r+0x1d0>
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d0c6      	beq.n	8019ec2 <_vfiprintf_r+0x15a>
 8019f34:	9105      	str	r1, [sp, #20]
 8019f36:	e7c4      	b.n	8019ec2 <_vfiprintf_r+0x15a>
 8019f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	2301      	movs	r3, #1
 8019f40:	e7f0      	b.n	8019f24 <_vfiprintf_r+0x1bc>
 8019f42:	ab03      	add	r3, sp, #12
 8019f44:	9300      	str	r3, [sp, #0]
 8019f46:	462a      	mov	r2, r5
 8019f48:	4b12      	ldr	r3, [pc, #72]	; (8019f94 <_vfiprintf_r+0x22c>)
 8019f4a:	a904      	add	r1, sp, #16
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	f7fd f84f 	bl	8016ff0 <_printf_float>
 8019f52:	4607      	mov	r7, r0
 8019f54:	1c78      	adds	r0, r7, #1
 8019f56:	d1d6      	bne.n	8019f06 <_vfiprintf_r+0x19e>
 8019f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f5a:	07d9      	lsls	r1, r3, #31
 8019f5c:	d405      	bmi.n	8019f6a <_vfiprintf_r+0x202>
 8019f5e:	89ab      	ldrh	r3, [r5, #12]
 8019f60:	059a      	lsls	r2, r3, #22
 8019f62:	d402      	bmi.n	8019f6a <_vfiprintf_r+0x202>
 8019f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f66:	f7e7 ff86 	bl	8001e76 <__retarget_lock_release_recursive>
 8019f6a:	89ab      	ldrh	r3, [r5, #12]
 8019f6c:	065b      	lsls	r3, r3, #25
 8019f6e:	f53f af1d 	bmi.w	8019dac <_vfiprintf_r+0x44>
 8019f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f74:	e71c      	b.n	8019db0 <_vfiprintf_r+0x48>
 8019f76:	ab03      	add	r3, sp, #12
 8019f78:	9300      	str	r3, [sp, #0]
 8019f7a:	462a      	mov	r2, r5
 8019f7c:	4b05      	ldr	r3, [pc, #20]	; (8019f94 <_vfiprintf_r+0x22c>)
 8019f7e:	a904      	add	r1, sp, #16
 8019f80:	4630      	mov	r0, r6
 8019f82:	f7fd fabd 	bl	8017500 <_printf_i>
 8019f86:	e7e4      	b.n	8019f52 <_vfiprintf_r+0x1ea>
 8019f88:	0801b96c 	.word	0x0801b96c
 8019f8c:	0801b976 	.word	0x0801b976
 8019f90:	08016ff1 	.word	0x08016ff1
 8019f94:	08019d45 	.word	0x08019d45
 8019f98:	0801b972 	.word	0x0801b972

08019f9c <__swbuf_r>:
 8019f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f9e:	460e      	mov	r6, r1
 8019fa0:	4614      	mov	r4, r2
 8019fa2:	4605      	mov	r5, r0
 8019fa4:	b118      	cbz	r0, 8019fae <__swbuf_r+0x12>
 8019fa6:	6a03      	ldr	r3, [r0, #32]
 8019fa8:	b90b      	cbnz	r3, 8019fae <__swbuf_r+0x12>
 8019faa:	f7fd fc57 	bl	801785c <__sinit>
 8019fae:	69a3      	ldr	r3, [r4, #24]
 8019fb0:	60a3      	str	r3, [r4, #8]
 8019fb2:	89a3      	ldrh	r3, [r4, #12]
 8019fb4:	071a      	lsls	r2, r3, #28
 8019fb6:	d525      	bpl.n	801a004 <__swbuf_r+0x68>
 8019fb8:	6923      	ldr	r3, [r4, #16]
 8019fba:	b31b      	cbz	r3, 801a004 <__swbuf_r+0x68>
 8019fbc:	6823      	ldr	r3, [r4, #0]
 8019fbe:	6922      	ldr	r2, [r4, #16]
 8019fc0:	1a98      	subs	r0, r3, r2
 8019fc2:	6963      	ldr	r3, [r4, #20]
 8019fc4:	b2f6      	uxtb	r6, r6
 8019fc6:	4283      	cmp	r3, r0
 8019fc8:	4637      	mov	r7, r6
 8019fca:	dc04      	bgt.n	8019fd6 <__swbuf_r+0x3a>
 8019fcc:	4621      	mov	r1, r4
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f7ff fdda 	bl	8019b88 <_fflush_r>
 8019fd4:	b9e0      	cbnz	r0, 801a010 <__swbuf_r+0x74>
 8019fd6:	68a3      	ldr	r3, [r4, #8]
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	60a3      	str	r3, [r4, #8]
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	6022      	str	r2, [r4, #0]
 8019fe2:	701e      	strb	r6, [r3, #0]
 8019fe4:	6962      	ldr	r2, [r4, #20]
 8019fe6:	1c43      	adds	r3, r0, #1
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d004      	beq.n	8019ff6 <__swbuf_r+0x5a>
 8019fec:	89a3      	ldrh	r3, [r4, #12]
 8019fee:	07db      	lsls	r3, r3, #31
 8019ff0:	d506      	bpl.n	801a000 <__swbuf_r+0x64>
 8019ff2:	2e0a      	cmp	r6, #10
 8019ff4:	d104      	bne.n	801a000 <__swbuf_r+0x64>
 8019ff6:	4621      	mov	r1, r4
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	f7ff fdc5 	bl	8019b88 <_fflush_r>
 8019ffe:	b938      	cbnz	r0, 801a010 <__swbuf_r+0x74>
 801a000:	4638      	mov	r0, r7
 801a002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a004:	4621      	mov	r1, r4
 801a006:	4628      	mov	r0, r5
 801a008:	f000 f806 	bl	801a018 <__swsetup_r>
 801a00c:	2800      	cmp	r0, #0
 801a00e:	d0d5      	beq.n	8019fbc <__swbuf_r+0x20>
 801a010:	f04f 37ff 	mov.w	r7, #4294967295
 801a014:	e7f4      	b.n	801a000 <__swbuf_r+0x64>
	...

0801a018 <__swsetup_r>:
 801a018:	b538      	push	{r3, r4, r5, lr}
 801a01a:	4b2a      	ldr	r3, [pc, #168]	; (801a0c4 <__swsetup_r+0xac>)
 801a01c:	4605      	mov	r5, r0
 801a01e:	6818      	ldr	r0, [r3, #0]
 801a020:	460c      	mov	r4, r1
 801a022:	b118      	cbz	r0, 801a02c <__swsetup_r+0x14>
 801a024:	6a03      	ldr	r3, [r0, #32]
 801a026:	b90b      	cbnz	r3, 801a02c <__swsetup_r+0x14>
 801a028:	f7fd fc18 	bl	801785c <__sinit>
 801a02c:	89a3      	ldrh	r3, [r4, #12]
 801a02e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a032:	0718      	lsls	r0, r3, #28
 801a034:	d422      	bmi.n	801a07c <__swsetup_r+0x64>
 801a036:	06d9      	lsls	r1, r3, #27
 801a038:	d407      	bmi.n	801a04a <__swsetup_r+0x32>
 801a03a:	2309      	movs	r3, #9
 801a03c:	602b      	str	r3, [r5, #0]
 801a03e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a042:	81a3      	strh	r3, [r4, #12]
 801a044:	f04f 30ff 	mov.w	r0, #4294967295
 801a048:	e034      	b.n	801a0b4 <__swsetup_r+0x9c>
 801a04a:	0758      	lsls	r0, r3, #29
 801a04c:	d512      	bpl.n	801a074 <__swsetup_r+0x5c>
 801a04e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a050:	b141      	cbz	r1, 801a064 <__swsetup_r+0x4c>
 801a052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a056:	4299      	cmp	r1, r3
 801a058:	d002      	beq.n	801a060 <__swsetup_r+0x48>
 801a05a:	4628      	mov	r0, r5
 801a05c:	f7fe fb48 	bl	80186f0 <_free_r>
 801a060:	2300      	movs	r3, #0
 801a062:	6363      	str	r3, [r4, #52]	; 0x34
 801a064:	89a3      	ldrh	r3, [r4, #12]
 801a066:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a06a:	81a3      	strh	r3, [r4, #12]
 801a06c:	2300      	movs	r3, #0
 801a06e:	6063      	str	r3, [r4, #4]
 801a070:	6923      	ldr	r3, [r4, #16]
 801a072:	6023      	str	r3, [r4, #0]
 801a074:	89a3      	ldrh	r3, [r4, #12]
 801a076:	f043 0308 	orr.w	r3, r3, #8
 801a07a:	81a3      	strh	r3, [r4, #12]
 801a07c:	6923      	ldr	r3, [r4, #16]
 801a07e:	b94b      	cbnz	r3, 801a094 <__swsetup_r+0x7c>
 801a080:	89a3      	ldrh	r3, [r4, #12]
 801a082:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a08a:	d003      	beq.n	801a094 <__swsetup_r+0x7c>
 801a08c:	4621      	mov	r1, r4
 801a08e:	4628      	mov	r0, r5
 801a090:	f000 f884 	bl	801a19c <__smakebuf_r>
 801a094:	89a0      	ldrh	r0, [r4, #12]
 801a096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a09a:	f010 0301 	ands.w	r3, r0, #1
 801a09e:	d00a      	beq.n	801a0b6 <__swsetup_r+0x9e>
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	60a3      	str	r3, [r4, #8]
 801a0a4:	6963      	ldr	r3, [r4, #20]
 801a0a6:	425b      	negs	r3, r3
 801a0a8:	61a3      	str	r3, [r4, #24]
 801a0aa:	6923      	ldr	r3, [r4, #16]
 801a0ac:	b943      	cbnz	r3, 801a0c0 <__swsetup_r+0xa8>
 801a0ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a0b2:	d1c4      	bne.n	801a03e <__swsetup_r+0x26>
 801a0b4:	bd38      	pop	{r3, r4, r5, pc}
 801a0b6:	0781      	lsls	r1, r0, #30
 801a0b8:	bf58      	it	pl
 801a0ba:	6963      	ldrpl	r3, [r4, #20]
 801a0bc:	60a3      	str	r3, [r4, #8]
 801a0be:	e7f4      	b.n	801a0aa <__swsetup_r+0x92>
 801a0c0:	2000      	movs	r0, #0
 801a0c2:	e7f7      	b.n	801a0b4 <__swsetup_r+0x9c>
 801a0c4:	240003c4 	.word	0x240003c4

0801a0c8 <_raise_r>:
 801a0c8:	291f      	cmp	r1, #31
 801a0ca:	b538      	push	{r3, r4, r5, lr}
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	460d      	mov	r5, r1
 801a0d0:	d904      	bls.n	801a0dc <_raise_r+0x14>
 801a0d2:	2316      	movs	r3, #22
 801a0d4:	6003      	str	r3, [r0, #0]
 801a0d6:	f04f 30ff 	mov.w	r0, #4294967295
 801a0da:	bd38      	pop	{r3, r4, r5, pc}
 801a0dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a0de:	b112      	cbz	r2, 801a0e6 <_raise_r+0x1e>
 801a0e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0e4:	b94b      	cbnz	r3, 801a0fa <_raise_r+0x32>
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f000 f830 	bl	801a14c <_getpid_r>
 801a0ec:	462a      	mov	r2, r5
 801a0ee:	4601      	mov	r1, r0
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0f6:	f000 b817 	b.w	801a128 <_kill_r>
 801a0fa:	2b01      	cmp	r3, #1
 801a0fc:	d00a      	beq.n	801a114 <_raise_r+0x4c>
 801a0fe:	1c59      	adds	r1, r3, #1
 801a100:	d103      	bne.n	801a10a <_raise_r+0x42>
 801a102:	2316      	movs	r3, #22
 801a104:	6003      	str	r3, [r0, #0]
 801a106:	2001      	movs	r0, #1
 801a108:	e7e7      	b.n	801a0da <_raise_r+0x12>
 801a10a:	2400      	movs	r4, #0
 801a10c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a110:	4628      	mov	r0, r5
 801a112:	4798      	blx	r3
 801a114:	2000      	movs	r0, #0
 801a116:	e7e0      	b.n	801a0da <_raise_r+0x12>

0801a118 <raise>:
 801a118:	4b02      	ldr	r3, [pc, #8]	; (801a124 <raise+0xc>)
 801a11a:	4601      	mov	r1, r0
 801a11c:	6818      	ldr	r0, [r3, #0]
 801a11e:	f7ff bfd3 	b.w	801a0c8 <_raise_r>
 801a122:	bf00      	nop
 801a124:	240003c4 	.word	0x240003c4

0801a128 <_kill_r>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	4d07      	ldr	r5, [pc, #28]	; (801a148 <_kill_r+0x20>)
 801a12c:	2300      	movs	r3, #0
 801a12e:	4604      	mov	r4, r0
 801a130:	4608      	mov	r0, r1
 801a132:	4611      	mov	r1, r2
 801a134:	602b      	str	r3, [r5, #0]
 801a136:	f7e7 fd07 	bl	8001b48 <_kill>
 801a13a:	1c43      	adds	r3, r0, #1
 801a13c:	d102      	bne.n	801a144 <_kill_r+0x1c>
 801a13e:	682b      	ldr	r3, [r5, #0]
 801a140:	b103      	cbz	r3, 801a144 <_kill_r+0x1c>
 801a142:	6023      	str	r3, [r4, #0]
 801a144:	bd38      	pop	{r3, r4, r5, pc}
 801a146:	bf00      	nop
 801a148:	2400b478 	.word	0x2400b478

0801a14c <_getpid_r>:
 801a14c:	f7e7 bcf4 	b.w	8001b38 <_getpid>

0801a150 <__swhatbuf_r>:
 801a150:	b570      	push	{r4, r5, r6, lr}
 801a152:	460c      	mov	r4, r1
 801a154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a158:	2900      	cmp	r1, #0
 801a15a:	b096      	sub	sp, #88	; 0x58
 801a15c:	4615      	mov	r5, r2
 801a15e:	461e      	mov	r6, r3
 801a160:	da0d      	bge.n	801a17e <__swhatbuf_r+0x2e>
 801a162:	89a3      	ldrh	r3, [r4, #12]
 801a164:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a168:	f04f 0100 	mov.w	r1, #0
 801a16c:	bf0c      	ite	eq
 801a16e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a172:	2340      	movne	r3, #64	; 0x40
 801a174:	2000      	movs	r0, #0
 801a176:	6031      	str	r1, [r6, #0]
 801a178:	602b      	str	r3, [r5, #0]
 801a17a:	b016      	add	sp, #88	; 0x58
 801a17c:	bd70      	pop	{r4, r5, r6, pc}
 801a17e:	466a      	mov	r2, sp
 801a180:	f000 f848 	bl	801a214 <_fstat_r>
 801a184:	2800      	cmp	r0, #0
 801a186:	dbec      	blt.n	801a162 <__swhatbuf_r+0x12>
 801a188:	9901      	ldr	r1, [sp, #4]
 801a18a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a18e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a192:	4259      	negs	r1, r3
 801a194:	4159      	adcs	r1, r3
 801a196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a19a:	e7eb      	b.n	801a174 <__swhatbuf_r+0x24>

0801a19c <__smakebuf_r>:
 801a19c:	898b      	ldrh	r3, [r1, #12]
 801a19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a1a0:	079d      	lsls	r5, r3, #30
 801a1a2:	4606      	mov	r6, r0
 801a1a4:	460c      	mov	r4, r1
 801a1a6:	d507      	bpl.n	801a1b8 <__smakebuf_r+0x1c>
 801a1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a1ac:	6023      	str	r3, [r4, #0]
 801a1ae:	6123      	str	r3, [r4, #16]
 801a1b0:	2301      	movs	r3, #1
 801a1b2:	6163      	str	r3, [r4, #20]
 801a1b4:	b002      	add	sp, #8
 801a1b6:	bd70      	pop	{r4, r5, r6, pc}
 801a1b8:	ab01      	add	r3, sp, #4
 801a1ba:	466a      	mov	r2, sp
 801a1bc:	f7ff ffc8 	bl	801a150 <__swhatbuf_r>
 801a1c0:	9900      	ldr	r1, [sp, #0]
 801a1c2:	4605      	mov	r5, r0
 801a1c4:	4630      	mov	r0, r6
 801a1c6:	f7fb ff91 	bl	80160ec <_malloc_r>
 801a1ca:	b948      	cbnz	r0, 801a1e0 <__smakebuf_r+0x44>
 801a1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1d0:	059a      	lsls	r2, r3, #22
 801a1d2:	d4ef      	bmi.n	801a1b4 <__smakebuf_r+0x18>
 801a1d4:	f023 0303 	bic.w	r3, r3, #3
 801a1d8:	f043 0302 	orr.w	r3, r3, #2
 801a1dc:	81a3      	strh	r3, [r4, #12]
 801a1de:	e7e3      	b.n	801a1a8 <__smakebuf_r+0xc>
 801a1e0:	89a3      	ldrh	r3, [r4, #12]
 801a1e2:	6020      	str	r0, [r4, #0]
 801a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1e8:	81a3      	strh	r3, [r4, #12]
 801a1ea:	9b00      	ldr	r3, [sp, #0]
 801a1ec:	6163      	str	r3, [r4, #20]
 801a1ee:	9b01      	ldr	r3, [sp, #4]
 801a1f0:	6120      	str	r0, [r4, #16]
 801a1f2:	b15b      	cbz	r3, 801a20c <__smakebuf_r+0x70>
 801a1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1f8:	4630      	mov	r0, r6
 801a1fa:	f000 f81d 	bl	801a238 <_isatty_r>
 801a1fe:	b128      	cbz	r0, 801a20c <__smakebuf_r+0x70>
 801a200:	89a3      	ldrh	r3, [r4, #12]
 801a202:	f023 0303 	bic.w	r3, r3, #3
 801a206:	f043 0301 	orr.w	r3, r3, #1
 801a20a:	81a3      	strh	r3, [r4, #12]
 801a20c:	89a3      	ldrh	r3, [r4, #12]
 801a20e:	431d      	orrs	r5, r3
 801a210:	81a5      	strh	r5, [r4, #12]
 801a212:	e7cf      	b.n	801a1b4 <__smakebuf_r+0x18>

0801a214 <_fstat_r>:
 801a214:	b538      	push	{r3, r4, r5, lr}
 801a216:	4d07      	ldr	r5, [pc, #28]	; (801a234 <_fstat_r+0x20>)
 801a218:	2300      	movs	r3, #0
 801a21a:	4604      	mov	r4, r0
 801a21c:	4608      	mov	r0, r1
 801a21e:	4611      	mov	r1, r2
 801a220:	602b      	str	r3, [r5, #0]
 801a222:	f7e7 fcf0 	bl	8001c06 <_fstat>
 801a226:	1c43      	adds	r3, r0, #1
 801a228:	d102      	bne.n	801a230 <_fstat_r+0x1c>
 801a22a:	682b      	ldr	r3, [r5, #0]
 801a22c:	b103      	cbz	r3, 801a230 <_fstat_r+0x1c>
 801a22e:	6023      	str	r3, [r4, #0]
 801a230:	bd38      	pop	{r3, r4, r5, pc}
 801a232:	bf00      	nop
 801a234:	2400b478 	.word	0x2400b478

0801a238 <_isatty_r>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	4d06      	ldr	r5, [pc, #24]	; (801a254 <_isatty_r+0x1c>)
 801a23c:	2300      	movs	r3, #0
 801a23e:	4604      	mov	r4, r0
 801a240:	4608      	mov	r0, r1
 801a242:	602b      	str	r3, [r5, #0]
 801a244:	f7e7 fcef 	bl	8001c26 <_isatty>
 801a248:	1c43      	adds	r3, r0, #1
 801a24a:	d102      	bne.n	801a252 <_isatty_r+0x1a>
 801a24c:	682b      	ldr	r3, [r5, #0]
 801a24e:	b103      	cbz	r3, 801a252 <_isatty_r+0x1a>
 801a250:	6023      	str	r3, [r4, #0]
 801a252:	bd38      	pop	{r3, r4, r5, pc}
 801a254:	2400b478 	.word	0x2400b478

0801a258 <_init>:
 801a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a25a:	bf00      	nop
 801a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a25e:	bc08      	pop	{r3}
 801a260:	469e      	mov	lr, r3
 801a262:	4770      	bx	lr

0801a264 <_fini>:
 801a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a266:	bf00      	nop
 801a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a26a:	bc08      	pop	{r3}
 801a26c:	469e      	mov	lr, r3
 801a26e:	4770      	bx	lr
